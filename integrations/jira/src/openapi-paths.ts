// @ts-nocheck
export type TPaths = {
  '/rest/api/3/announcementBanner': {
    get: {
      deprecated: false;
      description: 'Returns the current announcement banner configuration.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getBanner';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"hashId":"9HN2FJK9DM8BHRWERVW3RRTGDJ4G4D5C","isDismissible":false,"isEnabled":true,"message":"This is a public, enabled, non-dismissible banner, set using the API","visibility":"public"}';
              schema: {
                $ref: '#/components/schemas/AnnouncementBannerConfiguration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '"Only admins can read banner configuration."';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get announcement banner configuration';
      tags: ['Announcement banner'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates the announcement banner configuration.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setBanner';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              isDismissible: false;
              isEnabled: true;
              message: 'This is a public, enabled, non-dismissible banner, set using the API';
              visibility: 'public';
            };
            schema: {
              $ref: '#/components/schemas/AnnouncementBannerConfigurationUpdate';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '"Banner message cannot be null."';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if an invalid parameter is passed.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '"Only admins can update banner configuration."';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update announcement banner configuration';
      tags: ['Announcement banner'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/app/field/value': {
    post: {
      deprecated: false;
      description: "Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.\n\nApps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.\n\n**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'updateMultipleCustomFieldValues';
      parameters: [
        {
          description: 'Whether to generate a changelog for this update.';
          in: 'query';
          name: 'generateChangelog';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              updates: [
                {
                  customField: 'customfield_10010';
                  issueIds: [10010, 10011];
                  value: 'new value';
                },
                {
                  customField: 'customfield_10011';
                  issueIds: [10010];
                  value: 1000;
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/MultipleCustomFieldValuesUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided all the fields.';
        };
        '404': {
          description: 'Returned if any field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Update custom fields';
      tags: ['Issue custom field values (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).\n\nThe result can be filtered by one of these criteria:\n\n *  `id`.\n *  `fieldContextId`.\n *  `issueId`.\n *  `projectKeyOrId` and `issueTypeId`.\n\nOtherwise, all configurations are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.';
      operationId: 'getCustomFieldConfiguration';
      parameters: [
        {
          description: 'The ID or key of the custom field, for example `customfield_10000`.';
          in: 'path';
          name: 'fieldIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: "The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.";
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: "The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.";
          in: 'query';
          name: 'fieldContextId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: "The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.";
          in: 'query';
          name: 'issueId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.";
          in: 'query';
          name: 'projectKeyOrId';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.";
          in: 'query';
          name: 'issueTypeId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":1000,"startAt":0,"total":2,"values":[{"id":"10000","fieldContextId":"10010"},{"id":"10001","fieldContextId":"10011","configuration":{"minValue":0,"maxValue":10000},"schema":{"properties":{"amount":{"type":"number"},"currency":{"type":"string"}},"required":["amount","currency"]}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanContextualConfiguration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.';
        };
        '404': {
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get custom field configurations';
      tags: ['Issue custom field configuration (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:custom-field-contextual-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.';
      operationId: 'updateCustomFieldConfiguration';
      parameters: [
        {
          description: 'The ID or key of the custom field, for example `customfield_10000`.';
          in: 'path';
          name: 'fieldIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              configurations: [
                {
                  id: '10000';
                },
                {
                  configuration: {
                    maxValue: 10000;
                    minValue: 0;
                  };
                  id: '10001';
                  schema: {
                    properties: {
                      amount: {
                        type: 'number';
                      };
                      currency: {
                        type: 'string';
                      };
                    };
                    required: ['amount', 'currency'];
                  };
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/CustomFieldConfigurations';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.';
        };
        '404': {
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update custom field configurations';
      tags: ['Issue custom field configuration (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:custom-field-contextual-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/app/field/{fieldIdOrKey}/value': {
    put: {
      deprecated: false;
      description: "Updates the value of a custom field on one or more issues.\n\nApps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.\n\n**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'updateCustomFieldValue';
      parameters: [
        {
          description: 'The ID or key of the custom field. For example, `customfield_10010`.';
          in: 'path';
          name: 'fieldIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether to generate a changelog for this update.';
          in: 'query';
          name: 'generateChangelog';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              updates: [
                {
                  issueIds: [10010];
                  value: 'new value';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/CustomFieldValueUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the field.';
        };
        '404': {
          description: 'Returned if the field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Update custom field value';
      tags: ['Issue custom field values (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/application-properties': {
    get: {
      deprecated: false;
      description: 'Returns all application properties or an application property.\n\nIf you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getApplicationProperty';
      parameters: [
        {
          description: 'The key of the application property.';
          in: 'query';
          name: 'key';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The permission level of all items being returned in the list.';
          in: 'query';
          name: 'permissionLevel';
          schema: {
            type: 'string';
          };
        },
        {
          description: "When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.";
          in: 'query';
          name: 'keyFilter';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"defaultValue":"","desc":"Jira home directory","id":"jira.home","key":"jira.home","name":"jira.home","type":"string","value":"/var/jira/jira-home"},{"defaultValue":"CLONE -","id":"jira.clone.prefix","key":"jira.clone.prefix","name":"The prefix added to the Summary field of cloned issues","type":"string","value":"CLONE -"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationProperty';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the application property is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get application property';
      tags: ['Jira settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:instance-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/application-properties/advanced-settings': {
    get: {
      deprecated: false;
      description: 'Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAdvancedSettings';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"defaultValue":"","desc":"Jira home directory","id":"jira.home","key":"jira.home","name":"jira.home","type":"string","value":"/var/jira/jira-home"},{"defaultValue":"CLONE -","id":"jira.clone.prefix","key":"jira.clone.prefix","name":"The prefix added to the Summary field of cloned issues","type":"string","value":"CLONE -"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationProperty';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user is not an administrator.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get advanced settings';
      tags: ['Jira settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:instance-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/application-properties/{id}': {
    put: {
      deprecated: false;
      description: 'Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.\n\n#### Advanced settings ####\n\nThe advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  \n| `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  \n| `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  \n| `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  \n| `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  \n| `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  \n| `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  \n| `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  \n| `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  \n\n\n#### Look and feel ####\n\nThe settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  \n| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  \n| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  \n| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  \n| `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  \n| `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  \n| `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  \n| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  \n| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  \n| `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  \n| `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  \n| `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  \n| `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  \n| `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  \n| `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  \n\n\n#### Other settings ####\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  \n\n\n*Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setApplicationProperty';
      parameters: [
        {
          description: 'The key of the application property to update.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 'jira.home';
              value: '/var/jira/jira-home';
            };
            schema: {
              $ref: '#/components/schemas/SimpleApplicationPropertyBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ApplicationProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have permission to edit the property.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the property is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set application property';
      tags: ['Jira settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:instance-configuration:jira', 'read:instance-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/applicationrole': {
    get: {
      deprecated: false;
      description: 'Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllApplicationRoles';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"defaultGroups":["jira-software-users"],"defaultGroupsDetails":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"defined":false,"groupDetails":[{"groupId":"42c8955c-63d7-42c8-9520-63d7aca0625","name":"jira-testers","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=42c8955c-63d7-42c8-9520-63d7aca0625"},{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"groups":["jira-software-users","jira-testers"],"hasUnlimitedSeats":false,"key":"jira-software","name":"Jira Software","numberOfSeats":10,"platform":false,"remainingSeats":5,"selectedByDefault":false,"userCount":5,"userCountDescription":"5 developers"},{"defaultGroups":["jira-core-users"],"defaultGroupsDetails":[{"groupId":"92d01dca0625-42c8-42c8-9520-276f955c","name":"jira-core-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=92d01dca0625-42c8-42c8-9520-276f955c"}],"defined":false,"groupDetails":[{"groupId":"92d01dca0625-42c8-42c8-9520-276f955c","name":"jira-core-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=92d01dca0625-42c8-42c8-9520-276f955c"}],"groups":["jira-core-users"],"hasUnlimitedSeats":false,"key":"jira-core","name":"Jira Core","numberOfSeats":1,"platform":true,"remainingSeats":1,"selectedByDefault":false,"userCount":0,"userCountDescription":"0 users"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationRole';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user is not an administrator.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get all application roles';
      tags: ['Application roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/applicationrole/{key}': {
    get: {
      deprecated: false;
      description: 'Returns an application role.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getApplicationRole';
      parameters: [
        {
          description: 'The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role.';
          in: 'path';
          name: 'key';
          required: true;
          schema: {
            example: 'jira-software';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultGroups":["jira-software-users"],"defaultGroupsDetails":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"defined":false,"groupDetails":[{"groupId":"42c8955c-63d7-42c8-9520-63d7aca0625","name":"jira-testers","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=42c8955c-63d7-42c8-9520-63d7aca0625"},{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"groups":["jira-software-users","jira-testers"],"hasUnlimitedSeats":false,"key":"jira-software","name":"Jira Software","numberOfSeats":10,"platform":false,"remainingSeats":5,"selectedByDefault":false,"userCount":5,"userCountDescription":"5 developers"}';
              schema: {
                $ref: '#/components/schemas/ApplicationRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user is not an administrator.';
        };
        '404': {
          description: 'Returned if the role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get application role';
      tags: ['Application roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/attachment/content/{id}': {
    get: {
      deprecated: false;
      description: 'Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.\n\nTo return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getAttachmentContent';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.';
          in: 'query';
          name: 'redirect';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {};
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful when `redirect` is set to `false`.';
        };
        '206': {
          description: 'Returned if the request is successful when a `Range` header is provided and `redirect` is set to `false`.';
        };
        '303': {
          description: 'Returned if the request is successful. See the `Location` header for the download URL.';
        };
        '400': {
          description: 'Returned if the range supplied in the `Range` header is malformed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'The user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.';
        };
        '416': {
          description: 'Returned if the server is unable to satisfy the range of bytes provided.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get attachment content';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:attachment:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/attachment/meta': {
    get: {
      deprecated: false;
      description: 'Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.\n\nNote that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAttachmentMeta';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"enabled":true,"uploadLimit":1000000}';
              schema: {
                $ref: '#/components/schemas/AttachmentSettings';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get Jira attachment settings';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:instance-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/attachment/thumbnail/{id}': {
    get: {
      deprecated: false;
      description: 'Returns the thumbnail of an attachment.\n\nTo return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getAttachmentThumbnail';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.';
          in: 'query';
          name: 'redirect';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: 'Whether a default thumbnail is returned when the requested thumbnail is not found.';
          in: 'query';
          name: 'fallbackToDefault';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: 'The maximum width to scale the thumbnail to.';
          in: 'query';
          name: 'width';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum height to scale the thumbnail to.';
          in: 'query';
          name: 'height';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {};
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful when `redirect` is set to `false`.';
        };
        '303': {
          description: 'Returned if the request is successful. See the `Location` header for the download URL.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'The user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.\n *  `fallbackToDefault` is `false` and the request thumbnail cannot be downloaded.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get attachment thumbnail';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:attachment:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/attachment/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes an attachment from an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the project holding the issue containing the attachment:\n\n *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.\n *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.';
      operationId: 'removeAttachment';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete attachment';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:attachment:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the metadata for an attachment. Note that the attachment itself is not returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getAttachment';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}';
              schema: {
                $ref: '#/components/schemas/AttachmentMetadata';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get attachment metadata';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:attachment:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/attachment/{id}/expand/human': {
    get: {
      deprecated: false;
      description: "Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.\n\nUse this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'expandAttachmentForHumans';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"entries":[{"index":0,"label":"MG00N067.JPG","mediaType":"image/jpeg","path":"MG00N067.JPG","size":"119 kB"},{"index":1,"label":"Allegro from Duet in C Major.mp3","mediaType":"audio/mpeg","path":"Allegro from Duet in C Major.mp3","size":"1.36 MB"},{"index":2,"label":"long/path/thanks/to/.../reach/the/leaf.txt","mediaType":"text/plain","path":"long/path/thanks/to/lots/of/subdirectories/inside/making/it/quite/hard/to/reach/the/leaf.txt","size":"0.0 k"}],"id":7237823,"mediaType":"application/zip","name":"images.zip","totalEntryCount":39}';
              schema: {
                $ref: '#/components/schemas/AttachmentArchiveMetadataReadable';
              };
            };
          };
          description: 'Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'The user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.';
        };
        '409': {
          description: 'Returned if the attachment is an archive, but not a supported archive format.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all metadata for an expanded attachment';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:attachment:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/attachment/{id}/expand/raw': {
    get: {
      deprecated: false;
      description: "Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.\n\nUse this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'expandAttachmentForMachines';
      parameters: [
        {
          description: 'The ID of the attachment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"entries":[{"entryIndex":0,"mediaType":"audio/mpeg","name":"Allegro from Duet in C Major.mp3","size":1430174},{"entryIndex":1,"mediaType":"text/rtf","name":"lrm.rtf","size":331}],"totalEntryCount":24}';
              schema: {
                $ref: '#/components/schemas/AttachmentArchiveImpl';
              };
            };
          };
          description: 'Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'The user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.';
        };
        '409': {
          description: 'Returned if the attachment is an archive, but not a supported archive format.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get contents metadata for an expanded attachment';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:attachment:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/auditing/record': {
    get: {
      deprecated: false;
      description: 'Returns a list of audit records. The list can be filtered to include items:\n\n *  where each item in `filter` has at least one match in any of these fields:\n    \n     *  `summary`\n     *  `category`\n     *  `eventSource`\n     *  `objectItem.name` If the object is a user, account ID is available to filter.\n     *  `objectItem.parentName`\n     *  `objectItem.typeName`\n     *  `changedValues.changedFrom`\n     *  `changedValues.changedTo`\n     *  `remoteAddress`\n    \n    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.\n *  created on or after a date and time.\n *  created or or before a date and time.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAuditRecords';
      parameters: [
        {
          description: 'The number of records to skip before returning the first result.';
          in: 'query';
          name: 'offset';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of results to return.';
          in: 'query';
          name: 'limit';
          schema: {
            default: 1000;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The strings to match with audit field content, space separated.';
          in: 'query';
          name: 'filter';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.';
          in: 'query';
          name: 'from';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.';
          in: 'query';
          name: 'to';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"limit":1000,"offset":0,"records":[{"associatedItems":[{"id":"jira-software-users","name":"jira-software-users","parentId":"1","parentName":"Jira Internal Directory","typeName":"GROUP"}],"authorAccountId":"5ab8f18d741e9c2c7e9d4538","authorKey":"administrator","category":"user management","changedValues":[{"changedFrom":"user@atlassian.com","changedTo":"newuser@atlassian.com","fieldName":"email"}],"created":"2014-03-19T18:45:42.967+0000","description":"Optional description","eventSource":"Jira Connect Plugin","id":1,"objectItem":{"id":"user","name":"user","parentId":"1","parentName":"Jira Internal Directory","typeName":"USER"},"remoteAddress":"192.168.1.1","summary":"User created"}],"total":1}';
              schema: {
                $ref: '#/components/schemas/AuditRecords';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  the user does not have the required permissions.\n *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get audit records';
      tags: ['Audit records'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:audit-log:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/avatar/{type}/system': {
    get: {
      deprecated: false;
      description: 'Returns a list of system avatar details by owner type, where the owner types are issue type, project, user or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllSystemAvatars';
      parameters: [
        {
          description: 'The avatar type.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['issuetype', 'project', 'user', 'priority'];
            example: 'project';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"/secure/useravatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"/secure/useravatar?size=small&avatarId=10040&avatarType=project","32x32":"/secure/useravatar?size=medium&avatarId=10040&avatarType=project","48x48":"/secure/useravatar?avatarId=10040&avatarType=project"}}]}';
              schema: {
                $ref: '#/components/schemas/SystemAvatars';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '500': {
          description: 'Returned if an error occurs while retrieving the list of avatars.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Get system avatars by type';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/bulk/issues/fields': {
    get: {
      deprecated: false;
      description: 'Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  Depending on the field, any field-specific permissions required to edit it.';
      operationId: 'getBulkEditableFields';
      parameters: [
        {
          description: 'The IDs or keys of the issues to get editable fields from.';
          in: 'query';
          name: 'issueIdsOrKeys';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: '(Optional)The text to search for in the editable fields.';
          in: 'query';
          name: 'searchText';
          schema: {
            type: 'string';
          };
        },
        {
          description: '(Optional)The end cursor for use in pagination.';
          in: 'query';
          name: 'endingBefore';
          schema: {
            type: 'string';
          };
        },
        {
          description: '(Optional)The start cursor for use in pagination.';
          in: 'query';
          name: 'startingAfter';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"fields":[{"id":"assignee","isRequired":false,"name":"Assignee","searchUrl":"https://your-domain.atlassian.net/rest/api/3/user/assignable/multiProjectSearch?projectKeys=KAN&query=","type":"assignee"},{"id":"components","isRequired":false,"multiSelectFieldOptions":["ADD","REMOVE","REPLACE","REMOVE_ALL"],"name":"Components","type":"components","unavailableMessage":"{0}NOTE{1}: The project of the selected issue(s) does not have any components."},{"fieldOptions":[{"description":"This problem will block progress.","id":"1","priority":"Highest"},{"description":"Has the potential to affect progress.","id":"2","priority":"Lowest"},{"description":"Trivial problem with little or no impact on progress.","id":"3","priority":"Medium"}],"id":"priority","isRequired":false,"name":"Priority","type":"priority"}]}';
              schema: {
                $ref: '#/components/schemas/BulkEditGetFields';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if no editable fields are found for the provided issue IDs.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get bulk editable fields';
      tags: ['Issue bulk operations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  Edit [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'submitBulkEdit';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueBulkEditPayload';
            };
          };
        };
        description: 'The request body containing the issues to be edited and the new field values.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"taskId":"10641"}';
              schema: {
                $ref: '#/components/schemas/SubmittedBulkOperation';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errors":[{"message":"The following editedFieldInput values are not listed as selectedActions : issuetype"}]}';
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk edit issues';
      tags: ['Issue bulk operations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira', 'read:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/bulk/issues/move': {
    post: {
      deprecated: false;
      description: "Use this API to submit a bulk issue move request. You can move multiple issues, but they must all be moved to and from a single project, issue type, and parent. You can't move more than 1000 issues (including subtasks) at once.\n\n#### Scenarios: ####\n\nThis is an early version of the API and it doesn't have full feature parity with the Bulk Move UI experience.\n\n *  Moving issue of type A to issue of type B in the same project or a different project: `SUPPORTED`\n *  Moving multiple issues of type A in one project to multiple issues of type B in the same project or a different project: **`SUPPORTED`**\n *  Moving a standard parent issue of type A with its multiple subtask issue types in one project to standard issue of type B and multiple subtask issue types in the same project or a different project: `SUPPORTED`\n *  Moving an epic issue with its child issues to a different project without losing their relation: `NOT SUPPORTED`  \n    (Workaround: Move them individually and stitch the relationship back with the Bulk Edit API)\n\n#### Limits applied to bulk issue moves: ####\n\nWhen using the bulk move, keep in mind that there are limits on the number of issues and fields you can include.\n\n *  You can move up to 1,000 issues in a single operation, including any subtasks.\n *  All issues must originate from the same project and share the same issue type and parent.\n *  The total combined number of fields across all issues must not exceed 1,500,000. For example, if each issue includes 15,000 fields, then the maximum number of issues that can be moved is 100.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Move [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in source projects.\n *  Create [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in destination projects.\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in destination projects, if moving subtasks only.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'submitBulkMove';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              sendBulkNotification: true;
              targetToSourcesMapping: {
                'PROJECT-KEY,10001': {
                  inferClassificationDefaults: false;
                  inferFieldDefaults: false;
                  inferStatusDefaults: false;
                  inferSubtaskTypeDefault: true;
                  issueIdsOrKeys: ['ISSUE-1'];
                  targetClassification: [
                    {
                      classifications: {
                        '5bfa70f7-4af1-44f5-9e12-1ce185f15a38': ['bd58e74c-c31b-41a7-ba69-9673ebd9dae9', '-1'];
                      };
                    },
                  ];
                  targetMandatoryFields: [
                    {
                      fields: {
                        customfield_10000: {
                          retain: false;
                          type: 'raw';
                          value: ['value-1', 'value-2'];
                        };
                        description: {
                          retain: true;
                          type: 'adf';
                          value: {
                            content: [
                              {
                                content: [
                                  {
                                    text: 'New description value';
                                    type: 'text';
                                  },
                                ];
                                type: 'paragraph';
                              },
                            ];
                            type: 'doc';
                            version: 1;
                          };
                        };
                        fixVersions: {
                          retain: false;
                          type: 'raw';
                          value: ['10009'];
                        };
                        labels: {
                          retain: false;
                          type: 'raw';
                          value: ['label-1', 'label-2'];
                        };
                      };
                    },
                  ];
                  targetStatus: [
                    {
                      statuses: {
                        '10001': ['10002', '10003'];
                      };
                    },
                  ];
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/IssueBulkMovePayload';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"taskId":"10641"}';
              schema: {
                $ref: '#/components/schemas/SubmittedBulkOperation';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errors":[{"message":"Some of the issues in the issueIdsOrKeys are not valid"}]}';
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk move issues';
      tags: ['Issue bulk operations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira', 'read:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/bulk/queue/{taskId}': {
    get: {
      deprecated: false;
      description: 'Use this to get the progress state for the specified bulk operation `taskId`.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Administer Jira [global permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/), or be the creator of the task.\n\nIf the task is running, this resource will return:\n\n    {"taskId":"10779","status":"RUNNING","progressPercent":65,"submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"created":1690180055963,"started":1690180056206,"updated":169018005829}\n\nIf the task has completed, then this resource will return:\n\n    {"processedAccessibleIssues":[10001,10002],"created":1709189449954,"progressPercent":100,"started":1709189450154,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"invalidOrInaccessibleIssueCount":0,"taskId":"10000","totalIssueCount":2,"updated":1709189450354}\n\n**Note:** You can view task progress for up to 14 days from creation.';
      operationId: 'getBulkOperationProgress';
      parameters: [
        {
          description: 'The ID of the task.';
          in: 'path';
          name: 'taskId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"created":1704110400000,"invalidOrInaccessibleIssueCount":0,"processedAccessibleIssues":[10001,10002],"progressPercent":100,"started":1704110460000,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"taskId":"10000","totalIssueCount":2,"updated":1704110520000}';
              schema: {
                $ref: '#/components/schemas/BulkOperationProgress';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The task associated with this taskId is not a bulk operation task"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}';
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get bulk issue operation progress';
      tags: ['Issue bulk operations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/classification-levels': {
    get: {
      deprecated: false;
      description: 'Returns all classification levels.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllUserDataClassificationLevels';
      parameters: [
        {
          description: 'Optional set of statuses to filter by.';
          in: 'query';
          name: 'status';
          schema: {
            items: {
              default: '';
              description: 'The status of the project classification.';
              enum: ['PUBLISHED', 'ARCHIVED', 'DRAFT'];
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Ordering of the results by a given field. If not provided, values will not be sorted.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['rank', '-rank', '+rank'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"classifications":[{"id":"ari:cloud:platform::classification-tag/5bfa70f7-4af1-44f5-9e12-1ce185f15a38","status":"published","name":"Restricted","rank":1,"description":"Data we hold that would be very damaging and would cause loss of trust with customers and present legal risk to Atlassian and/or customers if mishandled","guideline":"Access to data must be restricted to only individuals who need access in order to perform their job duties.","color":"RED"},{"id":"ari:cloud:platform::classification-tag/bd58e74c-c31b-41a7-ba69-9673ebd9dae9","status":"archived","name":"Protected","rank":2,"description":"Data we hold that could cause loss of trust with customers or present legal risk to Atlassian if mishandled","guideline":"Access to systems or APIs mapping data to other identifiers must be carefully controlled.","color":"ORANGE"},{"id":"ari:cloud:platform::classification-tag/a82d653e-1035-4aa2-b9de-4265511fd487","status":"published","name":"Confidential","rank":3,"description":"Data we hold that would likely be damaging and could cause loss of trust with our customers if mishandled","guideline":"Data should be encrypted at rest and in transit.","color":"BLUE"},{"id":"ari:cloud:platform::classification-tag/a82d653e-1035-4aa2-b9de-4265511fd487","status":"published","name":"system-tag"}]}';
              schema: {
                $ref: '#/components/schemas/DataClassificationLevelsBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get all classification levels';
      tags: ['Classification levels'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/comment/list': {
    post: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Comments are returned where the user:\n\n *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getCommentsByIds';
      parameters: [
        {
          description: "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedBody` Returns the comment body rendered in HTML.\n *  `properties` Returns the comment's properties.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10];
            };
            schema: {
              $ref: '#/components/schemas/IssueCommentListRequestBean';
            };
          };
        };
        description: 'The list of comment IDs.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":1048576,"startAt":0,"total":1,"values":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanComment';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request contains more than 1000 IDs or is empty.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get comments by IDs';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'delete:comment.property:jira',
            'read:avatar:jira',
            'read:comment:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:comment.property:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/comment/{commentId}/properties': {
    get: {
      deprecated: false;
      description: 'Returns the keys of all the properties of a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getCommentPropertyKeys';
      parameters: [
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'commentId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the comment ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the comment is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get comment property keys';
      tags: ['Issue comment properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:comment.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/comment/{commentId}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes a comment property.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.\n *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.\n\nAlso, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.';
      operationId: 'deleteCommentProperty';
      parameters: [
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'commentId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: "Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete comment property';
      tags: ['Issue comment properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:comment.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the value of a comment property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getCommentProperty';
      parameters: [
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'commentId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the comment or the property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get comment property';
      tags: ['Issue comment properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:comment.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.\n *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.\n\nAlso, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.';
      operationId: 'setCommentProperty';
      parameters: [
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'commentId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the comment property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the comment property is created.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the comment is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set comment property';
      tags: ['Issue comment properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:comment.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/component': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'findComponentsForProjects';
      parameters: [
        {
          description: 'The project IDs and/or project keys (case sensitive).';
          in: 'query';
          name: 'projectIdsOrKeys';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `name` Sorts by component name.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['description', '-description', '+description', 'name', '-name', '+name'];
            type: 'string';
          };
        },
        {
          description: 'Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: ' com.atlassian.jira.issue.fields.rest.json.beans.ComponentJsonBean#PAGED_EXAMPLE} }';
              schema: {
                $ref: '#/components/schemas/PageBean2ComponentJsonBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Find components for projects';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createComponent';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD';
              description: 'This is a Jira component';
              isAssigneeTypeValid: false;
              leadAccountId: '5b10a2844c20165700ede21g';
              name: 'Component 1';
              project: 'HSP';
            };
            schema: {
              $ref: '#/components/schemas/ProjectComponent';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}';
              schema: {
                $ref: '#/components/schemas/ProjectComponent';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the user is not found.\n *  `name` is not provided.\n *  `name` is over 255 characters in length.\n *  `projectId` is not provided.\n *  `assigneeType` is an invalid value.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to browse the project containing the component.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Create component';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'write:project.component:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/component/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a component.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteComponent';
      parameters: [
        {
          description: 'The ID of the component.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the component to replace the deleted component. If this value is null no replacement is made.';
          in: 'query';
          name: 'moveIssuesTo';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.';
        };
        '404': {
          description: 'Returned if:\n\n *  the component is not found.\n *  the replacement component is not found.\n *  the user does not have permission to browse the project containing the component.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete component';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project.component:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a component.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.';
      operationId: 'getComponent';
      parameters: [
        {
          description: 'The ID of the component.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}';
              schema: {
                $ref: '#/components/schemas/ProjectComponent';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the component is not found or the user does not have permission to browse the project containing the component.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get component';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateComponent';
      parameters: [
        {
          description: 'The ID of the component.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD';
              description: 'This is a Jira component';
              isAssigneeTypeValid: false;
              leadAccountId: '5b10a2844c20165700ede21g';
              name: 'Component 1';
            };
            schema: {
              $ref: '#/components/schemas/ProjectComponent';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}';
              schema: {
                $ref: '#/components/schemas/ProjectComponent';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the user is not found.\n *  `assigneeType` is an invalid value.\n *  `name` is over 255 characters in length.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.';
        };
        '404': {
          description: 'Returned if the component is not found or the user does not have permission to browse the project containing the component.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Update component';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'write:project.component:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/component/{id}/relatedIssueCounts': {
    get: {
      deprecated: false;
      description: 'Returns the counts of issues assigned to the component.\n\nThis operation can be accessed anonymously.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  **Classic**: `read:jira-work`\n *  **Granular**: `read:field:jira`, `read:project.component:jira`\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getComponentRelatedIssues';
      parameters: [
        {
          description: 'The ID of the component.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}';
              schema: {
                $ref: '#/components/schemas/ComponentIssuesCount';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the component is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get component issues count';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/configuration': {
    get: {
      deprecated: false;
      description: 'Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getConfiguration';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"attachmentsEnabled":true,"issueLinkingEnabled":true,"subTasksEnabled":false,"timeTrackingConfiguration":{"defaultUnit":"day","timeFormat":"pretty","workingDaysPerWeek":5.0,"workingHoursPerDay":8.0},"timeTrackingEnabled":true,"unassignedIssuesAllowed":false,"votingEnabled":true,"watchingEnabled":true}';
              schema: {
                $ref: '#/components/schemas/Configuration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get global settings';
      tags: ['Jira settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:instance-configuration:jira', 'read:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/configuration/timetracking': {
    get: {
      deprecated: false;
      description: 'Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getSelectedTimeTrackingImplementation';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}';
              schema: {
                $ref: '#/components/schemas/TimeTrackingProvider';
              };
            };
          };
          description: 'Returned if the request is successful and time tracking is enabled.';
        };
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful but time tracking is disabled.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get selected time tracking provider';
      tags: ['Time tracking'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Selects a time tracking provider.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'selectTimeTrackingImplementation';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              key: 'Jira';
            };
            schema: {
              $ref: '#/components/schemas/TimeTrackingProvider';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the time tracking provider is not found.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Select time tracking provider';
      tags: ['Time tracking'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/configuration/timetracking/list': {
    get: {
      deprecated: false;
      description: 'Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAvailableTimeTrackingImplementations';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/TimeTrackingProvider';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all time tracking providers';
      tags: ['Time tracking'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/configuration/timetracking/options': {
    get: {
      deprecated: false;
      description: 'Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getSharedTimeTrackingConfiguration';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultUnit":"hour","timeFormat":"pretty","workingDaysPerWeek":5.5,"workingHoursPerDay":7.6}';
              schema: {
                $ref: '#/components/schemas/TimeTrackingConfiguration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get time tracking settings';
      tags: ['Time tracking'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the time tracking settings.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setSharedTimeTrackingConfiguration';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultUnit: 'hour';
              timeFormat: 'pretty';
              workingDaysPerWeek: 5.5;
              workingHoursPerDay: 7.6;
            };
            schema: {
              $ref: '#/components/schemas/TimeTrackingConfiguration';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultUnit":"hour","timeFormat":"pretty","workingDaysPerWeek":5.5,"workingHoursPerDay":7.6}';
              schema: {
                $ref: '#/components/schemas/TimeTrackingConfiguration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request object is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set time tracking settings';
      tags: ['Time tracking'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.time-tracking:jira', 'read:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/customFieldOption/{id}': {
    get: {
      deprecated: false;
      description: 'Returns a custom field option. For example, an option in a select list.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The custom field option is returned as follows:\n\n *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.';
      operationId: 'getCustomFieldOption';
      parameters: [
        {
          description: 'The ID of the custom field option.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/customFieldOption/10000","value":"To Do"}';
              schema: {
                $ref: '#/components/schemas/CustomFieldOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the custom field option is not found.\n *  the user does not have permission to view the custom field.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get custom field option';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/dashboard': {
    get: {
      deprecated: false;
      description: 'Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllDashboards';
      parameters: [
        {
          description: 'The filter applied to the list of dashboards. Valid values are:\n\n *  `favourite` Returns dashboards the user has marked as favorite.\n *  `my` Returns dashboards owned by the user.';
          in: 'query';
          name: 'filter';
          schema: {
            enum: ['my', 'favourite'];
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 20;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"dashboards":[{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"},{"id":"20000","isFavourite":true,"name":"Build Engineering","owner":{"key":"Mia","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","name":"mia","displayName":"Mia Krystof","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/20000","sharePermissions":[{"group":{"name":"administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=administrators"},"id":10105,"type":"group"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=20000"}],"maxResults":10,"next":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=10","prev":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=0","startAt":10,"total":143}';
              schema: {
                $ref: '#/components/schemas/PageOfDashboards';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all dashboards';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a dashboard.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'createDashboard';
      parameters: [
        {
          description: 'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)';
          in: 'query';
          name: 'extendAdminPermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.';
              editPermissions: [];
              name: 'Auditors dashboard';
              sharePermissions: [
                {
                  type: 'global';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/DashboardDetails';
            };
          };
        };
        description: 'Dashboard details.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}';
              schema: {
                $ref: '#/components/schemas/Dashboard';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/bulk/edit': {
    put: {
      deprecated: false;
      description: 'Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboards to be updated must be owned by the user, or the user must be an administrator.';
      operationId: 'bulkEditDashboards';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              action: 'changePermission';
              entityIds: [10001, 10002];
              extendAdminPermissions: true;
              permissionDetails: {
                editPermissions: [
                  {
                    group: {
                      groupId: '276f955c-63d7-42c8-9520-92d01dca0625';
                      name: 'jira-administrators';
                      self: 'https://your-domain.atlassian.net/rest/api/~ver~/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625';
                    };
                    id: 10010;
                    type: 'group';
                  },
                ];
                sharePermissions: [
                  {
                    id: 10000;
                    type: 'global';
                  },
                ];
              };
            };
            schema: {
              $ref: '#/components/schemas/BulkEditShareableEntityRequest';
            };
          };
        };
        description: 'The details of dashboards being updated in bulk.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"action":"changePermission","entityErrors":{"10002":{"errorMessages":["Only owner or editors of the dashboard can change permissions."],"errors":{}}}}';
              schema: {
                $ref: '#/components/schemas/BulkEditShareableEntityResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk edit dashboards';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/gadgets': {
    get: {
      deprecated: false;
      description: 'Gets a list of all available gadgets that can be added to all dashboards.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllAvailableDashboardGadgets';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"gadgets":[{"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","title":"Issue statistics"},{"uri":"rest/gadgets/1.0/g/com.atlassian.streams.streams-jira-plugin:activitystream-gadget/gadgets/activitystream-gadget.xml","title":"Activity Stream"}]}';
              schema: {
                $ref: '#/components/schemas/AvailableDashboardGadgetsResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '400 response';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get available gadgets';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:\n\n *  Dashboards owned by the user. Not returned for anonymous users.\n *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.\n *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.\n *  Dashboards shared with a public project.\n *  Dashboards shared with the public.';
      operationId: 'getDashboardsPaginated';
      parameters: [
        {
          description: 'String used to perform a case-insensitive partial match with `name`.';
          in: 'query';
          name: 'dashboardName';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.';
          in: 'query';
          name: 'owner';
          schema: {
            type: 'string';
          };
        },
        {
          description: "As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.';
          in: 'query';
          name: 'projectId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: 'name';
            enum: [
              'description',
              '-description',
              '+description',
              'favorite_count',
              '-favorite_count',
              '+favorite_count',
              'id',
              '-id',
              '+id',
              'is_favorite',
              '-is_favorite',
              '+is_favorite',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
            ];
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The status to filter by. It may be active, archived or deleted.';
          in: 'query';
          name: 'status';
          schema: {
            default: 'active';
            enum: ['active', 'archived', 'deleted'];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/search?expand=owner&maxResults=50&startAt=0","startAt":0,"total":2,"values":[{"description":"Testing program","id":"1","isFavourite":true,"name":"Testing","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/1","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=1"},{"description":"Quantum initiative","id":"2","isFavourite":false,"name":"Quantum ","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":0,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/2","sharePermissions":[{"type":"loggedin"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=2"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanDashboard';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  `orderBy` is invalid.\n *  `expand` includes an invalid value.\n *  `accountId` and `owner` are provided.\n *  `groupname` and `groupId` are provided.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '401 response';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for dashboards';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/dashboard/{dashboardId}/gadget': {
    get: {
      deprecated: false;
      description: 'Returns a list of dashboard gadgets on a dashboard.\n\nThis operation returns:\n\n *  Gadgets from a list of IDs, when `id` is set.\n *  Gadgets with a module key, when `moduleKey` is set.\n *  Gadgets from a list of URIs, when `uri` is set.\n *  All gadgets, when no other parameters are set.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllGadgets';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.';
          in: 'query';
          name: 'moduleKey';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.';
          in: 'query';
          name: 'uri';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.';
          in: 'query';
          name: 'gadgetId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"gadgets":[{"id":10001,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","color":"blue","position":{"row":0,"column":0},"title":"Issue statistics"},{"id":10002,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-graph","color":"red","position":{"row":1,"column":0},"title":"Activity stream"},{"id":10003,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","color":"yellow","position":{"row":0,"column":1},"title":"Bubble chart"}]}';
              schema: {
                $ref: '#/components/schemas/DashboardGadgetResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get gadgets';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    post: {
      deprecated: false;
      description: 'Adds a gadget to a dashboard.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'addGadget';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              color: 'blue';
              ignoreUriAndModuleKeyValidation: false;
              moduleKey: 'com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item';
              position: {
                column: 1;
                row: 0;
              };
              title: 'Issue statistics';
            };
            schema: {
              $ref: '#/components/schemas/DashboardGadgetSettings';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"color":"blue","id":10001,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","position":{"column":1,"row":0},"title":"Issue statistics"}';
              schema: {
                $ref: '#/components/schemas/DashboardGadget';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Cannot add another gadget. The maximum number of gadgets the dashboard can hold has been reached."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work', 'read:jira-work'];
        },
      ];
      summary: 'Add gadget to dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work', 'read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:dashboard:jira', 'read:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}': {
    delete: {
      deprecated: false;
      description: 'Removes a dashboard gadget from a dashboard.\n\nWhen a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'removeGadget';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the gadget.';
          in: 'path';
          name: 'gadgetId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The dashboard gadget was not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the gadget or the dashboard is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Remove gadget from dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Changes the title, position, and color of the gadget on a dashboard.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'updateGadget';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the gadget.';
          in: 'path';
          name: 'gadgetId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              color: 'red';
              position: {
                column: 1;
                row: 1;
              };
              title: 'My new gadget title';
            };
            schema: {
              $ref: '#/components/schemas/DashboardGadgetUpdateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The gadget cannot be placed in the selected row. The selected row does not exist on the dashboard."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the gadget or the dashboard is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Update gadget on dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties': {
    get: {
      deprecated: false;
      description: 'Returns the keys of all properties for a dashboard item.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.';
      operationId: 'getDashboardItemPropertyKeys';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the dashboard item.';
          in: 'path';
          name: 'itemId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get dashboard item property keys';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:dashboard.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes a dashboard item property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.';
      operationId: 'deleteDashboardItemProperty';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the dashboard item.';
          in: 'path';
          name: 'itemId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the dashboard item property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the dashboard item property is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard or dashboard item ID is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user is not the owner of the dashboard.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete dashboard item property';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:dashboard.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the key and value of a dashboard item property.\n\nA dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).\n\nWhen an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.\n\nThere is no resource to set or get dashboard items.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.";
      operationId: 'getDashboardItemProperty';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the dashboard item.';
          in: 'path';
          name: 'itemId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the dashboard item property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get dashboard item property';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:dashboard.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.\n\nA dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).\n\nWhen an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.\n\nThere is no resource to set or get dashboard items.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.";
      operationId: 'setDashboardItemProperty';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'dashboardId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the dashboard item.';
          in: 'path';
          name: 'itemId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body\'s JSON must be an object with all keys and values as strings.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5;
              string: 'string-value';
            };
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the dashboard item property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the dashboard item property is created.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The JSON data provided for the property has too many levels. It must be an object with all keys and values as strings."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  Request is invalid\n *  Or if all of these conditions are met in the request:\n    \n     *  The dashboard item has a spec URI and no complete module key\n     *  The value of propertyKey is equal to "config"\n     *  The request body contains a JSON object whose keys and values are not strings.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user is not the owner of the dashboard.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set dashboard item property';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:dashboard.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/dashboard/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a dashboard.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be deleted must be owned by the user.';
      operationId: 'deleteDashboard';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the dashboard is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '400 response';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:dashboard:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    get: {
      deprecated: false;
      description: 'Returns a dashboard.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.\n\nHowever, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.';
      operationId: 'getDashboard';
      parameters: [
        {
          description: 'The ID of the dashboard.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}';
              schema: {
                $ref: '#/components/schemas/Dashboard';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '400 response';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a dashboard, replacing all the dashboard details with those provided.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be updated must be owned by the user.';
      operationId: 'updateDashboard';
      parameters: [
        {
          description: 'The ID of the dashboard to update.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)';
          in: 'query';
          name: 'extendAdminPermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.';
              editPermissions: [];
              name: 'Auditors dashboard';
              sharePermissions: [
                {
                  type: 'global';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/DashboardDetails';
            };
          };
        };
        description: 'Replacement dashboard details.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}';
              schema: {
                $ref: '#/components/schemas/Dashboard';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard is not found or the dashboard is not owned by the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/dashboard/{id}/copy': {
    post: {
      deprecated: false;
      description: 'Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be copied must be owned by or shared with the user.';
      operationId: 'copyDashboard';
      parameters: [
        {
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)';
          in: 'query';
          name: 'extendAdminPermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.';
              editPermissions: [];
              name: 'Auditors dashboard';
              sharePermissions: [
                {
                  type: 'global';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/DashboardDetails';
            };
          };
        };
        description: 'Dashboard details.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}';
              schema: {
                $ref: '#/components/schemas/Dashboard';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Copy dashboard';
      tags: ['Dashboards'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/data-policy': {
    get: {
      deprecated: false;
      description: 'Returns data policy for the workspace.';
      operationId: 'getPolicy';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"anyContentBlocked":false}';
              schema: {
                $ref: '#/components/schemas/WorkspaceDataPolicy';
              };
            };
          };
          description: 'Returned if the request is successful';
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only apps can access this resource."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":[""],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the client is not authorized to make the request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get data policy for the workspace';
      tags: ['App data policies'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/data-policy/project': {
    get: {
      deprecated: false;
      description: 'Returns data policies for the projects specified in the request.';
      operationId: 'getPolicies';
      parameters: [
        {
          description: 'A list of project identifiers. This parameter accepts a comma-separated list.';
          in: 'query';
          name: 'ids';
          schema: {
            description: 'A list of up to 50 project identifiers. This parameter accepts a comma-separated list.';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"projectDataPolicies":[{"dataPolicy":{"anyContentBlocked":false},"id":1000},{"dataPolicy":{"anyContentBlocked":true},"id":1001}]}';
              schema: {
                $ref: '#/components/schemas/ProjectDataPolicies';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Invalid request: some projects are not available or do not exist."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid or includes invalid or not-permitted project identifiers.';
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only apps can access this resource."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":[""],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the client is not authorized to make the request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get data policy for projects';
      tags: ['App data policies'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/events': {
    get: {
      deprecated: false;
      description: 'Returns all issue events.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getEvents';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"id":1,"name":"Issue Created"},{"id":2,"name":"Issue Updated"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueEvent';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to complete this request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get events';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-event:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/expression/analyse': {
    post: {
      deprecated: false;
      description: 'Analyses and validates Jira expressions.\n\nAs an experimental feature, this operation can also attempt to type-check the expressions.\n\nLearn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).\n\n**[Permissions](#permissions) required**: None.';
      operationId: 'analyseExpression';
      parameters: [
        {
          description: "The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.";
          in: 'query';
          name: 'check';
          schema: {
            default: 'syntax';
            enum: ['syntax', 'type', 'complexity'];
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              contextVariables: {
                listOfStrings: 'List<String>';
                record: '{ a: Number, b: String }';
                value: 'User';
              };
              expressions: ["issues.map(issue => issue.properties['property_key'])"];
            };
            schema: {
              $ref: '#/components/schemas/JiraExpressionForAnalysis';
            };
          };
        };
        description: 'The Jira expressions to analyse.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"results":[{"expression":"analysed expression","errors":[{"line":1,"column":4,"message":"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.","type":"syntax"},{"message":"Jira expression is too long (1040), limit: 1000 characters","type":"other"},{"message":"Jira expression has too many nodes (150), limit: 100 leaves","type":"other"}],"valid":false},{"expression":"issues.map(i => {idAndKey: [i.id, i.key], summary: i.summary, comments: i.comments})","valid":true,"type":"List<{idAndKey: [Number, String], summary: String, comments: List<Comment>}>","complexity":{"expensiveOperations":"N","variables":{"N":"issues"}}},{"expression":"issues.map(i => i.id > \'0\')","errors":[{"expression":"i.id > 0","message":"Can\'t compare Number to String.","type":"type"}],"valid":false,"type":"TypeError"}]}';
              schema: {
                $ref: '#/components/schemas/JiraExpressionsAnalysis';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '400 response';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '404 response';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'];
        },
        {},
      ];
      summary: 'Analyse Jira expression';
      tags: ['Jira expressions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:jira-expressions:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/expression/eval': {
    post: {
      deprecated: false;
      description: 'Evaluates a Jira expression and returns its value.\n\nThis resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.\n\n#### Context variables ####\n\nThe following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.\n\n *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.\n *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).\n *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.\n *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.\n *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.\n *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.\n *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.\n *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.\n *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.\n\nAlso, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:\n\n *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.\n *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.\n *  `json`: A JSON object containing custom content.\n *  `list`: A JSON list of `user`, `issue`, or `json` variable types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  \nPermission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).';
      operationId: 'evaluateJiraExpression';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              context: {
                board: 10100;
                custom: {
                  config: {
                    type: 'json';
                    value: {
                      userId: '10002';
                    };
                  };
                  issuesList: [
                    {
                      key: 'ACJIRA-1471';
                      type: 'issue';
                    },
                    {
                      id: 100001;
                      type: 'issue';
                    },
                  ];
                  myUser: {
                    accountId: '100001';
                    type: 'user';
                  };
                  nullField: {
                    type: 'json';
                  };
                };
                customerRequest: 1450;
                issue: {
                  key: 'ACJIRA-1470';
                };
                issues: {
                  jql: {
                    maxResults: 100;
                    query: 'project = HSP';
                    startAt: 0;
                    validation: 'strict';
                  };
                };
                project: {
                  key: 'ACJIRA';
                };
                serviceDesk: 10023;
                sprint: 10001;
              };
              expression: '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id), listCustomVariable: issuesList.includes(issue), customVariables: myUser.accountId == config.userId}';
            };
            schema: {
              $ref: '#/components/schemas/JiraExpressionEvalRequestBean';
            };
          };
        };
        description: 'The Jira expression and the evaluation context.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"value":"The expression\'s result. This value can be any JSON, not necessarily a String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"startAt":0,"maxResults":1000,"count":140,"totalCount":140,"validationWarnings":["There is a problem with the JQL query."]}}}}';
              schema: {
                $ref: '#/components/schemas/JiraExpressionResult';
              };
            };
          };
          description: 'Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.';
        };
        '400': {
          content: {
            'application/json': {
              example: "{\"errorMessages\":[\"Evaluation failed: \\\"issue['a' + 'b']\\\" - Unrecognized property of `issue`: \\\"ab\\\" ('a' + 'b'). Available properties of type 'Issue' are: 'assignee', 'comments', 'description', 'id', 'issueType', 'key', 'priority', 'project', 'properties', 'reporter', 'status', 'summary'\"],\"errors\":{}}";
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  the request is invalid, that is:\n    \n     *  invalid data is provided, such as a request including issue ID and key.\n     *  the expression is invalid and can not be parsed.\n *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue does not exist or you do not have permission to see it."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if any object provided in the request context is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'];
        },
        {},
      ];
      summary: 'Evaluate Jira expression';
      tags: ['Jira expressions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-expressions:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/expression/evaluate': {
    post: {
      deprecated: false;
      description: "Evaluates a Jira expression and returns its value. The difference between this and `eval` is that this endpoint uses the enhanced search API when evaluating JQL queries. This API is eventually consistent, unlike the strongly consistent `eval` API. This allows for better performance and scalability. In addition, this API's response for JQL evaluation is based on a scrolling view (backed by a `nextPageToken`) instead of a paginated view (backed by `startAt` and `totalCount`).\n\nThis resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.\n\n#### Context variables ####\n\nThe following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.\n\n *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.\n *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).\n *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.\n *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.\n *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.\n *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.\n *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.\n *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.\n *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.\n\nIn addition, you can pass custom context variables along with their types. You can then access them from the Jira expression by key. You can use the following variables in a custom context:\n\n *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.\n *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.\n *  `json`: A JSON object containing custom content.\n *  `list`: A JSON list of `user`, `issue`, or `json` variable types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  \nPermission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).";
      operationId: 'evaluateJSISJiraExpression';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              context: {
                board: 10100;
                custom: {
                  config: {
                    type: 'json';
                    value: {
                      userId: '10002';
                    };
                  };
                  issuesList: [
                    {
                      key: 'ACJIRA-1471';
                      type: 'issue';
                    },
                    {
                      id: 100001;
                      type: 'issue';
                    },
                  ];
                  myUser: {
                    accountId: '100001';
                    type: 'user';
                  };
                  nullField: {
                    type: 'json';
                  };
                };
                customerRequest: 1450;
                issue: {
                  key: 'ACJIRA-1470';
                };
                issues: {
                  jql: {
                    maxResults: 100;
                    nextPageToken: 'EgQIlMIC';
                    query: 'project = HSP';
                  };
                };
                project: {
                  key: 'ACJIRA';
                };
                serviceDesk: 10023;
                sprint: 10001;
              };
              expression: '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id), listCustomVariable: issuesList.includes(issue), customVariables: myUser.accountId == config.userId}';
            };
            schema: {
              $ref: '#/components/schemas/JiraExpressionEvaluateRequestBean';
            };
          };
        };
        description: 'The Jira expression and the evaluation context.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"value":"The expression\'s result. This value can be any JSON, not necessarily a String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"nextPageToken":"EgQIlMIC"}}}}';
              schema: {
                $ref: '#/components/schemas/JExpEvaluateJiraExpressionResultBean';
              };
            };
          };
          description: 'Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.';
        };
        '400': {
          content: {
            'application/json': {
              example: "{\"errorMessages\":[\"Evaluation failed: \\\"issue['a' + 'b']\\\" - Unrecognized property of `issue`: \\\"ab\\\" ('a' + 'b'). Available properties of type 'Issue' are: 'assignee', 'comments', 'description', 'id', 'issueType', 'key', 'priority', 'project', 'properties', 'reporter', 'status', 'summary'\"],\"errors\":{}}";
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  the request is invalid, that is:\n    \n     *  invalid data is provided, such as a request including issue ID and key.\n     *  the expression is invalid and can not be parsed.\n *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.\n *  If jql is unbounded or empty.\n *  If nextPageToken is invalid';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue does not exist or you do not have permission to see it."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if any object provided in the request context is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'];
        },
        {},
      ];
      summary: 'Evaluate Jira expression using enhanced search API';
      tags: ['Jira expressions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-expressions:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/field': {
    get: {
      deprecated: false;
      description: 'Returns system and custom issue fields according to the following rules:\n\n *  Fields that cannot be added to the issue navigator are always returned.\n *  Fields that cannot be placed on an issue screen are always returned.\n *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.\n *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getFields';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"clauseNames":["description"],"custom":false,"id":"description","name":"Description","navigable":true,"orderable":true,"schema":{"system":"description","type":"string"},"searchable":true},{"clauseNames":["summary"],"custom":false,"id":"summary","key":"summary","name":"Summary","navigable":true,"orderable":true,"schema":{"system":"summary","type":"string"},"searchable":true}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/FieldDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get fields';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:field:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:field-configuration:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a custom field.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createCustomField';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Custom field for picking groups';
              name: 'New custom field';
              searcherKey: 'com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher';
              type: 'com.atlassian.jira.plugin.system.customfieldtypes:grouppicker';
            };
            schema: {
              $ref: '#/components/schemas/CustomFieldDefinitionJsonBean';
            };
          };
        };
        description: 'Definition of the custom field to be created';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"}';
              schema: {
                $ref: '#/components/schemas/FieldDetails';
              };
            };
          };
          description: 'Returned if the custom field is created.';
        };
        '400': {
          description: 'Returned if:\n\n *  the user does not have permission to create custom fields.\n *  any of the request object properties have invalid or missing values.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Create custom field';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:field:jira',
            'read:avatar:jira',
            'read:field:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:field-configuration:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:\n\n *  all fields\n *  specific fields, by defining `id`\n *  fields that contain a string in the field name or description, by defining `query`\n *  specific fields that contain a string in the field name or description, by defining `id` and `query`\n\nOnly custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getFieldsPaginated';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The type of fields to search.';
          in: 'query';
          name: 'type';
          schema: {
            items: {
              default: '';
              enum: ['custom', 'system'];
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The IDs of the custom fields to return or, where `query` is specified, filter.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with field names or descriptions.';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `contextsCount` sorts by the number of contexts related to a field\n *  `lastUsed` sorts by the date when the value of the field last changed\n *  `name` sorts by the field name\n *  `screensCount` sorts by the number of screens related to a field';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: [
              'contextsCount',
              '-contextsCount',
              '+contextsCount',
              'lastUsed',
              '-lastUsed',
              '+lastUsed',
              'name',
              '-name',
              '+name',
              'screensCount',
              '-screensCount',
              '+screensCount',
              'projectsCount',
              '-projectsCount',
              '+projectsCount',
            ];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `key` returns the key for each field\n *  `stableId` returns the stableId for each field\n *  `lastUsed` returns the date when the value of the field last changed\n *  `screensCount` returns the number of screens related to a field\n *  `contextsCount` returns the number of contexts related to a field\n *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)\n *  `searcherKey` returns the searcher key for each custom field';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":50,"startAt":0,"total":2,"values":[{"id":"customfield_10000","name":"Approvers","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker","customId":10000,"items":"user","type":"array"},"description":"Contains users needed for approval. This custom field was created by Jira Service Desk.","key":"customfield_10000","stableId":"sfid:approvers","isLocked":true,"searcherKey":"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher","screensCount":2,"contextsCount":2,"lastUsed":{"type":"TRACKED","value":"2021-01-28T07:37:40.000+0000"}},{"id":"customfield_10001","name":"Change reason","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:select","customId":10001,"type":"option"},"description":"Choose the reason for the change request","key":"customfield_10001","stableId":"sfid:change-reason","isLocked":false,"searcherKey":"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher","screensCount":2,"contextsCount":2,"projectsCount":2,"lastUsed":{"type":"NOT_TRACKED"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanField';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only custom fields can be queried."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access fields."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get fields paginated';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/search/trashed': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.\n\nOnly custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getTrashedFieldsPaginated';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          in: 'query';
          name: 'id';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with field names or descriptions.';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'expand';
          schema: {
            enum: [
              'name',
              '-name',
              '+name',
              'trashDate',
              '-trashDate',
              '+trashDate',
              'plannedDeletionDate',
              '-plannedDeletionDate',
              '+plannedDeletionDate',
              'projectsCount',
              '-projectsCount',
              '+projectsCount',
            ];
            type: 'string';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date';
          in: 'query';
          name: 'orderBy';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":50,"startAt":0,"total":1,"values":[{"id":"customfield_10000","name":"Approvers","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker","customId":10003,"type":"array"},"description":"Contains users needed for approval. This custom field was created by Jira Service Desk.","key":"customfield_10003","trashedDate":"2022-10-06T07:32:47.000+0000","trashedBy":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"plannedDeletionDate":"2022-10-24T07:32:47.000+0000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanField';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only custom fields can be queried."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access fields."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get fields in trash paginated';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:field-configuration:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}': {
    put: {
      deprecated: false;
      description: 'Updates a custom field.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateCustomField';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Select the manager and the corresponding employee.';
              name: 'Managers and employees list';
              searcherKey: 'com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher';
            };
            schema: {
              $ref: '#/components/schemas/UpdateCustomFieldDetails';
            };
          };
        };
        description: 'The custom field update details.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["searcherKey is invalid for the field type."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can edit custom fields."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update custom field';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:\n\n *  With no other parameters set, all contexts.\n *  By defining `id` only, all contexts from the list of IDs.\n *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)\n *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getContextsForField';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether to return contexts that apply to all issue types.';
          in: 'query';
          name: 'isAnyIssueType';
          schema: {
            type: 'boolean';
          };
        },
        {
          description: 'Whether to return contexts that apply to all projects.';
          in: 'query';
          name: 'isGlobalContext';
          schema: {
            type: 'boolean';
          };
        },
        {
          description: 'The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.';
          in: 'query';
          name: 'contextId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"id":"10025","name":"Bug fields context","description":"A context used to define the custom field options for bugs.","isGlobalContext":true,"isAnyIssueType":false},{"id":"10026","name":"Task fields context","description":"A context used to define the custom field options for tasks.","isGlobalContext":false,"isAnyIssueType":false}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContext';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field was not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get custom field contexts';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:custom-field-contextual-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a custom field context.\n\nIf `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createCustomFieldContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A context used to define the custom field options for bugs.';
              issueTypeIds: ['10010'];
              name: 'Bug fields context';
              projectIds: [];
            };
            schema: {
              $ref: '#/components/schemas/CreateCustomFieldContext';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10025","name":"Bug fields context","description":"A context used to define the custom field options for bugs.","projectIds":[],"issueTypeIds":["10010"]}';
              schema: {
                $ref: '#/components/schemas/CreateCustomFieldContext';
              };
            };
          };
          description: 'Returned if the custom field context is created.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the field, project, or issue type is not found.';
        };
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create custom field context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'write:field:jira', 'read:custom-field-contextual-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/defaultValue': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  \nThe returned object depends on type of the custom field:\n\n *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.\n *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.\n *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.\n *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.\n *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.\n *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.\n *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.\n *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.\n *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.\n *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.\n *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.\n *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).\n *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.\n *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.\n *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.\n *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.\n *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.\n *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.\n\nForge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:\n\n *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.\n *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.\n *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.\n *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.\n *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.\n *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.\n *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.\n *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.\n *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getDefaultValues';
      parameters: [
        {
          description: 'The ID of the custom field, for example `customfield\\_10000`.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The IDs of the contexts.';
          in: 'query';
          name: 'contextId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"contextId":"10100","optionId":"10001"},{"contextId":"10101","optionId":"10003"},{"contextId":"10103"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextDefaultValue';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get custom field contexts default values';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.default-value:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets default for contexts of a custom field. Default are defined using these objects:\n\n *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.\n *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.\n *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.\n *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.\n *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.\n *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.\n *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.\n *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.\n *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.\n *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.\n *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.\n *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).\n *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.\n *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.\n *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.\n *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.\n *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.\n *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.\n\nForge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:\n\n *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.\n *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.\n *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.\n *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.\n *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.\n *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.\n *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.\n *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.\n *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.\n\nOnly one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setDefaultValues';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultValues: [
                {
                  contextId: '10100';
                  optionId: '10001';
                  type: 'option.single';
                },
                {
                  contextId: '10101';
                  optionId: '10003';
                  type: 'option.single';
                },
                {
                  contextId: '10103';
                  optionId: '10005';
                  type: 'option.single';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/CustomFieldContextDefaultValueUpdate';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["All default values in the request must have the same type."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, a context, an option, or a cascading option is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set custom field contexts default values';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field.default-value:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/issuetypemapping': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeMappingsForContexts';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.';
          in: 'query';
          name: 'contextId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"contextId":"10001","issueTypeId":"10010"},{"contextId":"10001","issueTypeId":"10011"},{"contextId":"10002","isAnyIssueType":true}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeToContextMapping';
              };
            };
          };
          description: 'Returned if operation is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue types for custom field context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/mapping': {
    post: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.\n\nIf there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.\n\nDuplicate project and issue type mappings cannot be provided in the request.\n\nThe order of the returned values is the same as provided in the request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getCustomFieldContextsForProjectsAndIssueTypes';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              mappings: [
                {
                  issueTypeId: '10000';
                  projectId: '10000';
                },
                {
                  issueTypeId: '10001';
                  projectId: '10000';
                },
                {
                  issueTypeId: '10002';
                  projectId: '10001';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/ProjectIssueTypeMappings';
            };
          };
        };
        description: 'The list of project and issue type mappings.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"projectId":"10000","issueTypeId":"10000","contextId":"10000"},{"projectId":"10000","issueTypeId":"10001","contextId":null},{"projectId":"10001","issueTypeId":"10002","contextId":"10003"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanContextForProjectAndIssueType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Duplicate project and issue type mappings cannot be provided."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These projects were not found: 10005."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, project, or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get custom field contexts for projects and issue types';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/projectmapping': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getProjectContextMapping';
      parameters: [
        {
          description: 'The ID of the custom field, for example `customfield\\_10000`.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.';
          in: 'query';
          name: 'contextId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"contextId":"10025","projectId":"10001"},{"contextId":"10026","isGlobalContext":true}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextProjectMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get project mappings for custom field context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteCustomFieldContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the context is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The contextId has to be provided."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field or the context is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete custom field context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateCustomFieldContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A context used to define the custom field options for bugs.';
              name: 'Bug fields context';
            };
            schema: {
              $ref: '#/components/schemas/CustomFieldContextUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the context is updated.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The contextId has to be provided."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field or the context is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update custom field context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype': {
    put: {
      deprecated: false;
      description: 'Adds issue types to a custom field context, appending the issue types to the issue types list.\n\nA custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.\n\nIf any of the issue types exists in the custom field context, the operation fails and no issue types are added.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addIssueTypesToContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10001', '10005', '10006'];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These issue types are already associated with the context: 10001."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, context, or one or more issue types are not found.';
        };
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add issue types to context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove': {
    post: {
      deprecated: false;
      description: 'Removes issue types from a custom field context.\n\nA custom field context without any issue types applies to all issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeIssueTypesFromContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10001', '10005', '10006'];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These issue types are not associated with the context: 10002."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, context, or one or more issue types are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove issue types from context';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/option': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getOptionsForContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the option.';
          in: 'query';
          name: 'optionId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Whether only options are returned.';
          in: 'query';
          name: 'onlyOptions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"id":"10001","value":"New York"},{"id":"10002","value":"Boston","disabled":true},{"id":"10004","value":"Denver"},{"id":"10003","value":"Brooklyn","optionId":"10001"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: "Returned if the custom field is not found or the context doesn't match the custom field.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get custom field options (context)';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.\n\nThe maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createCustomFieldOption';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              options: [
                {
                  disabled: false;
                  value: 'Scranton';
                },
                {
                  disabled: true;
                  optionId: '10000';
                  value: 'Manhattan';
                },
                {
                  disabled: false;
                  value: 'The Electric City';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/BulkCustomFieldOptionCreateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"options":[{"disabled":false,"id":"10001","value":"Scranton"},{"disabled":true,"id":"10002","optionId":"10000","value":"Manhattan"},{"disabled":false,"id":"10003","value":"The Electric City"}]}';
              schema: {
                $ref: '#/components/schemas/CustomFieldCreatedContextOptionsList';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: "Returned if the custom field is not found or the context doesn't match the custom field.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create custom field options (context)';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira', 'write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Updates the options of a custom field.\n\nIf any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'updateCustomFieldOption';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              options: [
                {
                  disabled: false;
                  id: '10001';
                  value: 'Scranton';
                },
                {
                  disabled: true;
                  id: '10002';
                  value: 'Manhattan';
                },
                {
                  disabled: false;
                  id: '10003';
                  value: 'The Electric City';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/BulkCustomFieldOptionUpdateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"options":[{"disabled":false,"id":"10001","value":"Scranton"},{"disabled":true,"id":"10002","value":"Manhattan"},{"disabled":false,"id":"10003","value":"The Electric City"}]}';
              schema: {
                $ref: '#/components/schemas/CustomFieldUpdatedContextOptionsList';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the field, context, or one or more options is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update custom field options (context)';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira', 'write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/move': {
    put: {
      deprecated: false;
      description: 'Changes the order of custom field options or cascading options in a context.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'reorderCustomFieldOptions';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              customFieldOptionIds: ['10001', '10002'];
              position: 'First';
            };
            schema: {
              $ref: '#/components/schemas/OrderOfCustomFieldOptions';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if options are reordered.';
        };
        '400': {
          content: {
            'application/json': {
              example: "{\"errorMessages\":[\"'after' and 'position' were provided. Only 'after' or 'position' can be specified.\"],\"errors\":{}}";
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the field, the context, or one or more of the options is not found..';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Reorder custom field options (context)';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a custom field option.\n\nOptions with cascading options cannot be deleted without deleting the cascading options first.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteCustomFieldOption';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context from which an option should be deleted.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the option to delete.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the option is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the field, the context, or the option is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete custom field options (context)';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue': {
    delete: {
      deprecated: false;
      description: 'Replaces the options of a custom field.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'replaceCustomFieldOption';
      parameters: [
        {
          description: 'The ID of the option that will replace the currently selected option.';
          in: 'query';
          name: 'replaceWith';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'A JQL query that specifies the issues to be updated. For example, *project=10000*.';
          in: 'query';
          name: 'jql';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the option to be deselected.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Remove option 1 from issues matched by \'*\', and replace with option 3","status":"COMPLETE","result":{"errors":{"errorMessages":["Option 2 cannot be set on issue MKY-5 as it is not in the correct scope"],"errors":{},"httpStatusCode":{"empty":false,"present":true}},"modifiedIssues":[10001,10010],"unmodifiedIssues":[10005]},"elapsedRuntime":42}';
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult';
              };
            };
          };
          description: 'Returned if the long-running task to deselect the option is started.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Connect and Forge app users with Administer Jira global permission can override screen security."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field is not found or does not support options, or the options to be replaced are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Replace custom field options';
      tags: ['Issue custom field options'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira', 'write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/project': {
    put: {
      deprecated: false;
      description: 'Assigns a custom field context to projects.\n\nIf any project in the request is assigned to any context of the custom field, the operation fails.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'assignProjectsToCustomFieldContext';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10001', '10005', '10006'];
            };
            schema: {
              $ref: '#/components/schemas/ProjectIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The projectIds must not contain duplicates."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, context, or project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign custom field context to projects';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove': {
    post: {
      deprecated: false;
      description: 'Removes a custom field context from projects.\n\nA custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.\n\nIf any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeCustomFieldContextFromProjects';
      parameters: [
        {
          description: 'The ID of the custom field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the context.';
          in: 'path';
          name: 'contextId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10001', '10005', '10006'];
            };
            schema: {
              $ref: '#/components/schemas/ProjectIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the custom field context is removed from the projects.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The projectIds must not contain duplicates."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the custom field, context, or one or more projects are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove custom field context from projects';
      tags: ['Issue custom field contexts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/contexts': {
    get: {
      deprecated: true;
      description: 'Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getContextsForFieldDeprecated';
      parameters: [
        {
          description: 'The ID of the field to return contexts for.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 20;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":10001,"name":"Default Context"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanContext';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Get contexts for a field';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldId}/screens': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of the screens a field is used in.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getScreensForField';
      parameters: [
        {
          description: 'The ID of the field to return screens for.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":10001,"name":"Default Screen","description":"Provides for the update of all system fields.","tab":{"id":10000,"name":"Fields Tab"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanScreenWithTab';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Get screens for a field';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:screen-tab:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldKey}/option': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'getAllIssueFieldOptions';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the field is not found or does not support options.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all issue field options';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates an option for a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\nEach field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'createIssueFieldOption';
      parameters: [
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              config: {
                attributes: [];
                scope: {
                  global: {};
                  projects: [];
                  projects2: [
                    {
                      attributes: ['notSelectable'];
                      id: 1001;
                    },
                    {
                      attributes: ['notSelectable'];
                      id: 1002;
                    },
                  ];
                };
              };
              properties: {
                description: "The team's description";
                founded: '2016-06-06';
                leader: {
                  email: 'lname@example.com';
                  name: 'Leader Name';
                };
                members: 42;
              };
              value: 'Team 1';
            };
            schema: {
              $ref: '#/components/schemas/IssueFieldOptionCreateBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}';
              schema: {
                $ref: '#/components/schemas/IssueFieldOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the option is invalid.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.';
        };
        '404': {
          description: 'Returned if the field is not found or does not support options.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create issue field option';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldKey}/option/suggestions/edit': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getSelectableIssueFieldOptions';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Filters the results to options that are only available in the specified project.';
          in: 'query';
          name: 'projectId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the field is not found or does not support options.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get selectable issue field options';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldKey}/option/suggestions/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getVisibleIssueFieldOptions';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Filters the results to options that are only available in the specified project.';
          in: 'query';
          name: 'projectId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the field is not found or does not support options.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get visible issue field options';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldKey}/option/{optionId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an option from a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'deleteIssueFieldOption';
      parameters: [
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the option to be deleted.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the field option is deleted.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.';
        };
        '404': {
          description: 'Returned if the field or option is not found.';
        };
        '409': {
          description: 'Returned if the option is selected for the field in any issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue field option';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns an option from a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'getIssueFieldOption';
      parameters: [
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the option to be returned.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}';
              schema: {
                $ref: '#/components/schemas/IssueFieldOption';
              };
            };
          };
          description: 'Returned if the requested option is returned.';
        };
        '400': {
          description: 'Returned if the field is not found or does not support options.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.';
        };
        '404': {
          description: 'Returned if the option is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue field option';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'updateIssueFieldOption';
      parameters: [
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the option to be updated.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              config: {
                attributes: [];
                scope: {
                  global: {};
                  projects: [];
                  projects2: [
                    {
                      attributes: ['notSelectable'];
                      id: 1001;
                    },
                    {
                      attributes: ['notSelectable'];
                      id: 1002;
                    },
                  ];
                };
              };
              id: 1;
              properties: {
                description: "The team's description";
                founded: '2016-06-06';
                leader: {
                  email: 'lname@example.com';
                  name: 'Leader Name';
                };
                members: 42;
              };
              value: 'Team 1';
            };
            schema: {
              $ref: '#/components/schemas/IssueFieldOption';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}';
              schema: {
                $ref: '#/components/schemas/IssueFieldOption';
              };
            };
          };
          description: 'Returned if the option is updated or created.';
        };
        '400': {
          description: 'Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.';
        };
        '404': {
          description: 'Returned if field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue field option';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{fieldKey}/option/{optionId}/issue': {
    delete: {
      deprecated: false;
      description: 'Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.\n\nConnect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.\n\nThis is an [asynchronous operation](#async). The response object contains a link to the long-running task.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.';
      operationId: 'replaceIssueFieldOption';
      parameters: [
        {
          description: 'The ID of the option that will replace the currently selected option.';
          in: 'query';
          name: 'replaceWith';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'A JQL query that specifies the issues to be updated. For example, *project=10000*.';
          in: 'query';
          name: 'jql';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.';
          in: 'query';
          name: 'overrideScreenSecurity';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`';
          in: 'path';
          name: 'fieldKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the option to be deselected.';
          in: 'path';
          name: 'optionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Remove option 1 from issues matched by \'*\', and replace with option 3","status":"COMPLETE","result":{"errors":{"errorMessages":["Option 2 cannot be set on issue MKY-5 as it is not in the correct scope"],"errors":{},"httpStatusCode":{"empty":false,"present":true}},"modifiedIssues":[10001,10010],"unmodifiedIssues":[10005]},"elapsedRuntime":42}';
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult';
              };
            };
          };
          description: 'Returned if the long-running task to deselect the option is started.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Connect and Forge app users with Administer Jira global permission can override screen security."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field is not found or does not support options, or the options to be replaced are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Replace issue field option';
      tags: ['Issue custom field options (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field.option:jira', 'delete:field.option:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteCustomField';
      parameters: [
        {
          description: 'The ID of a custom field.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if any of these are true:\n\n *  The custom field is locked.\n *  The custom field is used in a issue security scheme or a permission scheme.\n *  The custom field ID format is incorrect.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the custom field is not found.';
        };
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a task to delete the custom field is running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete custom field';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{id}/restore': {
    post: {
      deprecated: false;
      description: 'Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'restoreCustomField';
      parameters: [
        {
          description: 'The ID of a custom field.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Restore custom field from trash';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/field/{id}/trash': {
    post: {
      deprecated: false;
      description: 'Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'trashCustomField';
      parameters: [
        {
          description: 'The ID of a custom field.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the custom field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Move custom field to trash';
      tags: ['Issue fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfiguration': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:\n\n *  a list of field configuration item IDs.\n *  whether the field configuration is a default.\n *  whether the field configuration name or description contains a query string.\n\nOnly field configurations used in company-managed (classic) projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllFieldConfigurations';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'If *true* returns default field configurations only.';
          in: 'query';
          name: 'isDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The query string used to match against field configuration names and descriptions.';
          in: 'query';
          name: 'query';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"id":10000,"name":"Default Field Configuration","description":"The default field configuration description","isDefault":true},{"id":10001,"name":"My Field Configuration","description":"My field configuration description"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all field configurations';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.\n\nThis operation can only create configurations for use in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createFieldConfiguration';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My field configuration description';
              name: 'My Field Configuration';
            };
            schema: {
              $ref: '#/components/schemas/FieldConfigurationDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"My field configuration description","id":10001,"name":"My Field Configuration"}';
              schema: {
                $ref: '#/components/schemas/FieldConfiguration';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create field configuration';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration:jira', 'write:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfiguration/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a field configuration.\n\nThis operation can only delete configurations used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteFieldConfiguration';
      parameters: [
        {
          description: 'The ID of the field configuration.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete field configuration';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a field configuration. The name and the description provided in the request override the existing values.\n\nThis operation can only update configurations used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateFieldConfiguration';
      parameters: [
        {
          description: 'The ID of the field configuration.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A brand new description';
              name: 'My Modified Field Configuration';
            };
            schema: {
              $ref: '#/components/schemas/FieldConfigurationDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update field configuration';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfiguration/{id}/fields': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all fields for a configuration.\n\nOnly the fields from configurations used in company-managed (classic) projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getFieldConfigurationItems';
      parameters: [
        {
          description: 'The ID of the field configuration.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"description":"For example operating system, software platform and/or hardware specifications (include as appropriate for the issue).","id":"environment","isHidden":false,"isRequired":false},{"id":"description","isHidden":false,"isRequired":false}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationItem';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get field configuration items';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.\n\nThis operation can only update field configurations used in company-managed (classic) projects.\n\nThe operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateFieldConfigurationItems';
      parameters: [
        {
          description: 'The ID of the field configuration.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldConfigurationItems: [
                {
                  description: 'The new description of this item.';
                  id: 'customfield_10012';
                  isHidden: false;
                },
                {
                  id: 'customfield_10011';
                  isRequired: true;
                },
                {
                  description: 'Another new description.';
                  id: 'customfield_10010';
                  isHidden: false;
                  isRequired: false;
                  renderer: 'wiki-renderer';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/FieldConfigurationItemsDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update field configuration items';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of field configuration schemes.\n\nOnly field configuration schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllFieldConfigurationSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":10,"startAt":0,"total":3,"values":[{"id":"10000","name":"Field Configuration Scheme for Bugs","description":"This field configuration scheme is for bugs only."},{"id":"10001","name":"Field Configuration Scheme for software related projects","description":"We can use this one for software projects."},{"id":"10002","name":"Field Configuration Scheme for Epics","description":"Use this one for Epic issue type."}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all field configuration schemes';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a field configuration scheme.\n\nThis operation can only create field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createFieldConfigurationScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'We can use this one for software projects.';
              name: 'Field Configuration Scheme for software related projects';
            };
            schema: {
              $ref: '#/components/schemas/UpdateFieldConfigurationSchemeDetails';
            };
          };
        };
        description: 'The details of the field configuration scheme.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"description":"We can use this one for software projects.","id":"10002","name":"Field Configuration Scheme for software related projects"}';
              schema: {
                $ref: '#/components/schemas/FieldConfigurationScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A field configuration scheme is using this name."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create field configuration scheme';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration-scheme:jira', 'read:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme/mapping': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of field configuration issue type items.\n\nOnly items used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getFieldConfigurationSchemeMappings';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.';
          in: 'query';
          name: 'fieldConfigurationSchemeId';
          schema: {
            items: {
              example: 10020;
              format: 'int64';
              type: 'integer';
            };
            maxItems: 50;
            minItems: 1;
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":5,"values":[{"fieldConfigurationSchemeId":"10020","issueTypeId":"10000","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10020","issueTypeId":"10001","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10021","issueTypeId":"10002","fieldConfigurationId":"10000"},{"fieldConfigurationSchemeId":"10022","issueTypeId":"default","fieldConfigurationId":"10011"},{"fieldConfigurationSchemeId":"10023","issueTypeId":"default","fieldConfigurationId":"10000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationIssueTypeItem';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if no field configuration schemes are found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get field configuration issue type items';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme/project': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.\n\nThe list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.\n\nOnly field configuration schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getFieldConfigurationSchemeProjectMapping';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          required: true;
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":5,"values":[{"projectIds":["10","11"]},{"fieldConfigurationScheme":{"id":"10002","name":"Field Configuration Scheme for software related projects","description":"We can use this one for software projects."},"projectIds":["12","13","14"]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationSchemeProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get field configuration schemes for projects';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.\n\nField configuration schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'assignFieldConfigurationSchemeToProject';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldConfigurationSchemeId: '10000';
              projectId: '10000';
            };
            schema: {
              $ref: '#/components/schemas/FieldConfigurationSchemeProjectAssociation';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only classic projects can have field configuration schemes assigned."],"errors":{}}';
            };
          };
          description: 'Returned if the project is not a classic project.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The project was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the project is missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign field configuration scheme to project';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a field configuration scheme.\n\nThis operation can only delete field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteFieldConfigurationScheme';
      parameters: [
        {
          description: 'The ID of the field configuration scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete field configuration scheme';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a field configuration scheme.\n\nThis operation can only update field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateFieldConfigurationScheme';
      parameters: [
        {
          description: 'The ID of the field configuration scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'We can use this one for software projects.';
              name: 'Field Configuration Scheme for software related projects';
            };
            schema: {
              $ref: '#/components/schemas/UpdateFieldConfigurationSchemeDetails';
            };
          };
        };
        description: 'The details of the field configuration scheme.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A field configuration scheme is using this name."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The field configuration scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the field configuration scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update field configuration scheme';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme/{id}/mapping': {
    put: {
      deprecated: false;
      description: 'Assigns issue types to field configurations on field configuration scheme.\n\nThis operation can only modify field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setFieldConfigurationSchemeMapping';
      parameters: [
        {
          description: 'The ID of the field configuration scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              mappings: [
                {
                  fieldConfigurationId: '10000';
                  issueTypeId: 'default';
                },
                {
                  fieldConfigurationId: '10002';
                  issueTypeId: '10001';
                },
                {
                  fieldConfigurationId: '10001';
                  issueTypeId: '10002';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/AssociateFieldConfigurationsWithIssueTypesRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field configuration scheme, the field configuration, or the issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign issue types to field configurations';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration-scheme:jira', 'read:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete': {
    post: {
      deprecated: false;
      description: 'Removes issue types from the field configuration scheme.\n\nThis operation can only modify field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeIssueTypesFromGlobalFieldConfigurationScheme';
      parameters: [
        {
          description: 'The ID of the field configuration scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10001', '10002'];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeIdsToRemove';
            };
          };
        };
        description: 'The issue type IDs to remove.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issueTypeIds must not contain duplicates."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The field configuration scheme was not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the field configuration scheme or the issue types are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove issue types from field configuration scheme';
      tags: ['Issue field configurations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:field-configuration-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter': {
    post: {
      deprecated: false;
      description: 'Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'createFilter';
      parameters: [
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideSharePermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Lists all open bugs';
              jql: 'type = Bug and resolution is empty';
              name: 'All Open Bugs';
            };
            schema: {
              $ref: '#/components/schemas/Filter';
            };
          };
        };
        description: 'The filter to create.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"approximateLastUsed":null,"description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}';
              schema: {
                $ref: '#/components/schemas/Filter';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create filter';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:filter:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/defaultShareScope': {
    get: {
      deprecated: false;
      description: 'Returns the default sharing settings for new filters and dashboards for a user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getDefaultShareScope';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"scope":"GLOBAL"}';
              schema: {
                $ref: '#/components/schemas/DefaultShareScope';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get default share scope';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:filter.default-share-scope:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the default sharing for new filters and dashboards for a user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'setDefaultShareScope';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: 'GLOBAL';
            };
            schema: {
              $ref: '#/components/schemas/DefaultShareScope';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"scope":"GLOBAL"}';
              schema: {
                $ref: '#/components/schemas/DefaultShareScope';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if an invalid scope is set.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set default share scope';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:filter.default-share-scope:jira', 'read:filter.default-share-scope:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/favourite': {
    get: {
      deprecated: false;
      description: 'Returns the visible favorite filters of the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.\n\nFor example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.';
      operationId: 'getFavouriteFilters';
      parameters: [
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","favourite":true,"favouritedCount":0,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Filter';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get favorite filters';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/my': {
    get: {
      deprecated: false;
      description: "Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.\n\nFor example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.";
      operationId: 'getMyFilters';
      parameters: [
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: "Include the user's favorite filters in the response.";
          in: 'query';
          name: 'includeFavourites';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","favourite":true,"favouritedCount":0,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Filter';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get my filters';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of filters. Use this operation to get:\n\n *  specific filters, by defining `id` only.\n *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.';
      operationId: 'getFiltersPaginated';
      parameters: [
        {
          description: 'String used to perform a case-insensitive partial match with `name`.';
          in: 'query';
          name: 'filterName';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            minLength: 0;
            type: 'string';
          };
        },
        {
          description: 'This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.';
          in: 'query';
          name: 'owner';
          schema: {
            type: 'string';
          };
        },
        {
          description: "As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.';
          in: 'query';
          name: 'projectId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter name.\n *  `owner` Sorts by the ID of the filter owner.\n *  `is_shared` Sorts by whether the filter is shared.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: 'name';
            enum: [
              'description',
              '-description',
              '+description',
              'favourite_count',
              '-favourite_count',
              '+favourite_count',
              'id',
              '-id',
              '+id',
              'is_favourite',
              '-is_favourite',
              '+is_favourite',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
              'is_shared',
              '-is_shared',
              '+is_shared',
            ];
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the filter.\n *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.\n *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.\n *  `jql` Returns the JQL query that the filter uses.\n *  `owner` Returns the owner of the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL query.\n *  `sharePermissions` Returns the share permissions defined for the filter.\n *  `editPermissions` Returns the edit permissions defined for the filter.\n *  `isWritable` Returns whether the current user has permission to edit the filter.\n *  `approximateLastUsed` \\[Experimental\\] Returns the approximate date and time when the filter was last evaluated.\n *  `subscriptions` Returns the users that are subscribed to the filter.\n *  `viewUrl` Returns a URL to view the filter.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideSharePermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/filter/search?accountId=&maxResults=50&filterName=&orderBy=name&startAt=0&expand=description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,subscriptions,approximateLastUsed","startAt":0,"total":2,"values":[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","editPermissions":[],"expand":"description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,approximateLastUsed,subscriptions","favourite":false,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":[],"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","editPermissions":[{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}],"expand":"description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,approximateLastUsed,subscriptions","favourite":true,"favouritedCount":123,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":[{"id":1,"user":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}}],"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanFilterDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  `owner` and `accountId` are provided.\n *  `expand` includes an invalid value.\n *  `orderBy` is invalid.\n *  `id` identifies more than 200 filter IDs.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for filters';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/{id}': {
    delete: {
      deprecated: false;
      description: 'Delete a filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteFilter';
      parameters: [
        {
          description: 'The ID of the filter to delete.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the filter is not found.';
        };
        '401': {
          description: 'Returned if the user does not have permission to delete the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete filter';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:filter:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a filter.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, the filter is only returned where it is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.';
      operationId: 'getFilter';
      parameters: [
        {
          description: 'The ID of the filter to return.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideSharePermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}';
              schema: {
                $ref: '#/components/schemas/Filter';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the filter is not found or the user does not have permission to view it.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get filter';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.";
      operationId: 'updateFilter';
      parameters: [
        {
          description: 'The ID of the filter to update.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideSharePermissions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Lists all open bugs';
              jql: 'type = Bug and resolution is empty';
              name: 'All Open Bugs';
            };
            schema: {
              $ref: '#/components/schemas/Filter';
            };
          };
        };
        description: 'The filter to update.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}';
              schema: {
                $ref: '#/components/schemas/Filter';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update filter';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:filter:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/{id}/columns': {
    delete: {
      deprecated: false;
      description: "Reset the user's column configuration for the filter to the default.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.";
      operationId: 'resetColumns';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Reset columns';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['delete:filter.column:jira'];
          state: 'Beta';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, column details are only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.";
      operationId: 'getColumns';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the user does not have permission to view the filter.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if a column configuration is not set for the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get columns';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:filter.column:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.\n\nThe parameters for this resource are expressed as HTML form data. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.';
      operationId: 'setColumns';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody';
            };
          };
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody';
            };
          };
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody';
            };
          };
        };
        description: 'The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  a non-navigable field is set as a column.\n *  the user does not have permission to view the filter.';
        };
        '403': {
          description: 'Returned if the requesting user is not an owner of the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set columns';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:filter.column:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/{id}/favourite': {
    delete: {
      deprecated: false;
      description: "Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.\n\n**[Permissions](#permissions) required:** Permission to access Jira.";
      operationId: 'deleteFavouriteForFilter';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}';
              schema: {
                $ref: '#/components/schemas/Filter';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Remove filter as favorite';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:filter:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Add a filter as a favorite for the user.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.';
      operationId: 'setFavouriteForFilter';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}';
              schema: {
                $ref: '#/components/schemas/Filter';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to favorite the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add filter as favorite';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:filter:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/{id}/owner': {
    put: {
      deprecated: false;
      description: 'Changes the owner of the filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'changeFilterOwner';
      parameters: [
        {
          description: 'The ID of the filter to update.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '0000-0000-0000-0000';
            };
            schema: {
              $ref: '#/components/schemas/ChangeFilterOwner';
            };
          };
        };
        description: 'The account ID of the new owner of the filter.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned when:\n\n *  The new owner of the filter owns a filter with the same name.\n *  An attempt is made to change owner of the default filter.';
        };
        '403': {
          description: 'Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission.';
        };
        '404': {
          description: 'Returned if the filter or the new owner of the filter is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Change filter owner';
      tags: ['Filters'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:filter:jira', 'write:filter:jira'];
          state: 'Beta';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/filter/{id}/permission': {
    get: {
      deprecated: false;
      description: 'Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, share permissions are only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.';
      operationId: 'getSharePermissions';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/SharePermission';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get share permissions';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.\n\nBe aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).\n\n**[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.';
      operationId: 'addSharePermission';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              groupname: 'jira-administrators';
              rights: 1;
              type: 'group';
            };
            schema: {
              $ref: '#/components/schemas/SharePermissionInputBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/SharePermission';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.\n *  the user does not own the filter.\n *  the user does not have the required permissions.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add share permission';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:filter:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/filter/{id}/permission/{permissionId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a share permission from a filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.';
      operationId: 'deleteSharePermission';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the share permission.';
          in: 'path';
          name: 'permissionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not own the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete share permission';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:filter:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, a share permission is only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.';
      operationId: 'getSharePermission';
      parameters: [
        {
          description: 'The ID of the filter.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the share permission.';
          in: 'path';
          name: 'permissionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"type":"global"}';
              schema: {
                $ref: '#/components/schemas/SharePermission';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the permission is not found.\n *  the user does not have permission to view the filter.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get share permission';
      tags: ['Filter sharing'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/group': {
    delete: {
      deprecated: false;
      description: 'Deletes a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).';
      operationId: 'removeGroup';
      parameters: [
        {
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupname` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: "As a group's name can change, use of `swapGroupId` is recommended to identify a group.  \nThe group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.";
          in: 'query';
          name: 'swapGroup';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.';
          in: 'query';
          name: 'swapGroupId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the group name is not specified.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the group is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:group:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: true;
      description: 'This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).\n\nReturns all users in a group.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getGroup';
      parameters: [
        {
          description: "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'List of fields to expand.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Group';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the group name is not specified.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the calling user does not have the Administer Jira global permission.';
        };
        '404': {
          description: 'Returned if the group is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).';
      operationId: 'createGroup';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'power-users';
            };
            schema: {
              $ref: '#/components/schemas/AddGroupBean';
            };
          };
        };
        description: 'The name of the group.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"expand":"users","groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"power-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625","users":{"end-index":0,"items":[{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}],"max-results":50,"size":1,"start-index":0}}';
              schema: {
                $ref: '#/components/schemas/Group';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if group name is not specified or the group name is in use.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira', 'read:user:jira', 'write:group:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/group/bulk': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of groups.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'bulkGetGroups';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.';
          in: 'query';
          name: 'groupId';
          schema: {
            example: '3571b9a7-348f-414a-9087-8e1ea03a7df8';
            items: {
              default: '';
              example: '3571b9a7-348f-414a-9087-8e1ea03a7df8';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.';
          in: 'query';
          name: 'groupName';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: "The access level of a group. Valid values: 'site-admin', 'admin', 'user'.";
          in: 'query';
          name: 'accessType';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.";
          in: 'query';
          name: 'applicationKey';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":10,"startAt":0,"total":2,"values":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","name":"juvenal-bot"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanGroupDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Browse users and groups permission is required to view groups."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '500': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Couldn\'t retrieve groups with the site-admin accessType."],"errors":{}}';
            };
          };
          description: "Returned if the group with the given access level can't be retrieved.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Bulk get groups';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/group/member': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all users in a group.\n\nNote that users are ordered by username, however the username is not returned in the results due to privacy reasons.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getUsersFromGroup';
      parameters: [
        {
          description: "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'Include inactive users.';
          in: 'query';
          name: 'includeInactiveUsers';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/group/member?groupId=276f955c-63d7-42c8-9520-92d01dca0625&includeInactiveUsers=false&startAt=4&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/group/member?groupId=276f955c-63d7-42c8-9520-92d01dca0625&includeInactiveUsers=false&startAt=2&maxResults=2","startAt":3,"total":5,"values":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"avatarUrls":{},"displayName":"Mia","emailAddress":"mia@example.com","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},{"accountId":"5b10a0effa615349cb016cd8","accountType":"atlassian","active":false,"avatarUrls":{},"displayName":"Will","emailAddress":"will@example.com","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a0effa615349cb016cd8","timeZone":"Australia/Sydney"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanUserDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the group name is not specified.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the calling user does not have the Administer Jira global permission.';
        };
        '404': {
          description: 'Returned if the group is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get users from group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/group/user': {
    delete: {
      deprecated: false;
      description: 'Removes a user from a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).';
      operationId: 'removeUserFromGroup';
      parameters: [
        {
          description: "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `groupName` is missing.\n *  `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the group or user are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove user from group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:group:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a user to a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).';
      operationId: 'addUserToGroup';
      parameters: [
        {
          description: "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.";
          in: 'query';
          name: 'groupname';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10ac8d82e05b22cc7d4ef5';
            };
            schema: {
              $ref: '#/components/schemas/UpdateUserToGroupBean';
            };
          };
        };
        description: 'The user to add to the group.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Group';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `groupname` is not provided.\n *  `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.';
        };
        '403': {
          description: 'Returned if the calling user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the group or user are not found.';
        };
        '429': {
          description: 'Returned if rate limiting is being enforced.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add user to group';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:group:jira', 'read:avatar:jira', 'read:group:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/groups/picker': {
    get: {
      deprecated: false;
      description: 'Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.\n\nThe primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.\n\nThe list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.\n\n*Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.';
      operationId: 'findGroups';
      parameters: [
        {
          description: 'This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).';
          in: 'query';
          name: 'accountId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The string to find in group names.';
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
        },
        {
          description: "As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  \nA group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.";
          in: 'query';
          name: 'exclude';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.';
          in: 'query';
          name: 'excludeId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.';
          in: 'query';
          name: 'maxResults';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Whether the search for groups should be case insensitive.';
          in: 'query';
          name: 'caseInsensitive';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'userName';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"groups":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","html":"<b>j</b>dog-developers","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","html":"<b>j</b>uvenal-bot","name":"juvenal-bot"}],"header":"Showing 20 of 25 matching groups","total":25}';
              schema: {
                $ref: '#/components/schemas/FoundGroups';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find groups';
      tags: ['Groups'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/groupuserpicker': {
    get: {
      deprecated: false;
      description: 'Returns a list of users and groups matching a string. The string is used:\n\n *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.\n *  for groups, to find a case-sensitive match with group name.\n\nFor example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.\n\nOptionally, the search can be refined to:\n\n *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:\n    \n     *  projects.\n     *  issue types.\n    \n    If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.\n *  not return Connect app users and groups.\n *  return groups that have a case-insensitive match with the query.\n\nThe primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'findUsersAndGroups';
      parameters: [
        {
          description: 'The search string.';
          in: 'query';
          name: 'query';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return in each list.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Whether the user avatar should be returned. If an invalid value is provided, the default value is used.';
          in: 'query';
          name: 'showAvatar';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The custom field ID of the field this request is for.';
          in: 'query';
          name: 'fieldId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.';
          in: 'query';
          name: 'issueTypeId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The size of the avatar to return. If an invalid value is provided, the default value is used.';
          in: 'query';
          name: 'avatarSize';
          schema: {
            default: 'xsmall';
            enum: [
              'xsmall',
              'xsmall@2x',
              'xsmall@3x',
              'small',
              'small@2x',
              'small@3x',
              'medium',
              'medium@2x',
              'medium@3x',
              'large',
              'large@2x',
              'large@3x',
              'xlarge',
              'xlarge@2x',
              'xlarge@3x',
              'xxlarge',
              'xxlarge@2x',
              'xxlarge@3x',
              'xxxlarge',
              'xxxlarge@2x',
              'xxxlarge@3x',
            ];
            type: 'string';
          };
        },
        {
          description: 'Whether the search for groups should be case insensitive.';
          in: 'query';
          name: 'caseInsensitive';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.';
          in: 'query';
          name: 'excludeConnectAddons';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"groups":{"groups":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","html":"<b>j</b>dog-developers","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","html":"<b>j</b>uvenal-bot","name":"juvenal-bot"}],"header":"Showing 20 of 25 matching groups","total":25},"users":{"header":"Showing 20 of 25 matching groups","total":25,"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","displayName":"Mia Krystof","html":"<strong>Mi</strong>a Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","key":"mia","name":"mia"}]}}';
              schema: {
                $ref: '#/components/schemas/FoundUsersAndGroups';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the query parameter is not provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Find users and groups';
      tags: ['Group and user picker'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/instance/license': {
    get: {
      deprecated: false;
      description: 'Returns licensing information about the Jira instance.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getLicense';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"applications":[{"id":"jira-core","plan":"PAID"},{"id":"jira-product-discovery","plan":"FREE"},{"id":"jira-servicedesk","plan":"FREE"},{"id":"jira-software","plan":"PAID"}]}';
              schema: {
                $ref: '#/components/schemas/License';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get license';
      tags: ['License metrics'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:license:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue': {
    post: {
      deprecated: false;
      description: "Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.\n\nThe content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nCreating a subtask differs from creating an issue as follows:\n\n *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).\n *  `parent` must contain the ID or key of the parent issue.\n\nIn a next-gen project any issue may be made a child providing that the parent and child are members of the same project.\n\n**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.";
      operationId: 'createIssue';
      parameters: [
        {
          description: "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.";
          in: 'query';
          name: 'updateHistory';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                assignee: {
                  id: '5b109f2e9729b51b54dc274d';
                };
                components: [
                  {
                    id: '10000';
                  },
                ];
                customfield_10000: '09/Jun/19';
                customfield_20000: '06/Jul/19 3:25 PM';
                customfield_30000: ['10000', '10002'];
                customfield_40000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Occurs on all orders';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                customfield_50000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Could impact day-to-day work.';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                customfield_60000: 'jira-software-users';
                customfield_70000: ['jira-administrators', 'jira-software-users'];
                customfield_80000: {
                  value: 'red';
                };
                description: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Order entry fails when selecting supplier.';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                duedate: '2019-05-11';
                environment: {
                  content: [
                    {
                      content: [
                        {
                          text: 'UAT';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                fixVersions: [
                  {
                    id: '10001';
                  },
                ];
                issuetype: {
                  id: '10000';
                };
                labels: ['bugfix', 'blitz_test'];
                parent: {
                  key: 'PROJ-123';
                };
                priority: {
                  id: '20000';
                };
                project: {
                  id: '10000';
                };
                reporter: {
                  id: '5b10a2844c20165700ede21g';
                };
                security: {
                  id: '10000';
                };
                summary: 'Main order flow broken';
                timetracking: {
                  originalEstimate: '10';
                  remainingEstimate: '5';
                };
                versions: [
                  {
                    id: '10000';
                  },
                ];
              };
              update: {};
            };
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}}';
              schema: {
                $ref: '#/components/schemas/CreatedIssue';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Field \'priority\' is required"],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request:\n\n *  is missing required fields.\n *  contains invalid field values.\n *  contains fields that cannot be set for the issue type.\n *  is by a user who does not have the necessary permission.\n *  is to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  is invalid for any other reason.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a configuration problem prevents the creation of the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:issue:jira',
            'write:comment:jira',
            'write:comment.property:jira',
            'write:attachment:jira',
            'read:issue:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/archive': {
    post: {
      deprecated: false;
      description: "Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.\n\nYou can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.\n\n**Note that:**\n\n *  you can't archive subtasks directly, only through their parent issues\n *  you can only archive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n**Rate limiting:** Only a single request per jira instance can be active at any given time.\n\n  \n";
      operationId: 'archiveIssuesAsync';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = FOO AND updated < -2y';
            };
            schema: {
              $ref: '#/components/schemas/ArchiveIssueAsyncRequest';
            };
          };
        };
        description: 'A JQL query specifying the issues to archive. Note that subtasks can only be archived through their parent issues.';
        required: true;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              example: '"https://your-domain.atlassian.net/rest/api/3/task/1010"';
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returns the URL to check the status of the submitted request.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Invalid JQL. Bad request."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were archived due to a bad request, for example an invalid JQL query.';
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Archiving issues is only available for premium editions of Jira."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.';
        };
        '412': {
          content: {
            'application/json': {
              example: '{"errorMessages":["An issue archival task is already running with ID 1010. To start a new one, cancel the task or wait for it to finish."],"errors":{}}';
            };
          };
          description: 'Returned if a request to archive issue(s) is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Archive issue(s) by JQL';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: "Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.\n\n**Note that:**\n\n *  you can't archive subtasks directly, only through their parent issues\n *  you can only archive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n  \n";
      operationId: 'archiveIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIdsOrKeys: ['PR-1', '1001', 'PROJECT-2'];
            };
            schema: {
              $ref: '#/components/schemas/IssueArchivalSyncRequest';
            };
          };
        };
        description: 'Contains a list of issue keys or IDs to be archived.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errors":{"issueIsSubtask":{"count":3,"issueIdsOrKeys":["ST-1","ST-2","ST-3"],"message":"Issue is subtask."},"issuesInArchivedProjects":{"count":2,"issueIdsOrKeys":["AR-1","AR-2"],"message":"Issue exists in archived project."},"issuesInUnlicensedProjects":{"count":3,"issueIdsOrKeys":["UL-1","UL-2","UL-3"],"message":"Issues with these IDs are in unlicensed projects."},"issuesNotFound":{"count":3,"issueIdsOrKeys":["PR-1","PR-2","PR-3"],"message":"Issue not found."}},"numberOfIssuesUpdated":10}';
              schema: {
                $ref: '#/components/schemas/IssueArchivalSyncResponse';
              };
            };
          };
          description: 'Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["No valid issue to archive or unarchive. Bad request."],"errors":{}}';
            };
          };
          description: "Returned if none of the issues in the request can be archived. Possible reasons:\n\n *  the issues weren't found\n *  the issues are subtasks\n *  the issues belong to unlicensed projects\n *  the issues belong to archived projects";
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only admins can archive or unarchive issues. Access denied."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.';
        };
        '412': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The number of issues to archive or unarchive exceeds the hard limit of 1000. Precondition failed."],"errors":{}}';
            };
          };
          description: 'Returned if one or more issues were successfully archived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Archive issue(s) by issue ID/key';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue/bulk': {
    post: {
      deprecated: false;
      description: "Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.\n\nThe content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nCreating a subtask differs from creating an issue as follows:\n\n *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).\n *  `parent` the must contain the ID or key of the parent issue.\n\n**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.";
      operationId: 'createIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueUpdates: [
                {
                  fields: {
                    assignee: {
                      id: '5b109f2e9729b51b54dc274d';
                    };
                    components: [
                      {
                        id: '10000';
                      },
                    ];
                    customfield_10000: '09/Jun/19';
                    customfield_20000: '06/Jul/19 3:25 PM';
                    customfield_30000: ['10000', '10002'];
                    customfield_40000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Occurs on all orders';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    customfield_50000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Could impact day-to-day work.';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    customfield_60000: 'jira-software-users';
                    customfield_70000: ['jira-administrators', 'jira-software-users'];
                    customfield_80000: {
                      value: 'red';
                    };
                    description: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Order entry fails when selecting supplier.';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    duedate: '2011-03-11';
                    environment: {
                      content: [
                        {
                          content: [
                            {
                              text: 'UAT';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    fixVersions: [
                      {
                        id: '10001';
                      },
                    ];
                    issuetype: {
                      id: '10000';
                    };
                    labels: ['bugfix', 'blitz_test'];
                    priority: {
                      id: '20000';
                    };
                    project: {
                      id: '10000';
                    };
                    reporter: {
                      id: '5b10a2844c20165700ede21g';
                    };
                    security: {
                      id: '10000';
                    };
                    summary: 'Main order flow broken';
                    timetracking: {
                      originalEstimate: '10';
                      remainingEstimate: '5';
                    };
                    versions: [
                      {
                        id: '10000';
                      },
                    ];
                  };
                  update: {
                    worklog: [
                      {
                        add: {
                          started: '2019-07-05T11:05:00.000+0000';
                          timeSpent: '60m';
                        };
                      },
                    ];
                  };
                },
                {
                  fields: {
                    assignee: {
                      id: '5b109f2e9729b51b54dc274d';
                    };
                    components: [
                      {
                        id: '10000';
                      },
                    ];
                    customfield_10000: '09/Jun/19';
                    customfield_20000: '06/Jul/19 3:25 PM';
                    customfield_30000: ['10000', '10002'];
                    customfield_40000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Occurs on all orders';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    customfield_50000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Could impact day-to-day work.';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    customfield_60000: 'jira-software-users';
                    customfield_70000: ['jira-administrators', 'jira-software-users'];
                    customfield_80000: {
                      value: 'red';
                    };
                    description: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Order remains pending after approved.';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    duedate: '2019-04-16';
                    environment: {
                      content: [
                        {
                          content: [
                            {
                              text: 'UAT';
                              type: 'text';
                            },
                          ];
                          type: 'paragraph';
                        },
                      ];
                      type: 'doc';
                      version: 1;
                    };
                    fixVersions: [
                      {
                        id: '10001';
                      },
                    ];
                    issuetype: {
                      id: '10000';
                    };
                    labels: ['new_release'];
                    priority: {
                      id: '20000';
                    };
                    project: {
                      id: '1000';
                    };
                    reporter: {
                      id: '5b10a2844c20165700ede21g';
                    };
                    security: {
                      id: '10000';
                    };
                    summary: 'Order stuck in pending';
                    timetracking: {
                      originalEstimate: '15';
                      remainingEstimate: '5';
                    };
                    versions: [
                      {
                        id: '10000';
                      },
                    ];
                  };
                  update: {};
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/IssuesUpdateBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"issues":[{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}},{"id":"10001","key":"ED-25","self":"https://your-domain.atlassian.net/rest/api/3/issue/10001"}],"errors":[]}';
              schema: {
                $ref: '#/components/schemas/CreatedIssues';
              };
            };
          };
          description: 'Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:\n\n *  is missing required fields.\n *  contains invalid field values.\n *  contains fields that cannot be set for the issue type.\n *  is by a user who does not have the necessary permission.\n *  is to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  is invalid for any other reason.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"issues":[],"errors":[{"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The issue type selected is invalid.","project":"Sub-tasks must be created in the same project as the parent."}},"failedElementNumber":0,"status":400},{"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The issue type selected is invalid.","project":"Sub-tasks must be created in the same project as the parent."}},"failedElementNumber":1,"status":400}]}';
              schema: {
                $ref: '#/components/schemas/CreatedIssues';
              };
            };
          };
          description: 'Returned if all requests are invalid. Requests may be unsuccessful when they:\n\n *  are missing required fields.\n *  contain invalid field values.\n *  contain fields that cannot be set for the issue type.\n *  are by a user who does not have the necessary permission.\n *  are to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  are invalid for any other reason.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Bulk create issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:issue:jira',
            'write:comment:jira',
            'write:comment.property:jira',
            'write:attachment:jira',
            'read:issue:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/bulkfetch': {
    post: {
      deprecated: false;
      description: "Returns the details for a set of requested issues. You can request up to 100 issues.\n\nEach issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned.\n\nIssues will be returned in ascending `id` order. If there are errors, Jira will return a list of issues which couldn't be fetched along with error messages.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'bulkFetchIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              expand: ['names'];
              fields: ['summary', 'project', 'assignee'];
              fieldsByKeys: false;
              issueIdsOrKeys: ['EX-1', 'EX-2', '10005'];
              properties: [];
            };
            schema: {
              $ref: '#/components/schemas/BulkFetchIssueRequestBean';
            };
          };
        };
        description: 'A JSON object containing the information about which issues and fields to fetch.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expand":"schema,names","issueErrors":[],"issues":[{"expand":"","fields":{"summary":"My first example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10002","key":"EX-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"},{"expand":"","fields":{"summary":"My second example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10005","key":"EX-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/10003"},{"expand":"","fields":{"summary":"My fourth example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10005","key":"EX-4","self":"https://your-domain.atlassian.net/rest/api/3/issue/10005"}]}';
              schema: {
                $ref: '#/components/schemas/BulkIssueResults';
              };
            };
          };
          description: 'Returned if the request is successful. A response may contain both successful issues and issue errors.';
        };
        '400': {
          description: 'Returned if no issue IDs/keys were present, or more than 100 issue IDs/keys were requested.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Bulk fetch issues';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-meta:jira',
            'read:issue-security-level:jira',
            'read:issue.vote:jira',
            'read:issue.changelog:jira',
            'read:avatar:jira',
            'read:issue:jira',
            'read:status:jira',
            'read:user:jira',
            'read:field-configuration:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue/createmeta': {
    get: {
      deprecated: true;
      description: 'Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nDeprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).\n\nThe request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.';
      operationId: 'getCreateIssueMeta';
      parameters: [
        {
          description: 'List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.';
          in: 'query';
          name: 'projectIds';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.';
          in: 'query';
          name: 'projectKeys';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.';
          in: 'query';
          name: 'issuetypeIds';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.';
          in: 'query';
          name: 'issuetypeNames';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"projects":[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000&avatarId=10011","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000&avatarId=10011","48x48":"https://your-domain.atlassian.net/secure/projectavatar?pid=10000&avatarId=10011"},"id":"10000","issuetypes":[{"description":"An error in the code","fields":{"issuetype":{"allowedValues":["set"],"autoCompleteUrl":"issuetype","hasDefaultValue":false,"key":"issuetype","name":"Issue Type","required":true}},"iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","id":"1","name":"Bug","self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"ED","name":"Edison Project","self":"https://your-domain.atlassian.net/rest/api/3/project/ED"}]}';
              schema: {
                $ref: '#/components/schemas/IssueCreateMetadata';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get create issue metadata';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
      'x-changes': [
        {
          announced: '2023-12-11';
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304';
          effective: '2024-06-03';
          type: 'removed';
        },
      ];
    };
  };
  '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes': {
    get: {
      deprecated: false;
      description: 'Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.';
      operationId: 'getCreateIssueMetaIssueTypes';
      parameters: [
        {
          description: 'The ID or key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            maximum: 200;
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueTypes":[{"description":"An error in the code","iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","id":"1","name":"Bug","self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"maxResults":1,"startAt":0,"total":1}';
              schema: {
                $ref: '#/components/schemas/PageOfCreateMetaIssueTypes';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Parameter \'maxResults\' must not exceed the limit \'200\'"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get create metadata issue types for a project';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}': {
    get: {
      deprecated: false;
      description: 'Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.';
      operationId: 'getCreateIssueMetaIssueTypeId';
      parameters: [
        {
          description: 'The ID or key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The issuetype ID.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            maximum: 200;
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"fields":[{"fieldId":"assignee","hasDefaultValue":false,"key":"assignee","name":"Assignee","operations":["set"],"required":true}],"maxResults":1,"startAt":0,"total":1}';
              schema: {
                $ref: '#/components/schemas/PageOfCreateMetaIssueTypeWithField';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Parameter \'maxResults\' must not exceed the limit \'200\'"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get create field metadata for a project and issue type id';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/limit/report': {
    get: {
      deprecated: false;
      description: 'Returns all issues breaching and approaching per-issue limits.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueLimitReport';
      parameters: [
        {
          description: 'Return issue keys instead of issue ids in the response.\n\nUsage: Add `?isReturningKeys=true` to the end of the path to request issue keys.';
          in: 'query';
          name: 'isReturningKeys';
          schema: {
            default: false;
            type: 'boolean';
          };
          'x-showInExample': 'true';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueLimitReportRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issuesApproachingLimit":{"attachment":{"15070L":1822,"15111L":1999},"comment":{"10000L":4997,"15073L":4999,"15110L":5000},"remoteIssueLinks":{"15107L":2000},"worklog":{"15101L":10342}},"issuesBreachingLimit":{"attachment":{"15057L":2005,"15116L":2065,"15117L":3005},"comment":{"15055L":5202},"issuelinks":{"15058L":2120},"remoteIssueLinks":{"15059L":2094},"worklog":{"15056L":10085,"15169L":120864}},"limits":{"attachment":2000,"comment":5000,"issuelinks":2000,"remoteIssueLinks":2000,"worklog":10000}}';
              schema: {
                $ref: '#/components/schemas/IssueLimitReportResponseBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid. Other possible reasons:\n\n *  the field queried is not supported\n *  the threshold is not within the supported range';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to complete this request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get issue limit report';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira', 'read:issue:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue/picker': {
    get: {
      deprecated: false;
      description: "Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.\n\nThis operation returns two lists:\n\n *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.\n *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.";
      operationId: 'getIssuePickerResource';
      parameters: [
        {
          description: 'A string to match against text fields in the issue such as title, description, or comments.';
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.';
          in: 'query';
          name: 'currentJQL';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.';
          in: 'query';
          name: 'currentIssueKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of a project that suggested issues must belong to.';
          in: 'query';
          name: 'currentProjectId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Indicate whether to include subtasks in the suggestions list.';
          in: 'query';
          name: 'showSubTasks';
          schema: {
            type: 'boolean';
          };
        },
        {
          description: 'When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.';
          in: 'query';
          name: 'showSubTaskParent';
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssuePickerSuggestions';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue picker suggestions';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-details:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/properties': {
    post: {
      deprecated: false;
      description: 'Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.\n\nThis operation is:\n\n *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'bulkSetIssuesPropertiesList';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueEntityProperties';
            };
          };
        };
        description: 'Issue properties to be set or updated with values.';
        required: true;
      };
      responses: {
        '303': {
          description: 'Returned if the operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Return if the request is invalid or the user does not have the necessary permission.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk set issues properties by list';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/properties/multi': {
    post: {
      deprecated: false;
      description: 'Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.\n\nThis operation is:\n\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n *  non-transactional. Updating some entities may fail. Such information will available in the task result.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'bulkSetIssuePropertiesByIssue';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issues: [
                {
                  issueID: 1000;
                  properties: {
                    myProperty: {
                      owner: 'admin';
                      weight: 100;
                    };
                  };
                },
                {
                  issueID: 1001;
                  properties: {
                    myOtherProperty: {
                      cost: 150;
                      transportation: 'car';
                    };
                  };
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/MultiIssueEntityProperties';
            };
          };
        };
        description: 'Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored.';
        required: true;
      };
      responses: {
        '303': {
          description: 'Returned if the operation is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Return if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Return if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk set issue properties by issue';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.\n\nThe criteria the filter used to identify eligible issues are:\n\n *  `entityIds` Only issues from this list are eligible.\n *  `currentValue` Only issues with the property set to this value are eligible.\n\nIf both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.\n\nIf no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.\n\nThis operation is:\n\n *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.';
      operationId: 'bulkDeleteIssueProperty';
      parameters: [
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              currentValue: 'deprecated value';
              entityIds: [10100, 100010];
            };
            schema: {
              $ref: '#/components/schemas/IssueFilterForBulkPropertyDelete';
            };
          };
        };
        required: true;
      };
      responses: {
        '303': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk delete issue property';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets a property value on multiple issues.\n\nThe value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.\n\nThe issues to be updated can be specified by a filter.\n\nThe filter identifies issues eligible for update using these criteria:\n\n *  `entityIds` Only issues from this list are eligible.\n *  `currentValue` Only issues with the property set to this value are eligible.\n *  `hasProperty`:\n    \n     *  If *true*, only issues with the property are eligible.\n     *  If *false*, only issues without the property are eligible.\n\nIf more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.\n\nIf an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).\n\nThe filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.\n\nThis operation is:\n\n *  transactional, either all eligible issues are updated or, when errors occur, none are updated.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.';
      operationId: 'bulkSetIssueProperty';
      parameters: [
        {
          description: 'The key of the property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              filter: {
                currentValue: {
                  owner: 'admin';
                  weight: 50;
                };
                entityIds: [10100, 100010];
                hasProperty: true;
              };
              value: {
                owner: 'admin';
                weight: 100;
              };
            };
            schema: {
              $ref: '#/components/schemas/BulkIssuePropertyUpdateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '303': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Bulk set issue property';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-expressions:jira', 'write:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/unarchive': {
    put: {
      deprecated: false;
      description: "Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.\n\n**Note that:**\n\n *  you can't unarchive subtasks directly, only through their parent issues\n *  you can only unarchive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n  \n";
      operationId: 'unarchiveIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIdsOrKeys: ['PR-1', '1001', 'PROJECT-2'];
            };
            schema: {
              $ref: '#/components/schemas/IssueArchivalSyncRequest';
            };
          };
        };
        description: 'Contains a list of issue keys or IDs to be unarchived.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errors":{"issueIsSubtask":{"count":3,"issueIdsOrKeys":["ST-1","ST-2","ST-3"],"message":"Issue is subtask."},"issuesInArchivedProjects":{"count":2,"issueIdsOrKeys":["AR-1","AR-2"],"message":"Issue exists in archived project."},"issuesNotFound":{"count":3,"issueIdsOrKeys":["PR-1","PR-2","PR-3"],"message":"Issue not found."}},"numberOfIssuesUpdated":10}';
              schema: {
                $ref: '#/components/schemas/IssueArchivalSyncResponse';
              };
            };
          };
          description: 'Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["No valid issue to archive or unarchive. Bad request."],"errors":{}}';
            };
          };
          description: "Returned if none of the issues in the request are eligible to be unarchived. Possible reasons:\n\n *  the issues weren't found\n *  the issues are subtasks\n *  the issues belong to archived projects";
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only admins can archive or unarchive issues. Access denied."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.';
        };
        '412': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The number of issues to archive or unarchive exceeds the hard limit of 1000. Precondition failed."],"errors":{}}';
            };
          };
          description: 'Returned if one or more issues were successfully unarchived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Unarchive issue(s) by issue keys/ID';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue/watching': {
    post: {
      deprecated: false;
      description: 'Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getIsWatchingIssueBulk';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIds: ['10001', '10002', '10005'];
            };
            schema: {
              $ref: '#/components/schemas/IssueList';
            };
          };
        };
        description: 'A list of issue IDs.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issuesIsWatching":{"10001":true,"10002":false,"10005":true}}';
              schema: {
                $ref: '#/components/schemas/BulkIssueIsWatching';
              };
            };
          };
          description: 'Returned if the request is successful';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get is watching issue bulk';
      tags: ['Issue watchers'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.watcher:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}': {
    delete: {
      deprecated: false;
      description: "Deletes an issue.\n\nAn issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'deleteIssue';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: "Whether the issue's subtasks are deleted when the issue is deleted.";
          in: 'query';
          name: 'deleteSubtasks';
          schema: {
            default: 'false';
            enum: ['true', 'false'];
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to delete the issue.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the details for an issue.\n\nThe issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'getIssue';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.';
          in: 'query';
          name: 'fields';
          schema: {
            items: {
              default: '*all';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.";
          in: 'query';
          name: 'fieldsByKeys';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              default: 'null';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.";
          in: 'query';
          name: 'updateHistory';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).';
          in: 'query';
          name: 'failFast';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}';
              schema: {
                $ref: '#/components/schemas/IssueBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-meta:jira',
            'read:issue-security-level:jira',
            'read:issue.vote:jira',
            'read:issue.changelog:jira',
            'read:avatar:jira',
            'read:issue:jira',
            'read:status:jira',
            'read:user:jira',
            'read:field-configuration:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.\n\nThe edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).\n\nThe parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nConnect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'editIssue';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: "Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.";
          in: 'query';
          name: 'notifyUsers';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: 'Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideScreenSecurity';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).';
          in: 'query';
          name: 'returnIssue';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                customfield_10000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Investigation underway';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                customfield_10010: 1;
                summary: 'Completed orders still displaying in pending';
              };
              historyMetadata: {
                activityDescription: 'Complete order processing';
                actor: {
                  avatarUrl: 'http://mysystem/avatar/tony.jpg';
                  displayName: 'Tony';
                  id: 'tony';
                  type: 'mysystem-user';
                  url: 'http://mysystem/users/tony';
                };
                cause: {
                  id: 'myevent';
                  type: 'mysystem-event';
                };
                description: 'From the order testing process';
                extraData: {
                  Iteration: '10a';
                  Step: '4';
                };
                generator: {
                  id: 'mysystem-1';
                  type: 'mysystem-application';
                };
                type: 'myplugin:type';
              };
              properties: [
                {
                  key: 'key1';
                  value: 'Order number 10784';
                },
                {
                  key: 'key2';
                  value: 'Order number 10923';
                },
              ];
              update: {
                components: [
                  {
                    set: '';
                  },
                ];
                labels: [
                  {
                    add: 'triaged';
                  },
                  {
                    remove: 'blocker';
                  },
                ];
                summary: [
                  {
                    set: 'Bug in business logic';
                  },
                ];
                timetracking: [
                  {
                    edit: {
                      originalEstimate: '1w 1d';
                      remainingEstimate: '4d';
                    };
                  },
                ];
              };
            };
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful and the `returnIssue` parameter is `true`';
        };
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if:\n\n *  the request body is missing.\n *  the user does not have the necessary permission to edit one or more fields.\n *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.\n *  the request includes an invalid transition.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission.";
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
        '409': {
          description: 'Returned if the issue could not be updated due to a conflicting update.';
        };
        '422': {
          description: 'Returned if a configuration problem prevents the issue being updated.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Edit issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/assignee': {
    put: {
      deprecated: false;
      description: 'Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.\n\nIf `name` or `accountId` is set to:\n\n *  `"-1"`, the issue is assigned to the default assignee for the project.\n *  `null`, the issue is set to unassigned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'assignIssue';
      parameters: [
        {
          description: 'The ID or key of the issue to be assigned.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10ac8d82e05b22cc7d4ef5';
            };
            schema: {
              $ref: '#/components/schemas/User';
            };
          };
        };
        description: 'The request object with the user that the issue is assigned to.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the user is not found.\n *  `name`, `key`, or `accountId` is missing.\n *  more than one of `name`, `key`, and `accountId` are provided.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the issue is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Assign issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/attachments': {
    post: {
      deprecated: false;
      description: "Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).\n\nNote that:\n\n *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.\n *  The name of the multipart/form-data parameter that contains the attachments must be `file`.\n\nThe following examples upload a file called *myfile.txt* to the issue *TEST-123*:\n\n#### curl ####\n\n    curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'\n     -u 'email@example.com:<api_token>'\n     -H 'X-Atlassian-Token: no-check'\n     --form 'file=@\"myfile.txt\"'\n\n#### Node.js ####\n\n    // This code sample uses the 'node-fetch' and 'form-data' libraries:\n     // https://www.npmjs.com/package/node-fetch\n     // https://www.npmjs.com/package/form-data\n     const fetch = require('node-fetch');\n     const FormData = require('form-data');\n     const fs = require('fs');\n    \n     const filePath = 'myfile.txt';\n     const form = new FormData();\n     const stats = fs.statSync(filePath);\n     const fileSizeInBytes = stats.size;\n     const fileStream = fs.createReadStream(filePath);\n    \n     form.append('file', fileStream, {knownLength: fileSizeInBytes});\n    \n     fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {\n         method: 'POST',\n         body: form,\n         headers: {\n             'Authorization': `Basic ${Buffer.from(\n                 'email@example.com:'\n             ).toString('base64')}`,\n             'Accept': 'application/json',\n             'X-Atlassian-Token': 'no-check'\n         }\n     })\n         .then(response => {\n             console.log(\n                 `Response: ${response.status} ${response.statusText}`\n             );\n             return response.text();\n         })\n         .then(text => console.log(text))\n         .catch(err => console.error(err));\n\n#### Java ####\n\n    // This code sample uses the  'Unirest' library:\n     // http://unirest.io/java.html\n     HttpResponse response = Unirest.post(\"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\")\n             .basicAuth(\"email@example.com\", \"\")\n             .header(\"Accept\", \"application/json\")\n             .header(\"X-Atlassian-Token\", \"no-check\")\n             .field(\"file\", new File(\"myfile.txt\"))\n             .asJson();\n    \n             System.out.println(response.getBody());\n\n#### Python ####\n\n    # This code sample uses the 'requests' library:\n     # http://docs.python-requests.org\n     import requests\n     from requests.auth import HTTPBasicAuth\n     import json\n    \n     url = \"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\"\n    \n     auth = HTTPBasicAuth(\"email@example.com\", \"\")\n    \n     headers = {\n        \"Accept\": \"application/json\",\n        \"X-Atlassian-Token\": \"no-check\"\n     }\n    \n     response = requests.request(\n        \"POST\",\n        url,\n        headers = headers,\n        auth = auth,\n        files = {\n             \"file\": (\"myfile.txt\", open(\"myfile.txt\",\"rb\"), \"application-type\")\n        }\n     )\n    \n     print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\n\n#### PHP ####\n\n    // This code sample uses the 'Unirest' library:\n     // http://unirest.io/php.html\n     Unirest\\Request::auth('email@example.com', '');\n    \n     $headers = array(\n       'Accept' => 'application/json',\n       'X-Atlassian-Token' => 'no-check'\n     );\n    \n     $parameters = array(\n       'file' => File::add('myfile.txt')\n     );\n    \n     $response = Unirest\\Request::post(\n       'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',\n       $headers,\n       $parameters\n     );\n    \n     var_dump($response)\n\n#### Forge ####\n\n    // This sample uses Atlassian Forge and the `form-data` library.\n     // https://developer.atlassian.com/platform/forge/\n     // https://www.npmjs.com/package/form-data\n     import api from \"@forge/api\";\n     import FormData from \"form-data\";\n    \n     const form = new FormData();\n     form.append('file', fileStream, {knownLength: fileSizeInBytes});\n    \n     const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {\n         method: 'POST',\n         body: form,\n         headers: {\n             'Accept': 'application/json',\n             'X-Atlassian-Token': 'no-check'\n         }\n     });\n    \n     console.log(`Response: ${response.status} ${response.statusText}`);\n     console.log(await response.json());\n\nTip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** \n\n *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'addAttachment';
      parameters: [
        {
          description: 'The ID or key of the issue that attachments are added to.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'multipart/form-data': {
            schema: {
              items: {
                $ref: '#/components/schemas/MultipartFile';
              };
              type: 'array';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"content":"https://your-domain.atlassian.net/rest/api/3/attachment/content/10000","created":1651316514000,"filename":"picture.jpg","id":"10001","mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/rest/api/3/attachment/thumbnail/10000"},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"content":"https://your-domain.atlassian.net/rest/api/3/attachment/content/10001","created":1658898511000,"filename":"dbeuglog.txt","mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10001","size":2460}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Attachment';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  the issue is not found.\n *  the user does not have permission to view the issue.';
        };
        '413': {
          description: 'Returned if any of the following is true:\n\n *  the attachments exceed the maximum attachment size for issues.\n *  more than 60 files are requested to be uploaded.\n *  the per-issue limit for attachments has been breached.\n\nSee [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add attachment';
      tags: ['Issue attachments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira', 'write:attachment:jira', 'read:attachment:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/changelog': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getChangeLogs';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?&startAt=4&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?startAt=2&maxResults=2","startAt":2,"total":5,"values":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","id":"10001","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","id":"10002","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1 label-2"}]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanChangelog';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get changelogs';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:issue.changelog:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/changelog/list': {
    post: {
      deprecated: false;
      description: 'Returns changelogs for an issue specified by a list of changelog IDs.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getChangeLogsByIds';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              changelogIds: [10001, 10002];
            };
            schema: {
              $ref: '#/components/schemas/IssueChangelogIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"histories":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","id":"10001","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","id":"10002","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1 label-2"}]}],"maxResults":2,"startAt":0,"total":2}';
              schema: {
                $ref: '#/components/schemas/PageOfChangelogs';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get changelogs by IDs';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:issue.changelog:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/comment': {
    get: {
      deprecated: false;
      description: 'Returns all comments for an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Comments are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.';
      operationId: 'getComments';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 5000;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['created', '-created', '+created'];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"comments":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"maxResults":1,"startAt":0,"total":1}';
              schema: {
                $ref: '#/components/schemas/PageOfComments';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `orderBy` is set to a value other than *created*.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get comments';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a comment to an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'addComment';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              body: {
                content: [
                  {
                    content: [
                      {
                        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.';
                        type: 'text';
                      },
                    ];
                    type: 'paragraph';
                  },
                ];
                type: 'doc';
                version: 1;
              };
              visibility: {
                identifier: 'Administrators';
                type: 'role';
                value: 'Administrators';
              };
            };
            schema: {
              $ref: '#/components/schemas/Comment';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}';
              schema: {
                $ref: '#/components/schemas/Comment';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
        '413': {
          description: 'Returned if the per-issue limit has been breached for one of the following fields:\n\n *  comments\n *  attachments';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add comment';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/comment/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a comment.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.';
      operationId: 'deleteComment';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the user does not have permission to delete the comment.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.';
        };
        '405': {
          description: 'Returned if an anonymous call is made to the operation.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete comment';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:comment:jira', 'delete:comment.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.';
      operationId: 'getComment';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}';
              schema: {
                $ref: '#/components/schemas/Comment';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get comment';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.';
      operationId: 'updateComment';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the comment.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether users are notified when a comment is updated.';
          in: 'query';
          name: 'notifyUsers';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: 'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              body: {
                content: [
                  {
                    content: [
                      {
                        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.';
                        type: 'text';
                      },
                    ];
                    type: 'paragraph';
                  },
                ];
                type: 'doc';
                version: 1;
              };
              visibility: {
                identifier: 'Administrators';
                type: 'role';
                value: 'Administrators';
              };
            };
            schema: {
              $ref: '#/components/schemas/Comment';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}';
              schema: {
                $ref: '#/components/schemas/Comment';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the user does not have permission to edit the comment or the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update comment';
      tags: ['Issue comments'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/editmeta': {
    get: {
      deprecated: false;
      description: 'Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).\n\nThis endpoint will check for these conditions:\n\n1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.\n2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.\n3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.\n4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.\n5.  Issue has a project, issue type, and status defined.\n6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.\n7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.\n8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).\n9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.\n\nFields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.\n\nConnect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:\n\n *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).\n *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nNote: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.';
      operationId: 'getEditIssueMeta';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideScreenSecurity';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}}}';
              schema: {
                $ref: '#/components/schemas/IssueUpdateMetadata';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the user uses an override parameter but doesn't have permission to do so.";
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get edit issue metadata';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-meta:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/notify': {
    post: {
      deprecated: false;
      description: 'Creates an email notification for an issue and adds it to the mail queue.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'notify';
      parameters: [
        {
          description: 'ID or key of the issue that the notification is sent for.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              htmlBody: 'The <strong>latest</strong> test results for this ticket are now available.';
              restrict: {
                groupIds: [];
                groups: [
                  {
                    name: 'notification-group';
                  },
                ];
                permissions: [
                  {
                    key: 'BROWSE';
                  },
                ];
              };
              subject: 'Latest test results';
              textBody: 'The latest test results for this ticket are now available.';
              to: {
                assignee: false;
                groupIds: [];
                groups: [
                  {
                    name: 'notification-group';
                  },
                ];
                reporter: false;
                users: [
                  {
                    accountId: '5b10a2844c20165700ede21g';
                    active: false;
                  },
                ];
                voters: true;
                watchers: true;
              };
            };
            schema: {
              $ref: '#/components/schemas/Notification';
            };
          };
        };
        description: 'The request object for the notification and recipients.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the email is queued for sending.';
        };
        '400': {
          description: 'Returned if:\n\n *  the recipient is the same as the calling user.\n *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.\n *  the request is invalid. For example, required fields are missing or have invalid values.';
        };
        '403': {
          description: 'Returned if:\n\n *  outgoing emails are disabled.\n *  no SMTP server is configured.';
        };
        '404': {
          description: 'Returned if the issue is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Send notification for issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['send:notification:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/properties': {
    get: {
      deprecated: false;
      description: "Returns the URLs and keys of an issue's properties.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Property details are only returned where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'getIssuePropertyKeys';
      parameters: [
        {
          description: 'The key or ID of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permissions to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue property keys';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: "Deletes an issue's property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'deleteIssueProperty';
      parameters: [
        {
          description: 'The key or ID of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or property is not found, or the user does not have permission to edit the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete issue property';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the key and value of an issue's property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'getIssueProperty';
      parameters: [
        {
          description: 'The key or ID of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or property is not found or the user does not have permission to see the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue property';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the value of an issue's property. Use this resource to store custom data against an issue.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'setIssueProperty';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the issue property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue property is created.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to edit the issue.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set issue property';
      tags: ['Issue properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/remotelink': {
    delete: {
      deprecated: false;
      description: "Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.";
      operationId: 'deleteRemoteIssueLinkByGlobalId';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The global ID of a remote issue link.';
          in: 'query';
          name: 'globalId';
          required: true;
          schema: {
            example: 'system=http://www.mycompany.com/support&id=1';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if a global ID isn't provided.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to link issues.';
        };
        '404': {
          description: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete remote issue link by global ID';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue.remote-link:jira', 'write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getRemoteIssueLinks';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The global ID of the remote issue link.';
          in: 'query';
          name: 'globalId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"application":{"name":"My Acme Tracker","type":"com.acme.tracker"},"globalId":"system=http://www.mycompany.com/support&id=1","id":10000,"object":{"icon":{"title":"Support Ticket","url16x16":"http://www.mycompany.com/support/ticket.png"},"status":{"icon":{"link":"http://www.mycompany.com/support?id=1&details=closed","title":"Case Closed","url16x16":"http://www.mycompany.com/support/resolved.png"},"resolved":true},"summary":"Customer support issue","title":"TSTSUP-111","url":"http://www.mycompany.com/support?id=1"},"relationship":"causes","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"},{"application":{"name":"My Acme Tester","type":"com.acme.tester"},"globalId":"system=http://www.anothercompany.com/tester&id=1234","id":10001,"object":{"icon":{"title":"Test Case","url16x16":"http://www.anothercompany.com/tester/images/testcase.gif"},"status":{"icon":{"link":"http://www.anothercompany.com/tester/person?accountId=5b10a2844c20165700ede21g","title":"Tested by Mia Krystof","url16x16":"http://www.anothercompany.com/tester/images/person/mia.gif"},"resolved":false},"summary":"Test that the submit button saves the item","title":"Test Case #1234","url":"http://www.anothercompany.com/tester/testcase/1234"},"relationship":"is tested by","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10001"}]';
              schema: {
                $ref: '#/components/schemas/RemoteIssueLink';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if issue linking is disabled.';
        };
        '404': {
          description: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.';
        };
        '413': {
          description: 'Returned if the per-issue limit for remote links has been breached.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get remote issue links';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.remote-link:jira', 'read:status:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates or updates a remote issue link for an issue.\n\nIf a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'createOrUpdateRemoteIssueLink';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              application: {
                name: 'My Acme Tracker';
                type: 'com.acme.tracker';
              };
              globalId: 'system=http://www.mycompany.com/support&id=1';
              object: {
                icon: {
                  title: 'Support Ticket';
                  url16x16: 'http://www.mycompany.com/support/ticket.png';
                };
                status: {
                  icon: {
                    link: 'http://www.mycompany.com/support?id=1&details=closed';
                    title: 'Case Closed';
                    url16x16: 'http://www.mycompany.com/support/resolved.png';
                  };
                  resolved: true;
                };
                summary: 'Customer support issue';
                title: 'TSTSUP-111';
                url: 'http://www.mycompany.com/support?id=1';
              };
              relationship: 'causes';
            };
            schema: {
              $ref: '#/components/schemas/RemoteIssueLinkRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}';
              schema: {
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies';
              };
            };
          };
          description: 'Returned if the remote issue link is updated.';
        };
        '201': {
          content: {
            'application/json': {
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}';
              schema: {
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies';
              };
            };
          };
          description: 'Returned if the remote issue link is created.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"title":"\'title\' is required."}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to link issues.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create or update remote issue link';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira', 'write:issue.remote-link:jira', 'read:issue.remote-link:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a remote issue link from an issue.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'deleteRemoteIssueLinkById';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The ID of a remote issue link.';
          in: 'path';
          name: 'linkId';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to link issues.';
        };
        '404': {
          description: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete remote issue link by ID';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue.remote-link:jira', 'write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a remote issue link for an issue.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'getRemoteIssueLinkById';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the remote issue link.';
          in: 'path';
          name: 'linkId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"application":{"name":"My Acme Tracker","type":"com.acme.tracker"},"globalId":"system=http://www.mycompany.com/support&id=1","id":10000,"object":{"icon":{"title":"Support Ticket","url16x16":"http://www.mycompany.com/support/ticket.png"},"status":{"icon":{"link":"http://www.mycompany.com/support?id=1&details=closed","title":"Case Closed","url16x16":"http://www.mycompany.com/support/resolved.png"},"resolved":true},"summary":"Customer support issue","title":"TSTSUP-111","url":"http://www.mycompany.com/support?id=1"},"relationship":"causes","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}';
              schema: {
                $ref: '#/components/schemas/RemoteIssueLink';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if issue linking is disabled.';
        };
        '404': {
          description: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get remote issue link by ID';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.remote-link:jira', 'read:status:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a remote issue link for an issue.\n\nNote: Fields without values in the request are set to null.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'updateRemoteIssueLink';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The ID of the remote issue link.';
          in: 'path';
          name: 'linkId';
          required: true;
          schema: {
            example: '10000';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              application: {
                name: 'My Acme Tracker';
                type: 'com.acme.tracker';
              };
              globalId: 'system=http://www.mycompany.com/support&id=1';
              object: {
                icon: {
                  title: 'Support Ticket';
                  url16x16: 'http://www.mycompany.com/support/ticket.png';
                };
                status: {
                  icon: {
                    link: 'http://www.mycompany.com/support?id=1&details=closed';
                    title: 'Case Closed';
                    url16x16: 'http://www.mycompany.com/support/resolved.png';
                  };
                  resolved: true;
                };
                summary: 'Customer support issue';
                title: 'TSTSUP-111';
                url: 'http://www.mycompany.com/support?id=1';
              };
              relationship: 'causes';
            };
            schema: {
              $ref: '#/components/schemas/RemoteIssueLinkRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"title":"\'title\' is required."}}';
            };
          };
          description: 'Returned if:\n\n *  the link ID is invalid.\n *  the remote issue link does not belong to the issue.\n *  the request body is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to link issues.';
        };
        '404': {
          description: 'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update remote issue link by ID';
      tags: ['Issue remote links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira', 'write:issue.remote-link:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/transitions': {
    get: {
      deprecated: false;
      description: "Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.\n\nNote, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required: A list or transition is returned only when the user has:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nHowever, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.";
      operationId: 'getTransitions';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the transition.';
          in: 'query';
          name: 'transitionId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether transitions with the condition *Hide From User Condition* are included in the response.';
          in: 'query';
          name: 'skipRemoteOnlyCondition';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether details of transitions that fail a condition are included in the response';
          in: 'query';
          name: 'includeUnavailableTransitions';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.';
          in: 'query';
          name: 'sortByOpsBarAndStatus';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"transitions":[{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}},"hasScreen":false,"id":"2","isAvailable":true,"isConditional":false,"isGlobal":false,"isInitial":false,"name":"Close Issue","to":{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}},{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}},"colour":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}},"hasScreen":true,"id":"711","name":"QA Review","to":{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}}]}';
              schema: {
                $ref: '#/components/schemas/Transitions';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get transitions';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.transition:jira', 'read:status:jira', 'read:field-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.\n\nsortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'doTransition';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                assignee: {
                  name: 'bob';
                };
                resolution: {
                  name: 'Fixed';
                };
              };
              historyMetadata: {
                activityDescription: 'Complete order processing';
                actor: {
                  avatarUrl: 'http://mysystem/avatar/tony.jpg';
                  displayName: 'Tony';
                  id: 'tony';
                  type: 'mysystem-user';
                  url: 'http://mysystem/users/tony';
                };
                cause: {
                  id: 'myevent';
                  type: 'mysystem-event';
                };
                description: 'From the order testing process';
                extraData: {
                  Iteration: '10a';
                  Step: '4';
                };
                generator: {
                  id: 'mysystem-1';
                  type: 'mysystem-application';
                };
                type: 'myplugin:type';
              };
              transition: {
                id: '5';
              };
              update: {
                comment: [
                  {
                    add: {
                      body: {
                        content: [
                          {
                            content: [
                              {
                                text: 'Bug has been fixed';
                                type: 'text';
                              },
                            ];
                            type: 'paragraph';
                          },
                        ];
                        type: 'doc';
                        version: 1;
                      };
                    };
                  },
                ];
              };
            };
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if:\n\n *  no transition is specified.\n *  the user does not have permission to transition the issue.\n *  a field that isn't included on the transition screen is defined in `fields` or `update`.\n *  a field is specified in both `fields` and `update`.\n *  the request is invalid for any other reason.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
        '409': {
          description: 'Returned if the issue could not be updated due to a conflicting update.';
        };
        '413': {
          description: 'Returned if a per-issue limit has been breached for one of the following fields:\n\n *  comments\n *  worklogs\n *  attachments\n *  issue links\n *  remote issue links';
        };
        '422': {
          description: 'Returned if a configuration problem prevents the creation of the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Transition issue';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira', 'write:issue.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/votes': {
    delete: {
      deprecated: false;
      description: "Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'removeVote';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  voting is disabled.\n *  the user has not voted on the issue.\n *  the issue is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete vote';
      tags: ['Issue votes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.vote:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns details about the votes on an issue.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nNote that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.';
      operationId: 'getVotes';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"hasVoted":true,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/votes","voters":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}],"votes":24}';
              schema: {
                $ref: '#/components/schemas/Votes';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  voting is disabled.\n *  the user does not have permission to view the issue.\n *  the issue is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get votes';
      tags: ['Issue votes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue.vote:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'addVote';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  voting is disabled.\n *  the issue is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add vote';
      tags: ['Issue votes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.vote:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/watchers': {
    delete: {
      deprecated: false;
      description: 'Deletes a user as a watcher of an issue.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.';
      operationId: 'removeWatcher';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `accountId` is not supplied.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the permission to manage the watcher list.';
        };
        '404': {
          description: 'Returned if the issue or the user is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete watcher';
      tags: ['Issue watchers'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.watcher:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the watchers for an issue.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.';
      operationId: 'getIssueWatchers';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1,"watchers":[{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}]}';
              schema: {
                $ref: '#/components/schemas/Watchers';
              };
            };
          };
          description: 'Returned if the request is successful';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue watchers';
      tags: ['Issue watchers'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue.watcher:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.';
      operationId: 'addWatcher';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              type: 'string';
            };
          };
        };
        description: 'The account ID of the user. Note that username cannot be used due to privacy changes.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the permission to manage the watcher list.';
        };
        '404': {
          description: 'Returned if the issue or the user is not found or the user does not have permission to view the issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add watcher';
      tags: ['Issue watchers'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue.watcher:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/worklog': {
    delete: {
      deprecated: false;
      description: "Deletes a list of worklogs from an issue. This is an experimental API with limitations:\n\n *  You can't delete more than 5000 worklogs at once.\n *  No notifications will be sent for deleted worklogs.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog.\n *  If any worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.";
      operationId: 'bulkDeleteWorklogs';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: "Defines how to update the issue's time estimate, the options are:\n\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being deleted.";
          in: 'query';
          name: 'adjustEstimate';
          schema: {
            default: 'auto';
            enum: ['leave', 'auto'];
            type: 'string';
          };
        },
        {
          description: 'Whether the work log entries should be removed to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10];
            };
            schema: {
              $ref: '#/components/schemas/WorklogIdsRequestBean';
            };
          };
        };
        description: 'A JSON object containing a list of worklog IDs.';
        required: true;
      };
      responses: {
        '200': {
          description: 'Returned if the bulk deletion request was partially successful, with a message indicating partial success.';
        };
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `request` is not provided or is invalid\n *  the user does not have permission to delete the worklogs\n *  the number of worklogs being deleted exceeds the limit';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue\n *  at least one of the worklogs is not associated with the provided issue\n *  time tracking is disabled';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Bulk delete worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'delete:issue-worklog:jira',
            'delete:issue-worklog.property:jira',
            'write:issue.time-tracking:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:issue-worklog.property:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    get: {
      deprecated: false;
      description: 'Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Workloads are only returned where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getIssueWorklog';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 5000;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.';
          in: 'query';
          name: 'startedAfter';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.';
          in: 'query';
          name: 'startedBefore';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"maxResults":1,"startAt":0,"total":1,"worklogs":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}]}';
              schema: {
                $ref: '#/components/schemas/PageOfWorklogs';
              };
            };
          };
          description: 'Returned if the request is successful';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or the user does not have permission to view the issue.\n *  `startAt` or `maxResults` has non-numeric values.\n *  time tracking is disabled.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a worklog to an issue.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'addWorklog';
      parameters: [
        {
          description: 'The ID or key the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether users watching the issue are notified by email.';
          in: 'query';
          name: 'notifyUsers';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.";
          in: 'query';
          name: 'adjustEstimate';
          schema: {
            default: 'auto';
            enum: ['new', 'leave', 'manual', 'auto'];
            type: 'string';
          };
        },
        {
          description: "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.";
          in: 'query';
          name: 'newEstimate';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.";
          in: 'query';
          name: 'reduceBy';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                content: [
                  {
                    content: [
                      {
                        text: 'I did some work here.';
                        type: 'text';
                      },
                    ];
                    type: 'paragraph';
                  },
                ];
                type: 'doc';
                version: 1;
              };
              started: '2021-01-17T12:34:00.000+0000';
              timeSpentSeconds: 12000;
              visibility: {
                identifier: '276f955c-63d7-42c8-9520-92d01dca0625';
                type: 'group';
              };
            };
            schema: {
              $ref: '#/components/schemas/Worklog';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Worklog';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.\n *  the user does not have permission to add the worklog.\n *  the request JSON is malformed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.';
        };
        '413': {
          description: 'Returned if the per-issue limit has been breached for one of the following fields:\n\n *  worklogs\n *  attachments';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Add worklog';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:issue-worklog:jira',
            'write:issue-worklog.property:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:issue-worklog.property:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/worklog/move': {
    post: {
      deprecated: false;
      description: "Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:\n\n *  You can't move more than 5000 worklogs at once.\n *  You can't move worklogs containing an attachment.\n *  You can't move worklogs restricted by project roles.\n *  No notifications will be sent for moved worklogs.\n *  No webhooks or events will be sent for moved worklogs.\n *  No issue history will be recorded for moved worklogs.\n *  Time tracking will not be updated for the source and destination issues.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.";
      operationId: 'bulkMoveWorklogs';
      parameters: [
        {
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10];
              issueIdOrKey: 'ABC-1234';
            };
            schema: {
              $ref: '#/components/schemas/WorklogsMoveRequestBean';
            };
          };
        };
        description: 'A JSON object containing a list of worklog IDs and the ID or key of the destination issue.';
        required: true;
      };
      responses: {
        '200': {
          description: 'Returned if the request is partially successful.';
        };
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `request` is not provided or is invalid\n *  the user does not have permission to move the worklogs\n *  the number of worklogs being moved exceeds the limit\n *  the total size of worklogs being moved is too large\n *  any worklog contains attachments';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or the user does not have permission to view the issue\n *  at least one of the worklogs is not associated with the provided issue\n *  time tracking is disabled';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Bulk move worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-worklog:jira',
            'write:issue-worklog:jira',
            'delete:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'write:issue-worklog.property:jira',
            'delete:issue-worklog.property:jira',
            'write:issue.time-tracking:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a worklog from an issue.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'deleteWorklog';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether users watching the issue are notified by email.';
          in: 'query';
          name: 'notifyUsers';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.";
          in: 'query';
          name: 'adjustEstimate';
          schema: {
            default: 'auto';
            enum: ['new', 'leave', 'manual', 'auto'];
            type: 'string';
          };
        },
        {
          description: "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.";
          in: 'query';
          name: 'newEstimate';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`.";
          in: 'query';
          name: 'increaseBy';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.\n *  the user does not have permission to delete the worklog.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete worklog';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-worklog:jira', 'delete:issue-worklog.property:jira', 'write:issue.time-tracking:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a worklog.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getWorklog';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts\n\n`properties`, which returns worklog properties.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}';
              schema: {
                $ref: '#/components/schemas/Worklog';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or the user does not have permission to view it.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.\n\n.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get worklog';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a worklog.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'updateWorklog';
      parameters: [
        {
          description: 'The ID or key the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether users watching the issue are notified by email.';
          in: 'query';
          name: 'notifyUsers';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
        {
          description: "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.";
          in: 'query';
          name: 'adjustEstimate';
          schema: {
            default: 'auto';
            enum: ['new', 'leave', 'manual', 'auto'];
            type: 'string';
          };
        },
        {
          description: "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.";
          in: 'query';
          name: 'newEstimate';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.';
          in: 'query';
          name: 'overrideEditableFlag';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                content: [
                  {
                    content: [
                      {
                        text: 'I did some work here.';
                        type: 'text';
                      },
                    ];
                    type: 'paragraph';
                  },
                ];
                type: 'doc';
                version: 1;
              };
              started: '2021-01-17T12:34:00.000+0000';
              timeSpentSeconds: 12000;
              visibility: {
                identifier: '276f955c-63d7-42c8-9520-92d01dca0625';
                type: 'group';
              };
            };
            schema: {
              $ref: '#/components/schemas/Worklog';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}';
              schema: {
                $ref: '#/components/schemas/Worklog';
              };
            };
          };
          description: 'Returned if the request is successful';
        };
        '400': {
          description: 'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  the user does not have permission to update the worklog.\n *  the request JSON is malformed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update worklog';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'write:issue-worklog:jira',
            'write:issue-worklog.property:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties': {
    get: {
      deprecated: false;
      description: 'Returns the keys of all properties for a worklog.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getWorklogPropertyKeys';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'worklogId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the worklog ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue or worklog is not found.\n *  the user does not have permission to view the issue or worklog.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get worklog property keys';
      tags: ['Issue worklog properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes a worklog property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'deleteWorklogProperty';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'worklogId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the worklog property is removed.';
        };
        '400': {
          description: 'Returned if the worklog key or id is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to edit the worklog.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue, worklog, or property is not found.\n *  the user does not have permission to view the issue or worklog.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete worklog property';
      tags: ['Issue worklog properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the value of a worklog property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'getWorklogProperty';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'worklogId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the worklog ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue, worklog, or property is not found.\n *  the user does not have permission to view the issue or worklog.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get worklog property';
      tags: ['Issue worklog properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the value of a worklog property. Use this operation to store custom data against the worklog.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'setWorklogProperty';
      parameters: [
        {
          description: 'The ID or key of the issue.';
          in: 'path';
          name: 'issueIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the worklog.';
          in: 'path';
          name: 'worklogId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the issue property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the worklog property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the worklog property is created.';
        };
        '400': {
          description: 'Returned if the worklog ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to edit the worklog.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue or worklog is not found.\n *  the user does not have permission to view the issue or worklog.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Set worklog property';
      tags: ['Issue worklog properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issueLink': {
    post: {
      deprecated: false;
      description: 'Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.\n\nIf the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.';
      operationId: 'linkIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                body: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Linked related issue!';
                          type: 'text';
                        },
                      ];
                      type: 'paragraph';
                    },
                  ];
                  type: 'doc';
                  version: 1;
                };
                visibility: {
                  identifier: '276f955c-63d7-42c8-9520-92d01dca0625';
                  type: 'group';
                  value: 'jira-software-users';
                };
              };
              inwardIssue: {
                key: 'HSP-1';
              };
              outwardIssue: {
                key: 'MKY-1';
              };
              type: {
                name: 'Duplicate';
              };
            };
            schema: {
              $ref: '#/components/schemas/LinkIssueRequestJsonBean';
            };
          };
        };
        description: 'The issue link request.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.\n *  the user does not have *link issues* project permission.\n *  either of the link issues are not found.\n *  the issue link type is not found.";
        };
        '413': {
          description: 'Returned if the per-issue limit for issue links has been breached.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create issue link';
      tags: ['Issue links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:comment:jira', 'write:issue:jira', 'write:issue-link:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issueLink/{linkId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue link.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.';
      operationId: 'deleteIssueLink';
      parameters: [
        {
          description: 'The ID of the issue link.';
          in: 'path';
          name: 'linkId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          description: '200 response';
        };
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue link ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue link is not found.\n *  the user doesn't have the required permissions.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete issue link';
      tags: ['Issue links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-link:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns an issue link.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.';
      operationId: 'getIssueLink';
      parameters: [
        {
          description: 'The ID of the issue link.';
          in: 'path';
          name: 'linkId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"10001","inwardIssue":{"fields":{"issuetype":{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false},"priority":{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"},"status":{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"outwardIssue":{"fields":{"issuetype":{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},"priority":{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},"status":{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}}';
              schema: {
                $ref: '#/components/schemas/IssueLink';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue link ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue link is not found.\n *  the user doesn't have the required permissions.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue link';
      tags: ['Issue links'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:field:jira',
            'read:issue-link-type:jira',
            'read:issue:jira',
            'read:issue-type:jira',
            'read:priority:jira',
            'read:status:jira',
            'read:avatar:jira',
            'read:issue.time-tracking:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issueLinkType': {
    get: {
      deprecated: false;
      description: 'Returns a list of all issue link types.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.';
      operationId: 'getIssueLinkTypes';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueLinkTypes":[{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"},{"id":"1010","inward":"Blocked by","name":"Blocks","outward":"Blocks","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1010"}]}';
              schema: {
                $ref: '#/components/schemas/IssueLinkTypes';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if issue linking is disabled.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue link types';
      tags: ['Issue link types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-link-type:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'createIssueLinkType';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              inward: 'Duplicated by';
              name: 'Duplicate';
              outward: 'Duplicates';
            };
            schema: {
              $ref: '#/components/schemas/IssueLinkType';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}';
              schema: {
                $ref: '#/components/schemas/IssueLinkType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type name is in use.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Create issue link type';
      tags: ['Issue link types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-link-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issueLinkType/{issueLinkTypeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteIssueLinkType';
      parameters: [
        {
          description: 'The ID of the issue link type.';
          in: 'path';
          name: 'issueLinkTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue link type ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete issue link type';
      tags: ['Issue link types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-link-type:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.';
      operationId: 'getIssueLinkType';
      parameters: [
        {
          description: 'The ID of the issue link type.';
          in: 'path';
          name: 'issueLinkTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}';
              schema: {
                $ref: '#/components/schemas/IssueLinkType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue link type ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue link type';
      tags: ['Issue link types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-link-type:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateIssueLinkType';
      parameters: [
        {
          description: 'The ID of the issue link type.';
          in: 'path';
          name: 'issueLinkTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              inward: 'Duplicated by';
              name: 'Duplicate';
              outward: 'Duplicates';
            };
            schema: {
              $ref: '#/components/schemas/IssueLinkType';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}';
              schema: {
                $ref: '#/components/schemas/IssueLinkType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue link type ID or the request body are invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Update issue link type';
      tags: ['Issue link types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-link-type:jira', 'write:issue-link-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issues/archive/export': {
    put: {
      deprecated: false;
      description: "Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.\n\nNote that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n**Rate limiting:** Only a single request can be active at any given time.\n\n  \n";
      operationId: 'exportArchivedIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              archivedBy: ['uuid-rep-001', 'uuid-rep-002'];
              archivedDate: {
                dateAfter: '2023-01-01';
                dateBefore: '2023-01-12';
              };
              archivedDateRange: {
                dateAfter: '2023-01-01';
                dateBefore: '2023-01-12';
              };
              issueTypes: ['10001', '10002'];
              projects: ['FOO', 'BAR'];
              reporters: ['uuid-rep-001', 'uuid-rep-002'];
            };
            schema: {
              $ref: '#/components/schemas/ArchivedIssuesFilterRequest';
            };
          };
        };
        description: "You can filter the issues in your request by the `projects`, `archivedBy`, `archivedDate`, `issueTypes`, and `reporters` fields. All filters are optional. If you don't provide any filters, you'll get a list of up to one million archived issues.";
        required: true;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              example: '{"payload":"{projects=[FOO, BAR], reporters=[uuid-rep-001, uuid-rep-002], issueTypes=[10001, 10002], archivedDate={dateAfterInstant=2023-01-01, dateBeforeInstant=2023-01-12}, archivedBy=[uuid-rep-001, uuid-rep-002]}","progress":0,"status":"ENQUEUED","submittedTime":1623230887000,"taskId":"10990"}';
              schema: {
                $ref: '#/components/schemas/ExportArchivedIssuesTaskProgressResponse';
              };
            };
          };
          description: 'Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request.';
        };
        '400': {
          content: {
            'application/json': {
              example: '["Your filter contains invalid values {errorMessage}"]';
            };
          };
          description: 'Returned when:\n\n *  The request is invalid, or the filters provided are incorrect\n *  You requested too many issues for export. The limit is one million issues per request';
        };
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not an admin."],"errors":{}}';
            };
          };
          description: 'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.';
        };
        '412': {
          content: {
            'application/json': {
              example: '{"errorMessages":["An issue archival task is already running with ID 1010. To start a new one, cancel the task or wait for it to finish."],"errors":{}}';
            };
          };
          description: 'Returned if a request to export archived issues is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Export archived issue(s)';
      tags: ['Issues'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes': {
    get: {
      deprecated: false;
      description: 'Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueSecuritySchemes';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueSecuritySchemes":[{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}]}';
              schema: {
                $ref: '#/components/schemas/SecuritySchemes';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer issue security schemes.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get issue security schemes';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'createIssueSecurityScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Newly created issue security scheme';
              levels: [
                {
                  description: 'Newly created level';
                  isDefault: true;
                  members: [
                    {
                      parameter: 'administrators';
                      type: 'group';
                    },
                  ];
                  name: 'New level';
                },
              ];
              name: 'New security scheme';
            };
            schema: {
              $ref: '#/components/schemas/CreateIssueSecuritySchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/SecuritySchemeId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create issue security scheme';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/level': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue security levels.\n\nOnly issue security levels in the context of classic projects are returned.\n\nFiltering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getSecurityLevels';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.';
          in: 'query';
          name: 'schemeId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.';
          in: 'query';
          name: 'onlyDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","isDefault":true,"issueSecuritySchemeId":"10001","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityscheme/level?id=10021"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanSecurityLevel';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["-1000 is not a valid value. id must be zero or a positive integer."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue security levels';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/level/default': {
    put: {
      deprecated: false;
      description: 'Sets default issue security levels for schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setDefaultLevels';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultValues: [
                {
                  defaultLevelId: '20000';
                  issueSecuritySchemeId: '10000';
                },
                {
                  defaultLevelId: '30000';
                  issueSecuritySchemeId: '12000';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/SetDefaultLevelsRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue resolution isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set default issue security levels';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/level/member': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue security level members.\n\nOnly issue security level members in the context of classic projects are returned.\n\nFiltering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getSecurityLevelMembers';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.';
          in: 'query';
          name: 'schemeId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.';
          in: 'query';
          name: 'levelId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about the custom field granted the permission\n *  `group` Returns information about the group that is granted the permission\n *  `projectRole` Returns information about the project role granted the permission\n *  `user` Returns information about the user who is granted the permission';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"10000","issueSecurityLevelId":"20010","issueSecuritySchemeId":"10010","holder":{"expand":"group","type":"group"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanSecurityLevelMember';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue security level members';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/project': {
    get: {
      deprecated: false;
      description: "Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'searchProjectsUsingSecuritySchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of security scheme IDs to be filtered out.';
          in: 'query';
          name: 'issueSecuritySchemeId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of project IDs to be filtered out.';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueSecuritySchemeId":"10000","projectId":"10000"}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueSecuritySchemeToProjectMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the search criteria is invalid.If you specify the project ID parameter';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get projects using issue security schemes';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'associateSchemesToProjects';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              oldToNewSecurityLevelMappings: [
                {
                  newLevelId: '30001';
                  oldLevelId: '30000';
                },
              ];
              projectId: '10000';
              schemeId: '20000';
            };
            schema: {
              $ref: '#/components/schemas/AssociateSecuritySchemeWithProjectDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the security scheme isn't found.";
        };
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a task to remove the issue security level is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Associate security scheme to project';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue security schemes.  \nIf you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.\n\nOnly issue security schemes in the context of classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'searchSecuritySchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityscheme/10000","name":"Default scheme","description":"Default scheme description","defaultLevel":10001,"projectIds":[10002]}';
              schema: {
                $ref: '#/components/schemas/PageBeanSecuritySchemeWithProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["-1000 is not a valid value. id must be zero or a positive integer."],"errors":{}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Search issue security schemes';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{id}': {
    get: {
      deprecated: false;
      description: 'Returns an issue security scheme along with its security levels.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.';
      operationId: 'getIssueSecurityScheme';
      parameters: [
        {
          description: 'The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}],"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}';
              schema: {
                $ref: '#/components/schemas/SecurityScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get issue security scheme';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates the issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateIssueSecurityScheme';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My issue security scheme description';
              name: 'My issue security scheme name';
            };
            schema: {
              $ref: '#/components/schemas/UpdateIssueSecuritySchemeRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue security scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue security scheme';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members': {
    get: {
      deprecated: false;
      description: 'Returns issue security level members.\n\nOnly issue security level members in context of classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueSecurityLevelMembers';
      parameters: [
        {
          description: 'The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.';
          in: 'path';
          name: 'issueSecuritySchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.';
          in: 'query';
          name: 'issueSecurityLevelId';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":10000,"issueSecurityLevelId":10020,"holder":{"expand":"user","type":"user","user":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}}},{"id":10001,"issueSecurityLevelId":10020,"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"9c559b11-6c5d-4f96-992c-a746cabab28b"}},{"id":10002,"issueSecurityLevelId":10021,"holder":{"type":"assignee"}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueSecurityLevelMember';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if no issue security level members are found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue security level members by issue security scheme';
      tags: ['Issue security level'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:issue-security-level:jira', 'read:project-role:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuesecurityschemes/{schemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteSecurityScheme';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '"You can\'t delete an issue security scheme if any projects are associated with it."';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue security scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue security scheme';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{schemeId}/level': {
    put: {
      deprecated: false;
      description: "Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'addSecurityLevel';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              levels: [
                {
                  description: 'First Level Description';
                  isDefault: true;
                  members: [
                    {
                      type: 'reporter';
                    },
                    {
                      parameter: 'jira-administrators';
                      type: 'group';
                    },
                  ];
                  name: 'First Level';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/AddSecuritySchemeLevelsRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the security scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add issue security levels';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue security level.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeLevel';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level to remove.';
          in: 'path';
          name: 'levelId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level that will replace the currently selected level.';
          in: 'query';
          name: 'replaceWith';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '"You can\'t delete an issue security scheme if any projects are associated with it."';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue security level isn't found.";
        };
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a task to remove the issue security level is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove issue security level';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Updates the issue security level.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateSecurityLevel';
      parameters: [
        {
          description: 'The ID of the issue security scheme level belongs to.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level to update.';
          in: 'path';
          name: 'levelId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'New level description';
              name: 'New level name';
            };
            schema: {
              $ref: '#/components/schemas/UpdateIssueSecurityLevelDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue security level isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue security level';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member': {
    put: {
      deprecated: false;
      description: 'Adds members to the issue security level. You can add up to 100 members per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addSecurityLevelMembers';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level.';
          in: 'path';
          name: 'levelId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              members: [
                {
                  type: 'reporter';
                },
                {
                  parameter: 'jira-administrators';
                  type: 'group';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/SecuritySchemeMembersRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the security scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add issue security level members';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}': {
    delete: {
      deprecated: false;
      description: 'Removes an issue security level member from an issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeMemberFromSecurityLevel';
      parameters: [
        {
          description: 'The ID of the issue security scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level.';
          in: 'path';
          name: 'levelId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue security level member to be removed.';
          in: 'path';
          name: 'memberId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the security scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove member from issue security level';
      tags: ['Issue security schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuetype': {
    get: {
      deprecated: false;
      description: 'Returns all issue types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issue types are only returned as follows:\n\n *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.\n *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.';
      operationId: 'getIssueAllTypes';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all issue types for user';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates an issue type and adds it to the default issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createIssueType';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description';
              name: 'name';
              type: 'standard';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeCreateBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid because:\n\n *  no content is sent.\n *  the issue type name exceeds 60 characters.\n *  a subtask issue type is requested on an instance where subtasks are disabled.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '409': {
          description: 'Returned if the issue type name is in use.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Create issue type';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:issue-type:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetype/project': {
    get: {
      deprecated: false;
      description: 'Returns issue types for a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypesForProject';
      parameters: [
        {
          description: 'The ID of the project.';
          in: 'query';
          name: 'projectId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The level of the issue type to filter by. Use:\n\n *  `-1` for Subtask.\n *  `0` for Base.\n *  `1` for Epic.';
          in: 'query';
          name: 'level';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false},{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project is not found.\n *  the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue types for project';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/issuetype/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteIssueType';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the replacement issue type.';
          in: 'query';
          name: 'alternativeIssueTypeId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if any issues cannot be updated with the alternative issue type.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue type is in use and an alternative issue type is not specified.\n *  the issue type or alternative issue type is not found.';
        };
        '409': {
          description: 'Returned if the issue type is in use and:\n\n *  also specified as the alternative issue type.\n *  is a *standard* issue type and the alternative issue type is a *subtask*.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete issue type';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-type:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns an issue type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueType';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false}';
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue type ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue type';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates the issue type.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateIssueType';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              avatarId: 1;
              description: 'description';
              name: 'name';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeUpdateBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid because:\n\n *  no content is sent.\n *  the issue type name exceeds 60 characters.\n *  the avatar is not associated with this issue type.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the issue type is not found.';
        };
        '409': {
          description: 'Returned if the issue type name is in use.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Update issue type';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:issue-type:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetype/{id}/alternatives': {
    get: {
      deprecated: false;
      description: 'Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAlternativeIssueTypes';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get alternative issue types';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type:jira', 'read:project-category:jira', 'read:project:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetype/{id}/avatar2': {
    post: {
      deprecated: false;
      description: "Loads an avatar for the issue type.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST \\ --user email@example.com:<api_token> \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/< image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'createIssueTypeAvatar';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'x';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'y';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The length of each side of the crop region.';
          in: 'query';
          name: 'size';
          required: true;
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          '*/*': {
            schema: {};
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}';
              schema: {
                $ref: '#/components/schemas/Avatar';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.\n *  `cropSize` is missing.\n *  the issue type ID is invalid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Load issue type avatar';
      tags: ['Issue types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:avatar:jira', 'write:issue-type:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetype/{issueTypeId}/properties': {
    get: {
      deprecated: false;
      description: 'Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.';
      operationId: 'getIssueTypePropertyKeys';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue type ID is invalid.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue type property keys';
      tags: ['Issue type properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteIssueTypeProperty';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the issue type property is deleted.';
        };
        '400': {
          description: 'Returned if the issue type ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the issue type or property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete issue type property';
      tags: ['Issue type properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-type.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.';
      operationId: 'getIssueTypeProperty';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the issue type ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue type or property is not found or the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get issue type property';
      tags: ['Issue type properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setIssueTypeProperty';
      parameters: [
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the issue type property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5;
              string: 'string-value';
            };
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue type property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue type property is created.';
        };
        '400': {
          description: 'Returned if:\n\n *  the issue type ID is invalid.\n *  a property value is not provided.\n *  the property value JSON content is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to modify the issue type.';
        };
        '404': {
          description: 'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the permission view the issue type.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Set issue type property';
      tags: ['Issue type properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type schemes.\n\nOnly issue type schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllIssueTypeSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type scheme name.\n *  `id` Sorts by issue type scheme ID.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: 'id';
            enum: ['name', '-name', '+name', 'id', '-id', '+id'];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.\n *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with issue type scheme name.';
          in: 'query';
          name: 'queryString';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"10000","name":"Default Issue Type Scheme","description":"Default issue type scheme is the list of global issue types. All newly created issue types will automatically be added to this scheme.","defaultIssueTypeId":"10003","isDefault":true},{"id":"10001","name":"SUP: Kanban Issue Type Scheme","description":"A collection of issue types suited to use in a kanban style project.","projects":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}},{"id":"10002","name":"HR: Scrum issue type scheme","description":"","defaultIssueTypeId":"10004","issueTypes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"description":"Improvement Issue Type","hierarchyLevel":-1,"iconUrl":"www.example.com","id":"1000L","name":"Improvements","subtask":true}]}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all issue type schemes';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createIssueTypeScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultIssueTypeId: '10002';
              description: 'A collection of issue types suited to use in a kanban style project.';
              issueTypeIds: ['10001', '10002', '10003'];
              name: 'Kanban Issue Type Scheme';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"issueTypeSchemeId":"10010"}';
              schema: {
                $ref: '#/components/schemas/IssueTypeSchemeID';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The default issue type ID has to be present in issue type IDs list."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the scheme name is used by another scheme.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create issue type scheme';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/mapping': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type scheme items.\n\nOnly issue type scheme items used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeSchemesMapping';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.';
          in: 'query';
          name: 'issueTypeSchemeId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"issueTypeSchemeId":"10000","issueTypeId":"10000"},{"issueTypeSchemeId":"10000","issueTypeId":"10001"},{"issueTypeSchemeId":"10000","issueTypeId":"10002"},{"issueTypeSchemeId":"10001","issueTypeId":"10000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeSchemeMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type scheme items';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/project': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.\n\nOnly issue type schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeSchemeForProjects';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          required: true;
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"issueTypeScheme":{"id":"10000","name":"Default Issue Type Scheme","description":"Default issue type scheme is the list of global issue types. All newly created issue types will automatically be added to this scheme.","defaultIssueTypeId":"10003","isDefault":true},"projectIds":["10000","10001"]},{"issueTypeScheme":{"id":"10001","name":"SUP: Kanban Issue Type Scheme","description":"A collection of issue types suited to use in a kanban style project."},"projectIds":["10002"]},{"issueTypeScheme":{"id":"10002","name":"HR: Scrum issue type scheme","description":"","defaultIssueTypeId":"10004","issueTypes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"description":"Improvement Issue Type","hierarchyLevel":-1,"iconUrl":"www.example.com","id":"1000L","name":"Improvements","subtask":true}]}},"projectIds":["10003","10004","10005"]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeSchemeProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type schemes for projects';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Assigns an issue type scheme to a project.\n\nIf any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.\n\nIssue type schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'assignIssueTypeSchemeToProject';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeSchemeId: '10000';
              projectId: '10000';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeProjectAssociation';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["This issue type scheme can\'t be assigned to the project. This is because some issues in this project use issue types not present in the scheme. Before assigning the scheme to the project, update the issue types on these issues: 7"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type scheme or the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign issue type scheme to project';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira', 'write:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue type scheme.\n\nOnly issue type schemes used in classic projects can be deleted.\n\nAny projects assigned to the scheme are reassigned to the default issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteIssueTypeScheme';
      parameters: [
        {
          description: 'The ID of the issue type scheme.';
          in: 'path';
          name: 'issueTypeSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue type scheme is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The default issue type scheme can\'t be removed."],"errors":{}}';
            };
          };
          description: 'Returned if the request is to delete the default issue type scheme.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue type scheme';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-type-scheme:jira', 'write:project:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateIssueTypeScheme';
      parameters: [
        {
          description: 'The ID of the issue type scheme.';
          in: 'path';
          name: 'issueTypeSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultIssueTypeId: '10002';
              description: 'A collection of issue types suited to use in a kanban style project.';
              name: 'Kanban Issue Type Scheme';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeUpdateDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The default issue type has to be one of the issue types of the scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue type scheme';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype': {
    put: {
      deprecated: false;
      description: 'Adds issue types to an issue type scheme.\n\nThe added issue types are appended to the issue types list.\n\nIf any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addIssueTypesToIssueTypeScheme';
      parameters: [
        {
          description: 'The ID of the issue type scheme.';
          in: 'path';
          name: 'issueTypeSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10002', '10003'];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These issue types were not added because they are already present in the issue type scheme: 10002, 10003"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These issue types were not found: 10000, 10002"],"errors":{}}';
            };
          };
          description: 'Returned if the issue type or the issue type scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add issue types to issue type scheme';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move': {
    put: {
      deprecated: false;
      description: 'Changes the order of issue types in an issue type scheme.\n\nThe request body parameters must meet the following requirements:\n\n *  all of the issue types must belong to the issue type scheme.\n *  either `after` or `position` must be provided.\n *  the issue type in `after` must not be in the issue type list.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'reorderIssueTypesInIssueTypeScheme';
      parameters: [
        {
          description: 'The ID of the issue type scheme.';
          in: 'path';
          name: 'issueTypeSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10008';
              issueTypeIds: ['10001', '10004', '10002'];
            };
            schema: {
              $ref: '#/components/schemas/OrderOfIssueTypes';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme does not include some of the specified issue types. Issue type IDs missing from the scheme are:  10007, 10008"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Change order of issue types';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}': {
    delete: {
      deprecated: false;
      description: 'Removes an issue type from an issue type scheme.\n\nThis operation cannot remove:\n\n *  any issue type used by issues.\n *  any issue types from the default issue type scheme.\n *  the last standard issue type from an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeIssueTypeFromIssueTypeScheme';
      parameters: [
        {
          description: 'The ID of the issue type scheme.';
          in: 'path';
          name: 'issueTypeSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueTypeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Can\'t remove the last standard issue type from the issue type scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type was not found in the issue type scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove issue type from issue type scheme';
      tags: ['Issue type schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type screen schemes.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeScreenSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with issue type screen scheme name.';
          in: 'query';
          name: 'queryString';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type screen scheme name.\n *  `id` Sorts by issue type screen scheme ID.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: 'id';
            enum: ['name', '-name', '+name', 'id', '-id', '+id'];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"id":"1","name":"Default Issue Type Screen Scheme","description":"The default issue type screen scheme"},{"id":"10000","name":"Office issue type screen scheme","description":"Managing office projects","projects":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type screen schemes';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createIssueTypeScreenScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeMappings: [
                {
                  issueTypeId: 'default';
                  screenSchemeId: '10001';
                },
                {
                  issueTypeId: '10001';
                  screenSchemeId: '10002';
                },
                {
                  issueTypeId: '10002';
                  screenSchemeId: '10002';
                },
              ];
              name: 'Scrum issue type screen scheme';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeDetails';
            };
          };
        };
        description: 'An issue type screen scheme bean.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/IssueTypeScreenSchemeId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["One or more issue type IDs are repeated, an issue type ID can only be specified once."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["One or more issue type IDs were not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type or screen scheme is not found.';
        };
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create issue type screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/mapping': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type screen scheme items.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeScreenSchemeMappings';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.';
          in: 'query';
          name: 'issueTypeScreenSchemeId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"issueTypeId":"10000","issueTypeScreenSchemeId":"10020","screenSchemeId":"10010"},{"issueTypeId":"10001","issueTypeScreenSchemeId":"10021","screenSchemeId":"10010"},{"issueTypeId":"10002","issueTypeScreenSchemeId":"10022","screenSchemeId":"10010"},{"issueTypeId":"default","issueTypeScreenSchemeId":"10023","screenSchemeId":"10011"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemeItem';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type screen scheme items';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/project': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueTypeScreenSchemeProjectAssociations';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          required: true;
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"issueTypeScreenScheme":{"id":"1","name":"Default Issue Type Screen Scheme","description":"The default issue type screen scheme"},"projectIds":["10000","10001"]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemesProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type screen schemes for projects';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Assigns an issue type screen scheme to a project.\n\nIssue type screen schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'assignIssueTypeScreenSchemeToProject';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeScreenSchemeId: '10001';
              projectId: '10002';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeProjectAssociation';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only classic projects can have issue type screen schemes assigned."],"errors":{}}';
            };
          };
          description: 'Returned if:\n\n *  project is not found.\n *  issue type screen scheme is not found.\n *  the project is not a classic project.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type screen scheme or the project are missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign issue type screen scheme to project';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira', 'write:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteIssueTypeScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the issue type screen scheme is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme cannot be deleted because it is assigned to one or more projects."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type screen scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue type screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateIssueTypeScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Screens for scrum issue types.';
              name: 'Scrum scheme';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeUpdateDetails';
            };
          };
        };
        description: 'The issue type screen scheme update details.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme name is in use."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type screen scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue type screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping': {
    put: {
      deprecated: false;
      description: 'Appends issue type to screen scheme mappings to an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'appendMappingsForIssueTypeScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeMappings: [
                {
                  issueTypeId: '10000';
                  screenSchemeId: '10001';
                },
                {
                  issueTypeId: '10001';
                  screenSchemeId: '10002';
                },
                {
                  issueTypeId: '10002';
                  screenSchemeId: '10002';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeMappingDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A default mapping cannot be added."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type screen scheme, issue type, or screen scheme is not found.';
        };
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Append mappings to issue type screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default': {
    put: {
      deprecated: false;
      description: 'Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateDefaultScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              screenSchemeId: '10010';
            };
            schema: {
              $ref: '#/components/schemas/UpdateDefaultScreenScheme';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screenSchemeId has to be provided."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: "Returned if the issue type screen scheme or the screen scheme is not found, or the screen scheme isn't used in classic projects.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update issue type screen scheme default screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove': {
    post: {
      deprecated: false;
      description: 'Removes issue type to screen scheme mappings from an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeMappingsFromIssueTypeScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10001', '10004'];
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeIds';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the screen scheme mappings are removed from the issue type screen scheme.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issueTypeIds must not contain duplicates."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the issue type screen scheme or one or more issue type mappings are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove mappings from issue type screen scheme';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.\n\nOnly company-managed projects associated with an issue type screen scheme are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getProjectsForIssueTypeScreenScheme';
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.';
          in: 'path';
          name: 'issueTypeScreenSchemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          in: 'query';
          name: 'query';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanProjectDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue type screen scheme projects';
      tags: ['Issue type screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira', 'read:avatar:jira', 'read:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/jql/autocompletedata': {
    get: {
      deprecated: false;
      description: 'Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.\n\nTo filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAutoComplete';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"jqlReservedWords":["empty","and","or","in","distinct"],"visibleFieldNames":[{"displayName":"summary","operators":["~","!~","is","is not"],"orderable":"true","searchable":"true","types":["java.lang.String"],"value":"summary"},{"auto":"true","cfid":"cf[10880]","displayName":"Sprint - cf[10880]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","searchable":"true","types":["com.atlassian.greenhopper.service.sprint.Sprint"],"value":"Sprint"}],"visibleFunctionNames":[{"displayName":"standardIssueTypes()","isList":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"standardIssueTypes()"},{"displayName":"issuesWithText()","supportsListAndSingleValueOperators":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"issuesWithText()"}]}';
              schema: {
                $ref: '#/components/schemas/JQLReferenceData';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get field reference data (GET)';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.\n\nThis operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.\n\nIt can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAutoCompletePost';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              includeCollapsedFields: true;
              projectIds: [10000, 10001, 10002];
            };
            schema: {
              $ref: '#/components/schemas/SearchAutoCompleteFilter';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"jqlReservedWords":["empty","and","or","in","distinct"],"visibleFieldNames":[{"displayName":"summary","operators":["~","!~","is","is not"],"orderable":"true","searchable":"true","types":["java.lang.String"],"value":"summary"},{"auto":"true","cfid":"cf[10061]","displayName":"Component - cf[10061]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"cf[10061]"},{"auto":"true","cfid":"cf[10062]","displayName":"Component - cf[10062]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"cf[10062]"},{"auto":"true","displayName":"Component - Component[Dropdown]","operators":["=","!=","in","not in","is","is not"],"searchable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"\\"Component[Dropdown]\\""}],"visibleFunctionNames":[{"displayName":"standardIssueTypes()","isList":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"standardIssueTypes()"}]}';
              schema: {
                $ref: '#/components/schemas/JQLReferenceData';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get field reference data (POST)';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/jql/autocompletedata/suggestions': {
    get: {
      deprecated: false;
      description: 'Returns the JQL search auto complete suggestions for a field.\n\nSuggestions can be obtained by providing:\n\n *  `fieldName` to get a list of all values for the field.\n *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.\n *  `fieldName` and `predicateName` to get a list of all predicate values for the field.\n *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getFieldAutoCompleteForQueryString';
      parameters: [
        {
          description: 'The name of the field.';
          in: 'query';
          name: 'fieldName';
          schema: {
            example: 'reporter';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The partial field item name entered by the user.';
          in: 'query';
          name: 'fieldValue';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.';
          in: 'query';
          name: 'predicateName';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The partial predicate item name entered by the user.';
          in: 'query';
          name: 'predicateValue';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"results":[{"displayName":"<b>Ac</b>tiveObjects (AO)","value":"ActiveObjects"},{"displayName":"Atlassian Connect (<b>AC</b>)","value":"Atlassian Connect"},{"displayName":"Atlassian Connect in Jira (<b>AC</b>JIRA)","value":"Atlassian Connect in Jira"}]}';
              schema: {
                $ref: '#/components/schemas/AutoCompleteSuggestions';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if an invalid combination of parameters is passed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get field auto complete suggestions';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-details:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/jql/function/computation': {
    get: {
      deprecated: false;
      description: "Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \\- the JQL fragment to replace the custom function clause with.\n\n**[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.\n\nThe new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'getPrecomputations';
      parameters: [
        {
          description: 'The function key in format:\n\n *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`\n *  Connect: `[App key]__[Module key]`';
          in: 'query';
          name: 'functionKey';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `functionKey` Sorts by the functionKey.\n *  `used` Sorts by the used timestamp.\n *  `created` Sorts by the created timestamp.\n *  `updated` Sorts by the updated timestamp.';
          in: 'query';
          name: 'orderBy';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"id":"cf75a1b0-4ac6-4bd8-8a50-29a465a96520","value":"issue in (TEST-1, TEST-2, TEST-3)","functionKey":"ari:cloud:ecosystem::extension/00000000-1111-2222-3333-4444444/111111-2222-3333-4444-55555/static/issuesWithText","field":"issue","operator":"in","functionName":"issuesWithText","arguments":["Test"],"created":"2023-10-14T05:25:20.000+0000","updated":"2023-10-14T05:25:20.000+0000","used":"2023-10-14T05:25:20.000+0000"},{"id":"2a854f11-d0e1-4260-aea8-64a562a7062a","error":"Error message to be displayed to the user","functionKey":"ari:cloud:ecosystem::extension/00000000-1111-2222-3333-4444444/111111-2222-3333-4444-55555/static/issuesWithText","field":"issue","operator":"=","functionName":"issuesWithText","arguments":["10001"],"created":"2023-10-14T05:25:20.000+0000","updated":"2023-10-14T05:25:20.000+0000","used":"2023-10-14T05:25:20.000+0000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanJqlFunctionPrecomputationBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the function.';
        };
        '404': {
          description: 'Returned if the function is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Get precomputations (apps)';
      tags: ['JQL functions (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:app-data:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    post: {
      deprecated: false;
      description: "Update the precomputation value of a function created by a Forge/Connect app.\n\n**[Permissions](#permissions) required:** An API for apps to update their own precomputations.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'updatePrecomputations';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              values: [
                {
                  id: 'f2ef228b-367f-4c6b-bd9d-0d0e96b5bd7b';
                  value: 'issue in (TEST-1, TEST-2, TEST-3)';
                },
                {
                  error: 'Error message to be displayed to the user';
                  id: '2a854f11-d0e1-4260-aea8-64a562a7062a';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/JqlFunctionPrecomputationUpdateRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the function.';
        };
        '404': {
          description: 'Returned if the function is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Update precomputations (apps)';
      tags: ['JQL functions (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/jql/match': {
    post: {
      deprecated: false;
      description: 'Checks whether one or more issues would be returned by one or more JQL queries.\n\n**[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'matchIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIds: [10001, 1000, 10042];
              jqls: ['project = FOO', 'issuetype = Bug', 'summary ~ "some text" AND project in (FOO, BAR)'];
            };
            schema: {
              $ref: '#/components/schemas/IssuesAndJQLQueries';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"matches":[{"matchedIssues":[10000,10004],"errors":[]},{"matchedIssues":[100134,10025,10236],"errors":[]},{"matchedIssues":[],"errors":[]},{"matchedIssues":[],"errors":["Invalid JQL: broken = value"]}]}';
              schema: {
                $ref: '#/components/schemas/IssueMatches';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Check issues against JQL';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-details:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/jql/parse': {
    post: {
      deprecated: false;
      description: 'Parses and validates JQL queries.\n\nValidation is performed in context of the current user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'parseJqlQueries';
      parameters: [
        {
          description: 'How to validate the JQL query and treat the validation results. Validation options include:\n\n *  `strict` Returns all errors. If validation fails, the query structure is not returned.\n *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.\n *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.';
          in: 'query';
          name: 'validation';
          required: true;
          schema: {
            default: 'strict';
            enum: ['strict', 'warn', 'none'];
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              queries: [
                'summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER startOfMonth(-1M) ORDER BY updated DESC',
                'issue.property["spaces here"].value in ("Service requests", Incidents)',
                'invalid query',
                'summary = test',
                'summary in test',
                'project = INVALID',
                'universe = 42',
              ];
            };
            schema: {
              $ref: '#/components/schemas/JqlQueriesToParse';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"queries":[{"query":"summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER -5d ORDER BY updated DESC","structure":{"orderBy":{"fields":[{"direction":"desc","field":{"encodedName":"updated","name":"updated"}}]},"where":{"clauses":[{"field":{"encodedName":"summary","name":"summary"},"operand":{"encodedValue":"test","value":"test"},"operator":"~"},{"clauses":[{"field":{"encodedName":"labels","name":"labels"},"operand":{"encodedOperand":"urgent, blocker)","values":[{"encodedValue":"urgent","value":"urgent"},{"encodedValue":"blocker","value":"blocker"}]},"operator":"in"},{"field":{"encodedName":"lastCommentedBy","name":"lastCommentedBy","property":[{"entity":"issue","key":"propertyKey","path":"path.in.property","type":"user"}]},"operand":{"arguments":[],"encodedOperand":"currentUser()","function":"currentUser"},"operator":"="}],"operator":"or"},{"field":{"encodedName":"status","name":"status"},"operator":"changed","predicates":[{"operand":{"arguments":["-1M"],"encodedOperand":"startOfMonth(-1M)","function":"startOfMonth"},"operator":"after"}]}],"operator":"and"}}},{"query":"issue.property[\\"spaces here\\"].value in (\\"Service requests\\", Incidents)","structure":{"where":{"field":{"encodedName":"issue.property[\\"spaces here\\"].value","name":"issue.property[spaces here].value","property":[{"entity":"issue","key":"spaces here","path":"value"}]},"operand":{"encodedOperand":"(\\"Service requests\\", Incidents)","values":[{"encodedValue":"\\"Service requests\\"","value":"Service requests"},{"encodedValue":"Incidents","value":"Incidents"}]},"operator":"in"}}},{"errors":["Error in the JQL Query: Expecting operator but got \'query\'. The valid operators are \'=\', \'!=\', \'<\', \'>\', \'<=\', \'>=\', \'~\', \'!~\', \'IN\', \'NOT IN\', \'IS\' and \'IS NOT\'. (line 1, character 9)"],"query":"invalid query"},{"errors":["The operator \'=\' is not supported by the \'summary\' field."],"query":"summary = test"},{"errors":["Operator \'in\' does not support the non-list value \'\\"test\\"\' for field \'summary\'."],"query":"summary in test"},{"errors":["The value \'INVALID\' does not exist for the field \'project\'."],"query":"project = INVALID"},{"errors":["Field \'universe\' does not exist or you do not have permission to view it."],"query":"universe = 42"}]}';
              schema: {
                $ref: '#/components/schemas/ParsedJqlQueries';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Parse JQL query';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'validate:jql:jira', 'read:jql:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/jql/pdcleaner': {
    post: {
      deprecated: false;
      description: 'Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.\n\nYou may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'migrateQueries';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              queryStrings: [
                'assignee = mia',
                'issuetype = Bug AND assignee in (mia) AND reporter in (alana) order by lastViewed DESC',
              ];
            };
            schema: {
              $ref: '#/components/schemas/JQLPersonalDataMigrationRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"queriesWithUnknownUsers":[{"convertedQuery":"assignee = unknown","originalQuery":"assignee = mia"}],"queryStrings":["issuetype = Bug AND assignee in (abcde-12345) AND reporter in (abc551-c4e99) order by lastViewed DESC"]}';
              schema: {
                $ref: '#/components/schemas/ConvertedJQLQueries';
              };
            };
          };
          description: 'Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Convert user identifiers to account IDs in JQL queries';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira', 'read:jql:jira', 'validate:jql:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/jql/sanitize': {
    post: {
      deprecated: false;
      description: "Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.\n\nFor example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project \"Secret project\", the sanitized query replaces the clause with *project = 12345\"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.\n\nNote that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).\n\nBefore sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'sanitiseJqlQueries';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              queries: [
                {
                  query: "project = 'Sample project'";
                },
                {
                  accountId: '5b10ac8d82e05b22cc7d4ef5';
                  query: "project = 'Sample project'";
                },
                {
                  accountId: 'cda2aa1395ac195d951b3387';
                  query: "project = 'Sample project'";
                },
                {
                  accountId: '5b10ac8d82e05b22cc7d4ef5';
                  query: 'invalid query';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/JqlQueriesToSanitize';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"queries":[{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = 12345"},{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = \'Sample project\'","accountId":"5b10ac8d82e05b22cc7d4ef5"},{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = 12345","accountId":"cda2aa1395ac195d951b3387"},{"initialQuery":"non-parsable query","errors":{"errorMessages":["Error in the JQL Query: Expecting operator but got \'query\'. The valid operators are \'=\', \'!=\', \'<\', \'>\', \'<=\', \'>=\', \'~\', \'!~\', \'IN\', \'NOT IN\', \'IS\' and \'IS NOT\'. (line 1, character 9)"],"errors":{}},"accountId":"5b10ac8d82e05b22cc7d4ef5"}]}';
              schema: {
                $ref: '#/components/schemas/SanitizedJqlQueries';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The queries has to be provided."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Sanitize JQL queries';
      tags: ['JQL'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jql:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/label': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of labels.';
      operationId: 'getAllLabels';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 1000;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"startAt":0,"total":100,"values":["performance","security"]}';
              schema: {
                $ref: '#/components/schemas/PageBeanString';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get all labels';
      tags: ['Labels'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:label:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/license/approximateLicenseCount': {
    get: {
      deprecated: false;
      description: 'Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getApproximateLicenseCount';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"license.totalApproximateUserCount","value":"1000"}';
              schema: {
                $ref: '#/components/schemas/LicenseMetric';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollections';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access license details."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollections';
              };
            };
          };
          description: 'Returned if the user does not have permission to complete this request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get approximate license count';
      tags: ['License metrics'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:license:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/license/approximateLicenseCount/product/{applicationKey}': {
    get: {
      deprecated: false;
      description: 'Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getApproximateApplicationLicenseCount';
      parameters: [
        {
          description: 'The ID of the application, represents a specific version of Jira.';
          in: 'path';
          name: 'applicationKey';
          required: true;
          schema: {
            enum: ['jira-core', 'jira-product-discovery', 'jira-software', 'jira-servicedesk'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"license.jira-software.approximateUserCount","value":"115"}';
              schema: {
                $ref: '#/components/schemas/LicenseMetric';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access license details."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have permission to complete this request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get approximate application license count';
      tags: ['License metrics'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:license:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/mypermissions': {
    get: {
      deprecated: false;
      description: "Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.\n\nThe user is reported as having a project permission:\n\n *  in the global context, if the user has the project permission in any project.\n *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.\n *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.\n *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\\_PROJECTS, a 400 error will be returned.\n\nThis means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.\n\nFor [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\\_PROJECTS permission.\n\nGlobal permissions are unaffected by context.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.";
      operationId: 'getMyPermissions';
      parameters: [
        {
          description: 'The key of project. Ignored if `projectId` is provided.';
          in: 'query';
          name: 'projectKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of project.';
          in: 'query';
          name: 'projectId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the issue. Ignored if `issueId` is provided.';
          in: 'query';
          name: 'issueKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue.';
          in: 'query';
          name: 'issueId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).';
          in: 'query';
          name: 'permissions';
          schema: {
            example: 'BROWSE_PROJECTS,EDIT_ISSUES';
            type: 'string';
          };
          'x-changes': [
            {
              announced: '2018-08-01';
              details: 'https://developer.atlassian.com/cloud/jira/platform/change-notice-get-my-permissions-requires-permissions-query-parameter/';
              effective: '2019-02-01';
              type: 'required';
            },
          ];
          'x-showInExample': 'true';
        },
        {
          in: 'query';
          name: 'projectUuid';
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'projectConfigurationUuid';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the comment.';
          in: 'query';
          name: 'commentId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"permissions":{"EDIT_ISSUES":{"description":"Ability to edit issues.","havePermission":true,"id":"12","key":"EDIT_ISSUES","name":"Edit Issues","type":"PROJECT"}}}';
              schema: {
                $ref: '#/components/schemas/Permissions';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\\_PROJECTS when commentId is provided.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the project or issue is not found or the user does not have permission to view the project or issue.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get my permissions';
      tags: ['Permissions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:permission:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/mypreferences': {
    delete: {
      deprecated: false;
      description: 'Deletes a preference of the user, which restores the default value of system defined settings.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.\n *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'removePreference';
      parameters: [
        {
          description: 'The key of the preference.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the key is not provided or not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete preference';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:user-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the value of a preference of the current user.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.\n *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.\n\nThese system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.\n\n *  *user.notifications.watcher* Whether the user gets notified when they are watcher.\n *  *user.notifications.assignee* Whether the user gets notified when they are assignee.\n *  *user.notifications.reporter* Whether the user gets notified when they are reporter.\n *  *user.notifications.mentions* Whether the user gets notified when they are mentions.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPreference';
      parameters: [
        {
          description: 'The key of the preference.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the key is not provided or not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get preference';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:\n\n *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.\n *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.\n *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.\n *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.\n *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.\n *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.\n\nThese system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.\n\n *  *user.notifications.watcher* Whether the user gets notified when they are watcher.\n *  *user.notifications.assignee* Whether the user gets notified when they are assignee.\n *  *user.notifications.reporter* Whether the user gets notified when they are reporter.\n *  *user.notifications.mentions* Whether the user gets notified when they are mentions.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.";
      operationId: 'setPreference';
      parameters: [
        {
          description: 'The key of the preference. The maximum length is 255 characters.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              type: 'string';
            };
          };
          'text/plain': {
            schema: {
              type: 'string';
            };
          };
        };
        description: 'The value of the preference as a plain text string. The maximum length is 255 characters.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the key or value is not provided or invalid.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set preference';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:user-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/mypreferences/locale': {
    delete: {
      deprecated: true;
      description: 'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.\n\nDeletes the locale of the user, which restores the default setting.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'deleteLocale';
      parameters: [];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Delete locale';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the locale for the user.\n\nIf the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.";
      operationId: 'getLocale';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"locale":"en_US"}';
              schema: {
                $ref: '#/components/schemas/Locale';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Get locale';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user-configuration:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: true;
      description: 'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.\n\nSets the locale of the user. The locale must be one supported by the instance of Jira.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'setLocale';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              locale: 'en_US';
            };
            schema: {
              $ref: '#/components/schemas/Locale';
            };
          };
        };
        description: 'The locale defined in a LocaleBean.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Set locale';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/myself': {
    get: {
      deprecated: false;
      description: 'Returns details for the current user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getCurrentUser';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` Returns all groups, including nested groups, the user belongs to.\n *  `applicationRoles` Returns the application roles the user is assigned to.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}';
              schema: {
                $ref: '#/components/schemas/User';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get current user';
      tags: ['Myself'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/notificationscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.\n\n*Note that you should allow for events without recipients to appear in responses.*\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.';
      operationId: 'getNotificationSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of notification schemes IDs to be filtered by';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of projects IDs to be filtered by';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.';
          in: 'query';
          name: 'onlyDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":6,"startAt":1,"total":5,"values":[{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanNotificationScheme';
              };
            };
          };
          description: 'Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["%20. is not a valid value. id must be zero or a positive integer."],"errors":{}}';
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get notification schemes paginated';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:field:jira',
            'read:notification-scheme:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project-category:jira',
            'read:field-configuration:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a notification scheme with notifications. You can create up to 1000 notifications per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createNotificationScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My new scheme description';
              name: 'My new notification scheme';
              notificationSchemeEvents: [
                {
                  event: {
                    id: '1';
                  };
                  notifications: [
                    {
                      notificationType: 'Group';
                      parameter: 'jira-administrators';
                    },
                  ];
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/CreateNotificationSchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/NotificationSchemeId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 4000 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/notificationscheme/project': {
    get: {
      deprecated: false;
      description: "Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.\n\n**[Permissions](#permissions) required:** Permission to access Jira.";
      operationId: 'getNotificationSchemeToProjectMappings';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of notifications scheme IDs to be filtered out';
          in: 'query';
          name: 'notificationSchemeId';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of project IDs to be filtered out';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":4,"values":[{"notificationSchemeId":"10001","projectId":"100001"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanNotificationSchemeAndProjectMappingJsonBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get projects using notification schemes paginated';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:notification-scheme:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/notificationscheme/{id}': {
    get: {
      deprecated: false;
      description: 'Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.';
      operationId: 'getNotificationScheme';
      parameters: [
        {
          description: 'The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}';
              schema: {
                $ref: '#/components/schemas/NotificationScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the notification scheme is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:field:jira',
            'read:notification-scheme:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:group:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateNotificationScheme';
      parameters: [
        {
          description: 'The ID of the notification scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated notification scheme description';
              name: 'My updated notification scheme';
            };
            schema: {
              $ref: '#/components/schemas/UpdateNotificationSchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 4000 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the notification scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/notificationscheme/{id}/notification': {
    put: {
      deprecated: false;
      description: 'Adds notifications to a notification scheme. You can add up to 1000 notifications per request.\n\n*Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addNotifications';
      parameters: [
        {
          description: 'The ID of the notification scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              notificationSchemeEvents: [
                {
                  event: {
                    id: '1';
                  };
                  notifications: [
                    {
                      notificationType: 'Group';
                      parameter: 'jira-administrators';
                    },
                  ];
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/AddNotificationsDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Event type with ID 2 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10001 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the notification scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add notifications to notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/notificationscheme/{notificationSchemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteNotificationScheme';
      parameters: [
        {
          description: 'The ID of the notification scheme.';
          in: 'path';
          name: 'notificationSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You can’t delete the default notification scheme."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the notification scheme isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}': {
    delete: {
      deprecated: false;
      description: 'Removes a notification from a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeNotificationFromNotificationScheme';
      parameters: [
        {
          description: 'The ID of the notification scheme.';
          in: 'path';
          name: 'notificationSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the notification.';
          in: 'path';
          name: 'notificationId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if either the notification scheme or notification isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Remove notification from notification scheme';
      tags: ['Issue notification schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/permissions': {
    get: {
      deprecated: false;
      description: 'Returns all permissions, including:\n\n *  global permissions.\n *  project permissions.\n *  global permissions added by plugins.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllPermissions';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"permissions":{"BULK_CHANGE":{"description":"Ability to modify a collection of issues at once. For example, resolve multiple issues in one step.","key":"BULK_CHANGE","name":"Bulk Change","type":"GLOBAL"}}}';
              schema: {
                $ref: '#/components/schemas/Permissions';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Get all permissions';
      tags: ['Permissions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:permission:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissions/check': {
    post: {
      deprecated: false;
      description: "Returns:\n\n *  for a list of global permissions, the global permissions granted to a user.\n *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.\n\nIf no account ID is provided, the operation returns details for the logged in user.\n\nNote that:\n\n *  Invalid project and issue IDs are ignored.\n *  A maximum of 1000 projects and 1000 issues can be checked.\n *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.\n *  Empty strings in `projectPermissions.permissions` are ignored.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  **Classic**: `read:jira-work`\n *  **Granular**: `read:permission:jira`\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.";
      operationId: 'getBulkPermissions';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10a2844c20165700ede21g';
              globalPermissions: ['ADMINISTER'];
              projectPermissions: [
                {
                  issues: [10010, 10011, 10012, 10013, 10014];
                  permissions: ['EDIT_ISSUES'];
                  projects: [10001];
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/BulkPermissionsRequestBean';
            };
          };
        };
        description: 'Details of the permissions to check.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"globalPermissions":["ADMINISTER"],"projectPermissions":[{"issues":[10010,10013,10014],"permission":"EDIT_ISSUES","projects":[10001]}]}';
              schema: {
                $ref: '#/components/schemas/BulkPermissionGrants';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"PERMISSION_123":"Unrecognized permission"}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if:\n\n *  `projectPermissions` is provided without at least one project permission being provided.\n *  an invalid global permission is provided in the global permissions list.\n *  an invalid project permission is provided in the project permissions list.\n *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.\n *  an invalid account ID is provided.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can perform this operation."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
        {},
      ];
      summary: 'Get bulk permissions';
      tags: ['Permissions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:permission:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissions/project': {
    post: {
      deprecated: false;
      description: 'Returns all the projects where the user is granted a list of project permissions.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getPermittedProjects';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/PermissionsKeysBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PermittedProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if a project permission is not found.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get permitted projects';
      tags: ['Permissions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:permission:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissionscheme': {
    get: {
      deprecated: false;
      description: 'Returns all permission schemes.\n\n### About permission schemes and grants ###\n\nA permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.\n\n#### Holder object ####\n\nThe `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.\n\nThe `holder` object is defined by the following properties:\n\n *  `type` Identifies the user or group (see the list of types below).\n *  `parameter` As a group\'s name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.\n *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`\n\nThe following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):\n\n *  `anyone` Grant for anonymous users.\n *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.\n *  `assignee` Grant for the user currently assigned to an issue.\n *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).\n *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).\n *  `projectLead` Grant for a project lead.\n *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).\n *  `reporter` Grant for the user who reported the issue.\n *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.\n *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).\n *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).\n\n#### Built-in permissions ####\n\nThe [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.\n\n**Project permissions**\n\n *  `ADMINISTER_PROJECTS`\n *  `BROWSE_PROJECTS`\n *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)\n *  `SERVICEDESK_AGENT` (Jira Service Desk only)\n *  `VIEW_DEV_TOOLS` (Jira Software only)\n *  `VIEW_READONLY_WORKFLOW`\n\n**Issue permissions**\n\n *  `ASSIGNABLE_USER`\n *  `ASSIGN_ISSUES`\n *  `CLOSE_ISSUES`\n *  `CREATE_ISSUES`\n *  `DELETE_ISSUES`\n *  `EDIT_ISSUES`\n *  `LINK_ISSUES`\n *  `MODIFY_REPORTER`\n *  `MOVE_ISSUES`\n *  `RESOLVE_ISSUES`\n *  `SCHEDULE_ISSUES`\n *  `SET_ISSUE_SECURITY`\n *  `TRANSITION_ISSUES`\n\n**Voters and watchers permissions**\n\n *  `MANAGE_WATCHERS`\n *  `VIEW_VOTERS_AND_WATCHERS`\n\n**Comments permissions**\n\n *  `ADD_COMMENTS`\n *  `DELETE_ALL_COMMENTS`\n *  `DELETE_OWN_COMMENTS`\n *  `EDIT_ALL_COMMENTS`\n *  `EDIT_OWN_COMMENTS`\n\n**Attachments permissions**\n\n *  `CREATE_ATTACHMENTS`\n *  `DELETE_ALL_ATTACHMENTS`\n *  `DELETE_OWN_ATTACHMENTS`\n\n**Time tracking permissions**\n\n *  `DELETE_ALL_WORKLOGS`\n *  `DELETE_OWN_WORKLOGS`\n *  `EDIT_ALL_WORKLOGS`\n *  `EDIT_OWN_WORKLOGS`\n *  `WORK_ON_ISSUES`\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getAllPermissionSchemes';
      parameters: [
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"permissionSchemes":[{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}]}';
              schema: {
                $ref: '#/components/schemas/PermissionSchemes';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get all permission schemes';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createPermissionScheme';
      parameters: [
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description';
              name: 'Example permission scheme';
              permissions: [
                {
                  holder: {
                    parameter: 'jira-core-users';
                    type: 'group';
                    value: 'ca85fac0-d974-40ca-a615-7af99c48d24f';
                  };
                  permission: 'ADMINISTER_PROJECTS';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/PermissionScheme';
            };
          };
        };
        description: 'The permission scheme to create.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionScheme';
              };
            };
          };
          description: 'Returned if the permission scheme is created.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create permission scheme';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:permission-scheme:jira',
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissionscheme/{schemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a permission scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deletePermissionScheme';
      parameters: [
        {
          description: 'The ID of the permission scheme being deleted.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the permission scheme is deleted.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the permission scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete permission scheme';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:permission-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a permission scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPermissionScheme';
      parameters: [
        {
          description: 'The ID of the permission scheme to return.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the permission scheme is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get permission scheme';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a permission scheme. Below are some important things to note when using this resource:\n\n *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.\n *  If you want to update only the name and description, then do not send a permissions list in the request.\n *  Sending an empty list will remove all permission grants from the permission scheme.\n\nIf you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).\n\nSee [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updatePermissionScheme';
      parameters: [
        {
          description: 'The ID of the permission scheme to update.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description';
              name: 'Example permission scheme';
              permissions: [
                {
                  holder: {
                    parameter: 'jira-core-users';
                    type: 'group';
                    value: 'ca85fac0-d974-40ca-a615-7af99c48d24f';
                  };
                  permission: 'ADMINISTER_PROJECTS';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/PermissionScheme';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionScheme';
              };
            };
          };
          description: 'Returned if the scheme is updated.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if:\n\n *  the user does not have the necessary permission to update permission schemes.\n *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.';
        };
        '404': {
          description: 'Returned if the permission scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update permission scheme';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:permission-scheme:jira',
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissionscheme/{schemeId}/permission': {
    get: {
      deprecated: false;
      description: 'Returns all permission grants for a permission scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPermissionSchemeGrants';
      parameters: [
        {
          description: 'The ID of the permission scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expand":"user,group,projectRole,field,all","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}]}';
              schema: {
                $ref: '#/components/schemas/PermissionGrants';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the permission schemes is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get permission scheme grants';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a permission grant in a permission scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createPermissionGrant';
      parameters: [
        {
          description: 'The ID of the permission scheme in which to create a new permission grant.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              holder: {
                parameter: 'jira-core-users';
                type: 'group';
                value: 'ca85fac0-d974-40ca-a615-7af99c48d24f';
              };
              permission: 'ADMINISTER_PROJECTS';
            };
            schema: {
              $ref: '#/components/schemas/PermissionGrant';
            };
          };
        };
        description: 'The permission grant to create.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionGrant';
              };
            };
          };
          description: 'Returned if the scheme permission is created.';
        };
        '400': {
          description: 'Returned if the value for expand is invalid or the same permission grant is present.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create permission grant';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:permission:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deletePermissionSchemeEntity';
      parameters: [
        {
          description: 'The ID of the permission scheme to delete the permission grant from.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the permission grant to delete.';
          in: 'path';
          name: 'permissionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the permission grant is deleted.';
        };
        '400': {
          description: 'Returned if permission grant with the provided ID is not found.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete permission scheme grant';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:permission:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a permission grant.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPermissionSchemeGrant';
      parameters: [
        {
          description: 'The ID of the permission scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the permission grant.';
          in: 'path';
          name: 'permissionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionGrant';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get permission scheme grant';
      tags: ['Permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/priority': {
    get: {
      deprecated: true;
      description: 'Returns the list of all issue priorities.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPriorities';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Priority';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get priorities';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:priority:jira'];
          state: 'Beta';
        },
      ];
      'x-changes': [
        {
          announced: '2022-10-11';
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-762';
          effective: '2023-04-11';
          type: 'removed';
        },
      ];
    };
    post: {
      deprecated: true;
      description: 'Creates an issue priority.\n\nDeprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createPriority';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My priority description';
              iconUrl: 'images/icons/priorities/major.png';
              name: 'My new priority';
              statusColor: '#ABCDEF';
            };
            schema: {
              $ref: '#/components/schemas/CreatePriorityDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/PriorityId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create priority';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-changes': [
        {
          announced: '2024-09-16';
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1525';
          effective: '2025-03-16';
          type: 'removed';
        },
      ];
    };
  };
  '/rest/api/3/priority/default': {
    put: {
      deprecated: false;
      description: 'Sets default issue priority.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setDefaultPriority';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '3';
            };
            schema: {
              $ref: '#/components/schemas/SetDefaultPriorityRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue priority isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set default priority';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/priority/move': {
    put: {
      deprecated: false;
      description: 'Changes the order of issue priorities.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'movePriorities';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10003';
              ids: ['10004', '10005'];
            };
            schema: {
              $ref: '#/components/schemas/ReorderIssuePriorities';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The ids must contain no more than 1,000 items."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue priority isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Move priorities';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/priority/search': {
    get: {
      deprecated: true;
      description: 'Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:\n\n *  a list of priority IDs. Any invalid priority IDs are ignored.\n *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.\n *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'searchPriorities';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&projectId=10111`.';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The name of priority to search for.';
          in: 'query';
          name: 'priorityName';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'Whether only the default priority is returned.';
          in: 'query';
          name: 'onlyDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Use `schemes` to return the associated priority schemes for each priority. Limited to returning first 15 priority schemes per priority.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","isDefault":true,"name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","isDefault":false,"name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanPriority';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Search priorities';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-changes': [
        {
          announced: '2024-05-22';
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1655';
          effective: '2024-11-22';
          type: 'removed';
        },
      ];
    };
  };
  '/rest/api/3/priority/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue priority.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deletePriority';
      parameters: [
        {
          description: 'The ID of the issue priority.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The newPriority has to be provided."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue priority isn't found.";
        };
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a task to delete the issue priority is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete priority';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-changes': [
        {
          announced: '2023-07-18';
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1067';
          effective: '2024-05-24';
          type: 'removed';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns an issue priority.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPriority';
      parameters: [
        {
          description: 'The ID of the issue priority.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"}';
              schema: {
                $ref: '#/components/schemas/Priority';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: "Returned if the issue priority isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get priority';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:priority:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: true;
      description: 'Updates an issue priority.\n\nAt least one request body parameter must be defined.\n\nDeprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updatePriority';
      parameters: [
        {
          description: 'The ID of the issue priority.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated priority description';
              iconUrl: 'images/icons/priorities/minor.png';
              name: 'My updated priority';
              statusColor: '#123456';
            };
            schema: {
              $ref: '#/components/schemas/UpdatePriorityDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue priority isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update priority';
      tags: ['Issue priorities'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-changes': [
        {
          announced: '2024-09-16';
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1525';
          effective: '2025-03-16';
          type: 'removed';
        },
      ];
    };
  };
  '/rest/api/3/priorityscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of priority schemes.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPrioritySchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.';
          in: 'query';
          name: 'priorityId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.';
          in: 'query';
          name: 'schemeId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The name of scheme to search for.';
          in: 'query';
          name: 'schemeName';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'Whether only the default priority is returned.';
          in: 'query';
          name: 'onlyDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The ordering to return the priority schemes by.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: '+name';
            enum: ['name', '+name', '-name'];
            type: 'string';
          };
        },
        {
          description: 'A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"This is the default scheme used by all new and unassigned projects","id":"1","isDefault":true,"name":"Default Priority Scheme","priorities":{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]},"projects":{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get priority schemes';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    post: {
      deprecated: false;
      description: 'Creates a new priority scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createPriorityScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultPriorityId: 10001;
              description: 'My priority scheme description';
              mappings: {
                in: {
                  '10002': 10000;
                  '10005': 10001;
                  '10006': 10001;
                  '10008': 10003;
                };
                out: {};
              };
              name: 'My new priority scheme';
              priorityIds: [10000, 10001, 10003];
              projectIds: [10005, 10006, 10007];
            };
            schema: {
              $ref: '#/components/schemas/CreatePrioritySchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/PrioritySchemeId';
              };
            };
          };
          description: 'Returned if the request is completed.';
        };
        '202': {
          content: {
            'application/json': {
              example: '{"id":"10001","task":{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000}}';
              schema: {
                $ref: '#/components/schemas/PrioritySchemeId';
              };
            };
          };
          description: 'Returned if the request is accepted.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.";
        };
        '409': {
          description: 'Returned if an action with this priority scheme is still in progress.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/priorityscheme/mappings': {
    post: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'suggestedPrioritiesForMappings';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              maxResults: 50;
              priorities: {
                add: [10001, 10002];
                remove: [10003];
              };
              projects: {
                add: [10021];
              };
              schemeId: 10005;
              startAt: 0;
            };
            schema: {
              $ref: '#/components/schemas/SuggestedMappingsRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Suggested priorities for mappings';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/priorityscheme/priorities/available': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getAvailablePrioritiesByPriorityScheme';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The string to query priorities on by name.';
          in: 'query';
          name: 'query';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'The priority scheme ID.';
          in: 'query';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of priority IDs to exclude from the results.';
          in: 'query';
          name: 'exclude';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get available priorities by priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/priorityscheme/{schemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a priority scheme.\n\nThis operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deletePriorityScheme';
      parameters: [
        {
          description: 'The priority scheme ID.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Updates a priority scheme. This includes its details, the lists of priorities and projects in it\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updatePriorityScheme';
      parameters: [
        {
          description: 'The ID of the priority scheme.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultPriorityId: 10001;
              description: 'My priority scheme description';
              mappings: {
                in: {
                  '10005': 10002;
                };
                out: {
                  '10004': 10001;
                };
              };
              name: 'My new priority scheme';
              priorities: {
                add: {
                  ids: [10001, 10002];
                };
                remove: {
                  ids: [10003, 10004];
                  mappings: [
                    {
                      in: {
                        '10001': 10011;
                      };
                      out: {
                        '10012': 10002;
                      };
                    },
                  ];
                };
              };
              projects: {
                add: {
                  ids: [10101, 10102];
                };
                remove: {
                  ids: [10103, 10104];
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/UpdatePrioritySchemeRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              example: '{"task":{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000},"updated":{"description":"This is the default scheme used by all new and unassigned projects","id":"1","isDefault":true,"name":"Default Priority Scheme","priorities":{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]},"projects":{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}}';
              schema: {
                $ref: '#/components/schemas/UpdatePrioritySchemeResponseBean';
              };
            };
          };
          description: 'Returned if the request is accepted.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.";
        };
        '409': {
          description: 'Returned if an action with this priority scheme is still in progress.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/priorityscheme/{schemeId}/priorities': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of priorities by scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getPrioritiesByPriorityScheme';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The priority scheme ID.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get priorities by priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/priorityscheme/{schemeId}/projects': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of projects by scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getProjectsByPriorityScheme';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The project IDs to filter by. For example, `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The priority scheme ID.';
          in: 'path';
          name: 'schemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The string to query projects on by name.';
          in: 'query';
          name: 'query';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanProject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if the request isn't valid.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get projects by priority scheme';
      tags: ['Priority schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/project': {
    get: {
      deprecated: true;
      description: 'Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getAllProjects';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `lead` Returns information about the project lead.\n *  `projectKeys` Returns all project keys associated with the project.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: "Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.";
          in: 'query';
          name: 'recent';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'A list of project properties to return for the project. This parameter accepts a comma-separated list.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"CLASSIC"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"CLASSIC"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Project';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all projects';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-changes': [
        {
          announced: '2018-10-19';
          details: 'https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-removal-of-get-filters-and-get-all-projects/';
          effective: '2019-04-19';
          type: 'removed';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a project based on a project type template, as shown in the following table:\n\n| Project Type Key | Project Template Key |  \n|--|--|  \n| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  \n| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  \n| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  \nThe project types are available according to the installed Jira features as follows:\n\n *  Jira Core, the default, enables `business` projects.\n *  Jira Service Management enables `service_desk` projects.\n *  Jira Software enables `software` projects.\n\nTo determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createProject';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD';
              avatarId: 10200;
              categoryId: 10120;
              description: 'Cloud migration initiative';
              issueSecurityScheme: 10001;
              key: 'EX';
              leadAccountId: '5b10a0effa615349cb016cd8';
              name: 'Example';
              notificationScheme: 10021;
              permissionScheme: 10011;
              projectTemplateKey: 'com.atlassian.jira-core-project-templates:jira-core-simplified-process-control';
              projectTypeKey: 'business';
              url: 'http://atlassian.com';
            };
            schema: {
              $ref: '#/components/schemas/CreateProjectDetails';
            };
          };
        };
        description: 'The JSON representation of the project being created.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":10010,"key":"EX","self":"https://your-domain.atlassian.net/jira/rest/api/3/project/10042"}';
              schema: {
                $ref: '#/components/schemas/ProjectIdentifiers';
              };
            };
          };
          description: 'Returned if the project is created.';
        };
        '400': {
          description: 'Returned if the request is not valid and the project could not be created.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to create projects.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Create project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project:jira', 'read:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/recent': {
    get: {
      deprecated: false;
      description: 'Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has one of:\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getRecent';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `permissions` Returns the permissions associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\n *  `*` Returns the project with all available expand options.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              $ref: '#/components/schemas/StringList';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"CLASSIC"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"CLASSIC"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Project';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get recent projects';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/project/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of projects visible to the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has one of:\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'searchProjects';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.';
          in: 'query';
          name: 'orderBy';
          schema: {
            default: 'key';
            enum: [
              'category',
              '-category',
              '+category',
              'key',
              '-key',
              '+key',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
              'issueCount',
              '-issueCount',
              '+issueCount',
              'lastIssueUpdatedDate',
              '-lastIssueUpdatedDate',
              '+lastIssueUpdatedDate',
              'archivedDate',
              '+archivedDate',
              '-archivedDate',
              'deletedDate',
              '+deletedDate',
              '-deletedDate',
            ];
            type: 'string';
          };
        },
        {
          description: 'The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.';
          in: 'query';
          name: 'keys';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.';
          in: 'query';
          name: 'typeKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.";
          in: 'query';
          name: 'categoryId';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.';
          in: 'query';
          name: 'action';
          schema: {
            default: 'view';
            enum: ['view', 'browse', 'edit', 'create'];
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin.';
          in: 'query';
          name: 'status';
          schema: {
            items: {
              default: 'live';
              enum: ['live', 'archived', 'deleted'];
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              $ref: '#/components/schemas/StringList';
            };
            type: 'array';
          };
        },
        {
          description: 'EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.';
          in: 'query';
          name: 'propertyQuery';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"classic"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanProject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if no projects matching the search criteria are found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get projects paginated';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/type': {
    get: {
      deprecated: false;
      description: 'Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAllProjectTypes';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"},{"color":"#AAAAAA","descriptionI18nKey":"jira.project.type.software.description","formattedKey":"Software","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"software"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectType';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all project types';
      tags: ['Project types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/type/accessible': {
    get: {
      deprecated: false;
      description: 'Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.';
      operationId: 'getAllAccessibleProjectTypes';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"},{"color":"#AAAAAA","descriptionI18nKey":"jira.project.type.software.description","formattedKey":"Software","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"software"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectType';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get licensed project types';
      tags: ['Project types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/type/{projectTypeKey}': {
    get: {
      deprecated: false;
      description: 'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getProjectTypeByKey';
      parameters: [
        {
          description: 'The key of the project type.';
          in: 'path';
          name: 'projectTypeKey';
          required: true;
          schema: {
            enum: ['software', 'service_desk', 'business', 'product_discovery'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"}';
              schema: {
                $ref: '#/components/schemas/ProjectType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if the project type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project type by key';
      tags: ['Project types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/type/{projectTypeKey}/accessible': {
    get: {
      deprecated: false;
      description: 'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getAccessibleProjectTypeByKey';
      parameters: [
        {
          description: 'The key of the project type.';
          in: 'path';
          name: 'projectTypeKey';
          required: true;
          schema: {
            enum: ['software', 'service_desk', 'business', 'product_discovery'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"}';
              schema: {
                $ref: '#/components/schemas/ProjectType';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project type is not accessible to the user.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get accessible project type by key';
      tags: ['Project types'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-type:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}': {
    delete: {
      deprecated: false;
      description: "Deletes a project.\n\nYou can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            example: '10001';
            type: 'string';
          };
        },
        {
          description: 'Whether this project is placed in the Jira recycle bin where it will be available for restoration.';
          in: 'query';
          name: 'enableUndo';
          schema: {
            default: true;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the project is deleted.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to delete it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.\n *  `issueTypeHierarchy` The project issue type hierarchy.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of project properties to return for the project. This parameter accepts a comma-separated list.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}';
              schema: {
                $ref: '#/components/schemas/Project';
              };
            };
          };
          description: 'Returned if successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.\n\nAll parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'updateProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            example: '10001';
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD';
              avatarId: 10200;
              categoryId: 10120;
              description: 'Cloud migration initiative';
              issueSecurityScheme: 10001;
              key: 'EX';
              leadAccountId: '5b10a0effa615349cb016cd8';
              name: 'Example';
              notificationScheme: 10021;
              permissionScheme: 10011;
              url: 'http://atlassian.com';
            };
            schema: {
              $ref: '#/components/schemas/UpdateProjectDetails';
            };
          };
        };
        description: 'The project details to be updated.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}';
              schema: {
                $ref: '#/components/schemas/Project';
              };
            };
          };
          description: 'Returned if the project is updated.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if:\n\n *  the user does not have the necessary permission to update project details.\n *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Update project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'write:project:jira',
            'write:project.avatar:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/archive': {
    post: {
      deprecated: false;
      description: "Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'archiveProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permissions.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Archive project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/avatar': {
    put: {
      deprecated: false;
      description: 'Sets the avatar displayed for a project.\n\nUse [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'updateProjectAvatar';
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '10010';
            };
            schema: {
              $ref: '#/components/schemas/Avatar';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer the project.';
        };
        '404': {
          description: 'Returned if the project or avatar is not found or the user does not have permission to view the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Set project avatar';
      tags: ['Project avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project.avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/avatar/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a custom avatar from a project. Note that system avatars cannot be deleted.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'deleteProjectAvatar';
      parameters: [
        {
          description: 'The project ID or (case-sensitive) key.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the avatar.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the avatar is a system avatar or the user does not have permission to administer the project.';
        };
        '404': {
          description: 'Returned if the project or avatar is not found or the user does not have permission to view the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete project avatar';
      tags: ['Project avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project.avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/avatar2': {
    post: {
      deprecated: false;
      description: "Loads an avatar for a project.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token> `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type: image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\" `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).";
      operationId: 'createProjectAvatar';
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'x';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'y';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The length of each side of the crop region.';
          in: 'query';
          name: 'size';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          '*/*': {
            schema: {};
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}';
              schema: {
                $ref: '#/components/schemas/Avatar';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer the project or an anonymous call is made to the operation.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Load project avatar';
      tags: ['Project avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project.avatar:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/avatars': {
    get: {
      deprecated: false;
      description: 'Returns all project avatars, grouped by system and custom avatars.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getAllProjectAvatars';
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"custom":[{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}],"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}]}';
              schema: {
                $ref: '#/components/schemas/ProjectAvatars';
              };
            };
          };
          description: 'Returned if request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all project avatars';
      tags: ['Project avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project.avatar:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/classification-level/default': {
    delete: {
      deprecated: false;
      description: 'Remove the default data classification level for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeDefaultProjectClassification';
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Remove the default data classification level from a project';
      tags: ['Project classification levels'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    get: {
      deprecated: false;
      description: 'Returns the default data classification for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getDefaultProjectClassification';
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"classification":{"id":"ari:cloud:platform::classification-tag/5bfa70f7-4af1-44f5-9e12-1ce185f15a38","status":"published","name":"Restricted","rank":1,"description":"Data we hold that would be very damaging and would cause loss of trust with customers and present legal risk if mishandled","guideline":"Access to data must be restricted to only individuals who need access in order to perform their job duties.","color":"RED"}}';
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get the default data classification level of a project';
      tags: ['Project classification levels'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Updates the default data classification level for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateDefaultProjectClassification';
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 'ari:cloud:platform::classification-tag/dec24c48-5073-4c25-8fef-9d81a992c30c';
            };
            schema: {
              $ref: '#/components/schemas/UpdateDefaultProjectClassificationBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Update the default data classification level of a project';
      tags: ['Project classification levels'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/component': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.\n\nIf your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectComponentsPaginated';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `issueCount` Sorts by the count of issues associated with the component.\n *  `lead` Sorts by the user key of the component's project lead.\n *  `name` Sorts by component name.";
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: [
              'description',
              '-description',
              '+description',
              'issueCount',
              '-issueCount',
              '+issueCount',
              'lead',
              '-lead',
              '+lead',
              'name',
              '-name',
              '+name',
            ];
            type: 'string';
          };
        },
        {
          description: 'The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.';
          in: 'query';
          name: 'componentSource';
          schema: {
            default: 'jira';
            enum: ['jira', 'compass', 'auto'];
            type: 'string';
          };
        },
        {
          description: 'Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","componentBean":{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},"description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"issueCount":1,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},{"assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","componentBean":{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-11ee-4e70-be56-0242ac120002/fdb3fdec-4e70-11ee-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},"description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"issueCount":5,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanComponentWithIssueCount';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project components paginated';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/components': {
    get: {
      deprecated: false;
      description: 'Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.\n\nIf your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectComponents';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.';
          in: 'query';
          name: 'componentSource';
          schema: {
            default: 'jira';
            enum: ['jira', 'compass', 'auto'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-11ee-4e70-be56-0242ac120002/fdb3fdec-4e70-11ee-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectComponent';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project components';
      tags: ['Project components'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/delete': {
    post: {
      deprecated: false;
      description: 'Deletes a project asynchronously.\n\nThis operation is:\n\n *  transactional, that is, if part of the delete fails the project is not deleted.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteProjectAsynchronously';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete project asynchronously';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project:jira', 'write:project.property:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/features': {
    get: {
      deprecated: false;
      description: 'Returns the list of features for a project.';
      operationId: 'getFeaturesForProject';
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"features":[{"feature":"jsw.classic.roadmap","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-roadmap-feature.svg","localisedDescription":"Your roadmap is an optimized location to create and manage your epics.","localisedName":"Roadmap","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true},{"feature":"jsw.classic.backlog","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-backlog-feature.svg","localisedDescription":"Plan and prioritize work in a dedicated space. To enable and configure the backlog for each board, go to board settings.","localisedName":"Backlog","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true}]}';
              schema: {
                $ref: '#/components/schemas/ContainerForProjectFeatures';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get project features';
      tags: ['Project features'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project.feature:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/features/{featureKey}': {
    put: {
      deprecated: false;
      description: 'Sets the state of a project feature.';
      operationId: 'toggleFeatureForProject';
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the feature.';
          in: 'path';
          name: 'featureKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              state: 'ENABLED';
            };
            schema: {
              $ref: '#/components/schemas/ProjectFeatureState';
            };
          };
        };
        description: 'Details of the feature state change.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"features":[{"feature":"jsw.classic.roadmap","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-roadmap-feature.svg","localisedDescription":"Your roadmap is an optimized location to create and manage your epics.","localisedName":"Roadmap","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true},{"feature":"jsw.classic.backlog","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-backlog-feature.svg","localisedDescription":"Plan and prioritize work in a dedicated space. To enable and configure the backlog for each board, go to board settings.","localisedName":"Backlog","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true}]}';
              schema: {
                $ref: '#/components/schemas/ContainerForProjectFeatures';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the project or project feature is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Set project feature state';
      tags: ['Project features'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project.feature:jira', 'read:project.feature:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/properties': {
    get: {
      deprecated: false;
      description: 'Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectPropertyKeys';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to view the project.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project property keys';
      tags: ['Project properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: 'Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.';
      operationId: 'deleteProjectProperty';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the project property is deleted.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer the project.';
        };
        '404': {
          description: 'Returned if the project or property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete project property';
      tags: ['Project properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.';
      operationId: 'getProjectProperty';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to view the project.';
        };
        '404': {
          description: 'Returned if the project or property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project property';
      tags: ['Project properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.';
      operationId: 'setProjectProperty';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the project property. The maximum length is 255 characters.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5;
              string: 'string-value';
            };
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the project property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the project property is created.';
        };
        '400': {
          description: 'Returned if the project key or id is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer the project.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Set project property';
      tags: ['Project properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/restore': {
    post: {
      deprecated: false;
      description: 'Restores a project that has been archived or placed in the Jira recycle bin.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.';
      operationId: 'restore';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}';
              schema: {
                $ref: '#/components/schemas/Project';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Restore deleted or archived project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'write:project:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/role': {
    get: {
      deprecated: false;
      description: 'Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.\n\nNote that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getProjectRoles';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"Administrators":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10002","Developers":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10000","Users":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10001"}';
              schema: {
                additionalProperties: {
                  format: 'uri';
                  type: 'string';
                };
                type: 'object';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project.';
        };
        '404': {
          description: 'Returned if the project is not found or or if the user does not have administrative permissions for the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project roles for project';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-role:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/role/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes actors from a project role for the project.\n\nTo remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteActor';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The user account ID of the user to remove from the project role.';
          in: 'query';
          name: 'user';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: "The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.";
          in: 'query';
          name: 'group';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project or project role is not found.\n *  the calling user does not have administrative permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete actors from project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-role:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.\n\nTo check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getProjectRole';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Exclude inactive users.';
          in: 'query';
          name: 'excludeInactiveUsers';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project or project role is not found.\n *  the user does not have administrative permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project role for project';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds actors to a project role for the project.\n\nTo replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addActorUsers';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              groupId: ['952d12c3-5b5b-4d04-bb32-44d383afc4b2'];
            };
            schema: {
              $ref: '#/components/schemas/ActorsMap';
            };
          };
        };
        description: "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.";
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful. The complete list of actors for the project is returned.\n\nFor example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project is not found.\n *  the user or group is not found.\n *  the group or user is not active.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Add actors to project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the actors for a project role for a project, replacing all existing actors.\n\nTo add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setActors';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              categorisedActors: {
                'atlassian-group-role-actor-id': ['952d12c3-5b5b-4d04-bb32-44d383afc4b2'];
                'atlassian-user-role-actor': ['12345678-9abc-def1-2345-6789abcdef12'];
              };
            };
            schema: {
              $ref: '#/components/schemas/ProjectRoleActorsUpdateBean';
            };
          };
        };
        description: "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.";
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful. The complete list of actors for the project is returned.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project is not found.\n *  a user or group is not found.\n *  a group or user is not active.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Set actors for project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/roledetails': {
    get: {
      deprecated: false;
      description: 'Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectRoleDetails';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Whether the roles should be filtered to include only those the user is assigned to.';
          in: 'query';
          name: 'currentMember';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          in: 'query';
          name: 'excludeConnectAddons';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","admin":false,"default":true,"roleConfigurable":true,"translatedName":"Developers"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectRoleDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or if the user does not have the necessary permissions for the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project role details';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-category:jira', 'read:project-role:jira', 'read:project:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/statuses': {
    get: {
      deprecated: false;
      description: 'Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getAllStatuses';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","statuses":[{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000"},{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5"}],"subtask":false}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeWithStatus';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all statuses for project';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-status:jira', 'read:issue-type:jira', 'read:status:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/version': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectVersionsPaginated';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by version description.\n *  `name` Sorts by version name.\n *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.\n *  `sequence` Sorts by the order of appearance in the user interface.\n *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: [
              'description',
              '-description',
              '+description',
              'name',
              '-name',
              '+name',
              'releaseDate',
              '-releaseDate',
              '+releaseDate',
              'sequence',
              '-sequence',
              '+sequence',
              'startDate',
              '-startDate',
              '+startDate',
            ];
            type: 'string';
          };
        },
        {
          description: 'Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).';
          in: 'query';
          name: 'query';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.';
          in: 'query';
          name: 'status';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `issuesstatus` Returns the number of issues in each status category for each version.\n *  `operations` Returns actions that can be performed on the specified version.\n *  `driver` Returns the Atlassian account ID of the version driver.\n *  `approvers` Returns a list containing the approvers for this version.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"},{"archived":false,"description":"Minor Bugfix version","id":"10010","issuesStatusForFixVersion":{"done":100,"inProgress":20,"toDo":10,"unmapped":0},"name":"Next Version","overdue":false,"projectId":10000,"released":false,"self":"https://your-domain.atlassian.net/rest/api/3/version/10010"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanVersion';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project versions paginated';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectIdOrKey}/versions': {
    get: {
      deprecated: false;
      description: 'Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getProjectVersions';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectIdOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":1278385482288,"releaseDateSet":false,"released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","startDateSet":false,"userReleaseDate":"6/Jul/2010"},{"archived":false,"description":"Minor Bugfix version","id":"10010","issuesStatusForFixVersion":{"done":100,"inProgress":20,"toDo":10,"unmapped":0},"name":"Next Version","overdue":false,"projectId":10000,"releaseDateSet":false,"released":false,"self":"https://your-domain.atlassian.net/rest/api/3/version/10010","startDateSet":false}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Version';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project versions';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectId}/email': {
    get: {
      deprecated: false;
      description: "Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.";
      operationId: 'getProjectEmail';
      parameters: [
        {
          description: 'The project ID.';
          in: 'path';
          name: 'projectId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"emailAddress":"jira@example.customdomain.com","emailAddressStatus":["Email address or domain not verified."]}';
              schema: {
                $ref: '#/components/schemas/ProjectEmailAddress';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to read project.';
        };
        '404': {
          description: "Returned if the project or project's sender email address is not found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: "Get project's sender email";
      tags: ['Project email'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project.email:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).\n\nIf `emailAddress` is an empty string, the default email address is restored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)";
      operationId: 'updateProjectEmail';
      parameters: [
        {
          description: 'The project ID.';
          in: 'path';
          name: 'projectId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              emailAddress: 'jira@example.atlassian.net';
            };
            schema: {
              $ref: '#/components/schemas/ProjectEmailAddress';
            };
          };
        };
        description: "The project's sender email address to be set.";
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: "Returned if the project's sender email address is successfully set.";
        };
        '400': {
          description: 'Returned if the request is not valid, if the email address is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have permission to administer the project.';
        };
        '404': {
          description: 'Returned if the project is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: "Set project's sender email";
      tags: ['Project email'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project.email:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectId}/hierarchy': {
    get: {
      deprecated: false;
      description: 'Get the issue type hierarchy for a next-gen project.\n\nThe issue type hierarchy for a project consists of:\n\n *  *Epic* at level 1 (optional).\n *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.\n *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.';
      operationId: 'getHierarchy';
      parameters: [
        {
          description: 'The ID of the project.';
          in: 'path';
          name: 'projectId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"hierarchy":[{"issueTypes":[{"avatarId":10324,"entityId":"ce32639b-8911-4689-81da-65681f451516","id":10008,"name":"Story"},{"avatarId":10324,"entityId":"ffdbced5-fbfc-4370-a848-94e2ce3751af","id":10001,"name":"Bug"}],"level":0,"name":"Base"},{"issueTypes":[{"avatarId":10179,"entityId":"80f20d47-34dc-4680-8937-936b7e762a35","id":10007,"name":"Epic"}],"level":1,"name":"Epic"},{"issueTypes":[{"avatarId":10573,"entityId":"210b4879-15cc-414c-9746-f8f6b6be0a72","id":10009,"name":"Subtask"}],"level":-1,"name":"Subtask"}],"projectId":10030}';
              schema: {
                $ref: '#/components/schemas/ProjectIssueTypeHierarchy';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get project issue type hierarchy';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-type:jira', 'read:issue-type-hierarchy:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme': {
    get: {
      deprecated: false;
      description: 'Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'getProjectIssueSecurityScheme';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectKeyOrId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}],"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}';
              schema: {
                $ref: '#/components/schemas/SecurityScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the project is visible to the user but the user doesn't have administrative permissions.";
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get project issue security scheme';
      tags: ['Project permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectKeyOrId}/notificationscheme': {
    get: {
      deprecated: false;
      description: 'Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'getNotificationSchemeForProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectKeyOrId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}';
              schema: {
                $ref: '#/components/schemas/NotificationScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project is not found or the user is not an administrator.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get project notification scheme';
      tags: ['Projects'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:user:jira',
            'read:group:jira',
            'read:field:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:notification-scheme:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectKeyOrId}/permissionscheme': {
    get: {
      deprecated: false;
      description: 'Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).';
      operationId: 'getAssignedPermissionScheme';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectKeyOrId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if the user does not have permission to view the project's configuration.";
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get assigned permission scheme';
      tags: ['Project permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)';
      operationId: 'assignPermissionScheme';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectKeyOrId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 10000;
            };
            schema: {
              $ref: '#/components/schemas/IdBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}';
              schema: {
                $ref: '#/components/schemas/PermissionScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: "Returned if:\n\n *  the user does not have the necessary permission to edit the project's configuration.\n *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans.";
        };
        '404': {
          description: 'Returned if the project or permission scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Assign permission scheme';
      tags: ['Project permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/project/{projectKeyOrId}/securitylevel': {
    get: {
      deprecated: false;
      description: 'Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.';
      operationId: 'getSecurityLevelsForProject';
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).';
          in: 'path';
          name: 'projectKeyOrId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"100000","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100000"},{"description":"Only internal staff can see this issue.","id":"100001","name":"Staff Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100001"}]}';
              schema: {
                $ref: '#/components/schemas/ProjectIssueSecurityLevels';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get project issue security levels';
      tags: ['Project permission schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-security-level:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/projectCategory': {
    get: {
      deprecated: false;
      description: 'Returns all project categories.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getAllProjectCategories';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},{"description":"Second Project Category","id":"10001","name":"SECOND","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10001"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectCategory';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get all project categories';
      tags: ['Project categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createProjectCategory';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Created Project Category';
              name: 'CREATED';
            };
            schema: {
              $ref: '#/components/schemas/ProjectCategory';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"description":"Created Project Category","id":"10100","name":"CREATED","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100"}';
              schema: {
                $ref: '#/components/schemas/ProjectCategory';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `name` is not provided or exceeds 255 characters.\n *  `description` exceeds 1000 characters.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '409': {
          description: 'Returned if the project category name is in use.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Create project category';
      tags: ['Project categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project-category:jira', 'read:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/projectCategory/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeProjectCategory';
      parameters: [
        {
          description: 'ID of the project category to delete.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the project category is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Delete project category';
      tags: ['Project categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a project category.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getProjectCategoryById';
      parameters: [
        {
          description: 'The ID of the project category.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"}';
              schema: {
                $ref: '#/components/schemas/ProjectCategory';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project category is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get project category by ID';
      tags: ['Project categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateProjectCategory';
      parameters: [
        {
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Updated Project Category';
              name: 'UPDATED';
            };
            schema: {
              $ref: '#/components/schemas/ProjectCategory';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"Updated Project Category","id":"10100","name":"UPDATED","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100"}';
              schema: {
                $ref: '#/components/schemas/UpdatedProjectCategory';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `name` has been modified and exceeds 255 characters.\n *  `description` has been modified and exceeds 1000 characters.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the project category is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Update project category';
      tags: ['Project categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-category:jira', 'write:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/projectvalidate/key': {
    get: {
      deprecated: false;
      description: 'Validates a project key by confirming the key is a valid string and not in use.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'validateProjectKey';
      parameters: [
        {
          description: 'The project key.';
          in: 'query';
          name: 'key';
          schema: {
            example: 'HSP';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"projectKey":"A project with that project key already exists."}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Validate project key';
      tags: ['Project key and name validation'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/projectvalidate/validProjectKey': {
    get: {
      deprecated: false;
      description: 'Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getValidProjectKey';
      parameters: [
        {
          description: 'The project key.';
          in: 'query';
          name: 'key';
          schema: {
            example: 'HSP';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '"VPNE"';
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get valid project key';
      tags: ['Project key and name validation'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/projectvalidate/validProjectName': {
    get: {
      deprecated: false;
      description: "Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.\n\n**[Permissions](#permissions) required:** None.";
      operationId: 'getValidProjectName';
      parameters: [
        {
          description: 'The project name.';
          in: 'query';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '"Valid Project Name Example"';
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if a valid project name cannot be generated.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get valid project name';
      tags: ['Project key and name validation'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/resolution': {
    get: {
      deprecated: true;
      description: 'Returns a list of all issue resolution values.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getResolutions';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"A fix for this issue is checked into the tree and tested.","id":"10000","name":"Fixed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/1"},{"description":"This is what it is supposed to do.","id":"10001","name":"Works as designed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/3"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Resolution';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get resolutions';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:resolution:jira'];
          state: 'Beta';
        },
      ];
      'x-changes': [
        {
          announced: '2022-10-20';
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-767';
          effective: '2023-04-20';
          type: 'removed';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates an issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createResolution';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My resolution description';
              name: 'My new resolution';
            };
            schema: {
              $ref: '#/components/schemas/CreateResolutionDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}';
              schema: {
                $ref: '#/components/schemas/ResolutionId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create resolution';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/resolution/default': {
    put: {
      deprecated: false;
      description: 'Sets default issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setDefaultResolution';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '3';
            };
            schema: {
              $ref: '#/components/schemas/SetDefaultResolutionRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue resolution isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set default resolution';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/resolution/move': {
    put: {
      deprecated: false;
      description: 'Changes the order of issue resolutions.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'moveResolutions';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10002';
              ids: ['10000', '10001'];
            };
            schema: {
              $ref: '#/components/schemas/ReorderIssueResolutionsRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The IDs must contain no more than 1,000 items."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Resolution with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue resolution isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Move resolutions';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/resolution/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:\n\n *  a list of resolutions IDs.\n *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'searchResolutions';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: '0';
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: '50';
            type: 'string';
          };
        },
        {
          description: 'The list of resolutions IDs to be filtered out';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false';
          in: 'query';
          name: 'onlyDefault';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"This is what it is supposed to do.","id":"10001","isDefault":true,"name":"Works as designed"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanResolutionJsonBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Search resolutions';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:resolution:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/resolution/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes an issue resolution.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteResolution';
      parameters: [
        {
          description: 'The ID of the issue resolution.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the issue resolution that will replace the currently selected resolution.';
          in: 'query';
          name: 'replaceWith';
          required: true;
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue resolution isn't found.";
        };
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if a task to delete the issue resolution is already running.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete resolution';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    get: {
      deprecated: false;
      description: 'Returns an issue resolution value.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getResolution';
      parameters: [
        {
          description: 'The ID of the issue resolution value.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"A fix for this issue is checked into the tree and tested.","id":"10000","name":"Fixed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/1"}';
              schema: {
                $ref: '#/components/schemas/Resolution';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue resolution value is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get resolution';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:resolution:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates an issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateResolution';
      parameters: [
        {
          description: 'The ID of the issue resolution.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated resolution description';
              name: 'My updated resolution';
            };
            schema: {
              $ref: '#/components/schemas/UpdateResolutionDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the request isn't valid.";
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Resolution with ID 10000 not found."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the issue resolution isn't found.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update resolution';
      tags: ['Issue resolutions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/role': {
    get: {
      deprecated: false;
      description: "Gets a list of all project roles, complete with project role details and default actors.\n\n### About project roles ###\n\n[Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).\n\nProject roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.\n\n#### Members and actors ####\n\nIn the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.\n\nActors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:\n\n *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.\n *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getAllProjectRoles';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectRole';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all project roles';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.\n\n*Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createProjectRole';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project';
              name: 'Developers';
            };
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"A project role that represents developers in a project","id":10360,"name":"Developers","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '409': {
          description: 'Returned if a project role with the provided name already exists.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create project role';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/role/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteProjectRole';
      parameters: [
        {
          description: 'The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the project role that will replace the one being deleted.';
          in: 'query';
          name: 'swap';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid or if the replacement project role is not found.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role being deleted is not found.';
        };
        '409': {
          description: 'Returned if the project role being deleted is in use and a replacement project role is not specified in the request.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete project role';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-role:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getProjectRoleById';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get project role by ID';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Updates either the project role's name or its description.\n\nYou cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'partialUpdateProjectRole';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project';
              name: 'Developers';
            };
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Partial update project role';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Updates the project role's name and description. You must include both a name and a description in the request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'fullyUpdateProjectRole';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project';
              name: 'Developers';
            };
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Fully update project role';
      tags: ['Project roles'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/role/{id}/actors': {
    delete: {
      deprecated: false;
      description: "Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.\n\nChanging a project role's default actors does not affect project role members for projects already created.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteProjectRoleActorsFromRole';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The user account ID of the user to remove as a default actor.';
          in: 'query';
          name: 'user';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.';
          in: 'query';
          name: 'groupId';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.";
          in: 'query';
          name: 'group';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete default actors from project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:project-role:jira',
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getProjectRoleActorsForRole';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get default actors for project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.\n\nChanging a project role's default actors does not affect project role members for projects already created.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'addProjectRoleActorsToRole';
      parameters: [
        {
          description: 'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              user: ['admin'];
            };
            schema: {
              $ref: '#/components/schemas/ActorInputBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}';
              schema: {
                $ref: '#/components/schemas/ProjectRole';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have administrative permissions.';
        };
        '404': {
          description: 'Returned if the project role is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Add default actors to project role';
      tags: ['Project role actors'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getScreens';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with screen name.';
          in: 'query';
          name: 'queryString';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.';
          in: 'query';
          name: 'scope';
          schema: {
            items: {
              default: '';
              enum: ['GLOBAL', 'TEMPLATE', 'PROJECT'];
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen ID.\n *  `name` Sorts by screen name.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['name', '-name', '+name', 'id', '-id', '+id'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/screens","startAt":0,"total":3,"values":[{"id":1,"name":"Default Screen","description":"Provides for the update all system fields."},{"id":2,"name":"Workflow Screen","description":"This screen is used in the workflow and enables you to assign issues."},{"id":3,"name":"Resolve Issue Screen","description":"Offers the ability to set resolution, change fix versions, and assign an issue."}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanScreen';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get screens';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira', 'read:screen:jira', 'read:avatar:jira', 'read:project-category:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a screen with a default field tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createScreen';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Enables changes to resolution and linked issues.';
              name: 'Resolve Security Issue Screen';
            };
            schema: {
              $ref: '#/components/schemas/ScreenDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":10005,"name":"Resolve Security Issue Screen","description":"Enables changes to resolution and linked issues."}';
              schema: {
                $ref: '#/components/schemas/Screen';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another screen."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Create screen';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:screen:jira',
            'write:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/screens/addToDefault/{fieldId}': {
    post: {
      deprecated: false;
      description: 'Adds a field to the default tab of the default screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addFieldToDefaultScreen';
      parameters: [
        {
          description: 'The ID of the field.';
          in: 'path';
          name: 'fieldId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the field it not found or the field is already present.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Add field to default screen';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project:jira', 'read:screen:jira', 'write:screen:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/tabs': {
    get: {
      deprecated: false;
      description: 'Returns the list of tabs for a bulk of screens.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getBulkScreenTabs';
      parameters: [
        {
          description: 'The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.';
          in: 'query';
          name: 'screenId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.';
          in: 'query';
          name: 'tabId';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page. The maximum number is 100,';
          in: 'query';
          name: 'maxResult';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"screenId":10000,"tabId":10001,"tabName":"My Custom Tab 1"},{"screenId":10001,"tabId":10002,"tabName":"My Custom Tab 2"}]}';
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the screen ID or the tab ID is empty.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get bulk screen tabs';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-tab:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/screens/{screenId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.\n\nOnly screens used in classic projects can be deleted.';
      operationId: 'deleteScreen';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen is used in a screen scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the screen is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Delete screen';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:screen:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: 'Updates a screen. Only screens used in classic projects can be updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateScreen';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Enables changes to resolution and linked issues for accessibility related issues.';
              name: 'Resolve Accessibility Issue Screen';
            };
            schema: {
              $ref: '#/components/schemas/UpdateScreenDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10005,"name":"Resolve Security Issue Screen","description":"Enables changes to resolution and linked issues."}';
              schema: {
                $ref: '#/components/schemas/Screen';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another screen."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the screen is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Update screen';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:screen:jira',
            'write:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/screens/{screenId}/availableFields': {
    get: {
      deprecated: false;
      description: 'Returns the fields that can be added to a tab on a screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAvailableScreenFields';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableField';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Get available screen fields';
      tags: ['Screens'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-field:jira', 'read:screenable-field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs': {
    get: {
      deprecated: false;
      description: 'Returns the list of tabs for a screen.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.';
      operationId: 'getAllScreenTabs';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The key of the project.';
          in: 'query';
          name: 'projectKey';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableTab';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the screen ID is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Get all screen tabs';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-tab:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a tab for a screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addScreenTab';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'Fields Tab';
            };
            schema: {
              $ref: '#/components/schemas/ScreenableTab';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"name":"Fields Tab"}';
              schema: {
                $ref: '#/components/schemas/ScreenableTab';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Create screen tab';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-tab:jira', 'write:screen-tab:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs/{tabId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteScreenTab';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen or screen tab is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete screen tab';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:screen-tab:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates the name of a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'renameScreenTab';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ScreenableTab';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"name":"Fields Tab"}';
              schema: {
                $ref: '#/components/schemas/ScreenableTab';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen or screen tab is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Update screen tab';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-tab:jira', 'write:screen-tab:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields': {
    get: {
      deprecated: false;
      description: 'Returns all fields for a screen tab.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.';
      operationId: 'getAllScreenTabFields';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The key of the project.';
          in: 'query';
          name: 'projectKey';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableField';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen or screen tab is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Get all screen tab fields';
      tags: ['Screen tab fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screenable-field:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a field to a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'addScreenTabField';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldId: 'summary';
            };
            schema: {
              $ref: '#/components/schemas/AddFieldBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"summary","name":"Summary"}';
              schema: {
                $ref: '#/components/schemas/ScreenableField';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen, screen tab, or field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Add screen tab field';
      tags: ['Screen tab fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screenable-field:jira', 'write:screenable-field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}': {
    delete: {
      deprecated: false;
      description: 'Removes a field from a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'removeScreenTabField';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the field.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen, screen tab, or field is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Remove screen tab field';
      tags: ['Screen tab fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:screenable-field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move': {
    post: {
      deprecated: false;
      description: 'Moves a screen tab field.\n\nIf `after` and `position` are provided in the request, `position` is ignored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'moveScreenTabField';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the field.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/MoveFieldBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: "Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Move screen tab field';
      tags: ['Screen tab fields'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:screenable-field:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}': {
    post: {
      deprecated: false;
      description: 'Moves a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'moveScreenTab';
      parameters: [
        {
          description: 'The ID of the screen.';
          in: 'path';
          name: 'screenId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the screen tab.';
          in: 'path';
          name: 'tabId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The position of tab. The base index is 0.';
          in: 'path';
          name: 'pos';
          required: true;
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the screen or screen tab is not found or the position is invalid.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Move screen tab';
      tags: ['Screen tabs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:screen:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screenscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of screen schemes.\n\nOnly screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getScreenSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 25;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.';
          in: 'query';
          name: 'id';
          schema: {
            items: {
              format: 'int64';
              type: 'integer';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with screen scheme name.';
          in: 'query';
          name: 'queryString';
          schema: {
            default: '';
            type: 'string';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen scheme ID.\n *  `name` Sorts by screen scheme name.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['name', '-name', '+name', 'id', '-id', '+id'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/screenscheme?maxResults=25&startAt=0","startAt":0,"total":2,"values":[{"id":10010,"name":"Employee screen scheme","description":"Manage employee data","screens":{"default":10017,"edit":10019,"create":10019,"view":10020},"issueTypeScreenSchemes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"id":"10000","name":"Office issue type screen scheme","description":"Managing office projects"}]}},{"id":10032,"name":"Office screen scheme","description":"Manage office data","screens":{"default":10020}}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanScreenScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get screen schemes';
      tags: ['Screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:screen-scheme:jira', 'read:issue-type-screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createScreenScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Manage employee data';
              name: 'Employee screen scheme';
              screens: {
                default: 10017;
                edit: 10019;
                view: 10020;
              };
            };
            schema: {
              $ref: '#/components/schemas/ScreenSchemeDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":10001}';
              schema: {
                $ref: '#/components/schemas/ScreenSchemeId';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["One or more screens assigned to screen types was not found."],"errors":{}}';
            };
          };
          description: 'Returned if a screen used as one of the screen types in the screen scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create screen scheme';
      tags: ['Screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/screenscheme/{screenSchemeId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.\n\nOnly screens schemes used in classic projects can be deleted.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteScreenScheme';
      parameters: [
        {
          description: 'The ID of the screen scheme.';
          in: 'path';
          name: 'screenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the screen scheme is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen scheme cannot be deleted as it is in use in an issue type screen scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the screen scheme is used in an issue type screen scheme.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the screen scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Delete screen scheme';
      tags: ['Screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a screen scheme. Only screen schemes used in classic projects can be updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateScreenScheme';
      parameters: [
        {
          description: 'The ID of the screen scheme.';
          in: 'path';
          name: 'screenSchemeId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'Employee screen scheme v2';
              screens: {
                create: '10019';
                default: '10018';
              };
            };
            schema: {
              $ref: '#/components/schemas/UpdateScreenSchemeDetails';
            };
          };
        };
        description: 'The screen scheme update details.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the screen scheme or a screen used as one of the screen types is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update screen scheme';
      tags: ['Screen schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:screen-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/search': {
    get: {
      deprecated: false;
      description: 'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'searchForIssuesUsingJql';
      parameters: [
        {
          description: 'The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.';
          in: 'query';
          name: 'jql';
          schema: {
            example: 'project = HSP';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.';
          in: 'query';
          name: 'validateQuery';
          schema: {
            default: 'strict';
            enum: ['strict', 'warn', 'none', 'true', 'false'];
            type: 'string';
          };
        },
        {
          description: 'A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.';
          in: 'query';
          name: 'fields';
          schema: {
            items: {
              default: '*navigable';
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.";
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.';
          in: 'query';
          name: 'properties';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'Reference fields by their key (rather than ID).';
          in: 'query';
          name: 'fieldsByKeys';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).';
          in: 'query';
          name: 'failFast';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expand":"names,schema","issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}],"maxResults":50,"startAt":0,"total":1,"warningMessages":["The value \'bar\' does not exist for the field \'foo\'."]}';
              schema: {
                $ref: '#/components/schemas/SearchResults';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the JQL query is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for issues using JQL (GET)';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:audit-log:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:issue-meta:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nThere is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'searchForIssuesUsingJqlPost';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              expand: ['names', 'schema', 'operations'];
              fields: ['summary', 'status', 'assignee'];
              fieldsByKeys: false;
              jql: 'project = HSP';
              maxResults: 15;
              startAt: 0;
            };
            schema: {
              $ref: '#/components/schemas/SearchRequestBean';
            };
          };
        };
        description: 'A JSON object containing the search request.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expand":"names,schema","issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}],"maxResults":50,"startAt":0,"total":1,"warningMessages":["The value \'bar\' does not exist for the field \'foo\'."]}';
              schema: {
                $ref: '#/components/schemas/SearchResults';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the JQL query is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for issues using JQL (POST)';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/search/approximate-count': {
    post: {
      deprecated: false;
      description: 'Provide an estimated count of the issues that match the [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned output. This endpoint requires JQL to be bounded.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'countIssues';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = HSP';
            };
            schema: {
              $ref: '#/components/schemas/JQLCountRequestBean';
            };
          };
        };
        description: 'A JSON object containing the search request.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"count":153}';
              schema: {
                $ref: '#/components/schemas/JQLCountResultsBean';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the JQL query cannot be parsed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Count issues using JQL';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/search/id': {
    post: {
      deprecated: false;
      description: "Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nUse the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.";
      operationId: 'searchForIssuesIds';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = HSP';
              maxResults: 1000;
              nextPageToken: 'EgQIlMIC';
            };
            schema: {
              $ref: '#/components/schemas/IdSearchRequestBean';
            };
          };
        };
        description: 'A JSON object containing the search request.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueIds":[10000,10001,10002],"nextPageToken":"EgQIlMIC"}';
              schema: {
                $ref: '#/components/schemas/IdSearchResults';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the JQL query is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search issue IDs using JQL';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/search/jql': {
    get: {
      deprecated: false;
      description: 'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need read-after-write consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'searchAndReconsileIssuesUsingJql';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/SearchAndReconcileRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10001","created":"2023-06-24T19:24:50.000+0000","filename":"debuglog.txt","id":10001,"mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/2/attachments/10001","size":2460}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":"Main order flow broken","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.","created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":"I did some work here.","id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}]}';
              schema: {
                $ref: '#/components/schemas/SearchAndReconcileResults';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the search request is invalid';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if any of the ids provided in reconcileIssues were not found';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for issues using JQL enhanced search (GET)';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:audit-log:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:issue-meta:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    post: {
      deprecated: false;
      description: 'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need read-after-write consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.';
      operationId: 'searchAndReconsileIssuesUsingJqlPost';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/SearchAndReconcileRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10001","created":"2023-06-24T19:24:50.000+0000","filename":"debuglog.txt","id":10001,"mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/2/attachments/10001","size":2460}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":"Main order flow broken","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.","created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":"I did some work here.","id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}]}';
              schema: {
                $ref: '#/components/schemas/SearchAndReconcileResults';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the search request is invalid';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if any of the ids provided in reconcileIssues were not found';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Search for issues using JQL enhanced search (POST)';
      tags: ['Issue search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/securitylevel/{id}': {
    get: {
      deprecated: false;
      description: 'Returns details of an issue security level.\n\nUse [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getIssueSecurityLevel';
      parameters: [
        {
          description: 'The ID of the issue security level.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}';
              schema: {
                $ref: '#/components/schemas/SecurityLevel';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if the issue security level is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Get issue security level';
      tags: ['Issue security level'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:issue-security-level:jira', 'read:project-role:jira', 'read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/serverInfo': {
    get: {
      deprecated: false;
      description: 'Returns information about the Jira instance.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getServerInfo';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"baseUrl":"https://your-domain.atlassian.net","buildDate":"2020-03-26T22:20:59.000+0000","buildNumber":582,"defaultLocale":{"locale":"en_AU"},"displayUrl":"https://instance.jira.your-domain.com","displayUrlConfluence":"https://instance.confluence.your-domain.com","displayUrlServicedeskHelpCenter":"https://instance.help.your-domain.com","scmInfo":"1f51473f5c7b75c1a69a0090f4832cdc5053702a","serverTime":"2020-03-31T16:43:50.000+0000","serverTimeZone":"Australia/Sydney","serverTitle":"My Jira instance","version":"1001.0.0-SNAPSHOT","versionNumbers":[5,0,0]}';
              schema: {
                $ref: '#/components/schemas/ServerInformation';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
        {},
      ];
      summary: 'Get Jira instance info';
      tags: ['Server info'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/settings/columns': {
    get: {
      deprecated: false;
      description: 'Returns the default issue navigator columns.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getIssueNavigatorDefaultColumns';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get issue navigator default columns';
      tags: ['Issue navigator settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the default issue navigator columns.\n\nThe `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`\n\nIf no column details are sent, then all default columns are removed.\n\nA navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setIssueNavigatorDefaultColumns';
      parameters: [];
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody';
            };
          };
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody';
            };
          };
        };
        description: 'A navigable field value.';
        required: true;
      };
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if invalid parameters are passed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if a navigable field value is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Set issue navigator default columns';
      tags: ['Issue navigator settings'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/status': {
    get: {
      deprecated: false;
      description: 'Returns a list of all statuses associated with active workflows.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getStatuses';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}},{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/StatusDetails';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all statuses';
      tags: ['Workflow statuses'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:status:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/status/{idOrName}': {
    get: {
      deprecated: false;
      description: 'Returns a status. The status must be associated with an active workflow to be returned.\n\nIf a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.\n\nThis operation can be accessed anonymously.\n\n[Permissions](#permissions) required: None.';
      operationId: 'getStatus';
      parameters: [
        {
          description: 'The ID or name of the status.';
          in: 'path';
          name: 'idOrName';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}';
              schema: {
                $ref: '#/components/schemas/StatusDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the status is not found.\n *  the status is not associated with a workflow.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get status';
      tags: ['Workflow statuses'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:status:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/statuscategory': {
    get: {
      deprecated: false;
      description: 'Returns a list of all status categories.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getStatusCategories';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"},{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/StatusCategory';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get all status categories';
      tags: ['Workflow status categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:status:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/statuscategory/{idOrKey}': {
    get: {
      deprecated: false;
      description: 'Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getStatusCategory';
      parameters: [
        {
          description: 'The ID or key of the status category.';
          in: 'path';
          name: 'idOrKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}';
              schema: {
                $ref: '#/components/schemas/StatusCategory';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the status category is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get status category';
      tags: ['Workflow status categories'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:status:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/statuses': {
    delete: {
      deprecated: false;
      description: 'Deletes statuses by ID.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'deleteStatusesById';
      parameters: [
        {
          description: 'The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`';
          in: 'query';
          name: 'id';
          required: true;
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk delete Statuses';
      tags: ['Status'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a list of the statuses specified by one or more status IDs.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'getStatusesById';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow.\n *  `workflowUsages` Returns the workflows that use the status.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`';
          in: 'query';
          name: 'id';
          required: true;
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[{"issueTypes":["10002"],"project":{"id":"1"}}],"workflowUsages":[{"workflowId":"545d80a3-91ff-4949-8b0d-a2bc484e70e5","workflowName":"Workflow 1"}]}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/JiraStatus';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk get statuses';
      tags: ['Status'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates statuses for a global or project scope.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'createStatuses';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: {
                project: {
                  id: '1';
                };
                type: 'PROJECT';
              };
              statuses: [
                {
                  description: 'The issue is resolved';
                  name: 'Finished';
                  statusCategory: 'DONE';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/StatusCreateRequest';
            };
          };
        };
        description: 'Details of the statuses being created and their scope.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[],"workflowUsages":[]}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/JiraStatus';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
        '409': {
          description: 'Returned if another workflow configuration update task is ongoing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk create statuses';
      tags: ['Status'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates statuses by ID.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'updateStatuses';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              statuses: [
                {
                  description: 'The issue is resolved';
                  id: '1000';
                  name: 'Finished';
                  statusCategory: 'DONE';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/StatusUpdateRequest';
            };
          };
        };
        description: 'The list of statuses that will be updated.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
        '409': {
          description: 'Returned if another workflow configuration update task is ongoing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk update statuses';
      tags: ['Status'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/statuses/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)';
      operationId: 'search';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow.\n *  `workflowUsages` Returns the workflows that use the status.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The project the status is part of or null for global statuses.';
          in: 'query';
          name: 'projectId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 200;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Term to match status names against or null to search for all statuses in the search scope.';
          in: 'query';
          name: 'searchString';
          schema: {
            maxLength: 255;
            type: 'string';
          };
        },
        {
          description: 'Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.';
          in: 'query';
          name: 'statusCategory';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/statuses/search?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/statuses/search?startAt=0&maxResults=2","startAt":0,"total":5,"values":[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[{"issueTypes":["10002"],"project":{"id":"1"}}],"workflowUsages":[{"workflowId":"545d80a3-91ff-4949-8b0d-a2bc484e70e5","workflowName":"Workflow 1"}]}]}';
              schema: {
                $ref: '#/components/schemas/PageOfStatuses';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Search statuses paginated';
      tags: ['Status'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/task/{taskId}': {
    get: {
      deprecated: false;
      description: 'Returns the status of a [long-running asynchronous task](#async).\n\nWhen a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  `read:jira-work`\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  Creator of the task.';
      operationId: 'getTask';
      parameters: [
        {
          description: 'The ID of the task.';
          in: 'path';
          name: 'taskId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000}';
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the task is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get task';
      tags: ['Tasks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/task/{taskId}/cancel': {
    post: {
      deprecated: false;
      description: 'Cancels a task.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  Creator of the task.';
      operationId: 'cancelTask';
      parameters: [
        {
          description: 'The ID of the task.';
          in: 'path';
          name: 'taskId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '202': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if cancellation of the task is not possible.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the task is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Cancel task';
      tags: ['Tasks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:async-task:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/uiModifications': {
    get: {
      deprecated: false;
      description: "Gets UI modifications. UI modifications can only be retrieved by Forge apps.\n\n**[Permissions](#permissions) required:** None.\n\nThe new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'getUiModifications';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `data` Returns UI modification data.\n *  `contexts` Returns UI modification contexts.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"d7dbda8a-6239-4b63-8e13-a5ef975c8e61","name":"Reveal Story Points","description":"Reveals Story Points field when any Sprint is selected.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d7dbda8a-6239-4b63-8e13-a5ef975c8e61","data":"{field: \'Story Points\', config: {hidden: false}}","contexts":[{"id":"1533537a-bda3-4ac6-8481-846128cd9ef4","projectId":"10000","issueTypeId":"10000","viewType":"GIC","isAvailable":true},{"id":"c016fefa-6eb3-40c9-8596-4c4ef273e67c","projectId":"10000","issueTypeId":"10001","viewType":"IssueView","isAvailable":true}]},{"id":"e4fe8db5-f82f-416b-a3aa-b260b55da577","name":"Set Assignee","description":"Sets the Assignee field automatically.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/e4fe8db5-f82f-416b-a3aa-b260b55da577","contexts":[{"id":"8b3740f9-8780-4958-8228-69dcfbda11d9","projectId":"10000","issueTypeId":"10000","viewType":"GIC","isAvailable":true}]},{"id":"1453f993-79ce-4389-a36d-eb72d5c85dd6","name":"Hide Labels","description":"Hides Labels if any component is provided.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/1453f993-79ce-4389-a36d-eb72d5c85dd6","contexts":[]},{"id":"d3f4097e-8d8e-451e-9fb6-27c3c8c3bfff","name":"Wildcard example","description":"This context is applied to all issue types","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d3f4097e-8d8e-451e-9fb6-27c3c8c3bfff","contexts":[{"id":"521f2181-5d5e-46ea-9fc9-871bbf245b8b","projectId":"10000","issueTypeId":null,"viewType":"GIC","isAvailable":true}]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanUiModificationDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the request is not from a Forge app.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get UI modifications';
      tags: ['UI modifications (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'read:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Creates a UI modification. UI modification can only be created by Forge apps.\n\nEach app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.\n\n**[Permissions](#permissions) required:**\n\n *  *None* if the UI modification is created without contexts.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'createUiModification';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              contexts: [
                {
                  issueTypeId: '10000';
                  projectId: '10000';
                  viewType: 'GIC';
                },
                {
                  issueTypeId: '10001';
                  projectId: '10000';
                  viewType: 'IssueView';
                },
                {
                  issueTypeId: '10002';
                  projectId: '10000';
                  viewType: null;
                },
              ];
              data: "{field: 'Story Points', config: {hidden: false}}";
              description: 'Reveals Story Points field when any Sprint is selected.';
              name: 'Reveal Story Points';
            };
            schema: {
              $ref: '#/components/schemas/CreateUiModificationDetails';
            };
          };
        };
        description: 'Details of the UI modification.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"d7dbda8a-6239-4b63-8e13-a5ef975c8e61","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d7dbda8a-6239-4b63-8e13-a5ef975c8e61"}';
              schema: {
                $ref: '#/components/schemas/UiModificationIdentifiers';
              };
            };
          };
          description: 'Returned if the UI modification is created.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the request is not from a Forge app.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"details":{"issueTypesNotFound":{"10001":["10000","10001"]},"projectNotFound":["10000"]},"errorMessages":["Project with ID \'10000\' was not found.","Project with ID \'10001\'. The following issue types were not found: [10000, 10001]"],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/DetailedErrorCollection';
              };
            };
          };
          description: 'Returned if a project or an issue type in the context are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Create UI modification';
      tags: ['UI modifications (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'write:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/uiModifications/{uiModificationId}': {
    delete: {
      deprecated: false;
      description: "Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.\n\n**[Permissions](#permissions) required:** None.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'deleteUiModification';
      parameters: [
        {
          description: 'The ID of the UI modification.';
          in: 'path';
          name: 'uiModificationId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the UI modification is deleted.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the request is not from a Forge app.';
        };
        '404': {
          description: 'Returned if the UI modification is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Delete UI modification';
      tags: ['UI modifications (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Updates a UI modification. UI modification can only be updated by Forge apps.\n\nEach UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.\n\n**[Permissions](#permissions) required:**\n\n *  *None* if the UI modification is created without contexts.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'updateUiModification';
      parameters: [
        {
          description: 'The ID of the UI modification.';
          in: 'path';
          name: 'uiModificationId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              contexts: [
                {
                  issueTypeId: '10000';
                  projectId: '10000';
                  viewType: 'GIC';
                },
                {
                  issueTypeId: '10001';
                  projectId: '10000';
                  viewType: 'IssueView';
                },
              ];
              data: "{field: 'Story Points', config: {hidden: true}}";
              name: 'Updated Reveal Story Points';
            };
            schema: {
              $ref: '#/components/schemas/UpdateUiModificationDetails';
            };
          };
        };
        description: 'Details of the UI modification.';
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the UI modification is updated.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the request is not from a Forge app.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"details":{"issueTypesNotFound":{"10001":["10000","10001"]},"projectNotFound":["10000"]},"errorMessages":["Project with ID \'10000\' was not found.","Project with ID \'10001\'. The following issue types were not found: [10000, 10001]"],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/DetailedErrorCollection';
              };
            };
          };
          description: 'Returned if the UI modification, a project or an issue type in the context are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Update UI modification';
      tags: ['UI modifications (apps)'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'write:app-data:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}': {
    get: {
      deprecated: false;
      description: 'Returns the system and custom avatars for a project, issue type or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  for system avatars, none.\n *  for priority avatars, none.';
      operationId: 'getAvatars';
      parameters: [
        {
          description: 'The avatar type.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['project', 'issuetype', 'priority'];
            type: 'string';
          };
        },
        {
          description: 'The ID of the item the avatar is associated with.';
          in: 'path';
          name: 'entityId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"custom":[{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}],"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}]}';
              schema: {
                $ref: '#/components/schemas/Avatars';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Get avatars';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: "Loads a custom avatar for a project, issue type or priority.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token> `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type: image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\" `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar use:\n\n *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.\n *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.\n *  [Update priority](#api-rest-api-3-priority-id-put) to set it as the priority's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'storeAvatar';
      parameters: [
        {
          description: 'The avatar type.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['project', 'issuetype', 'priority'];
            type: 'string';
          };
        },
        {
          description: 'The ID of the item the avatar is associated with.';
          in: 'path';
          name: 'entityId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'x';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.';
          in: 'query';
          name: 'y';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The length of each side of the crop region.';
          in: 'query';
          name: 'size';
          required: true;
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          '*/*': {
            schema: {};
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}';
              schema: {
                $ref: '#/components/schemas/Avatar';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permissions.';
        };
        '404': {
          description: 'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Load avatar';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:avatar:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes an avatar from a project, issue type or priority.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteAvatar';
      parameters: [
        {
          description: 'The avatar type.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['project', 'issuetype', 'priority'];
            type: 'string';
          };
        },
        {
          description: 'The ID of the item the avatar is associated with.';
          in: 'path';
          name: 'owningObjectId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the avatar.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: 'Returned if the user does not have permission to delete the avatar, the avatar is not deletable.';
        };
        '404': {
          description: 'Returned if the avatar type, associated item ID, or avatar ID is invalid.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
        {},
      ];
      summary: 'Delete avatar';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/universal_avatar/view/type/{type}': {
    get: {
      deprecated: false;
      description: 'Returns the default project, issue type or priority avatar image.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.';
      operationId: 'getAvatarImageByType';
      parameters: [
        {
          description: 'The icon type of the avatar.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['issuetype', 'project', 'priority'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.';
          in: 'query';
          name: 'size';
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The format to return the avatar image in. If not provided the original content format is returned.';
          in: 'query';
          name: 'format';
          schema: {
            enum: ['png', 'svg'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            '*/*': {};
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody';
              };
            };
            'image/png': {};
            'image/svg+xml': {};
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get avatar image by type';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}': {
    get: {
      deprecated: false;
      description: 'Returns a project, issue type or priority avatar image by ID.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  For system avatars, none.\n *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  For priority avatars, none.';
      operationId: 'getAvatarImageByID';
      parameters: [
        {
          description: 'The icon type of the avatar.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['issuetype', 'project', 'priority'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The ID of the avatar.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.';
          in: 'query';
          name: 'size';
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The format to return the avatar image in. If not provided the original content format is returned.';
          in: 'query';
          name: 'format';
          schema: {
            enum: ['png', 'svg'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            '*/*': {};
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody';
              };
            };
            'image/png': {};
            'image/svg+xml': {};
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get avatar image by ID';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}': {
    get: {
      deprecated: false;
      description: 'Returns the avatar image for a project, issue type or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  For system avatars, none.\n *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  For priority avatars, none.';
      operationId: 'getAvatarImageByOwner';
      parameters: [
        {
          description: 'The icon type of the avatar.';
          in: 'path';
          name: 'type';
          required: true;
          schema: {
            enum: ['issuetype', 'project', 'priority'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The ID of the project or issue type the avatar belongs to.';
          in: 'path';
          name: 'entityId';
          required: true;
          schema: {
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.';
          in: 'query';
          name: 'size';
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The format to return the avatar image in. If not provided the original content format is returned.';
          in: 'query';
          name: 'format';
          schema: {
            enum: ['png', 'svg'];
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            '*/*': {};
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody';
              };
            };
            'image/png': {};
            'image/svg+xml': {};
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}';
            };
          };
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get avatar image by owner';
      tags: ['Avatars'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user': {
    delete: {
      deprecated: false;
      description: "Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.\n\n**[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).";
      operationId: 'removeUser';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'key';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the user cannot be removed.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {},
      ];
      summary: 'Delete user';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
    get: {
      deprecated: false;
      description: "Returns a user.\n\nPrivacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getUser';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.';
          in: 'query';
          name: 'key';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` includes all groups and nested groups to which the user belongs.\n *  `applicationRoles` includes details of all the applications to which the user has access.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}';
              schema: {
                $ref: '#/components/schemas/User';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the calling user does not have the *Browse users and groups* global permission.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Get user';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.\n\nIf the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createUser';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              emailAddress: 'mia@atlassian.com';
            };
            schema: {
              $ref: '#/components/schemas/NewUserDetails';
            };
          };
        };
        description: 'Details about the user to be created.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}';
              schema: {
                $ref: '#/components/schemas/User';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid or the number of licensed users is exceeded.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {},
      ];
      summary: 'Create user';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/user/assignable/multiProjectSearch': {
    get: {
      deprecated: false;
      description: "Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.";
      operationId: 'findBulkAssignableUsers';
      parameters: [
        {
          description: "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.";
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'A list of project keys (case sensitive). This parameter accepts a comma-separated list.';
          in: 'query';
          name: 'projectKeys';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `projectKeys` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if one or more of the projects is not found.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users assignable to projects';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/assignable/search': {
    get: {
      deprecated: false;
      description: "Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:\n\n *  a new issue, by providing the `projectKeyOrId`.\n *  an updated issue, by providing the `issueKey`.\n *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).\n\nIn all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)";
      operationId: 'findAssignableUsers';
      parameters: [
        {
          description: "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.";
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'The sessionId of this request. SessionId is the same until the assignee is set.';
          in: 'query';
          name: 'sessionId';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'The project ID or project key (case sensitive). Required, unless `issueKey` is specified.';
          in: 'query';
          name: 'project';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the issue. Required, unless `project` is specified.';
          in: 'query';
          name: 'issueKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the transition.';
          in: 'query';
          name: 'actionDescriptorId';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
        {
          in: 'query';
          name: 'recommend';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `issueKey` or `project` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the project, issue, or transition is not found.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users assignable to issues';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/bulk': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of the users specified by one or more account IDs.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'bulkGetUsers';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 10;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'key';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            items: {
              example: '5b10ac8d82e05b22cc7d4ef5';
              maxLength: 128;
              type: 'string';
            };
            maxLength: 128;
            type: 'array';
          };
          'x-showInExample': 'true';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanUser';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `accountID` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Bulk get users';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/user/bulk/migration': {
    get: {
      deprecated: false;
      description: 'Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'bulkGetUsersMigration';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 10;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: "Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.";
          in: 'query';
          name: 'username';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: "Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.";
          in: 'query';
          name: 'key';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"username":"mia","accountId":"5b10a2844c20165700ede21g"},{"username":"emma","accountId":"5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/UserMigrationBean';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `key` or `username`';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get account IDs for users';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/user/columns': {
    delete: {
      deprecated: false;
      description: "Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.\n *  Permission to access Jira, to set the calling user's columns.";
      operationId: 'resetUserColumns';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {},
      ];
      summary: 'Reset user default columns';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.\n *  Permission to access Jira, to get the calling user's column details.";
      operationId: 'getUserDefaultColumns';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the requested user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Get user default columns';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user.columns:jira', 'read:filter.column:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.\n\nThe parameters for this resource are expressed as HTML form data. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.\n *  Permission to access Jira, to set the calling user's columns.";
      operationId: 'setUserColumns';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
      ];
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/UserColumnRequestBody';
            };
          };
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/UserColumnRequestBody';
            };
          };
        };
        description: 'The ID of a column to set. To set multiple columns, send multiple `columns` parameters.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the requested user is not found.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
        '500': {
          description: 'Returned if an invalid issue table column ID is sent.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {},
      ];
      summary: 'Set user default columns';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/user/email': {
    get: {
      deprecated: false;
      description: "Returns a user's email address regardless of the user\\\\u2019s profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603)";
      operationId: 'getUserEmail';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: 'name@example.com';
              schema: {
                $ref: '#/components/schemas/UnrestrictedUserEmail';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the calling app is not approved to use this API.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API).';
        };
        '404': {
          description: "Returned if a user with the given `accountId` doesn't exist";
        };
        '503': {
          description: 'Indicates the API is not currently enabled';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get user email';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:email-address:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/email/bulk': {
    get: {
      deprecated: false;
      description: "Returns a user's email address regardless of the user\\\\u2019s profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603)";
      operationId: 'getUserEmailBulk';
      parameters: [
        {
          description: 'The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            items: {
              maxLength: 128;
              type: 'string';
            };
            maxLength: 128;
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UnrestrictedUserEmail';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the calling app is not approved to use this API.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API).';
        };
        '503': {
          description: 'Indicates the API is not currently enabled.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Get user email bulk';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:email-address:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/groups': {
    get: {
      deprecated: false;
      description: 'Returns the groups to which a user belongs.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getUserGroups';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          required: true;
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'key';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}';
              schema: {
                items: {
                  $ref: '#/components/schemas/GroupName';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the calling user does not have the *Browse users and groups* global permission.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Get user groups';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:group:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/permission/search': {
    get: {
      deprecated: false;
      description: "Returns a list of users who fulfill these criteria:\n\n *  their user attributes match a search string.\n *  they have a set of permissions for a project or issue.\n\nIf no search string is provided, a list of all users with the permissions is returned.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.";
      operationId: 'findUsersWithAllPermissions';
      parameters: [
        {
          description: "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.";
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'A comma separated list of permissions. Permissions can be specified as any:\n\n *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).\n *  custom project permission added by Connect apps.\n *  (deprecated) one of the following:\n    \n     *  ASSIGNABLE\\_USER\n     *  ASSIGN\\_ISSUE\n     *  ATTACHMENT\\_DELETE\\_ALL\n     *  ATTACHMENT\\_DELETE\\_OWN\n     *  BROWSE\n     *  CLOSE\\_ISSUE\n     *  COMMENT\\_DELETE\\_ALL\n     *  COMMENT\\_DELETE\\_OWN\n     *  COMMENT\\_EDIT\\_ALL\n     *  COMMENT\\_EDIT\\_OWN\n     *  COMMENT\\_ISSUE\n     *  CREATE\\_ATTACHMENT\n     *  CREATE\\_ISSUE\n     *  DELETE\\_ISSUE\n     *  EDIT\\_ISSUE\n     *  LINK\\_ISSUE\n     *  MANAGE\\_WATCHER\\_LIST\n     *  MODIFY\\_REPORTER\n     *  MOVE\\_ISSUE\n     *  PROJECT\\_ADMIN\n     *  RESOLVE\\_ISSUE\n     *  SCHEDULE\\_ISSUE\n     *  SET\\_ISSUE\\_SECURITY\n     *  TRANSITION\\_ISSUE\n     *  VIEW\\_VERSION\\_CONTROL\n     *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n     *  VIEW\\_WORKFLOW\\_READONLY\n     *  WORKLOG\\_DELETE\\_ALL\n     *  WORKLOG\\_DELETE\\_OWN\n     *  WORKLOG\\_EDIT\\_ALL\n     *  WORKLOG\\_EDIT\\_OWN\n     *  WORK\\_ISSUE';
          in: 'query';
          name: 'permissions';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The issue key for the issue.';
          in: 'query';
          name: 'issueKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The project key for the project (case sensitive).';
          in: 'query';
          name: 'projectKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.\n *  `permissions` is empty or contains an invalid entry.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the issue or project is not found.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users with permissions';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/picker': {
    get: {
      deprecated: false;
      description: "Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.\n\nThis operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.";
      operationId: 'findUsersForPicker';
      parameters: [
        {
          description: "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.";
          in: 'query';
          name: 'query';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The maximum number of items to return. The total number of matched users is returned in `total`.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: "Include the URI to the user's avatar.";
          in: 'query';
          name: 'showAvatar';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'exclude';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          description: 'A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.';
          in: 'query';
          name: 'excludeAccountIds';
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
        {
          in: 'query';
          name: 'avatarSize';
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'excludeConnectUsers';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"header":"Showing 20 of 25 matching groups","total":25,"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","displayName":"Mia Krystof","html":"<strong>Mi</strong>a Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","key":"mia","name":"mia"}]}';
              schema: {
                $ref: '#/components/schemas/FoundUsers';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `exclude` and `excludeAccountIds` are provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users for picker';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/properties': {
    get: {
      deprecated: false;
      description: "Returns the keys of all properties for a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.\n *  Access to Jira, to access the calling user's property keys.";
      operationId: 'getUserPropertyKeys';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'userKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}';
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get user property keys';
      tags: ['User properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: "Deletes a property from a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.\n *  Access to Jira, to delete a property from the calling user's record.";
      operationId: 'deleteUserProperty';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'userKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The key of the user's property.";
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the user property is deleted.';
        };
        '400': {
          description: 'Returned if `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the user or the property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Delete user property';
      tags: ['User properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:user.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.\n *  Access to Jira, to get a property from the calling user's record.";
      operationId: 'getUserProperty';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'userKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The key of the user's property.";
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}';
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Get user property';
      tags: ['User properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the value of a user's property. Use this resource to store custom data against a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.\n *  Access to Jira, to set a property on the calling user's record.";
      operationId: 'setUserProperty';
      parameters: [
        {
          description: 'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.';
          in: 'query';
          name: 'accountId';
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5';
            maxLength: 128;
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'userKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: "The key of the user's property. The maximum length is 255 characters.";
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        description: 'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the user property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the user property is created.';
        };
        '400': {
          description: 'Returned if `accountId` is missing.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission or is not accessing their user record.';
        };
        '404': {
          description: 'Returned if the user is not found.';
        };
        '405': {
          description: 'Returned if the property key is not specified.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
      ];
      summary: 'Set user property';
      tags: ['User properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:user.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/search': {
    get: {
      deprecated: false;
      description: "Returns a list of active users that match the search string and property.\n\nThis operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nThis operation can be accessed anonymously.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.";
      operationId: 'findUsers';
      parameters: [
        {
          description: "A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.";
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of filtered results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.';
          in: 'query';
          name: 'property';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `accountId`, `query` or `property` is missing.\n *  `query` and `accountId` are provided.\n *  `property` parameter is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:user:jira',
            'read:user.property:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/search/query': {
    get: {
      deprecated: false;
      description: 'Finds users with a structured query and returns a [paginated](#pagination) list of user details.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.\n *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.\n\nThe list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`';
      operationId: 'findUsersByQuery';
      parameters: [
        {
          description: 'The search query.';
          in: 'query';
          name: 'query';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PageBeanUser';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the query is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '408': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the search is timed out.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Find users by query';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:issue:jira',
            'read:issue.vote:jira',
            'read:issue.watcher:jira',
            'read:project:jira',
            'read:user:jira',
            'read:user.property:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/search/query/key': {
    get: {
      deprecated: false;
      description: 'Finds users with a structured query and returns a [paginated](#pagination) list of user keys.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.\n *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.\n\nThe list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`';
      operationId: 'findUserKeysByQuery';
      parameters: [
        {
          description: 'The search query.';
          in: 'query';
          name: 'query';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResult';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PageBeanUserKey';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the query is invalid.';
        };
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
        '408': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the search is timed out.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
      ];
      summary: 'Find user keys by query';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:issue:jira',
            'read:issue.vote:jira',
            'read:issue.watcher:jira',
            'read:project:jira',
            'read:user.property:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/user/viewissue/search': {
    get: {
      deprecated: false;
      description: "Returns a list of users who fulfill these criteria:\n\n *  their user attributes match a search string.\n *  they have permission to browse issues.\n\nUse this resource to find users who can browse:\n\n *  an issue, by providing the `issueKey`.\n *  any issue in a project, by providing the `projectKey`.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.";
      operationId: 'findUsersWithBrowsePermission';
      parameters: [
        {
          description: "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.";
          in: 'query';
          name: 'query';
          schema: {
            example: 'query';
            type: 'string';
          };
          'x-showInExample': 'true';
        },
        {
          description: 'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.';
          in: 'query';
          name: 'username';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.';
          in: 'query';
          name: 'accountId';
          schema: {
            maxLength: 128;
            type: 'string';
          };
        },
        {
          description: 'The issue key for the issue. Required, unless `projectKey` is specified.';
          in: 'query';
          name: 'issueKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The project key for the project (case sensitive). Required, unless `issueKey` is specified.';
          in: 'query';
          name: 'projectKey';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the issue or project is not found.';
        };
        '429': {
          description: "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Find users with browse permission';
      tags: ['User search'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/users': {
    get: {
      deprecated: false;
      description: "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getAllUsersDefault';
      parameters: [
        {
          description: 'The index of the first item to return.';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '409': {
          description: 'Returned if the request takes longer than 10 seconds or is interrupted.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Get all users default';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira', 'read:application-role:jira', 'read:avatar:jira', 'read:group:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/users/search': {
    get: {
      deprecated: false;
      description: "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getAllUsers';
      parameters: [
        {
          description: 'The index of the first item to return.';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/User';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: "Returned if the user doesn't have the necessary permission.";
        };
        '409': {
          description: 'Returned if the request takes longer than 10 seconds or is interrupted.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-user'];
        },
        {},
      ];
      summary: 'Get all users';
      tags: ['Users'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-user'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:user:jira', 'read:application-role:jira', 'read:avatar:jira', 'read:group:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version': {
    post: {
      deprecated: false;
      description: 'Creates a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.';
      operationId: 'createVersion';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              archived: false;
              description: 'An excellent version';
              name: 'New Version 1';
              projectId: 10000;
              releaseDate: '2010-07-06';
              released: true;
            };
            schema: {
              $ref: '#/components/schemas/Version';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","project":"PXA","projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}';
              schema: {
                $ref: '#/components/schemas/Version';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the project is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Create version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project-version:jira', 'read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}': {
    delete: {
      deprecated: true;
      description: 'Deletes a project version.\n\nDeprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.\n\nAlternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.';
      operationId: 'deleteVersion';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.';
          in: 'query';
          name: 'moveFixIssuesTo';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.';
          in: 'query';
          name: 'moveAffectedIssuesTo';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the version is deleted.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if:\n\n *  the authentication credentials are incorrect.\n *  the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the version is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.';
      operationId: 'getVersion';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `operations` Returns the list of operations available for this version.\n *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.\n *  `driver` Returns the Atlassian account ID of the version driver.\n *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}';
              schema: {
                $ref: '#/components/schemas/Version';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the version is not found or the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.';
      operationId: 'updateVersion';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              archived: false;
              description: 'An excellent version';
              id: '10000';
              name: 'New Version 1';
              overdue: true;
              projectId: 10000;
              releaseDate: '2010-07-06';
              released: true;
              self: 'https://your-domain.atlassian.net/rest/api/~ver~/version/10000';
              userReleaseDate: '6/Jul/2010';
            };
            schema: {
              $ref: '#/components/schemas/Version';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","project":"PXA","projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}';
              schema: {
                $ref: '#/components/schemas/Version';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  the request is invalid.\n *  the user does not have the required permissions.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if the version is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Update version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project-version:jira', 'read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/mergeto/{moveIssuesTo}': {
    put: {
      deprecated: false;
      description: 'Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.\n\nConsider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.';
      operationId: 'mergeVersions';
      parameters: [
        {
          description: 'The ID of the version to delete.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the version to merge into.';
          in: 'path';
          name: 'moveIssuesTo';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the version is deleted.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if:\n\n *  the authentication credentials are incorrect or missing.\n *  the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the version to be deleted or the version to merge to are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Merge versions';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-version:jira', 'write:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/move': {
    post: {
      deprecated: false;
      description: "Modifies the version's sequence within the project, which affects the display order of the versions in Jira.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.";
      operationId: 'moveVersion';
      parameters: [
        {
          description: 'The ID of the version to be moved.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: 'https://your-domain.atlassian.net/rest/api/~ver~/version/10000';
            };
            schema: {
              $ref: '#/components/schemas/VersionMoveBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}';
              schema: {
                $ref: '#/components/schemas/Version';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if:\n\n *  no body parameters are provided.\n *  `after` and `position` are provided.\n *  `position` is invalid.';
        };
        '401': {
          description: 'Returned if:\n\n *  the authentication credentials are incorrect or missing\n *  the user does not have the required commissions.';
        };
        '404': {
          description: 'Returned if the version or move after version are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Move version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:project-version:jira', 'read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/relatedIssueCounts': {
    get: {
      deprecated: false;
      description: 'Returns the following counts for a version:\n\n *  Number of issues where the `fixVersion` is set to the version.\n *  Number of issues where the `affectedVersion` is set to the version.\n *  Number of issues where a version custom field is set to the version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.';
      operationId: 'getVersionRelatedIssues';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"customFieldUsage":[{"customFieldId":10000,"fieldName":"Field1","issueCountWithVersionInCustomField":2},{"customFieldId":10010,"fieldName":"Field2","issueCountWithVersionInCustomField":3}],"issueCountWithCustomFieldsShowingVersion":54,"issuesAffectedCount":101,"issuesFixedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}';
              schema: {
                $ref: '#/components/schemas/VersionIssueCounts';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '404': {
          description: 'Returned if:\n\n *  the version is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: "Get version's related issues count";
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/relatedwork': {
    get: {
      deprecated: false;
      description: 'Returns related work items for the given version id.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.';
      operationId: 'getRelatedWork';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"category":"Design","issueId":10001,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"},{"category":"Communications","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abce","title":"Chat application","url":"https://www.atlassian.com"},{"category":"External Link","issueId":10003,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcf","url":"https://www.atlassian.com"}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/VersionRelatedWork';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if the version is not found or the user does not have the necessary permission.';
        };
        '500': {
          description: 'Returned if reading related work fails';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: 'Get related work';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.';
      operationId: 'createRelatedWork';
      parameters: [
        {
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              category: 'Design';
              title: 'Design link';
              url: 'https://www.atlassian.com';
            };
            schema: {
              $ref: '#/components/schemas/VersionRelatedWork';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"category":"Design","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"}';
              schema: {
                $ref: '#/components/schemas/VersionRelatedWork';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the version is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Create related work';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.";
      operationId: 'updateRelatedWork';
      parameters: [
        {
          description: 'The ID of the version to update the related work on. For the related work id, pass it to the input JSON.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              category: 'Design';
              relatedWorkId: 'fabcdef6-7878-1234-beaf-43211234abcd';
              title: 'Design link';
              url: 'https://www.atlassian.com';
            };
            schema: {
              $ref: '#/components/schemas/VersionRelatedWork';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"category":"Design","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"}';
              schema: {
                $ref: '#/components/schemas/VersionRelatedWork';
              };
            };
          };
          description: 'Returned if the request is successful together with updated related work.';
        };
        '400': {
          description: 'Returned if the request data is invalid';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the version or the related work is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Update related work';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/removeAndSwap': {
    post: {
      deprecated: false;
      description: 'Deletes a project version.\n\nAlternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.';
      operationId: 'deleteAndReplaceVersion';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/DeleteAndReplaceVersionBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the version is deleted.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the version to delete is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
        {},
      ];
      summary: 'Delete and replace version';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:project-version:jira', 'write:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{id}/unresolvedIssueCount': {
    get: {
      deprecated: false;
      description: 'Returns counts of the issues and unresolved issues for the project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.';
      operationId: 'getVersionUnresolvedIssues';
      parameters: [
        {
          description: 'The ID of the version.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issuesCount":30,"issuesUnresolvedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}';
              schema: {
                $ref: '#/components/schemas/VersionUnresolvedIssuesCount';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          description: 'Returned if:\n\n *  the version is not found.\n *  the user does not have the required permissions.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
        {},
      ];
      summary: "Get version's unresolved issues count";
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:project-version:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}': {
    delete: {
      deprecated: false;
      description: 'Deletes the given related work for the given version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.';
      operationId: 'deleteRelatedWork';
      parameters: [
        {
          description: 'The ID of the version that the target related work belongs to.';
          in: 'path';
          name: 'versionId';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The ID of the related work to delete.';
          in: 'path';
          name: 'relatedWorkId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the related work is deleted.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if\n\nthe authentication credentials are incorrect.';
        };
        '403': {
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          description: 'Returned if the version/related work is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['write:jira-work'];
        },
        {},
      ];
      summary: 'Delete related work';
      tags: ['Project versions'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['write:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:issue:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/webhook': {
    delete: {
      deprecated: false;
      description: 'Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.';
      operationId: 'deleteWebhookById';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              webhookIds: [10000, 10001, 10042];
            };
            schema: {
              $ref: '#/components/schemas/ContainerForWebhookIDs';
            };
          };
        };
        required: true;
      };
      responses: {
        '202': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the list of webhook IDs is missing.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the caller isn't an app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'];
        },
      ];
      summary: 'Delete webhooks by ID';
      tags: ['Webhooks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'manage:jira-webhook'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:webhook:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of the webhooks registered by the calling app.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.';
      operationId: 'getDynamicWebhooksForApp';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 100;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":3,"startAt":0,"total":3,"values":[{"events":["jira:issue_updated","jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000","fieldIdsFilter":["summary","customfield_10029"],"id":10000,"jqlFilter":"project = PRJ"},{"events":["jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000","id":10001,"jqlFilter":"issuetype = Bug"},{"events":["issue_property_set"],"expirationDate":"2019-06-01T12:42:30.000+0000","id":10002,"issuePropertyKeysFilter":["my-issue-property-key"],"jqlFilter":"project = PRJ"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanWebhook';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the caller isn't an app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'];
        },
      ];
      summary: 'Get dynamic webhooks for app';
      tags: ['Webhooks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'manage:jira-webhook'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:webhook:jira', 'read:jql:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Registers webhooks.\n\n**NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.';
      operationId: 'registerDynamicWebhooks';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              url: 'https://your-app.example.com/webhook-received';
              webhooks: [
                {
                  events: ['jira:issue_created', 'jira:issue_updated'];
                  fieldIdsFilter: ['summary', 'customfield_10029'];
                  jqlFilter: 'project = PROJ';
                },
                {
                  events: ['jira:issue_deleted'];
                  jqlFilter: 'project IN (PROJ, EXP) AND status = done';
                },
                {
                  events: ['issue_property_set'];
                  issuePropertyKeysFilter: ['my-issue-property-key'];
                  jqlFilter: 'project = PROJ';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WebhookRegistrationDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"webhookRegistrationResult":[{"createdWebhookId":1000},{"errors":["The clause watchCount is unsupported"]},{"createdWebhookId":1001}]}';
              schema: {
                $ref: '#/components/schemas/ContainerForRegisteredWebhooks';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the caller isn't an app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'];
        },
      ];
      summary: 'Register dynamic webhooks';
      tags: ['Webhooks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'manage:jira-webhook'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:field:jira', 'read:project:jira', 'write:webhook:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/webhook/failed': {
    get: {
      deprecated: false;
      description: 'Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.\n\nAfter 72 hours the failure may no longer be returned by this operation.\n\nThe oldest failure is returned first.\n\nThis method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.\n\n**[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.';
      operationId: 'getFailedWebhooks';
      parameters: [
        {
          description: 'The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.';
          in: 'query';
          name: 'after';
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"values":[{"id":"1","body":"{\\"data\\":\\"webhook data\\"}","url":"https://example.com","failureTime":1573118132000},{"id":"2","url":"https://example.com","failureTime":1573540473480}],"maxResults":100,"next":"https://your-domain.atlassian.net/rest/api/3/webhook/failed?failedAfter=1573540473480&maxResults=100"}';
              schema: {
                $ref: '#/components/schemas/FailedWebhooks';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: '400 response';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the caller is not a Connect app.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'];
        },
      ];
      summary: 'Get failed webhooks';
      tags: ['Webhooks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'manage:jira-webhook'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:issue-details:jira',
            'read:webhook:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-role:jira',
            'read:epic:jira-software',
          ];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/webhook/refresh': {
    put: {
      deprecated: false;
      description: 'Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.\n\nUnrecognized webhook IDs (those that are not found or belong to other apps) are ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.';
      operationId: 'refreshWebhooks';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              webhookIds: [10000, 10001, 10042];
            };
            schema: {
              $ref: '#/components/schemas/ContainerForWebhookIDs';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expirationDate":"2019-06-01T12:42:30.000+0000"}';
              schema: {
                $ref: '#/components/schemas/WebhooksExpirationDate';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: "Returned if the caller isn't an app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'];
        },
      ];
      summary: 'Extend webhook life';
      tags: ['Webhooks'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work', 'manage:jira-webhook'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:webhook:jira', 'read:webhook:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflow': {
    get: {
      deprecated: true;
      description: 'Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).\n\nIf the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllWorkflows';
      parameters: [
        {
          description: 'The name of the workflow to be returned. Only one workflow can be specified.';
          in: 'query';
          name: 'workflowName';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"default":true,"description":"A classic Jira workflow","lastModifiedDate":"01-01-2011","lastModifiedUser":"admin","lastModifiedUserAccountId":"5b10a2844c20165700ede21g","name":"classic workflow","steps":5}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/DeprecatedWorkflow';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira', 'read:project:jira', 'read:project-category:jira', 'read:avatar:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: true;
      description: 'Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.\n\n#### Conditions ####\n\nConditions enable workflow rules that govern whether a transition can execute.\n\n##### Always false condition #####\n\nA condition that always fails.\n\n    {\n       "type": "AlwaysFalseCondition"\n     }\n\n##### Block transition until approval #####\n\nA condition that blocks issue transition if there is a pending approval.\n\n    {\n       "type": "BlockInProgressApprovalCondition"\n     }\n\n##### Compare number custom field condition #####\n\nA condition that allows transition if a comparison between a number custom field and a value is true.\n\n    {\n       "type": "CompareNumberCFCondition",\n       "configuration": {\n         "comparator": "=",\n         "fieldId": "customfield_10029",\n         "fieldValue": 2\n       }\n     }\n\n *  `comparator` One of the supported comparator: `=`, `>`, and `<`.\n *  `fieldId` The custom numeric field ID. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n *  `fieldValue` The value for comparison.\n\n##### Hide from user condition #####\n\nA condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.\n\n    {\n       "type": "RemoteOnlyCondition"\n     }\n\n##### Only assignee condition #####\n\nA condition that allows only the assignee to execute a transition.\n\n    {\n       "type": "AllowOnlyAssignee"\n     }\n\n##### Only Bamboo notifications workflow condition (deprecated) #####\n\nA condition that makes the transition available only to Bamboo build notifications.\n\n    {\n       "type": "OnlyBambooNotificationsCondition"\n     }\n\n##### Only reporter condition #####\n\nA condition that allows only the reporter to execute a transition.\n\n    {\n       "type": "AllowOnlyReporter"\n     }\n\n##### Permission condition #####\n\nA condition that allows only users with a permission to execute a transition.\n\n    {\n       "type": "PermissionCondition",\n       "configuration": {\n           "permissionKey": "BROWSE_PROJECTS"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status condition #####\n\nA condition that allows a transition based on whether an issue has or has not transitioned through a status.\n\n    {\n       "type": "PreviousStatusCondition",\n       "configuration": {\n         "ignoreLoopTransitions": true,\n         "includeCurrentStatus": true,\n         "mostRecentStatusOnly": true,\n         "reverseCondition": true,\n         "previousStatus": {\n           "id": "5"\n         }\n       }\n     }\n\nBy default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:\n\n *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.\n *  `includeCurrentStatus` is `true`, then the current issue status is also checked.\n *  `mostRecentStatusOnly` is `true`, then only the issue\'s preceding status (the one immediately before the current status) is checked.\n *  `reverseCondition` is `true`, then the status must not be present.\n\n##### Separation of duties condition #####\n\nA condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.\n\n    {\n       "type": "SeparationOfDutiesCondition",\n       "configuration": {\n         "fromStatus": {\n           "id": "5"\n         },\n         "toStatus": {\n           "id": "6"\n         }\n       }\n     }\n\n *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.\n *  `toStatus` An object containing the ID of the target status of the transition that is blocked.\n\n##### Subtask blocking condition #####\n\nA condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.\n\n    {\n       "type": "SubTaskBlockingCondition",\n       "configuration": {\n         "statuses": [\n           {\n             "id": "1"\n           },\n           {\n             "id": "3"\n           }\n         ]\n       }\n     }\n\n *  `statuses` A list of objects containing status IDs.\n\n##### User is in any group condition #####\n\nA condition that allows users belonging to any group from a list of groups to execute a transition.\n\n    {\n       "type": "UserInAnyGroupCondition",\n       "configuration": {\n         "groups": [\n           "administrators",\n           "atlassian-addons-admin"\n         ]\n       }\n     }\n\n *  `groups` A list of group names.\n\n##### User is in any project role condition #####\n\nA condition that allows only users with at least one project roles from a list of project roles to execute a transition.\n\n    {\n       "type": "InAnyProjectRoleCondition",\n       "configuration": {\n         "projectRoles": [\n           {\n             "id": "10002"\n           },\n           {\n             "id": "10003"\n           },\n           {\n             "id": "10012"\n           },\n           {\n             "id": "10013"\n           }\n         ]\n       }\n     }\n\n *  `projectRoles` A list of objects containing project role IDs.\n\n##### User is in custom field condition #####\n\nA condition that allows only users listed in a given custom field to execute the transition.\n\n    {\n       "type": "UserIsInCustomFieldCondition",\n       "configuration": {\n         "allowUserInField": false,\n         "fieldId": "customfield_10010"\n       }\n     }\n\n *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.\n *  `fieldId` The ID of the field containing the list of users.\n\n##### User is in group condition #####\n\nA condition that allows users belonging to a group to execute a transition.\n\n    {\n       "type": "UserInGroupCondition",\n       "configuration": {\n         "group": "administrators"\n       }\n     }\n\n *  `group` The name of the group.\n\n##### User is in group custom field condition #####\n\nA condition that allows users belonging to a group specified in a custom field to execute a transition.\n\n    {\n       "type": "InGroupCFCondition",\n       "configuration": {\n         "fieldId": "customfield_10012"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n\n##### User is in project role condition #####\n\nA condition that allows users with a project role to execute a transition.\n\n    {\n       "type": "InProjectRoleCondition",\n       "configuration": {\n         "projectRole": {\n           "id": "10002"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of a project role.\n\n##### Value field condition #####\n\nA conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.\n\n    {\n       "type": "ValueFieldCondition",\n       "configuration": {\n         "fieldId": "assignee",\n         "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",\n         "comparisonType": "NUMBER",\n         "comparator": "="\n       }\n     }\n\n *  `fieldId` The ID of a field used in the comparison.\n *  `fieldValue` The expected value of the field.\n *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n\n**Notes:**\n\n *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.\n *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.\n *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.\n\n#### Validators ####\n\nValidators check that any input made to the transition is valid before the transition is performed.\n\n##### Date field validator #####\n\nA validator that compares two dates.\n\n    {\n       "type": "DateFieldValidator",\n       "configuration": {\n           "comparator": ">",\n           "date1": "updated",\n           "date2": "created",\n           "expression": "1d",\n           "includeTime": true\n         }\n     }\n\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.\n *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn\'t have a time part, 00:00:00 is used.\n\n##### Windows date validator #####\n\nA validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.\n\n    {\n       "type": "WindowsDateValidator",\n       "configuration": {\n           "date1": "customfield_10009",\n           "date2": "created",\n           "windowsDays": 5\n         }\n     }\n\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The reference date. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `windowsDays` A positive integer indicating a number of days.\n\n##### Field required validator #####\n\nA validator that checks fields are not empty. By default, if a field is not included in the current context it\'s ignored and not validated.\n\n    {\n         "type": "FieldRequiredValidator",\n         "configuration": {\n             "ignoreContext": true,\n             "errorMessage": "Hey",\n             "fieldIds": [\n                 "versions",\n                 "customfield_10037",\n                 "customfield_10003"\n             ]\n         }\n     }\n\n *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.\n *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.\n *  `fieldIds` The list of fields to validate.\n\n##### Field changed validator #####\n\nA validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.\n\n    {\n         "type": "FieldChangedValidator",\n         "configuration": {\n             "fieldId": "comment",\n             "errorMessage": "Hey",\n             "exemptedGroups": [\n                 "administrators",\n                 "atlassian-addons-admin"\n             ]\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.\n *  `exemptedGroups` OPTIONAL. The list of groups.\n\n##### Field has single value validator #####\n\nA validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.\n\n    {\n         "type": "FieldHasSingleValueValidator",\n         "configuration": {\n             "fieldId": "attachment,\n             "excludeSubtasks": true\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.\n\n##### Parent status validator #####\n\nA validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.\n\n    {\n         "type": "ParentStatusValidator",\n         "configuration": {\n             "parentStatuses": [\n                 {\n                   "id":"1"\n                 },\n                 {\n                   "id":"2"\n                 }\n             ]\n         }\n     }\n\n *  `parentStatus` The list of required parent issue statuses.\n\n##### Permission validator #####\n\nA validator that checks the user has a permission.\n\n    {\n       "type": "PermissionValidator",\n       "configuration": {\n           "permissionKey": "ADMINISTER_PROJECTS"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status validator #####\n\nA validator that checks if the issue has held a status.\n\n    {\n       "type": "PreviousStatusValidator",\n       "configuration": {\n           "mostRecentStatusOnly": false,\n           "previousStatus": {\n               "id": "15"\n           }\n       }\n     }\n\n *  `mostRecentStatusOnly` If `true`, then only the issue\'s preceding status (the one immediately before the current status) is checked.\n *  `previousStatus` An object containing the ID of an issue status.\n\n##### Regular expression validator #####\n\nA validator that checks the content of a field against a regular expression.\n\n    {\n       "type": "RegexpFieldValidator",\n       "configuration": {\n           "regExp": "[0-9]",\n           "fieldId": "customfield_10029"\n       }\n     }\n\n *  `regExp`A regular expression.\n *  `fieldId` The ID of a field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n     *  `description`\n     *  `summary`\n\n##### User permission validator #####\n\nA validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.\n\n    {\n         "type": "UserPermissionValidator",\n         "configuration": {\n             "permissionKey": "BROWSE_PROJECTS",\n             "nullAllowed": false,\n             "username": "TestUser"\n         }\n     }\n\n *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n *  `nullAllowed` If `true`, allows the transition when `username` is empty.\n *  `username` The username to validate against the `permissionKey`.\n\n#### Post functions ####\n\nPost functions carry out any additional processing required after a Jira workflow transition is executed.\n\n##### Fire issue event function #####\n\nA post function that fires an event that is processed by the listeners.\n\n    {\n       "type": "FireIssueEventFunction",\n       "configuration": {\n         "event": {\n           "id":"1"\n         }\n       }\n     }\n\n**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.\n\n *  `event` An object containing the ID of the issue event.\n\n##### Update issue status #####\n\nA post function that sets issue status to the linked status of the destination workflow status.\n\n    {\n       "type": "UpdateIssueStatusFunction"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Create comment #####\n\nA post function that adds a comment entered during the transition to an issue.\n\n    {\n       "type": "CreateCommentFunction"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Store issue #####\n\nA post function that stores updates to an issue.\n\n    {\n       "type": "IssueStoreFunction"\n     }\n\n**Note:** This post function can only be added to the initial transition and can only be added once.\n\n##### Assign to current user function #####\n\nA post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.\n\n    {\n         "type": "AssignToCurrentUserFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to lead function #####\n\nA post function that assigns the issue to the project or component lead developer.\n\n    {\n         "type": "AssignToLeadFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to reporter function #####\n\nA post function that assigns the issue to the reporter.\n\n    {\n         "type": "AssignToReporterFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Clear field value function #####\n\nA post function that clears the value from a field.\n\n    {\n       "type": "ClearFieldValuePostFunction",\n       "configuration": {\n         "fieldId": "assignee"\n       }\n     }\n\n *  `fieldId` The ID of the field.\n\n##### Copy value from other field function #####\n\nA post function that copies the value of one field to another, either within an issue or from parent to subtask.\n\n    {\n       "type": "CopyValueFromOtherFieldPostFunction",\n       "configuration": {\n         "sourceFieldId": "assignee",\n         "destinationFieldId": "creator",\n         "copyType": "same"\n       }\n     }\n\n *  `sourceFieldId` The ID of the source field.\n *  `destinationFieldId` The ID of the destination field.\n *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.\n\n##### Create Crucible review workflow function (deprecated) #####\n\nA post function that creates a Crucible review for all unreviewed code for the issue.\n\n    {\n         "type": "CreateCrucibleReviewWorkflowFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Set issue security level based on user\'s project role function #####\n\nA post function that sets the issue\'s security level if the current user has a project role.\n\n    {\n       "type": "SetIssueSecurityFromRoleFunction",\n       "configuration": {\n         "projectRole": {\n             "id":"10002"\n         },\n         "issueSecurityLevel": {\n             "id":"10000"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of the project role.\n *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.\n\n##### Trigger a webhook function #####\n\nA post function that triggers a webhook.\n\n    {\n       "type": "TriggerWebhookFunction",\n       "configuration": {\n         "webhook": {\n           "id": "1"\n         }\n       }\n     }\n\n *  `webhook` An object containing the ID of the webhook listener to trigger.\n\n##### Update issue custom field function #####\n\nA post function that updates the content of an issue custom field.\n\n    {\n       "type": "UpdateIssueCustomFieldPostFunction",\n       "configuration": {\n         "mode": "append",\n         "fieldId": "customfield_10003",\n         "fieldValue": "yikes"\n       }\n     }\n\n *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.\n *  `fieldId` The ID of the field.\n *  `fieldValue` The update content.\n\n##### Update issue field function #####\n\nA post function that updates a simple issue field.\n\n    {\n       "type": "UpdateIssueFieldFunction",\n       "configuration": {\n         "fieldId": "assignee",\n         "fieldValue": "5f0c277e70b8a90025a00776"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `assignee`\n     *  `description`\n     *  `environment`\n     *  `priority`\n     *  `resolution`\n     *  `summary`\n     *  `timeoriginalestimate`\n     *  `timeestimate`\n     *  `timespent`\n *  `fieldValue` The update value.\n *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:\n    \n     *  an account ID.\n     *  `automatic`.\n     *  a blank string, which sets the value to `unassigned`.\n\n#### Connect rules ####\n\nConnect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule\'s module must exist.\n\n    {\n       "type": "appKey__moduleKey",\n       "configuration": {\n         "value":"{\\"isValid\\":\\"true\\"}"\n       }\n     }\n\n *  `type` A Connect rule key in a form of `appKey__moduleKey`.\n *  `value` The stringified JSON configuration of a Connect rule.\n\n#### Forge rules ####\n\nForge transition rules are not yet supported.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createWorkflow';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'This is a workflow used for Stories and Tasks';
              name: 'Workflow 1';
              statuses: [
                {
                  id: '1';
                  properties: {
                    'jira.issue.editable': 'false';
                  };
                },
                {
                  id: '2';
                },
                {
                  id: '3';
                },
              ];
              transitions: [
                {
                  from: [];
                  name: 'Created';
                  to: '1';
                  type: 'initial';
                },
                {
                  from: ['1'];
                  name: 'In progress';
                  properties: {
                    'custom-property': 'custom-value';
                  };
                  rules: {
                    conditions: {
                      conditions: [
                        {
                          type: 'RemoteOnlyCondition';
                        },
                        {
                          configuration: {
                            groups: ['developers', 'qa-testers'];
                          };
                          type: 'UserInAnyGroupCondition';
                        },
                      ];
                      operator: 'AND';
                    };
                    postFunctions: [
                      {
                        type: 'AssignToCurrentUserFunction';
                      },
                    ];
                  };
                  screen: {
                    id: '10001';
                  };
                  to: '2';
                  type: 'directed';
                },
                {
                  name: 'Completed';
                  rules: {
                    postFunctions: [
                      {
                        configuration: {
                          fieldId: 'assignee';
                        };
                        type: 'ClearFieldValuePostFunction';
                      },
                    ];
                    validators: [
                      {
                        configuration: {
                          parentStatuses: [
                            {
                              id: '3';
                            },
                          ];
                        };
                        type: 'ParentStatusValidator';
                      },
                      {
                        configuration: {
                          permissionKey: 'ADMINISTER_PROJECTS';
                        };
                        type: 'PermissionValidator';
                      },
                    ];
                  };
                  to: '3';
                  type: 'global';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/CreateWorkflowDetails';
            };
          };
        };
        description: 'The workflow details.';
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"entityId":"d7178e8d-bf6c-4c0c-9e90-758a0b965b67","name":"Workflow 1"}';
              schema: {
                $ref: '#/components/schemas/WorkflowIDs';
              };
            };
          };
          description: 'Returned if the workflow is created.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The request body parameters are missing."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access the workflow configuration."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Status with ID 10000 was not found"],"errors":{}}';
            };
          };
          description: 'Returned if one or more statuses is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create workflow';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira', 'read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflow/rule/config': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:\n\n *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).\n *  matching one or more transition rule keys.\n\nOnly workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.\n\nDue to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.';
      operationId: 'getWorkflowTransitionRuleConfigurations';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 10;
            format: 'int32';
            maximum: 50;
            type: 'integer';
          };
        },
        {
          description: 'The types of the transition rules to return.';
          in: 'query';
          name: 'types';
          required: true;
          schema: {
            items: {
              default: '';
              enum: ['postfunction', 'condition', 'validator'];
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.';
          in: 'query';
          name: 'keys';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of workflow names to filter by.';
          in: 'query';
          name: 'workflowNames';
          schema: {
            items: {
              default: '';
              maxLength: 50;
              type: 'string';
            };
            maxLength: 50;
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'The list of `tags` to filter by.';
          in: 'query';
          name: 'withTags';
          schema: {
            items: {
              default: '';
              maxLength: 20;
              type: 'string';
            };
            maxLength: 20;
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Whether draft or published workflows are returned. If not provided, both workflow types are returned.';
          in: 'query';
          name: 'draft';
          schema: {
            type: 'boolean';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":10,"startAt":0,"total":1,"values":[{"workflowId":{"name":"My Workflow name","draft":false},"postFunctions":[{"id":"b4d6cbdc-59f5-11e9-8647-d663bd873d93","key":"postfunction-key","configuration":{"value":"{ \\"color\\": \\"red\\" }","disabled":false,"tag":"Sample tag"},"transition":{"id":1,"name":"Open"}}],"conditions":[{"id":"d663bd873d93-59f5-11e9-8647-b4d6cbdc","key":"condition-key","configuration":{"value":"{ \\"size\\": \\"medium\\" }","disabled":false,"tag":"Another tag"},"transition":{"id":1,"name":"Open"}}],"validators":[{"id":"11e9-59f5-b4d6cbdc-8647-d663bd873d93","key":"validator-key","configuration":{"value":"\\"{ \\\\\\"shape\\\\\\": \\\\\\"square\\\\\\" }\\"","disabled":false},"transition":{"id":1,"name":"Open"}}]}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflowTransitionRules';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the caller is not a Connect or Forge app.';
        };
        '404': {
          description: 'Returned if any transition rule type is not supported.';
        };
        '503': {
          description: 'Returned if we encounter a problem while trying to access the required data.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow transition rule configurations';
      tags: ['Workflow transition rules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates configuration of workflow transition rules. The following rule types are supported:\n\n *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)\n *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)\n *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)\n\nOnly rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.\n\nTo assist with app migration, this operation can be used to:\n\n *  Disable a rule.\n *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).\n\nRules are enabled if the `disabled` parameter is not provided.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.';
      operationId: 'updateWorkflowTransitionRuleConfigurations';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              workflows: [
                {
                  conditions: [
                    {
                      configuration: {
                        disabled: false;
                        tag: 'Another tag';
                        value: '{ "size": "medium" }';
                      };
                      id: 'd663bd873d93-59f5-11e9-8647-b4d6cbdc';
                    },
                  ];
                  postFunctions: [
                    {
                      configuration: {
                        disabled: false;
                        tag: 'Sample tag';
                        value: '{ "color": "red" }';
                      };
                      id: 'b4d6cbdc-59f5-11e9-8647-d663bd873d93';
                    },
                  ];
                  validators: [
                    {
                      configuration: {
                        disabled: false;
                        value: '{ "shape": "square" }';
                      };
                      id: '11e9-59f5-b4d6cbdc-8647-d663bd873d93';
                    },
                  ];
                  workflowId: {
                    draft: false;
                    name: 'My Workflow name';
                  };
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionRulesUpdate';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"updateResults":[{"workflowId":{"name":"Workflow with one rule not updated","draft":false},"ruleUpdateErrors":{"example-rule-id":["The rule with this id does not exist: example-rule-id"]},"updateErrors":[]},{"workflowId":{"name":"Workflow with all rules successfully updated","draft":true},"ruleUpdateErrors":{},"updateErrors":[]},{"workflowId":{"name":"Non-existing workflow","draft":false},"ruleUpdateErrors":{},"updateErrors":["Workflow not found: WorkflowIdBean{name=Non-existing workflow, draft=false}"]}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrors';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the caller is not a Connect or Forge app.';
        };
        '503': {
          description: 'Returned if we encounter a problem while trying to access the required data.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update workflow transition rule configurations';
      tags: ['Workflow transition rules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflow/rule/config/delete': {
    put: {
      deprecated: false;
      description: 'Deletes workflow transition rules from one or more workflows. These rule types are supported:\n\n *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)\n *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)\n *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)\n\nOnly rules created by the calling Connect app can be deleted.\n\n**[Permissions](#permissions) required:** Only Connect apps can use this operation.';
      operationId: 'deleteWorkflowTransitionRuleConfigurations';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              workflows: [
                {
                  workflowId: {
                    draft: false;
                    name: 'Internal support workflow';
                  };
                  workflowRuleIds: [
                    'b4d6cbdc-59f5-11e9-8647-d663bd873d93',
                    'd663bd873d93-59f5-11e9-8647-b4d6cbdc',
                    '11e9-59f5-b4d6cbdc-8647-d663bd873d93',
                  ];
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowsWithTransitionRulesDetails';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"updateResults":[{"workflowId":{"name":"Workflow with one rule not updated","draft":false},"ruleUpdateErrors":{"example-rule-id":["The rule with this id does not exist: example-rule-id"]},"updateErrors":[]},{"workflowId":{"name":"Workflow with all rules successfully updated","draft":true},"ruleUpdateErrors":{},"updateErrors":[]},{"workflowId":{"name":"Non-existing workflow","draft":false},"ruleUpdateErrors":{},"updateErrors":["Workflow not found: WorkflowIdBean{name=Non-existing workflow, draft=false}"]}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrors';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Jira Administration permission is required to access workflow configuration."],"errors":{},"httpStatusCode":{"empty":false,"present":true}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the caller is not a Connect app.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
      ];
      summary: 'Delete workflow transition rule configurations';
      tags: ['Workflow transition rules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/api/3/workflow/search': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.\n\nThis operation does not return next-gen workflows.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowsPaginated';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
        {
          description: 'The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.';
          in: 'query';
          name: 'workflowName';
          schema: {
            items: {
              default: '';
              type: 'string';
            };
            type: 'array';
            uniqueItems: true;
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `transitions` For each workflow, returns information about the transitions inside the workflow.\n *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.\n *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.\n *  `statuses` For each workflow, returns information about the statuses inside the workflow.\n *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.\n *  `default` For each workflow, returns information about whether this is the default workflow.\n *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.\n *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.\n *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.\n *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'String used to perform a case-insensitive partial match with workflow name.';
          in: 'query';
          name: 'queryString';
          schema: {
            type: 'string';
          };
        },
        {
          description: '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by workflow name.\n *  `created` Sorts by create time.\n *  `updated` Sorts by update time.';
          in: 'query';
          name: 'orderBy';
          schema: {
            enum: ['name', '-name', '+name', 'created', '-created', '+created', 'updated', '+updated', '-updated'];
            type: 'string';
          };
        },
        {
          description: 'Filters active and inactive workflows.';
          in: 'query';
          name: 'isActive';
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":{"name":"SCRUM Workflow","entityId":"5ed312c5-f7a6-4a78-a1f6-8ff7f307d063"},"description":"A workflow used for Software projects in the SCRUM methodology","transitions":[{"id":"5","name":"In Progress","description":"Start working on the issue.","from":["10","13"],"to":"14","type":"directed","screen":{"id":"10000","name":"Issue screen"},"rules":{"conditionsTree":{"nodeType":"compound","operator":"AND","conditions":[{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"WORK_ON_ISSUES"}},{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"RESOLVE_ISSUES"}}]},"validators":[{"type":"FieldRequiredValidator","configuration":{"errorMessage":"A custom error message","fields":["description","assignee"],"ignoreContext":true}}],"postFunctions":[{"type":"UpdateIssueStatusFunction"},{"type":"GenerateChangeHistoryFunction"},{"type":"FireIssueEventFunction"}]},"properties":{"jira.fieldscreen.id":1}}],"statuses":[{"id":"3","name":"In Progress","properties":{"issueEditable":false,"jira.issue.editable":"false"}}],"isDefault":false,"schemes":[{"id":"10001","name":"Test Workflow Scheme"}],"projects":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}],"hasDraftWorkflow":true,"operations":{"canEdit":true,"canDelete":false},"created":"2018-12-10T16:30:15.000+0000","updated":"2018-12-11T11:45:13.000+0000"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflow';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access workflows."],"errors":{}}';
              schema: {
                $ref: '#/components/schemas/ErrorCollection';
              };
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-project'];
        },
      ];
      summary: 'Get workflows paginated';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-project'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow:jira',
            'read:webhook:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflow/transitions/{transitionId}/properties': {
    delete: {
      deprecated: false;
      description: 'Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteWorkflowTransitionProperty';
      parameters: [
        {
          description: 'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.';
          in: 'path';
          name: 'transitionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of the transition property to delete, also known as the name of the property.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The name of the workflow that the transition belongs to.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.';
          in: 'query';
          name: 'workflowMode';
          schema: {
            enum: ['live', 'draft'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          description: '200 response';
        };
        '304': {
          description: 'Returned if no changes were made by the request. For example, trying to delete a property that cannot be found.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow transition is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete workflow transition property';
      tags: ['Workflow transition properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow.property:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowTransitionProperties';
      parameters: [
        {
          description: 'The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.';
          in: 'path';
          name: 'transitionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.';
          in: 'query';
          name: 'includeReservedKeys';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.';
          in: 'query';
          name: 'key';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The name of the workflow that the transition belongs to.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.';
          in: 'query';
          name: 'workflowMode';
          schema: {
            default: 'live';
            enum: ['live', 'draft'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"id":"jira.i18n.title","key":"jira.i18n.title","value":"some.title"},{"id":"jira.permission","key":"jira.permission","value":"createissue"}]';
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty';
              };
            };
          };
          description: '200 response';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have admin permission';
        };
        '404': {
          description: 'Returned if the workflow transition or property is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow transition properties';
      tags: ['Workflow transition properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow.property:jira'];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createWorkflowTransitionProperty';
      parameters: [
        {
          description: 'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.';
          in: 'path';
          name: 'transitionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The name of the workflow that the transition belongs to.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.';
          in: 'query';
          name: 'workflowMode';
          schema: {
            default: 'live';
            enum: ['live', 'draft'];
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              value: 'createissue';
            };
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionProperty';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}';
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty';
              };
            };
          };
          description: '200 response';
        };
        '400': {
          description: 'Returned if a workflow property with the same key is present on the transition.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow transition is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create workflow transition property';
      tags: ['Workflow transition properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow.property:jira', 'read:workflow.property:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateWorkflowTransitionProperty';
      parameters: [
        {
          description: 'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.';
          in: 'path';
          name: 'transitionId';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.';
          in: 'query';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The name of the workflow that the transition belongs to.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.';
          in: 'query';
          name: 'workflowMode';
          schema: {
            enum: ['live', 'draft'];
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              value: 'createissue';
            };
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionProperty';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}';
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty';
              };
            };
          };
          description: '200 response';
        };
        '304': {
          description: 'Returned if no changes were made by the request. For example, attempting to update a property with its current value.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow transition is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update workflow transition property';
      tags: ['Workflow transition properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow.property:jira', 'read:workflow.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflow/{entityId}': {
    delete: {
      deprecated: false;
      description: 'Deletes a workflow.\n\nThe workflow cannot be deleted if it is:\n\n *  an active workflow.\n *  a system workflow.\n *  associated with any workflow scheme.\n *  associated with any draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteInactiveWorkflow';
      parameters: [
        {
          description: 'The entity ID of the workflow.';
          in: 'path';
          name: 'entityId';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the workflow is deleted.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Cannot delete an active workflow."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access the workflow configuration."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The workflow was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the workflow is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete inactive workflow';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows': {
    post: {
      deprecated: false;
      description: 'Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* global permission to access all, including project-scoped, workflows\n *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows';
      operationId: 'readWorkflows';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow is associated with.\n *  `statuses.usages` Returns the project and issue types that each status is associated with.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Return the new fields (`toStatusReference`/`links`) instead of the deprecated fields (`to`/`from`) for workflow transition port mappings.';
          in: 'query';
          name: 'useTransitionLinksFormat';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
        {
          description: 'Return the new field `approvalConfiguration` instead of the deprecated status properties for approval configuration.';
          in: 'query';
          name: 'useApprovalConfiguration';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectAndIssueTypes: [];
              workflowIds: [];
              workflowNames: ['Workflow 1', 'Workflow 2'];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowReadRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","id":"21","links":[],"name":"In Progress","properties":{},"toStatusReference":"10002","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"11","links":[],"name":"To Do","properties":{},"toStatusReference":"10001","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"31","links":[],"name":"Done","properties":{},"toStatusReference":"10003","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"41","links":[{"fromPort":0,"fromStatusReference":"10001","toPort":1}],"name":"Start work","properties":{},"toStatusReference":"10002","triggers":[],"type":"DIRECTED","validators":[]},{"actions":[],"description":"","id":"1","links":[],"name":"Create","properties":{},"toStatusReference":"10001","triggers":[],"type":"INITIAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowReadResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk get workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows/capabilities': {
    get: {
      deprecated: false;
      description: 'Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to access all, including global-scoped, workflows\n *  *Administer projects* project permissions to access project-scoped workflows\n\nThe current list of Atlassian-provided rules:\n\n#### Validators ####\n\nA validator rule that checks if a user has the required permissions to execute the transition in the workflow.\n\n##### Permission validator #####\n\nA validator rule that checks if a user has the required permissions to execute the transition in the workflow.\n\n    {\n       "ruleKey": "system:check-permission-validator",\n       "parameters": {\n         "permissionKey": "ADMINISTER_PROJECTS"\n       }\n     }\n\nParameters:\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).\n\n##### Parent or child blocking validator #####\n\nA validator to block the child issue\\\\u2019s transition depending on the parent issue\\\\u2019s status.\n\n    {\n       "ruleKey" : "system:parent-or-child-blocking-validator"\n       "parameters" : {\n         "blocker" : "PARENT"\n         "statusIds" : "1,2,3"\n       }\n     }\n\nParameters:\n\n *  `blocker` currently only supports `PARENT`.\n *  `statusIds` a comma-separated list of status IDs.\n\n##### Previous status validator #####\n\nA validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.\n\n    {\n       "ruleKey": "system:previous-status-validator",\n       "parameters": {\n         "previousStatusIds": "10014",\n         "mostRecentStatusOnly": "true"\n       }\n     }\n\nParameters:\n\n *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.\n *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.\n\n##### Validate a field value #####\n\nA validation that ensures a specific field\'s value meets the defined criteria before allowing an issue to transition in the workflow.\n\nDepending on the rule type, the result will vary:\n\n###### Field required ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldRequired",\n         "fieldsRequired": "assignee",\n         "ignoreContext": "true",\n         "errorMessage": "An assignee must be set!"\n       }\n     }\n\nParameters:\n\n *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.\n *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn\'t check a required field if its context isn\'t configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.\n *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don\'t provide one (Optional).\n\n###### Field changed ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldChanged",\n         "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",\n         "fieldKey": "versions",\n         "errorMessage": "Affect versions must be modified before transition"\n       }\n     }\n\nParameters:\n\n *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.\n *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.\n *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don\'t provide one (Optional).\n\n###### Field has a single value ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldHasSingleValue",\n         "fieldKey": "created",\n         "excludeSubtasks": "true"\n       }\n     }\n\nParameters:\n\n *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.\n *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.\n\n###### Field matches regular expression ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldMatchesRegularExpression",\n         "regexp": "[0-9]{4}",\n         "fieldKey": "description"\n       }\n     }\n\nParameters:\n\n *  `regexp` the regular expression used to validate the field\\\\u2019s content.\n *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.\n\n###### Date field comparison ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "dateFieldComparison",\n         "date1FieldKey": "duedate",\n         "date2FieldKey": "customfield_10054",\n         "includeTime": "true",\n         "conditionSelected": ">="\n       }\n     }\n\nParameters:\n\n *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.\n *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.\n *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.\n *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n\n###### Date range comparison ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "windowDateComparison",\n         "date1FieldKey": "customfield_10009",\n         "date2FieldKey": "customfield_10054",\n         "numberOfDays": "3"\n       }\n     }\n\nParameters:\n\n *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.\n *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.\n *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.\n\nThis rule is composed by aggregating the following legacy rules:\n\n *  FieldRequiredValidator\n *  FieldChangedValidator\n *  FieldHasSingleValueValidator\n *  RegexpFieldValidator\n *  DateFieldValidator\n *  WindowsDateValidator\n\n##### Proforma: Forms attached validator #####\n\nValidates that one or more forms are attached to the issue.\n\n    {\n       "ruleKey" : "system:proforma-forms-attached"\n       "parameters" : {}\n     }\n\n##### Proforma: Forms submitted validator #####\n\nValidates that all forms attached to the issue have been submitted.\n\n    {\n       "ruleKey" : "system:proforma-forms-submitted"\n       "parameters" : {}\n     }\n\n#### Conditions ####\n\nConditions enable workflow rules that govern whether a transition can execute.\n\n##### Check field value #####\n\nA condition rule evaluates as true if a specific field\'s value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field\'s value matches the desired condition.\n\n    {\n       "ruleKey": "system:check-field-value",\n       "parameters": {\n         "fieldId": "description",\n         "fieldValue": "[\\"Done\\"]",\n         "comparator": "=",\n         "comparisonType": "STRING"\n       }\n     }\n\nParameters:\n\n *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.\n *  `fieldValue` the list of values to check against the field\\\\u2019s value.\n *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.\n\n##### Restrict issue transition #####\n\nThis rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.\n\n    {\n       "ruleKey": "system:restrict-issue-transition",\n       "parameters": {\n         "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",\n         "roleIds": "10002,10004",\n         "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",\n         "permissionKeys": "ADMINISTER_PROJECTS",\n         "groupCustomFields": "customfield_10028",\n         "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",\n         "denyUserCustomFields": "customfield_10107"\n       }\n     }\n\nParameters:\n\n *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects\n *  `roleIds` a comma-separated list of role IDs.\n *  `groupIds` a comma-separated list of group IDs.\n *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).\n *  `groupCustomFields` a comma-separated list of group custom field IDs.\n *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.\n *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.\n\nThis rule is composed by aggregating the following legacy rules:\n\n *  AllowOnlyAssignee\n *  AllowOnlyReporter\n *  InAnyProjectRoleCondition\n *  InProjectRoleCondition\n *  UserInAnyGroupCondition\n *  UserInGroupCondition\n *  PermissionCondtion\n *  InGroupCFCondition\n *  UserIsInCustomFieldCondition\n\n##### Previous status condition #####\n\nA condition that evaluates based on an issue\'s previous status(es) and specific criteria.\n\n    {\n       "ruleKey" : "system:previous-status-condition"\n       "parameters" : {\n         "previousStatusIds" : "10004",\n         "not": "true",\n         "mostRecentStatusOnly" : "true",\n         "includeCurrentStatus": "true",\n         "ignoreLoopTransitions": "true"\n       }\n     }\n\nParameters:\n\n *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.\n *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.\n *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.\n *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.\n *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.\n\n##### Parent or child blocking condition #####\n\nA condition to block the parent\\\\u2019s issue transition depending on the child\\\\u2019s issue status.\n\n    {\n       "ruleKey" : "system:parent-or-child-blocking-condition"\n       "parameters" : {\n         "blocker" : "CHILD",\n         "statusIds" : "1,2,3"\n       }\n     }\n\nParameters:\n\n *  `blocker` currently only supports `CHILD`.\n *  `statusIds` a comma-separated list of status IDs.\n\n##### Separation of duties #####\n\nA condition preventing the user from performing, if the user has already performed a transition on the issue.\n\n    {\n       "ruleKey": "system:separation-of-duties",\n       "parameters": {\n         "fromStatusId": "10161",\n         "toStatusId": "10160"\n       }\n     }\n\nParameters:\n\n *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.\n *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.\n\n##### Restrict transitions #####\n\nA condition preventing all users from transitioning the issue can also optionally include APIs as well.\n\n    {\n       "ruleKey": "system:restrict-from-all-users",\n       "parameters": {\n         "restrictMode": "users"\n       }\n     }\n\nParameters:\n\n *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.\n\n##### Jira Service Management block until approved #####\n\nBlock an issue transition until approval. Note: This is only supported in team-managed projects.\n\n    {\n       "ruleKey": "system:jsd-approvals-block-until-approved",\n       "parameters": {\n         "approvalConfigurationJson": "{"statusExternalUuid...}"\n       }\n     }\n\nParameters:\n\n *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.\n\n##### Jira Service Management block until rejected #####\n\nBlock an issue transition until rejected. Note: This is only supported in team-managed projects.\n\n    {\n       "ruleKey": "system:jsd-approvals-block-until-rejected",\n       "parameters": {\n         "approvalConfigurationJson": "{"statusExternalUuid...}"\n       }\n     }\n\nParameters:\n\n *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.\n\n##### Block in progress approval #####\n\nCondition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.\n\n    {\n       "ruleKey": "system:block-in-progress-approval",\n       "parameters": {}\n     }\n\n#### Post functions ####\n\nPost functions carry out any additional processing required after a workflow transition is executed.\n\n##### Change assignee #####\n\nA post function rule that changes the assignee of an issue after a transition.\n\n    {\n       "ruleKey": "system:change-assignee",\n       "parameters": {\n         "type": "to-selected-user",\n         "accountId": "example-account-id"\n       }\n     }\n\nParameters:\n\n *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`\n *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.\n\n##### Copy field value #####\n\nA post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.\n\n    {\n       "ruleKey": "system:copy-value-from-other-field",\n       "parameters": {\n         "sourceFieldKey": "description",\n         "targetFieldKey": "components",\n         "issueSource": "SAME"\n       }\n     }\n\nParameters:\n\n *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`\n *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`\n *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.\n\n##### Update field #####\n\nA post function that updates or appends a specific field with the given value.\n\n    {\n       "ruleKey": "system:update-field",\n       "parameters": {\n         "field": "customfield_10056",\n         "value": "asdf",\n         "mode": "append"\n       }\n     }\n\nParameters:\n\n *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`\n *  `value` the value to update the field with.\n *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.\n\n##### Trigger webhook #####\n\nA post function that automatically triggers a predefined webhook when a transition occurs in the workflow.\n\n    {\n       "ruleKey": "system:trigger-webhook",\n       "parameters": {\n         "webhookId": "1"\n       }\n     }\n\nParameters:\n\n *  `webhookId` the ID of the webhook.\n\n#### Screen ####\n\n##### Remind people to update fields #####\n\nA screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.\n\n    {\n       "ruleKey": "system:remind-people-to-update-fields",\n       "params": {\n         "remindingFieldIds": "assignee,customfield_10025",\n         "remindingMessage": "The message",\n         "remindingAlwaysAsk": "true"\n       }\n     }\n\nParameters:\n\n *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.\n *  `remindingMessage` the message to display when prompting the users to update the fields.\n *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.\n\n##### Shared transition screen #####\n\nA common screen that is shared between transitions in a workflow.\n\n    {\n       "ruleKey": "system:transition-screen",\n       "params": {\n         "screenId": "3"\n       }\n     }\n\nParameters:\n\n *  `screenId` the ID of the screen.\n\n#### Connect & Forge ####\n\n##### Connect rules #####\n\nValidator/Condition/Post function for Connect app.\n\n    {\n       "ruleKey": "connect:expression-validator",\n       "parameters": {\n         "appKey": "com.atlassian.app",\n         "config": "",\n         "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",\n         "disabled": "false",\n         "tag": ""\n       }\n     }\n\nParameters:\n\n *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`\n *  `appKey` the reference to the Connect app\n *  `config` a JSON payload string describing the configuration\n *  `id` the ID of the rule\n *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.\n *  `tag` additional tags for the Connect app\n\n##### Forge rules #####\n\nValidator/Condition/Post function for Forge app.\n\n    {\n       "ruleKey": "forge:expression-validator",\n       "parameters": {\n         "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",\n         "config": "{"searchString":"workflow validator"}",\n         "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"\n       }\n     }\n\nParameters:\n\n *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`\n *  `key` the identifier for the Forge app\n *  `config` the persistent stringified JSON configuration for the Forge rule\n *  `id` the ID of the Forge rule';
      operationId: 'workflowCapabilities';
      parameters: [
        {
          in: 'query';
          name: 'workflowId';
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'projectId';
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'issueTypeId';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"connectRules":[{"addonKey":"com.atlassian.jira.refapp","createUrl":"/validators/jira-expression/create?id={validator.id}","description":"Validates if the given Jira expression is true.","editUrl":"/validators/jira-expression/edit?id={validator.id}","moduleKey":"jiraExpressionValidator","name":"Jira expression validator (by APPNAME)","ruleKey":"connect:expression-validator","ruleType":"Validator","viewUrl":"/validators/jira-expression/view?id={validator.id}"}],"editorScope":"GLOBAL","forgeRules":[{"description":"A Jira workflow validator example.","id":"ari:cloud:ecosystem::extension/9df6d15f-1bbe-443e-be08-150309e8dbb0/f6a3bed3-737f-4e7a-8942-130df302b749/static/workflow-validator-example-workflow-validator","name":"workflow-validator","ruleKey":"forge:expression-validator","ruleType":"Validator"}],"projectTypes":["software","business"],"systemRules":[{"description":"Automatically assign a request to someone after moving the request using a particular transition.","incompatibleRuleKeys":[],"isAvailableForInitialTransition":true,"isVisible":true,"name":"Assign a request","ruleKey":"system:change-assignee","ruleType":"Function"}],"triggerRules":[{"availableTypes":[{"description":"Automatically transitions the issue when a related branch is created in a connected repository","name":"Branch created","type":"com.atlassian.jira.plugins.jira-development-integration-plugin:branch-created-trigger"}],"ruleKey":"system:development-triggers"}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowCapabilities';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get available workflow capabilities';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows/create': {
    post: {
      deprecated: false;
      description: 'Create workflows and related statuses.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows';
      operationId: 'createWorkflows';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: {
                type: 'GLOBAL';
              };
              statuses: [
                {
                  description: '';
                  name: 'To Do';
                  statusCategory: 'TODO';
                  statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                },
                {
                  description: '';
                  name: 'In Progress';
                  statusCategory: 'IN_PROGRESS';
                  statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                },
                {
                  description: '';
                  name: 'Done';
                  statusCategory: 'DONE';
                  statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                },
              ];
              workflows: [
                {
                  description: '';
                  name: 'Software workflow 1';
                  startPointLayout: {
                    x: -100.00030899047852;
                    y: -153.00020599365234;
                  };
                  statuses: [
                    {
                      layout: {
                        x: 114.99993896484375;
                        y: -16;
                      };
                      properties: {};
                      statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                    },
                    {
                      layout: {
                        x: 317.0000915527344;
                        y: -16;
                      };
                      properties: {};
                      statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                    },
                    {
                      layout: {
                        x: 508.000244140625;
                        y: -16;
                      };
                      properties: {};
                      statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                    },
                  ];
                  transitions: [
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '1';
                      name: 'Create';
                      properties: {};
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      };
                      triggers: [];
                      type: 'INITIAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '11';
                      name: 'To Do';
                      properties: {};
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '21';
                      name: 'In Progress';
                      properties: {};
                      to: {
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '31';
                      name: 'Done';
                      properties: {};
                      to: {
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                  ];
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowCreateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Software workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","from":[],"id":"31","name":"Done","properties":{},"to":{"statusReference":"10003"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"1","name":"Create","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"INITIAL","validators":[]},{"actions":[],"description":"","from":[],"id":"21","name":"In Progress","properties":{},"to":{"statusReference":"10002"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"11","name":"To Do","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"GLOBAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowCreateResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk create workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows/create/validation': {
    post: {
      deprecated: false;
      description: 'Validate the payload for bulk create workflows.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows';
      operationId: 'validateCreateWorkflows';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              payload: {
                scope: {
                  type: 'GLOBAL';
                };
                statuses: [
                  {
                    description: '';
                    name: 'To Do';
                    statusCategory: 'TODO';
                    statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                  },
                  {
                    description: '';
                    name: 'In Progress';
                    statusCategory: 'IN_PROGRESS';
                    statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                  },
                  {
                    description: '';
                    name: 'Done';
                    statusCategory: 'DONE';
                    statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                  },
                ];
                workflows: [
                  {
                    description: '';
                    name: 'Software workflow 1';
                    startPointLayout: {
                      x: -100.00030899047852;
                      y: -153.00020599365234;
                    };
                    statuses: [
                      {
                        layout: {
                          x: 114.99993896484375;
                          y: -16;
                        };
                        properties: {};
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      },
                      {
                        layout: {
                          x: 317.0000915527344;
                          y: -16;
                        };
                        properties: {};
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                      },
                      {
                        layout: {
                          x: 508.000244140625;
                          y: -16;
                        };
                        properties: {};
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                      },
                    ];
                    transitions: [
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '1';
                        name: 'Create';
                        properties: {};
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                        };
                        triggers: [];
                        type: 'INITIAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '11';
                        name: 'To Do';
                        properties: {};
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '21';
                        name: 'In Progress';
                        properties: {};
                        to: {
                          statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '31';
                        name: 'Done';
                        properties: {};
                        to: {
                          statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                    ];
                  },
                ];
              };
              validationOptions: {
                levels: ['ERROR', 'WARNING'];
              };
            };
            schema: {
              $ref: '#/components/schemas/WorkflowCreateValidateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errors":[{"code":"NON_UNIQUE_STATUS_NAME","elementReference":{"statusReference":"1f0443ff-47e4-4306-9c26-0af696059a43"},"level":"ERROR","message":"You must use a unique status name.","type":"STATUS"}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowValidationErrorList';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Validate create workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows/update': {
    post: {
      deprecated: false;
      description: 'Update workflows and related statuses.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows';
      operationId: 'updateWorkflows';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow is associated with.\n *  `statuses.usages` Returns the project and issue types that each status is associated with.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              statuses: [
                {
                  description: '';
                  name: 'To Do';
                  statusCategory: 'TODO';
                  statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                },
                {
                  description: '';
                  name: 'In Progress';
                  statusCategory: 'IN_PROGRESS';
                  statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                },
                {
                  description: '';
                  name: 'Done';
                  statusCategory: 'DONE';
                  statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                },
              ];
              workflows: [
                {
                  defaultStatusMappings: [
                    {
                      newStatusReference: '10011';
                      oldStatusReference: '10010';
                    },
                  ];
                  description: '';
                  id: '10001';
                  startPointLayout: {
                    x: -100.00030899047852;
                    y: -153.00020599365234;
                  };
                  statusMappings: [
                    {
                      issueTypeId: '10002';
                      projectId: '10003';
                      statusMigrations: [
                        {
                          newStatusReference: '10011';
                          oldStatusReference: '10010';
                        },
                      ];
                    },
                  ];
                  statuses: [
                    {
                      layout: {
                        x: 114.99993896484375;
                        y: -16;
                      };
                      properties: {};
                      statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                    },
                    {
                      layout: {
                        x: 317.0000915527344;
                        y: -16;
                      };
                      properties: {};
                      statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                    },
                    {
                      layout: {
                        x: 508.000244140625;
                        y: -16;
                      };
                      properties: {};
                      statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                    },
                  ];
                  transitions: [
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '1';
                      name: 'Create';
                      properties: {};
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      };
                      triggers: [];
                      type: 'INITIAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '11';
                      name: 'To Do';
                      properties: {};
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '21';
                      name: 'In Progress';
                      properties: {};
                      to: {
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                    {
                      actions: [];
                      description: '';
                      from: [];
                      id: '31';
                      name: 'Done';
                      properties: {};
                      to: {
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                      };
                      triggers: [];
                      type: 'GLOBAL';
                      validators: [];
                    },
                  ];
                  version: {
                    id: '6f6c988b-2590-4358-90c2-5f7960265592';
                    versionNumber: 1;
                  };
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowUpdateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"taskId":"10001","workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Software workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","from":[],"id":"31","name":"Done","properties":{},"to":{"statusReference":"10003"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"1","name":"Create","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"INITIAL","validators":[]},{"actions":[],"description":"","from":[],"id":"21","name":"In Progress","properties":{},"to":{"statusReference":"10002"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"11","name":"To Do","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"GLOBAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowUpdateResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk update workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflows/update/validation': {
    post: {
      deprecated: false;
      description: 'Validate the payload for bulk update workflows.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows';
      operationId: 'validateUpdateWorkflows';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              payload: {
                statuses: [
                  {
                    description: '';
                    name: 'To Do';
                    statusCategory: 'TODO';
                    statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                  },
                  {
                    description: '';
                    name: 'In Progress';
                    statusCategory: 'IN_PROGRESS';
                    statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                  },
                  {
                    description: '';
                    name: 'Done';
                    statusCategory: 'DONE';
                    statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                  },
                ];
                workflows: [
                  {
                    defaultStatusMappings: [
                      {
                        newStatusReference: '10011';
                        oldStatusReference: '10010';
                      },
                    ];
                    description: '';
                    id: '10001';
                    startPointLayout: {
                      x: -100.00030899047852;
                      y: -153.00020599365234;
                    };
                    statusMappings: [
                      {
                        issueTypeId: '10002';
                        projectId: '10003';
                        statusMigrations: [
                          {
                            newStatusReference: '10011';
                            oldStatusReference: '10010';
                          },
                        ];
                      },
                    ];
                    statuses: [
                      {
                        layout: {
                          x: 114.99993896484375;
                          y: -16;
                        };
                        properties: {};
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                      },
                      {
                        layout: {
                          x: 317.0000915527344;
                          y: -16;
                        };
                        properties: {};
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                      },
                      {
                        layout: {
                          x: 508.000244140625;
                          y: -16;
                        };
                        properties: {};
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                      },
                    ];
                    transitions: [
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '1';
                        name: 'Create';
                        properties: {};
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                        };
                        triggers: [];
                        type: 'INITIAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '11';
                        name: 'To Do';
                        properties: {};
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '21';
                        name: 'In Progress';
                        properties: {};
                        to: {
                          statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                      {
                        actions: [];
                        description: '';
                        from: [];
                        id: '31';
                        name: 'Done';
                        properties: {};
                        to: {
                          statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849';
                        };
                        triggers: [];
                        type: 'GLOBAL';
                        validators: [];
                      },
                    ];
                    version: {
                      id: '6f6c988b-2590-4358-90c2-5f7960265592';
                      versionNumber: 1;
                    };
                  },
                ];
              };
              validationOptions: {
                levels: ['ERROR', 'WARNING'];
              };
            };
            schema: {
              $ref: '#/components/schemas/WorkflowUpdateValidateRequestBean';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errors":[{"code":"NON_UNIQUE_STATUS_NAME","elementReference":{"statusReference":"1f0443ff-47e4-4306-9c26-0af696059a43"},"level":"ERROR","message":"You must use a unique status name.","type":"STATUS"}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowValidationErrorList';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Validate update workflows';
      tags: ['Workflows'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflowscheme': {
    get: {
      deprecated: false;
      description: 'Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getAllWorkflowSchemes';
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).';
          in: 'query';
          name: 'startAt';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The maximum number of items to return per page.';
          in: 'query';
          name: 'maxResults';
          schema: {
            default: 50;
            format: 'int32';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"},{"defaultWorkflow":"jira","description":"The description of the another example workflow scheme.","id":101011,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Another example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101011"}]}';
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get all workflow schemes';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Creates a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createWorkflowScheme';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira';
              description: 'The description of the example workflow scheme.';
              issueTypeMappings: {
                '10000': 'scrum workflow';
                '10001': 'builds workflow';
              };
              name: 'Example workflow scheme';
            };
            schema: {
              $ref: '#/components/schemas/WorkflowScheme';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/project': {
    get: {
      deprecated: false;
      description: 'Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.\n\nIf the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowSchemeProjectAssociations';
      parameters: [
        {
          description: 'The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.';
          in: 'query';
          name: 'projectId';
          required: true;
          schema: {
            items: {
              example: 10010;
              format: 'int64';
              type: 'integer';
            };
            maxItems: 100;
            minItems: 1;
            type: 'array';
            uniqueItems: true;
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"values":[{"projectIds":["10010","10020"],"workflowScheme":{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}}]}';
              schema: {
                $ref: '#/components/schemas/ContainerOfWorkflowSchemeAssociations';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"projectId":"The ID of a project has to be provided."}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access workflow scheme associations."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow scheme project associations';
      tags: ['Workflow scheme project associations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.\n\nWorkflow schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'assignSchemeToProject';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectId: '10001';
              workflowSchemeId: '10032';
            };
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeProjectAssociation';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only classic projects can have workflow schemes assigned."],"errors":{}}';
            };
          };
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access workflow scheme associations."],"errors":{}}';
            };
          };
          description: 'Returned if the user does not have the required permissions.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The workflow scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if the workflow scheme or the project are not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Assign workflow scheme to project';
      tags: ['Workflow scheme project associations'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/read': {
    post: {
      deprecated: false;
      description: 'Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes\n *  *Administer projects* project permissions to access project-scoped workflow schemes';
      operationId: 'readWorkflowSchemes';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.';
          in: 'query';
          name: 'expand';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10047', '10048'];
              workflowSchemeIds: ['3e59db0f-ed6c-47ce-8d50-80c0c4572677'];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeReadRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"defaultWorkflow":{"description":"This is the default workflow for Software Development projects.","id":"3e59db0f-ed6c-47ce-8d50-80c0c4572677","name":"Default Software Development Workflow","usage":[{"issueTypeIds":[],"projectId":"10047"}],"version":{"id":"657812fc-bc72-400f-aae0-df8d88db3d9g","versionNumber":1}},"description":"This is the workflow scheme for the Software Development project type.","id":"3g78dg2a-ns2n-56ab-9812-42h5j1464567","name":"Software Developer Workflow Scheme","projectIdsUsingScheme":["10047"],"scope":{"project":{"id":"10047"},"type":"GLOBAL"},"taskId":"3f83dg2a-ns2n-56ab-9812-42h5j1461629","version":{"id":"527213fc-bc72-400f-aae0-df8d88db2c8a","versionNumber":1},"workflowsForIssueTypes":[{"issueTypeIds":["10013"],"workflow":{"description":"This is the workflow for the Software Development bug issue type.","id":"5e79ae0f-ed6c-47ce-8d50-80c0c4572745","name":"Software Development Bug Workflow","usage":[{"issueTypeIds":["10013"],"projectId":"10047"}],"version":{"id":"897812dc-bc72-400f-aae0-df8d88fe3d8f","versionNumber":1}}}]}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/WorkflowSchemeReadResponse';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Bulk get workflow schemes';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflowscheme/update': {
    post: {
      deprecated: false;
      description: "Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.\n *  *Administer projects* project permission to update project-scoped workflow schemes.";
      operationId: 'updateSchemes';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677';
              description: 'description';
              id: '10000';
              name: 'name';
              statusMappingsByIssueTypeOverride: [
                {
                  issueTypeId: '10001';
                  statusMappings: [
                    {
                      newStatusId: '2';
                      oldStatusId: '1';
                    },
                    {
                      newStatusId: '4';
                      oldStatusId: '3';
                    },
                  ];
                },
                {
                  issueTypeId: '10002';
                  statusMappings: [
                    {
                      newStatusId: '4';
                      oldStatusId: '1';
                    },
                    {
                      newStatusId: '2';
                      oldStatusId: '3';
                    },
                  ];
                },
              ];
              statusMappingsByWorkflows: [
                {
                  newWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677';
                  oldWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677';
                  statusMappings: [
                    {
                      newStatusId: '2';
                      oldStatusId: '1';
                    },
                    {
                      newStatusId: '4';
                      oldStatusId: '3';
                    },
                  ];
                },
              ];
              version: {
                id: '527213fc-bc72-400f-aae0-df8d88db2c8a';
                versionNumber: 1;
              };
              workflowsForIssueTypes: [
                {
                  issueTypeIds: ['10000', '10003'];
                  workflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677';
                },
                {
                  issueTypeIds: ['10001`', '10002'];
                  workflowId: '3f83dg2a-ns2n-56ab-9812-42h5j1461629';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeUpdateRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful and there is no asynchronous task.';
        };
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful and there is an asynchronous task for the migrations.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflowscheme/update/mappings': {
    post: {
      deprecated: false;
      description: 'Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.\n *  *Administer projects* project permission to update project-scoped workflow schemes.';
      operationId: 'updateWorkflowSchemeMappings';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflowId: '10010';
              id: '10001';
              workflowsForIssueTypes: [
                {
                  issueTypeIds: ['10010', '10011'];
                  workflowId: '10001';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeUpdateRequiredMappingsRequest';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"statusMappingsByIssueTypes":[{"issueTypeId":"10000","statusIds":["10000","10001"]}],"statusMappingsByWorkflows":[{"sourceWorkflowId":"10000","statusIds":["10000","10001"],"targetWorkflowId":"10001"}],"statuses":[{"category":"TODO","id":"10000","name":"To Do"}],"statusesPerWorkflow":[{"initialStatusId":"10000","statuses":["10000","10001"],"workflowId":"10000"}]}';
              schema: {
                $ref: '#/components/schemas/WorkflowSchemeUpdateRequiredMappingsResponse';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '401': {
          description: "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get required status mappings for workflow scheme update';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/api/3/workflowscheme/{id}': {
    delete: {
      deprecated: false;
      description: 'Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteWorkflowScheme';
      parameters: [
        {
          description: 'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the scheme is active.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowScheme';
      parameters: [
        {
          description: 'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.";
          in: 'query';
          name: 'returnDraftIfExists';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateWorkflowScheme';
      parameters: [
        {
          description: 'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira';
              description: 'The description of the example workflow scheme.';
              issueTypeMappings: {
                '10000': 'scrum workflow';
              };
              name: 'Example workflow scheme';
              updateDraftIfNeeded: false;
            };
            schema: {
              $ref: '#/components/schemas/WorkflowScheme';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Classic update workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/createdraft': {
    post: {
      deprecated: false;
      description: 'Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'createWorkflowSchemeDraftFromParent';
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft is created from.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Create draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/default': {
    delete: {
      deprecated: false;
      description: "Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.';
          in: 'query';
          name: 'updateDraftIfNeeded';
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete default workflow';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: "Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.";
          in: 'query';
          name: 'returnDraftIfExists';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/DefaultWorkflow';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get default workflow';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the default workflow for a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateDraftIfNeeded: false;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/DefaultWorkflow';
            };
          };
        };
        description: 'The new default workflow.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update default workflow';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/draft': {
    delete: {
      deprecated: false;
      description: 'Deletes a draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteWorkflowSchemeDraft';
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission..';
        };
        '404': {
          description: 'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  \nNote that:\n\n *  Only active workflow schemes can have draft workflow schemes.\n *  An active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowSchemeDraft';
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateWorkflowSchemeDraft';
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira';
              description: 'The description of the example workflow scheme.';
              issueTypeMappings: {
                '10000': 'scrum workflow';
              };
              name: 'Example workflow scheme';
              updateDraftIfNeeded: false;
            };
            schema: {
              $ref: '#/components/schemas/WorkflowScheme';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/draft/default': {
    delete: {
      deprecated: false;
      description: "Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteDraftDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete draft default workflow';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getDraftDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/DefaultWorkflow';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission..';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get draft default workflow';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the default workflow for a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'updateDraftDefaultWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateDraftIfNeeded: false;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/DefaultWorkflow';
            };
          };
        };
        description: 'The object for the new default workflow.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Update draft default workflow';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}': {
    delete: {
      deprecated: false;
      description: "Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteWorkflowSchemeDraftIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete workflow for issue type in draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getWorkflowSchemeDraftIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueType":"10000","workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/IssueTypeWorkflowMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow for issue type in draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the workflow for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'setWorkflowSchemeDraftIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueType: '10000';
              updateDraftIfNeeded: false;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeWorkflowMapping';
            };
          };
        };
        description: 'The issue type-project mapping.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set workflow for issue type in draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/draft/publish': {
    post: {
      deprecated: false;
      description: 'Publishes a draft workflow scheme.\n\nWhere the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'publishDraftWorkflowScheme';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Whether the request only performs a validation.';
          in: 'query';
          name: 'validateOnly';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              statusMappings: [
                {
                  issueTypeId: '10001';
                  newStatusId: '1';
                  statusId: '3';
                },
                {
                  issueTypeId: '10001';
                  newStatusId: '2';
                  statusId: '2';
                },
                {
                  issueTypeId: '10002';
                  newStatusId: '10003';
                  statusId: '10005';
                },
                {
                  issueTypeId: '10003';
                  newStatusId: '1';
                  statusId: '4';
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/PublishDraftWorkflowScheme';
            };
          };
        };
        description: 'Details of the status mappings.';
        required: true;
      };
      responses: {
        '204': {
          description: 'Returned if the request is only for validation and is successful.';
        };
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue type with ID \'2\',\'4\' is missing the mappings required for statuses with IDs 10004."],"errors":{}}';
            };
          };
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Draft workflow scheme was not found."],"errors":{}}';
            };
          };
          description: 'Returned if any of these are true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  A new status in the draft workflow scheme is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Publish draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/draft/workflow': {
    delete: {
      deprecated: false;
      description: "Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'deleteDraftWorkflowMapping';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of the workflow.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  The workflow is not found.\n *  The workflow is not specified.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue types for workflow in draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the workflow-issue type mappings for a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'getDraftWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.';
          in: 'query';
          name: 'workflowName';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultMapping":false,"issueTypes":["10000","10001"],"workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/IssueTypesWorkflowMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if either the workflow scheme or workflow (if specified) is not found. session.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue types for workflows in draft workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).";
      operationId: 'updateDraftWorkflowMapping';
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of the workflow.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypes: ['10000'];
              updateDraftIfNeeded: true;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypesWorkflowMapping';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  The workflow is not found.\n *  The workflow is not specified.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set issue types for workflow in workflow scheme';
      tags: ['Workflow scheme drafts'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}': {
    delete: {
      deprecated: false;
      description: 'Deletes the issue type-workflow mapping for an issue type in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteWorkflowSchemeIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.';
          in: 'query';
          name: 'updateDraftIfNeeded';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete workflow for issue type in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the issue type-workflow mapping for an issue type in a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflowSchemeIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.";
          in: 'query';
          name: 'returnDraftIfExists';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueType":"10000","workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/IssueTypeWorkflowMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get workflow for issue type in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the workflow for an issue type in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'setWorkflowSchemeIssueType';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The ID of the issue type.';
          in: 'path';
          name: 'issueType';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueType: '10000';
              updateDraftIfNeeded: false;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypeWorkflowMapping';
            };
          };
        };
        description: 'The issue type-project mapping.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set workflow for issue type in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/workflowscheme/{id}/workflow': {
    delete: {
      deprecated: false;
      description: 'Deletes the workflow-issue type mapping for a workflow in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'deleteWorkflowMapping';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of the workflow.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.';
          in: 'query';
          name: 'updateDraftIfNeeded';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow is not found.\n *  The workflow is not specified.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Delete issue types for workflow in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['delete:workflow-scheme:jira'];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns the workflow-issue type mappings for a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'getWorkflow';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.';
          in: 'query';
          name: 'workflowName';
          schema: {
            type: 'string';
          };
        },
        {
          description: "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.";
          in: 'query';
          name: 'returnDraftIfExists';
          schema: {
            default: false;
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultMapping":false,"issueTypes":["10000","10001"],"workflow":"jira"}';
              schema: {
                $ref: '#/components/schemas/IssueTypesWorkflowMapping';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if either the workflow scheme or workflow is not found.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Get issue types for workflows in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: 'Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).';
      operationId: 'updateWorkflowMapping';
      parameters: [
        {
          description: 'The ID of the workflow scheme.';
          in: 'path';
          name: 'id';
          required: true;
          schema: {
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'The name of the workflow.';
          in: 'query';
          name: 'workflowName';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypes: ['10000'];
              updateDraftIfNeeded: true;
              workflow: 'jira';
            };
            schema: {
              $ref: '#/components/schemas/IssueTypesWorkflowMapping';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}';
              schema: {
                $ref: '#/components/schemas/WorkflowScheme';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          description: 'Returned if the user does not have the necessary permission.';
        };
        '404': {
          description: 'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow is not found.\n *  The workflow is not specified.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['manage:jira-configuration'];
        },
      ];
      summary: 'Set issue types for workflow in workflow scheme';
      tags: ['Workflow schemes'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['manage:jira-configuration'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/worklog/deleted': {
    get: {
      deprecated: false;
      description: 'Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.\n\nThis resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.\n\nThis resource does not return worklogs deleted during the minute preceding the request.\n\n**[Permissions](#permissions) required:** Permission to access Jira.';
      operationId: 'getIdsOfWorklogsDeletedSince';
      parameters: [
        {
          description: 'The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.';
          in: 'query';
          name: 'since';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"lastPage":true,"nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013693136","self":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013671562","since":1438013671562,"until":1438013693136,"values":[{"properties":[],"updatedTime":1438013671562,"worklogId":103},{"properties":[],"updatedTime":1438013672165,"worklogId":104},{"properties":[],"updatedTime":1438013693136,"worklogId":105}]}';
              schema: {
                $ref: '#/components/schemas/ChangedWorklogs';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get IDs of deleted worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-worklog:jira', 'read:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/worklog/list': {
    post: {
      deprecated: false;
      description: 'Returns worklog details for a list of worklog IDs.\n\nThe returned list of worklogs is limited to 1000 items.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:\n\n *  the worklog is set as *Viewable by All Users*.\n *  the user is a member of a project role or group with permission to view the worklog.';
      operationId: 'getWorklogsForIds';
      parameters: [
        {
          description: 'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10];
            };
            schema: {
              $ref: '#/components/schemas/WorklogIdsRequestBean';
            };
          };
        };
        description: 'A JSON object containing a list of worklog IDs.';
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}]';
              schema: {
                items: {
                  $ref: '#/components/schemas/Worklog';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request contains more than 1000 worklog IDs or is empty.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/api/3/worklog/updated': {
    get: {
      deprecated: false;
      description: 'Returns a list of IDs and update timestamps for worklogs updated after a date and time.\n\nThis resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.\n\nThis resource does not return worklogs updated during the minute preceding the request.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:\n\n *  the worklog is set as *Viewable by All Users*.\n *  the user is a member of a project role or group with permission to view the worklog.';
      operationId: 'getIdsOfWorklogsModifiedSince';
      parameters: [
        {
          description: 'The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.';
          in: 'query';
          name: 'since';
          schema: {
            default: 0;
            format: 'int64';
            type: 'integer';
          };
        },
        {
          description: 'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.';
          in: 'query';
          name: 'expand';
          schema: {
            default: '';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"lastPage":true,"nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013693136","self":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013671562","since":1438013671562,"until":1438013693136,"values":[{"properties":[],"updatedTime":1438013671562,"worklogId":103},{"properties":[],"updatedTime":1438013672165,"worklogId":104},{"properties":[],"updatedTime":1438013693136,"worklogId":105}]}';
              schema: {
                $ref: '#/components/schemas/ChangedWorklogs';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: ['read:jira-work'];
        },
      ];
      summary: 'Get IDs of updated worklogs';
      tags: ['Issue worklogs'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: ['read:jira-work'];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['read:issue-worklog:jira', 'read:issue-worklog.property:jira'];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/addons/{addonKey}/properties': {
    get: {
      deprecated: false;
      description: 'Gets all the properties of an app.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).';
      operationId: 'AddonPropertiesResource.getAddonProperties_get';
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.';
          in: 'path';
          name: 'addonKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                keys: [
                  {
                    self: 'https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey';
                    key: 'propertyKey';
                  },
                ];
              };
              schema: {
                $ref: '#/components/schemas/PropertyKeys';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.';
                statusCode: 401;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Get app properties';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: "Deletes an app's property.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).";
      operationId: 'AddonPropertiesResource.deleteAddonProperty_delete';
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.';
          in: 'path';
          name: 'addonKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.';
                statusCode: 400;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the property key is longer than 127 characters.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.';
                statusCode: 401;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.';
                statusCode: 404;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: "Returned if the property is not found or doesn't belong to the app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Delete app property';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
    get: {
      deprecated: false;
      description: "Returns the key and value of an app's property.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).";
      operationId: 'AddonPropertiesResource.getAddonProperty_get';
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.';
          in: 'path';
          name: 'addonKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                self: 'https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey';
                key: 'propertyKey';
                value: 'propertyValue';
              };
              schema: {
                $ref: '#/components/schemas/EntityProperty';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.';
                statusCode: 400;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the property key is longer than 127 characters.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.';
                statusCode: 401;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.';
                statusCode: 404;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: "Returned if the property is not found or doesn't belong to the app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Get app property';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
    put: {
      deprecated: false;
      description: "Sets the value of an app's property. Use this resource to store custom data for your app.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).";
      operationId: 'AddonPropertiesResource.putAddonProperty_put';
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.';
          in: 'path';
          name: 'addonKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                message: 'Property updated.';
                statusCode: 200;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              example: {
                message: 'Property created.';
                statusCode: 201;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned is the property is created.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.';
                statusCode: 400;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if:\n  * the property key is longer than 127 characters.\n  * the value is not valid JSON.\n  * the value is longer than 32768 characters.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.';
                statusCode: 401;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Set app property';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Beta';
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/app/module/dynamic': {
    delete: {
      deprecated: false;
      description: 'Remove all or a list of modules registered by the calling app.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.';
      operationId: 'DynamicModulesResource.removeModules_delete';
      parameters: [
        {
          description: 'The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.\nFor example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.\nNonexistent keys are ignored.';
          in: 'query';
          name: 'moduleKey';
          required: false;
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.';
              };
              schema: {
                $ref: '#/components/schemas/ErrorMessage';
              };
            };
          };
          description: 'Returned if the call is not from a Connect app.';
        };
      };
      summary: 'Remove modules';
      tags: ['Dynamic modules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    get: {
      deprecated: false;
      description: 'Returns all modules registered dynamically by the calling app.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.';
      operationId: 'DynamicModulesResource.getModules_get';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ConnectModules';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.';
              };
              schema: {
                $ref: '#/components/schemas/ErrorMessage';
              };
            };
          };
          description: 'Returned if the call is not from a Connect app.';
        };
      };
      summary: 'Get modules';
      tags: ['Dynamic modules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
    post: {
      deprecated: false;
      description: 'Registers a list of modules.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.';
      operationId: 'DynamicModulesResource.registerModules_post';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ConnectModules';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'Installation failed. The app com.example.app.key has duplicate module keys: [module-key]. Please contact the app vendor.';
              };
              schema: {
                $ref: '#/components/schemas/ErrorMessage';
              };
            };
          };
          description: 'Returned if:\n* any of the provided modules is invalid. For example, required properties are missing.\n* any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.\n\nDetails of the issues encountered are included in the error message.';
        };
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.';
              };
              schema: {
                $ref: '#/components/schemas/ErrorMessage';
              };
            };
          };
          description: 'Returned if the call is not from a Connect app.';
        };
      };
      summary: 'Register modules';
      tags: ['Dynamic modules'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/migration/field': {
    put: {
      deprecated: false;
      description: 'Updates the value of a custom field added by Connect apps on one or more issues.\nThe values of up to 200 custom fields can be updated.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request';
      operationId: 'AppIssueFieldValueUpdateResource.updateIssueFields_put';
      parameters: [
        {
          description: 'The ID of the transfer.';
          in: 'header';
          name: 'Atlassian-Transfer-Id';
          required: true;
          schema: {
            format: 'uuid';
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateValueList: [
                {
                  _type: 'StringIssueField';
                  issueID: 10001;
                  fieldID: 10076;
                  string: 'new string value';
                },
                {
                  _type: 'TextIssueField';
                  issueID: 10002;
                  fieldID: 10077;
                  text: 'new text value';
                },
                {
                  _type: 'SingleSelectIssueField';
                  issueID: 10003;
                  fieldID: 10078;
                  optionID: '1';
                },
                {
                  _type: 'MultiSelectIssueField';
                  issueID: 10004;
                  fieldID: 10079;
                  optionID: '2';
                },
                {
                  _type: 'RichTextIssueField';
                  issueID: 10005;
                  fieldID: 10080;
                  richText: 'new rich text value';
                },
                {
                  _type: 'NumberIssueField';
                  issueID: 10006;
                  fieldID: 10082;
                  number: 54;
                },
              ];
            };
            schema: {
              $ref: '#/components/schemas/ConnectCustomFieldValues';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {};
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '403': {
          description: 'Returned if:\n* the transfer ID is not found.\n* the authorisation credentials are incorrect or missing.';
        };
      };
      summary: 'Bulk update custom field value';
      tags: ['App migration'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/migration/properties/{entityType}': {
    put: {
      description: 'Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.';
      operationId: 'MigrationResource.updateEntityPropertiesValue_put';
      parameters: [
        {
          description: 'The app migration transfer ID.';
          in: 'header';
          name: 'Atlassian-Transfer-Id';
          required: true;
          schema: {
            format: 'uuid';
            type: 'string';
          };
        },
        {
          description: 'The type indicating the object that contains the entity properties.';
          in: 'path';
          name: 'entityType';
          required: true;
          schema: {
            enum: [
              'IssueProperty',
              'CommentProperty',
              'DashboardItemProperty',
              'IssueTypeProperty',
              'ProjectProperty',
              'UserProperty',
              'WorklogProperty',
              'BoardProperty',
              'SprintProperty',
            ];
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              items: {
                $ref: '#/components/schemas/EntityPropertyDetails';
              };
              maxItems: 50;
              minItems: 1;
              type: 'array';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '403': {
          description: 'Returned if the authorisation credentials are incorrect or missing.';
        };
      };
      summary: 'Bulk update entity properties';
      tags: ['App migration'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/migration/workflow/rule/search': {
    post: {
      description: 'Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.';
      operationId: 'MigrationResource.workflowRuleSearch_post';
      parameters: [
        {
          description: 'The app migration transfer ID.';
          in: 'header';
          name: 'Atlassian-Transfer-Id';
          required: true;
          schema: {
            format: 'uuid';
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/WorkflowRulesSearch';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                workflowEntityId: 'a498d711-685d-428d-8c3e-bc03bb450ea7';
                invalidRules: ['55d44f1d-c859-42e5-9c27-2c5ec3f340b1'];
                validRules: [
                  {
                    workflowId: {
                      name: 'Workflow name';
                      draft: true;
                    };
                    postFunctions: [
                      {
                        id: '123';
                        key: 'WorkflowKey';
                        configuration: {
                          value: 'WorkflowValidator';
                        };
                        transition: {
                          name: 'transition';
                          id: 123;
                        };
                      },
                    ];
                    conditions: [
                      {
                        id: '123';
                        key: 'WorkflowKey';
                        configuration: {
                          value: 'WorkflowValidator';
                        };
                        transition: {
                          name: 'transition';
                          id: 123;
                        };
                      },
                    ];
                    validators: [
                      {
                        id: '123';
                        key: 'WorkflowKey';
                        configuration: {
                          value: 'WorkflowValidator';
                        };
                        transition: {
                          name: 'transition';
                          id: 123;
                        };
                      },
                    ];
                  },
                ];
              };
              schema: {
                $ref: '#/components/schemas/WorkflowRulesSearchDetails';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is not valid.';
        };
        '403': {
          description: 'Returned if the authorisation credentials are incorrect or missing.';
        };
      };
      summary: 'Get workflow transition rule configurations';
      tags: ['App migration'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
    };
  };
  '/rest/atlassian-connect/1/service-registry': {
    get: {
      deprecated: false;
      description: 'Retrieve the attributes of given service registries.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting';
      operationId: 'ServiceRegistryResource.services_get';
      parameters: [
        {
          description: 'The ID of the services (the strings starting with "b:" need to be decoded in Base64).';
          example: '["ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000000", "ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000001"]';
          explode: true;
          in: 'query';
          name: 'serviceIds';
          required: true;
          schema: {
            items: {
              type: 'string';
            };
            maxItems: 20;
            minItems: 1;
            type: 'array';
          };
          style: 'form';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ServiceRegistry';
                };
                type: 'array';
              };
            };
          };
          description: 'Returned if the request is successful.';
        };
        '400': {
          description: 'Returned if the request is invalid.';
        };
        '401': {
          description: 'The request needs to be authenticated.';
        };
        '403': {
          description: "The request isn't authorized.";
        };
        '500': {
          description: 'The endpoint failed internally.';
        };
        '501': {
          description: "The endpoint isn't ready for receiving requests.";
        };
        '504': {
          description: 'The upstream service is busy.';
        };
      };
      summary: 'Retrieve the attributes of service registries';
      tags: ['Service Registry'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-experimental': true;
    };
  };
  '/rest/forge/1/app/properties/{propertyKey}': {
    delete: {
      deprecated: false;
      description: "Deletes a Forge app's property.\n\n**[Permissions](#permissions) required:** Only Forge apps can make this request.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'deleteForgeAppProperty';
      parameters: [
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Returned if the request is successful.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.';
                statusCode: 400;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the property key is longer than 127 characters.';
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: {
                errorMessages: ['Access to this resource must be authenticated as an app.'];
              };
            };
          };
          description: "Returned if the request isn't made directly by an app or if it's an impersonated request.";
        };
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.';
                statusCode: 404;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: "Returned if the property isn't found or doesn't belong to the app.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Delete app property (Forge)';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
    put: {
      deprecated: false;
      description: "Sets the value of a Forge app's property.\nThese values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)\nthrough the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).\n\nFor other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** Only Forge apps can make this request.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.";
      operationId: 'putForgeAppProperty';
      parameters: [
        {
          description: 'The key of the property.';
          in: 'path';
          name: 'propertyKey';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            schema: {};
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                message: 'Property updated.';
                statusCode: 200;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned if the property is updated.';
        };
        '201': {
          content: {
            'application/json': {
              example: {
                message: 'Property created.';
                statusCode: 201;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: 'Returned is the property is created.';
        };
        '400': {
          content: {
            'application/json': {
              example: {
                message: "The property key can't be longer than 127 characters.";
                statusCode: 400;
              };
              schema: {
                $ref: '#/components/schemas/OperationMessage';
              };
            };
          };
          description: "Returned if:\n  * the property key is longer than 127 characters.\n  * the value isn't valid JSON.\n  * the value is longer than 32768 characters.";
        };
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.';
        };
        '403': {
          content: {
            'application/json': {
              example: {
                errorMessages: ['Access to this resource must be authenticated as an app.'];
              };
            };
          };
          description: "Returned if the request isn't made directly by an app or if it's an impersonated request.";
        };
      };
      security: [
        {
          basicAuth: [];
        },
        {
          OAuth2: [];
        },
      ];
      summary: 'Set app property (Forge)';
      tags: ['App properties'];
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true;
        },
      ];
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2';
          scopes: [];
          state: 'Current';
        },
        {
          scheme: 'OAuth2';
          scopes: ['write:app-data:jira'];
          state: 'Beta';
        },
      ];
      'x-experimental': true;
    };
  };
};
export const paths = {
  '/rest/api/3/announcementBanner': {
    get: {
      deprecated: false,
      description:
        'Returns the current announcement banner configuration.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getBanner',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"hashId":"9HN2FJK9DM8BHRWERVW3RRTGDJ4G4D5C","isDismissible":false,"isEnabled":true,"message":"This is a public, enabled, non-dismissible banner, set using the API","visibility":"public"}',
              schema: {
                $ref: '#/components/schemas/AnnouncementBannerConfiguration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '"Only admins can read banner configuration."',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get announcement banner configuration',
      tags: ['Announcement banner'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates the announcement banner configuration.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setBanner',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              isDismissible: false,
              isEnabled: true,
              message: 'This is a public, enabled, non-dismissible banner, set using the API',
              visibility: 'public',
            },
            schema: {
              $ref: '#/components/schemas/AnnouncementBannerConfigurationUpdate',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '"Banner message cannot be null."',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if an invalid parameter is passed.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '"Only admins can update banner configuration."',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update announcement banner configuration',
      tags: ['Announcement banner'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/app/field/value': {
    post: {
      deprecated: false,
      description:
        "Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.\n\nApps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.\n\n**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'updateMultipleCustomFieldValues',
      parameters: [
        {
          description: 'Whether to generate a changelog for this update.',
          in: 'query',
          name: 'generateChangelog',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              updates: [
                {
                  customField: 'customfield_10010',
                  issueIds: [10010, 10011],
                  value: 'new value',
                },
                {
                  customField: 'customfield_10011',
                  issueIds: [10010],
                  value: 1000,
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/MultipleCustomFieldValuesUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided all the fields.',
        },
        '404': {
          description: 'Returned if any field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Update custom fields',
      tags: ['Issue custom field values (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/app/field/{fieldIdOrKey}/context/configuration': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).\n\nThe result can be filtered by one of these criteria:\n\n *  `id`.\n *  `fieldContextId`.\n *  `issueId`.\n *  `projectKeyOrId` and `issueTypeId`.\n\nOtherwise, all configurations are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.',
      operationId: 'getCustomFieldConfiguration',
      parameters: [
        {
          description: 'The ID or key of the custom field, for example `customfield_10000`.',
          in: 'path',
          name: 'fieldIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.",
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            "The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.",
          in: 'query',
          name: 'fieldContextId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            "The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.",
          in: 'query',
          name: 'issueId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.",
          in: 'query',
          name: 'projectKeyOrId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.",
          in: 'query',
          name: 'issueTypeId',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":1000,"startAt":0,"total":2,"values":[{"id":"10000","fieldContextId":"10010"},{"id":"10001","fieldContextId":"10011","configuration":{"minValue":0,"maxValue":10000},"schema":{"properties":{"amount":{"type":"number"},"currency":{"type":"string"}},"required":["amount","currency"]}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanContextualConfiguration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.',
        },
        '404': {
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get custom field configurations',
      tags: ['Issue custom field configuration (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:custom-field-contextual-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.',
      operationId: 'updateCustomFieldConfiguration',
      parameters: [
        {
          description: 'The ID or key of the custom field, for example `customfield_10000`.',
          in: 'path',
          name: 'fieldIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              configurations: [
                {
                  id: '10000',
                },
                {
                  configuration: {
                    maxValue: 10000,
                    minValue: 0,
                  },
                  id: '10001',
                  schema: {
                    properties: {
                      amount: {
                        type: 'number',
                      },
                      currency: {
                        type: 'string',
                      },
                    },
                    required: ['amount', 'currency'],
                  },
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/CustomFieldConfigurations',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field.',
        },
        '404': {
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update custom field configurations',
      tags: ['Issue custom field configuration (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:custom-field-contextual-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/app/field/{fieldIdOrKey}/value': {
    put: {
      deprecated: false,
      description:
        "Updates the value of a custom field on one or more issues.\n\nApps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.\n\n**[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'updateCustomFieldValue',
      parameters: [
        {
          description: 'The ID or key of the custom field. For example, `customfield_10010`.',
          in: 'path',
          name: 'fieldIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether to generate a changelog for this update.',
          in: 'query',
          name: 'generateChangelog',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              updates: [
                {
                  issueIds: [10010],
                  value: 'new value',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/CustomFieldValueUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the field.',
        },
        '404': {
          description: 'Returned if the field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Update custom field value',
      tags: ['Issue custom field values (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/application-properties': {
    get: {
      deprecated: false,
      description:
        'Returns all application properties or an application property.\n\nIf you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getApplicationProperty',
      parameters: [
        {
          description: 'The key of the application property.',
          in: 'query',
          name: 'key',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The permission level of all items being returned in the list.',
          in: 'query',
          name: 'permissionLevel',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.",
          in: 'query',
          name: 'keyFilter',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"defaultValue":"","desc":"Jira home directory","id":"jira.home","key":"jira.home","name":"jira.home","type":"string","value":"/var/jira/jira-home"},{"defaultValue":"CLONE -","id":"jira.clone.prefix","key":"jira.clone.prefix","name":"The prefix added to the Summary field of cloned issues","type":"string","value":"CLONE -"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationProperty',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the application property is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get application property',
      tags: ['Jira settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:instance-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/application-properties/advanced-settings': {
    get: {
      deprecated: false,
      description:
        'Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAdvancedSettings',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"defaultValue":"","desc":"Jira home directory","id":"jira.home","key":"jira.home","name":"jira.home","type":"string","value":"/var/jira/jira-home"},{"defaultValue":"CLONE -","id":"jira.clone.prefix","key":"jira.clone.prefix","name":"The prefix added to the Summary field of cloned issues","type":"string","value":"CLONE -"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationProperty',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user is not an administrator.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get advanced settings',
      tags: ['Jira settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:instance-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/application-properties/{id}': {
    put: {
      deprecated: false,
      description:
        'Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.\n\n#### Advanced settings ####\n\nThe advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  \n| `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  \n| `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  \n| `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  \n| `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  \n| `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  \n| `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  \n| `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  \n| `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  \n\n\n#### Look and feel ####\n\nThe settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  \n| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  \n| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  \n| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  \n| `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  \n| `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  \n| `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  \n| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  \n| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  \n| `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  \n| `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  \n| `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  \n| `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  \n| `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  \n| `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  \n\n\n#### Other settings ####\n\n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  \n\n\n*Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setApplicationProperty',
      parameters: [
        {
          description: 'The key of the application property to update.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 'jira.home',
              value: '/var/jira/jira-home',
            },
            schema: {
              $ref: '#/components/schemas/SimpleApplicationPropertyBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ApplicationProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            "Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have permission to edit the property.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the property is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set application property',
      tags: ['Jira settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:instance-configuration:jira', 'read:instance-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/applicationrole': {
    get: {
      deprecated: false,
      description:
        'Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllApplicationRoles',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"defaultGroups":["jira-software-users"],"defaultGroupsDetails":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"defined":false,"groupDetails":[{"groupId":"42c8955c-63d7-42c8-9520-63d7aca0625","name":"jira-testers","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=42c8955c-63d7-42c8-9520-63d7aca0625"},{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"groups":["jira-software-users","jira-testers"],"hasUnlimitedSeats":false,"key":"jira-software","name":"Jira Software","numberOfSeats":10,"platform":false,"remainingSeats":5,"selectedByDefault":false,"userCount":5,"userCountDescription":"5 developers"},{"defaultGroups":["jira-core-users"],"defaultGroupsDetails":[{"groupId":"92d01dca0625-42c8-42c8-9520-276f955c","name":"jira-core-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=92d01dca0625-42c8-42c8-9520-276f955c"}],"defined":false,"groupDetails":[{"groupId":"92d01dca0625-42c8-42c8-9520-276f955c","name":"jira-core-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=92d01dca0625-42c8-42c8-9520-276f955c"}],"groups":["jira-core-users"],"hasUnlimitedSeats":false,"key":"jira-core","name":"Jira Core","numberOfSeats":1,"platform":true,"remainingSeats":1,"selectedByDefault":false,"userCount":0,"userCountDescription":"0 users"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ApplicationRole',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user is not an administrator.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get all application roles',
      tags: ['Application roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/applicationrole/{key}': {
    get: {
      deprecated: false,
      description:
        'Returns an application role.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getApplicationRole',
      parameters: [
        {
          description:
            'The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role.',
          in: 'path',
          name: 'key',
          required: true,
          schema: {
            example: 'jira-software',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultGroups":["jira-software-users"],"defaultGroupsDetails":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"defined":false,"groupDetails":[{"groupId":"42c8955c-63d7-42c8-9520-63d7aca0625","name":"jira-testers","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=42c8955c-63d7-42c8-9520-63d7aca0625"},{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-software-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}],"groups":["jira-software-users","jira-testers"],"hasUnlimitedSeats":false,"key":"jira-software","name":"Jira Software","numberOfSeats":10,"platform":false,"remainingSeats":5,"selectedByDefault":false,"userCount":5,"userCountDescription":"5 developers"}',
              schema: {
                $ref: '#/components/schemas/ApplicationRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user is not an administrator.',
        },
        '404': {
          description: 'Returned if the role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get application role',
      tags: ['Application roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/attachment/content/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.\n\nTo return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getAttachmentContent',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.',
          in: 'query',
          name: 'redirect',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {},
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful when `redirect` is set to `false`.',
        },
        '206': {
          description:
            'Returned if the request is successful when a `Range` header is provided and `redirect` is set to `false`.',
        },
        '303': {
          description: 'Returned if the request is successful. See the `Location` header for the download URL.',
        },
        '400': {
          description: 'Returned if the range supplied in the `Range` header is malformed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'The user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.',
        },
        '416': {
          description: 'Returned if the server is unable to satisfy the range of bytes provided.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get attachment content',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:attachment:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/attachment/meta': {
    get: {
      deprecated: false,
      description:
        'Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.\n\nNote that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAttachmentMeta',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"enabled":true,"uploadLimit":1000000}',
              schema: {
                $ref: '#/components/schemas/AttachmentSettings',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get Jira attachment settings',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:instance-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/attachment/thumbnail/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns the thumbnail of an attachment.\n\nTo return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getAttachmentThumbnail',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.',
          in: 'query',
          name: 'redirect',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description: 'Whether a default thumbnail is returned when the requested thumbnail is not found.',
          in: 'query',
          name: 'fallbackToDefault',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description: 'The maximum width to scale the thumbnail to.',
          in: 'query',
          name: 'width',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum height to scale the thumbnail to.',
          in: 'query',
          name: 'height',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {},
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful when `redirect` is set to `false`.',
        },
        '303': {
          description: 'Returned if the request is successful. See the `Location` header for the download URL.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'The user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.\n *  `fallbackToDefault` is `false` and the request thumbnail cannot be downloaded.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get attachment thumbnail',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:attachment:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/attachment/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an attachment from an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the project holding the issue containing the attachment:\n\n *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.\n *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.',
      operationId: 'removeAttachment',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete attachment',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:attachment:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the metadata for an attachment. Note that the attachment itself is not returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getAttachment',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}',
              schema: {
                $ref: '#/components/schemas/AttachmentMetadata',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get attachment metadata',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:attachment:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/attachment/{id}/expand/human': {
    get: {
      deprecated: false,
      description:
        "Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.\n\nUse this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'expandAttachmentForHumans',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"entries":[{"index":0,"label":"MG00N067.JPG","mediaType":"image/jpeg","path":"MG00N067.JPG","size":"119 kB"},{"index":1,"label":"Allegro from Duet in C Major.mp3","mediaType":"audio/mpeg","path":"Allegro from Duet in C Major.mp3","size":"1.36 MB"},{"index":2,"label":"long/path/thanks/to/.../reach/the/leaf.txt","mediaType":"text/plain","path":"long/path/thanks/to/lots/of/subdirectories/inside/making/it/quite/hard/to/reach/the/leaf.txt","size":"0.0 k"}],"id":7237823,"mediaType":"application/zip","name":"images.zip","totalEntryCount":39}',
              schema: {
                $ref: '#/components/schemas/AttachmentArchiveMetadataReadable',
              },
            },
          },
          description:
            'Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'The user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.',
        },
        '409': {
          description: 'Returned if the attachment is an archive, but not a supported archive format.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all metadata for an expanded attachment',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:attachment:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/attachment/{id}/expand/raw': {
    get: {
      deprecated: false,
      description:
        "Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.\n\nUse this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** For the issue containing the attachment:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'expandAttachmentForMachines',
      parameters: [
        {
          description: 'The ID of the attachment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"entries":[{"entryIndex":0,"mediaType":"audio/mpeg","name":"Allegro from Duet in C Major.mp3","size":1430174},{"entryIndex":1,"mediaType":"text/rtf","name":"lrm.rtf","size":331}],"totalEntryCount":24}',
              schema: {
                $ref: '#/components/schemas/AttachmentArchiveImpl',
              },
            },
          },
          description:
            'Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'The user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the attachment is not found.\n *  attachments are disabled in the Jira settings.',
        },
        '409': {
          description: 'Returned if the attachment is an archive, but not a supported archive format.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get contents metadata for an expanded attachment',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:attachment:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/auditing/record': {
    get: {
      deprecated: false,
      description:
        'Returns a list of audit records. The list can be filtered to include items:\n\n *  where each item in `filter` has at least one match in any of these fields:\n    \n     *  `summary`\n     *  `category`\n     *  `eventSource`\n     *  `objectItem.name` If the object is a user, account ID is available to filter.\n     *  `objectItem.parentName`\n     *  `objectItem.typeName`\n     *  `changedValues.changedFrom`\n     *  `changedValues.changedTo`\n     *  `remoteAddress`\n    \n    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.\n *  created on or after a date and time.\n *  created or or before a date and time.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAuditRecords',
      parameters: [
        {
          description: 'The number of records to skip before returning the first result.',
          in: 'query',
          name: 'offset',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of results to return.',
          in: 'query',
          name: 'limit',
          schema: {
            default: 1000,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The strings to match with audit field content, space separated.',
          in: 'query',
          name: 'filter',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.',
          in: 'query',
          name: 'from',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.',
          in: 'query',
          name: 'to',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"limit":1000,"offset":0,"records":[{"associatedItems":[{"id":"jira-software-users","name":"jira-software-users","parentId":"1","parentName":"Jira Internal Directory","typeName":"GROUP"}],"authorAccountId":"5ab8f18d741e9c2c7e9d4538","authorKey":"administrator","category":"user management","changedValues":[{"changedFrom":"user@atlassian.com","changedTo":"newuser@atlassian.com","fieldName":"email"}],"created":"2014-03-19T18:45:42.967+0000","description":"Optional description","eventSource":"Jira Connect Plugin","id":1,"objectItem":{"id":"user","name":"user","parentId":"1","parentName":"Jira Internal Directory","typeName":"USER"},"remoteAddress":"192.168.1.1","summary":"User created"}],"total":1}',
              schema: {
                $ref: '#/components/schemas/AuditRecords',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  the user does not have the required permissions.\n *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get audit records',
      tags: ['Audit records'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:audit-log:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/avatar/{type}/system': {
    get: {
      deprecated: false,
      description:
        'Returns a list of system avatar details by owner type, where the owner types are issue type, project, user or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllSystemAvatars',
      parameters: [
        {
          description: 'The avatar type.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['issuetype', 'project', 'user', 'priority'],
            example: 'project',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"/secure/useravatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"/secure/useravatar?size=small&avatarId=10040&avatarType=project","32x32":"/secure/useravatar?size=medium&avatarId=10040&avatarType=project","48x48":"/secure/useravatar?avatarId=10040&avatarType=project"}}]}',
              schema: {
                $ref: '#/components/schemas/SystemAvatars',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '500': {
          description: 'Returned if an error occurs while retrieving the list of avatars.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Get system avatars by type',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/bulk/issues/fields': {
    get: {
      deprecated: false,
      description:
        'Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  Depending on the field, any field-specific permissions required to edit it.',
      operationId: 'getBulkEditableFields',
      parameters: [
        {
          description: 'The IDs or keys of the issues to get editable fields from.',
          in: 'query',
          name: 'issueIdsOrKeys',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: '(Optional)The text to search for in the editable fields.',
          in: 'query',
          name: 'searchText',
          schema: {
            type: 'string',
          },
        },
        {
          description: '(Optional)The end cursor for use in pagination.',
          in: 'query',
          name: 'endingBefore',
          schema: {
            type: 'string',
          },
        },
        {
          description: '(Optional)The start cursor for use in pagination.',
          in: 'query',
          name: 'startingAfter',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"fields":[{"id":"assignee","isRequired":false,"name":"Assignee","searchUrl":"https://your-domain.atlassian.net/rest/api/3/user/assignable/multiProjectSearch?projectKeys=KAN&query=","type":"assignee"},{"id":"components","isRequired":false,"multiSelectFieldOptions":["ADD","REMOVE","REPLACE","REMOVE_ALL"],"name":"Components","type":"components","unavailableMessage":"{0}NOTE{1}: The project of the selected issue(s) does not have any components."},{"fieldOptions":[{"description":"This problem will block progress.","id":"1","priority":"Highest"},{"description":"Has the potential to affect progress.","id":"2","priority":"Lowest"},{"description":"Trivial problem with little or no impact on progress.","id":"3","priority":"Medium"}],"id":"priority","isRequired":false,"name":"Priority","type":"priority"}]}',
              schema: {
                $ref: '#/components/schemas/BulkEditGetFields',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if no editable fields are found for the provided issue IDs.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get bulk editable fields',
      tags: ['Issue bulk operations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  Edit [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in all projects that contain the selected issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'submitBulkEdit',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueBulkEditPayload',
            },
          },
        },
        description: 'The request body containing the issues to be edited and the new field values.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"taskId":"10641"}',
              schema: {
                $ref: '#/components/schemas/SubmittedBulkOperation',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errors":[{"message":"The following editedFieldInput values are not listed as selectedActions : issuetype"}]}',
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk edit issues',
      tags: ['Issue bulk operations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira', 'read:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/bulk/issues/move': {
    post: {
      deprecated: false,
      description:
        "Use this API to submit a bulk issue move request. You can move multiple issues, but they must all be moved to and from a single project, issue type, and parent. You can't move more than 1000 issues (including subtasks) at once.\n\n#### Scenarios: ####\n\nThis is an early version of the API and it doesn't have full feature parity with the Bulk Move UI experience.\n\n *  Moving issue of type A to issue of type B in the same project or a different project: `SUPPORTED`\n *  Moving multiple issues of type A in one project to multiple issues of type B in the same project or a different project: **`SUPPORTED`**\n *  Moving a standard parent issue of type A with its multiple subtask issue types in one project to standard issue of type B and multiple subtask issue types in the same project or a different project: `SUPPORTED`\n *  Moving an epic issue with its child issues to a different project without losing their relation: `NOT SUPPORTED`  \n    (Workaround: Move them individually and stitch the relationship back with the Bulk Edit API)\n\n#### Limits applied to bulk issue moves: ####\n\nWhen using the bulk move, keep in mind that there are limits on the number of issues and fields you can include.\n\n *  You can move up to 1,000 issues in a single operation, including any subtasks.\n *  All issues must originate from the same project and share the same issue type and parent.\n *  The total combined number of fields across all issues must not exceed 1,500,000. For example, if each issue includes 15,000 fields, then the maximum number of issues that can be moved is 100.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Move [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in source projects.\n *  Create [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in destination projects.\n *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-permissions/) in destination projects, if moving subtasks only.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'submitBulkMove',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              sendBulkNotification: true,
              targetToSourcesMapping: {
                'PROJECT-KEY,10001': {
                  inferClassificationDefaults: false,
                  inferFieldDefaults: false,
                  inferStatusDefaults: false,
                  inferSubtaskTypeDefault: true,
                  issueIdsOrKeys: ['ISSUE-1'],
                  targetClassification: [
                    {
                      classifications: {
                        '5bfa70f7-4af1-44f5-9e12-1ce185f15a38': ['bd58e74c-c31b-41a7-ba69-9673ebd9dae9', '-1'],
                      },
                    },
                  ],
                  targetMandatoryFields: [
                    {
                      fields: {
                        customfield_10000: {
                          retain: false,
                          type: 'raw',
                          value: ['value-1', 'value-2'],
                        },
                        description: {
                          retain: true,
                          type: 'adf',
                          value: {
                            content: [
                              {
                                content: [
                                  {
                                    text: 'New description value',
                                    type: 'text',
                                  },
                                ],
                                type: 'paragraph',
                              },
                            ],
                            type: 'doc',
                            version: 1,
                          },
                        },
                        fixVersions: {
                          retain: false,
                          type: 'raw',
                          value: ['10009'],
                        },
                        labels: {
                          retain: false,
                          type: 'raw',
                          value: ['label-1', 'label-2'],
                        },
                      },
                    },
                  ],
                  targetStatus: [
                    {
                      statuses: {
                        '10001': ['10002', '10003'],
                      },
                    },
                  ],
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/IssueBulkMovePayload',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"taskId":"10641"}',
              schema: {
                $ref: '#/components/schemas/SubmittedBulkOperation',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errors":[{"message":"Some of the issues in the issueIdsOrKeys are not valid"}]}',
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk move issues',
      tags: ['Issue bulk operations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira', 'read:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/bulk/queue/{taskId}': {
    get: {
      deprecated: false,
      description:
        'Use this to get the progress state for the specified bulk operation `taskId`.\n\n**[Permissions](#permissions) required:**\n\n *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).\n *  Administer Jira [global permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/), or be the creator of the task.\n\nIf the task is running, this resource will return:\n\n    {"taskId":"10779","status":"RUNNING","progressPercent":65,"submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"created":1690180055963,"started":1690180056206,"updated":169018005829}\n\nIf the task has completed, then this resource will return:\n\n    {"processedAccessibleIssues":[10001,10002],"created":1709189449954,"progressPercent":100,"started":1709189450154,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"invalidOrInaccessibleIssueCount":0,"taskId":"10000","totalIssueCount":2,"updated":1709189450354}\n\n**Note:** You can view task progress for up to 14 days from creation.',
      operationId: 'getBulkOperationProgress',
      parameters: [
        {
          description: 'The ID of the task.',
          in: 'path',
          name: 'taskId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"created":1704110400000,"invalidOrInaccessibleIssueCount":0,"processedAccessibleIssues":[10001,10002],"progressPercent":100,"started":1704110460000,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"taskId":"10000","totalIssueCount":2,"updated":1704110520000}',
              schema: {
                $ref: '#/components/schemas/BulkOperationProgress',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The task associated with this taskId is not a bulk operation task"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}',
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/BulkOperationErrorResponse',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get bulk issue operation progress',
      tags: ['Issue bulk operations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/classification-levels': {
    get: {
      deprecated: false,
      description: 'Returns all classification levels.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllUserDataClassificationLevels',
      parameters: [
        {
          description: 'Optional set of statuses to filter by.',
          in: 'query',
          name: 'status',
          schema: {
            items: {
              default: '',
              description: 'The status of the project classification.',
              enum: ['PUBLISHED', 'ARCHIVED', 'DRAFT'],
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'Ordering of the results by a given field. If not provided, values will not be sorted.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['rank', '-rank', '+rank'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"classifications":[{"id":"ari:cloud:platform::classification-tag/5bfa70f7-4af1-44f5-9e12-1ce185f15a38","status":"published","name":"Restricted","rank":1,"description":"Data we hold that would be very damaging and would cause loss of trust with customers and present legal risk to Atlassian and/or customers if mishandled","guideline":"Access to data must be restricted to only individuals who need access in order to perform their job duties.","color":"RED"},{"id":"ari:cloud:platform::classification-tag/bd58e74c-c31b-41a7-ba69-9673ebd9dae9","status":"archived","name":"Protected","rank":2,"description":"Data we hold that could cause loss of trust with customers or present legal risk to Atlassian if mishandled","guideline":"Access to systems or APIs mapping data to other identifiers must be carefully controlled.","color":"ORANGE"},{"id":"ari:cloud:platform::classification-tag/a82d653e-1035-4aa2-b9de-4265511fd487","status":"published","name":"Confidential","rank":3,"description":"Data we hold that would likely be damaging and could cause loss of trust with our customers if mishandled","guideline":"Data should be encrypted at rest and in transit.","color":"BLUE"},{"id":"ari:cloud:platform::classification-tag/a82d653e-1035-4aa2-b9de-4265511fd487","status":"published","name":"system-tag"}]}',
              schema: {
                $ref: '#/components/schemas/DataClassificationLevelsBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get all classification levels',
      tags: ['Classification levels'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/comment/list': {
    post: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Comments are returned where the user:\n\n *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getCommentsByIds',
      parameters: [
        {
          description:
            "Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedBody` Returns the comment body rendered in HTML.\n *  `properties` Returns the comment's properties.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10],
            },
            schema: {
              $ref: '#/components/schemas/IssueCommentListRequestBean',
            },
          },
        },
        description: 'The list of comment IDs.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":1048576,"startAt":0,"total":1,"values":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanComment',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request contains more than 1000 IDs or is empty.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get comments by IDs',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'delete:comment.property:jira',
            'read:avatar:jira',
            'read:comment:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:comment.property:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/comment/{commentId}/properties': {
    get: {
      deprecated: false,
      description:
        'Returns the keys of all the properties of a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getCommentPropertyKeys',
      parameters: [
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'commentId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the comment ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the comment is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get comment property keys',
      tags: ['Issue comment properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:comment.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/comment/{commentId}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a comment property.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.\n *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.\n\nAlso, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.',
      operationId: 'deleteCommentProperty',
      parameters: [
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'commentId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            "Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete comment property',
      tags: ['Issue comment properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:comment.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the value of a comment property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getCommentProperty',
      parameters: [
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'commentId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the comment or the property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get comment property',
      tags: ['Issue comment properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:comment.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.\n *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.\n\nAlso, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.',
      operationId: 'setCommentProperty',
      parameters: [
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'commentId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the comment property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the comment property is created.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the comment is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set comment property',
      tags: ['Issue comment properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:comment.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/component': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'findComponentsForProjects',
      parameters: [
        {
          description: 'The project IDs and/or project keys (case sensitive).',
          in: 'query',
          name: 'projectIdsOrKeys',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `name` Sorts by component name.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['description', '-description', '+description', 'name', '-name', '+name'],
            type: 'string',
          },
        },
        {
          description:
            'Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: ' com.atlassian.jira.issue.fields.rest.json.beans.ComponentJsonBean#PAGED_EXAMPLE} }',
              schema: {
                $ref: '#/components/schemas/PageBean2ComponentJsonBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Find components for projects',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createComponent',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD',
              description: 'This is a Jira component',
              isAssigneeTypeValid: false,
              leadAccountId: '5b10a2844c20165700ede21g',
              name: 'Component 1',
              project: 'HSP',
            },
            schema: {
              $ref: '#/components/schemas/ProjectComponent',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}',
              schema: {
                $ref: '#/components/schemas/ProjectComponent',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the user is not found.\n *  `name` is not provided.\n *  `name` is over 255 characters in length.\n *  `projectId` is not provided.\n *  `assigneeType` is an invalid value.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
        },
        '404': {
          description:
            'Returned if the project is not found or the user does not have permission to browse the project containing the component.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Create component',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'write:project.component:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/component/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a component.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteComponent',
      parameters: [
        {
          description: 'The ID of the component.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the component to replace the deleted component. If this value is null no replacement is made.',
          in: 'query',
          name: 'moveIssuesTo',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the component is not found.\n *  the replacement component is not found.\n *  the user does not have permission to browse the project containing the component.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete component',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project.component:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a component.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.',
      operationId: 'getComponent',
      parameters: [
        {
          description: 'The ID of the component.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}',
              schema: {
                $ref: '#/components/schemas/ProjectComponent',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the component is not found or the user does not have permission to browse the project containing the component.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get component',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateComponent',
      parameters: [
        {
          description: 'The ID of the component.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD',
              description: 'This is a Jira component',
              isAssigneeTypeValid: false,
              leadAccountId: '5b10a2844c20165700ede21g',
              name: 'Component 1',
            },
            schema: {
              $ref: '#/components/schemas/ProjectComponent',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}',
              schema: {
                $ref: '#/components/schemas/ProjectComponent',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the user is not found.\n *  `assigneeType` is an invalid value.\n *  `name` is over 255 characters in length.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.',
        },
        '404': {
          description:
            'Returned if the component is not found or the user does not have permission to browse the project containing the component.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Update component',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'write:project.component:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/component/{id}/relatedIssueCounts': {
    get: {
      deprecated: false,
      description:
        'Returns the counts of issues assigned to the component.\n\nThis operation can be accessed anonymously.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  **Classic**: `read:jira-work`\n *  **Granular**: `read:field:jira`, `read:project.component:jira`\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getComponentRelatedIssues',
      parameters: [
        {
          description: 'The ID of the component.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}',
              schema: {
                $ref: '#/components/schemas/ComponentIssuesCount',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the component is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get component issues count',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/configuration': {
    get: {
      deprecated: false,
      description:
        'Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getConfiguration',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"attachmentsEnabled":true,"issueLinkingEnabled":true,"subTasksEnabled":false,"timeTrackingConfiguration":{"defaultUnit":"day","timeFormat":"pretty","workingDaysPerWeek":5.0,"workingHoursPerDay":8.0},"timeTrackingEnabled":true,"unassignedIssuesAllowed":false,"votingEnabled":true,"watchingEnabled":true}',
              schema: {
                $ref: '#/components/schemas/Configuration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get global settings',
      tags: ['Jira settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:instance-configuration:jira', 'read:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/configuration/timetracking': {
    get: {
      deprecated: false,
      description:
        'Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getSelectedTimeTrackingImplementation',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}',
              schema: {
                $ref: '#/components/schemas/TimeTrackingProvider',
              },
            },
          },
          description: 'Returned if the request is successful and time tracking is enabled.',
        },
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful but time tracking is disabled.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get selected time tracking provider',
      tags: ['Time tracking'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Selects a time tracking provider.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'selectTimeTrackingImplementation',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              key: 'Jira',
            },
            schema: {
              $ref: '#/components/schemas/TimeTrackingProvider',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the time tracking provider is not found.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Select time tracking provider',
      tags: ['Time tracking'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/configuration/timetracking/list': {
    get: {
      deprecated: false,
      description:
        'Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAvailableTimeTrackingImplementations',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/TimeTrackingProvider',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all time tracking providers',
      tags: ['Time tracking'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/configuration/timetracking/options': {
    get: {
      deprecated: false,
      description:
        'Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getSharedTimeTrackingConfiguration',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultUnit":"hour","timeFormat":"pretty","workingDaysPerWeek":5.5,"workingHoursPerDay":7.6}',
              schema: {
                $ref: '#/components/schemas/TimeTrackingConfiguration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get time tracking settings',
      tags: ['Time tracking'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the time tracking settings.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setSharedTimeTrackingConfiguration',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultUnit: 'hour',
              timeFormat: 'pretty',
              workingDaysPerWeek: 5.5,
              workingHoursPerDay: 7.6,
            },
            schema: {
              $ref: '#/components/schemas/TimeTrackingConfiguration',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultUnit":"hour","timeFormat":"pretty","workingDaysPerWeek":5.5,"workingHoursPerDay":7.6}',
              schema: {
                $ref: '#/components/schemas/TimeTrackingConfiguration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request object is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set time tracking settings',
      tags: ['Time tracking'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.time-tracking:jira', 'read:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/customFieldOption/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns a custom field option. For example, an option in a select list.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The custom field option is returned as follows:\n\n *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.',
      operationId: 'getCustomFieldOption',
      parameters: [
        {
          description: 'The ID of the custom field option.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"self":"https://your-domain.atlassian.net/rest/api/3/customFieldOption/10000","value":"To Do"}',
              schema: {
                $ref: '#/components/schemas/CustomFieldOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the custom field option is not found.\n *  the user does not have permission to view the custom field.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get custom field option',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/dashboard': {
    get: {
      deprecated: false,
      description:
        'Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllDashboards',
      parameters: [
        {
          description:
            'The filter applied to the list of dashboards. Valid values are:\n\n *  `favourite` Returns dashboards the user has marked as favorite.\n *  `my` Returns dashboards owned by the user.',
          in: 'query',
          name: 'filter',
          schema: {
            enum: ['my', 'favourite'],
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 20,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"dashboards":[{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"},{"id":"20000","isFavourite":true,"name":"Build Engineering","owner":{"key":"Mia","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","name":"mia","displayName":"Mia Krystof","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/20000","sharePermissions":[{"group":{"name":"administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=administrators"},"id":10105,"type":"group"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=20000"}],"maxResults":10,"next":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=10","prev":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=0","startAt":10,"total":143}',
              schema: {
                $ref: '#/components/schemas/PageOfDashboards',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all dashboards',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description: 'Creates a dashboard.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'createDashboard',
      parameters: [
        {
          description:
            'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)',
          in: 'query',
          name: 'extendAdminPermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.',
              editPermissions: [],
              name: 'Auditors dashboard',
              sharePermissions: [
                {
                  type: 'global',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/DashboardDetails',
            },
          },
        },
        description: 'Dashboard details.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}',
              schema: {
                $ref: '#/components/schemas/Dashboard',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/bulk/edit': {
    put: {
      deprecated: false,
      description:
        'Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboards to be updated must be owned by the user, or the user must be an administrator.',
      operationId: 'bulkEditDashboards',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              action: 'changePermission',
              entityIds: [10001, 10002],
              extendAdminPermissions: true,
              permissionDetails: {
                editPermissions: [
                  {
                    group: {
                      groupId: '276f955c-63d7-42c8-9520-92d01dca0625',
                      name: 'jira-administrators',
                      self: 'https://your-domain.atlassian.net/rest/api/~ver~/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625',
                    },
                    id: 10010,
                    type: 'group',
                  },
                ],
                sharePermissions: [
                  {
                    id: 10000,
                    type: 'global',
                  },
                ],
              },
            },
            schema: {
              $ref: '#/components/schemas/BulkEditShareableEntityRequest',
            },
          },
        },
        description: 'The details of dashboards being updated in bulk.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"action":"changePermission","entityErrors":{"10002":{"errorMessages":["Only owner or editors of the dashboard can change permissions."],"errors":{}}}}',
              schema: {
                $ref: '#/components/schemas/BulkEditShareableEntityResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk edit dashboards',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/gadgets': {
    get: {
      deprecated: false,
      description:
        'Gets a list of all available gadgets that can be added to all dashboards.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllAvailableDashboardGadgets',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"gadgets":[{"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","title":"Issue statistics"},{"uri":"rest/gadgets/1.0/g/com.atlassian.streams.streams-jira-plugin:activitystream-gadget/gadgets/activitystream-gadget.xml","title":"Activity Stream"}]}',
              schema: {
                $ref: '#/components/schemas/AvailableDashboardGadgetsResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '400 response',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get available gadgets',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:\n\n *  Dashboards owned by the user. Not returned for anonymous users.\n *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.\n *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.\n *  Dashboards shared with a public project.\n *  Dashboards shared with the public.',
      operationId: 'getDashboardsPaginated',
      parameters: [
        {
          description: 'String used to perform a case-insensitive partial match with `name`.',
          in: 'query',
          name: 'dashboardName',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description:
            'This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.',
          in: 'query',
          name: 'owner',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.',
          in: 'query',
          name: 'projectId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: 'name',
            enum: [
              'description',
              '-description',
              '+description',
              'favorite_count',
              '-favorite_count',
              '+favorite_count',
              'id',
              '-id',
              '+id',
              'is_favorite',
              '-is_favorite',
              '+is_favorite',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
            ],
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The status to filter by. It may be active, archived or deleted.',
          in: 'query',
          name: 'status',
          schema: {
            default: 'active',
            enum: ['active', 'archived', 'deleted'],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/search?expand=owner&maxResults=50&startAt=0","startAt":0,"total":2,"values":[{"description":"Testing program","id":"1","isFavourite":true,"name":"Testing","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/1","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=1"},{"description":"Quantum initiative","id":"2","isFavourite":false,"name":"Quantum ","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":0,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/2","sharePermissions":[{"type":"loggedin"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=2"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanDashboard',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  `orderBy` is invalid.\n *  `expand` includes an invalid value.\n *  `accountId` and `owner` are provided.\n *  `groupname` and `groupId` are provided.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '401 response',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for dashboards',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/dashboard/{dashboardId}/gadget': {
    get: {
      deprecated: false,
      description:
        'Returns a list of dashboard gadgets on a dashboard.\n\nThis operation returns:\n\n *  Gadgets from a list of IDs, when `id` is set.\n *  Gadgets with a module key, when `moduleKey` is set.\n *  Gadgets from a list of URIs, when `uri` is set.\n *  All gadgets, when no other parameters are set.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllGadgets',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`.',
          in: 'query',
          name: 'moduleKey',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`.',
          in: 'query',
          name: 'uri',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`.',
          in: 'query',
          name: 'gadgetId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"gadgets":[{"id":10001,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","color":"blue","position":{"row":0,"column":0},"title":"Issue statistics"},{"id":10002,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-graph","color":"red","position":{"row":1,"column":0},"title":"Activity stream"},{"id":10003,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","color":"yellow","position":{"row":0,"column":1},"title":"Bubble chart"}]}',
              schema: {
                $ref: '#/components/schemas/DashboardGadgetResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get gadgets',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    post: {
      deprecated: false,
      description: 'Adds a gadget to a dashboard.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'addGadget',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              color: 'blue',
              ignoreUriAndModuleKeyValidation: false,
              moduleKey:
                'com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item',
              position: {
                column: 1,
                row: 0,
              },
              title: 'Issue statistics',
            },
            schema: {
              $ref: '#/components/schemas/DashboardGadgetSettings',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"color":"blue","id":10001,"moduleKey":"com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item","position":{"column":1,"row":0},"title":"Issue statistics"}',
              schema: {
                $ref: '#/components/schemas/DashboardGadget',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Cannot add another gadget. The maximum number of gadgets the dashboard can hold has been reached."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work', 'read:jira-work'],
        },
      ],
      summary: 'Add gadget to dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work', 'read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:dashboard:jira', 'read:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}': {
    delete: {
      deprecated: false,
      description:
        'Removes a dashboard gadget from a dashboard.\n\nWhen a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'removeGadget',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the gadget.',
          in: 'path',
          name: 'gadgetId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The dashboard gadget was not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the gadget or the dashboard is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Remove gadget from dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Changes the title, position, and color of the gadget on a dashboard.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'updateGadget',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the gadget.',
          in: 'path',
          name: 'gadgetId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              color: 'red',
              position: {
                column: 1,
                row: 1,
              },
              title: 'My new gadget title',
            },
            schema: {
              $ref: '#/components/schemas/DashboardGadgetUpdateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The gadget cannot be placed in the selected row. The selected row does not exist on the dashboard."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The dashboard you requested either does not exist or you don\'t have the required permissions to perform this action."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the gadget or the dashboard is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Update gadget on dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties': {
    get: {
      deprecated: false,
      description:
        'Returns the keys of all properties for a dashboard item.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.',
      operationId: 'getDashboardItemPropertyKeys',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the dashboard item.',
          in: 'path',
          name: 'itemId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get dashboard item property keys',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:dashboard.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a dashboard item property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.',
      operationId: 'deleteDashboardItemProperty',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the dashboard item.',
          in: 'path',
          name: 'itemId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the dashboard item property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the dashboard item property is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard or dashboard item ID is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user is not the owner of the dashboard.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete dashboard item property',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:dashboard.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the key and value of a dashboard item property.\n\nA dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).\n\nWhen an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.\n\nThere is no resource to set or get dashboard items.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\\\u2019s anonymous access is permitted.",
      operationId: 'getDashboardItemProperty',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the dashboard item.',
          in: 'path',
          name: 'itemId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the dashboard item property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get dashboard item property',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:dashboard.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.\n\nA dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).\n\nWhen an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.\n\nThere is no resource to set or get dashboard items.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.",
      operationId: 'setDashboardItemProperty',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'dashboardId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the dashboard item.',
          in: 'path',
          name: 'itemId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body\'s JSON must be an object with all keys and values as strings.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5,
              string: 'string-value',
            },
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the dashboard item property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the dashboard item property is created.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The JSON data provided for the property has too many levels. It must be an object with all keys and values as strings."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  Request is invalid\n *  Or if all of these conditions are met in the request:\n    \n     *  The dashboard item has a spec URI and no complete module key\n     *  The value of propertyKey is equal to "config"\n     *  The request body contains a JSON object whose keys and values are not strings.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user is not the owner of the dashboard.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard item is not found or the dashboard is not shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set dashboard item property',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:dashboard.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/dashboard/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a dashboard.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be deleted must be owned by the user.',
      operationId: 'deleteDashboard',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the dashboard is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '400 response',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:dashboard:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    get: {
      deprecated: false,
      description:
        'Returns a dashboard.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.\n\nHowever, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.',
      operationId: 'getDashboard',
      parameters: [
        {
          description: 'The ID of the dashboard.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}',
              schema: {
                $ref: '#/components/schemas/Dashboard',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '400 response',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a dashboard, replacing all the dashboard details with those provided.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be updated must be owned by the user.',
      operationId: 'updateDashboard',
      parameters: [
        {
          description: 'The ID of the dashboard to update.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)',
          in: 'query',
          name: 'extendAdminPermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.',
              editPermissions: [],
              name: 'Auditors dashboard',
              sharePermissions: [
                {
                  type: 'global',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/DashboardDetails',
            },
          },
        },
        description: 'Replacement dashboard details.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}',
              schema: {
                $ref: '#/components/schemas/Dashboard',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the dashboard is not found or the dashboard is not owned by the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/dashboard/{id}/copy': {
    post: {
      deprecated: false,
      description:
        'Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.\n\n**[Permissions](#permissions) required:** None\n\nThe dashboard to be copied must be owned by or shared with the user.',
      operationId: 'copyDashboard',
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)',
          in: 'query',
          name: 'extendAdminPermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A dashboard to help auditors identify sample of issues to check.',
              editPermissions: [],
              name: 'Auditors dashboard',
              sharePermissions: [
                {
                  type: 'global',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/DashboardDetails',
            },
          },
        },
        description: 'Dashboard details.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}',
              schema: {
                $ref: '#/components/schemas/Dashboard',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Copy dashboard',
      tags: ['Dashboards'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:dashboard:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:dashboard:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/data-policy': {
    get: {
      deprecated: false,
      description: 'Returns data policy for the workspace.',
      operationId: 'getPolicy',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"anyContentBlocked":false}',
              schema: {
                $ref: '#/components/schemas/WorkspaceDataPolicy',
              },
            },
          },
          description: 'Returned if the request is successful',
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only apps can access this resource."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":[""],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the client is not authorized to make the request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get data policy for the workspace',
      tags: ['App data policies'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/data-policy/project': {
    get: {
      deprecated: false,
      description: 'Returns data policies for the projects specified in the request.',
      operationId: 'getPolicies',
      parameters: [
        {
          description: 'A list of project identifiers. This parameter accepts a comma-separated list.',
          in: 'query',
          name: 'ids',
          schema: {
            description: 'A list of up to 50 project identifiers. This parameter accepts a comma-separated list.',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"projectDataPolicies":[{"dataPolicy":{"anyContentBlocked":false},"id":1000},{"dataPolicy":{"anyContentBlocked":true},"id":1001}]}',
              schema: {
                $ref: '#/components/schemas/ProjectDataPolicies',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Invalid request: some projects are not available or do not exist."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid or includes invalid or not-permitted project identifiers.',
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only apps can access this resource."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":[""],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the client is not authorized to make the request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get data policy for projects',
      tags: ['App data policies'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/events': {
    get: {
      deprecated: false,
      description:
        'Returns all issue events.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getEvents',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"id":1,"name":"Issue Created"},{"id":2,"name":"Issue Updated"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueEvent',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to complete this request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get events',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-event:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/expression/analyse': {
    post: {
      deprecated: false,
      description:
        'Analyses and validates Jira expressions.\n\nAs an experimental feature, this operation can also attempt to type-check the expressions.\n\nLearn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).\n\n**[Permissions](#permissions) required**: None.',
      operationId: 'analyseExpression',
      parameters: [
        {
          description:
            "The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.",
          in: 'query',
          name: 'check',
          schema: {
            default: 'syntax',
            enum: ['syntax', 'type', 'complexity'],
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              contextVariables: {
                listOfStrings: 'List<String>',
                record: '{ a: Number, b: String }',
                value: 'User',
              },
              expressions: ["issues.map(issue => issue.properties['property_key'])"],
            },
            schema: {
              $ref: '#/components/schemas/JiraExpressionForAnalysis',
            },
          },
        },
        description: 'The Jira expressions to analyse.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"results":[{"expression":"analysed expression","errors":[{"line":1,"column":4,"message":"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.","type":"syntax"},{"message":"Jira expression is too long (1040), limit: 1000 characters","type":"other"},{"message":"Jira expression has too many nodes (150), limit: 100 leaves","type":"other"}],"valid":false},{"expression":"issues.map(i => {idAndKey: [i.id, i.key], summary: i.summary, comments: i.comments})","valid":true,"type":"List<{idAndKey: [Number, String], summary: String, comments: List<Comment>}>","complexity":{"expensiveOperations":"N","variables":{"N":"issues"}}},{"expression":"issues.map(i => i.id > \'0\')","errors":[{"expression":"i.id > 0","message":"Can\'t compare Number to String.","type":"type"}],"valid":false,"type":"TypeError"}]}',
              schema: {
                $ref: '#/components/schemas/JiraExpressionsAnalysis',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '400 response',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '404 response',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'],
        },
        {},
      ],
      summary: 'Analyse Jira expression',
      tags: ['Jira expressions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:jira-expressions:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/expression/eval': {
    post: {
      deprecated: false,
      description:
        'Evaluates a Jira expression and returns its value.\n\nThis resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.\n\n#### Context variables ####\n\nThe following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.\n\n *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.\n *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).\n *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.\n *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.\n *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.\n *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.\n *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.\n *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.\n *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.\n\nAlso, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:\n\n *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.\n *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.\n *  `json`: A JSON object containing custom content.\n *  `list`: A JSON list of `user`, `issue`, or `json` variable types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  \nPermission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).',
      operationId: 'evaluateJiraExpression',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              context: {
                board: 10100,
                custom: {
                  config: {
                    type: 'json',
                    value: {
                      userId: '10002',
                    },
                  },
                  issuesList: [
                    {
                      key: 'ACJIRA-1471',
                      type: 'issue',
                    },
                    {
                      id: 100001,
                      type: 'issue',
                    },
                  ],
                  myUser: {
                    accountId: '100001',
                    type: 'user',
                  },
                  nullField: {
                    type: 'json',
                  },
                },
                customerRequest: 1450,
                issue: {
                  key: 'ACJIRA-1470',
                },
                issues: {
                  jql: {
                    maxResults: 100,
                    query: 'project = HSP',
                    startAt: 0,
                    validation: 'strict',
                  },
                },
                project: {
                  key: 'ACJIRA',
                },
                serviceDesk: 10023,
                sprint: 10001,
              },
              expression:
                '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id), listCustomVariable: issuesList.includes(issue), customVariables: myUser.accountId == config.userId}',
            },
            schema: {
              $ref: '#/components/schemas/JiraExpressionEvalRequestBean',
            },
          },
        },
        description: 'The Jira expression and the evaluation context.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"value":"The expression\'s result. This value can be any JSON, not necessarily a String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"startAt":0,"maxResults":1000,"count":140,"totalCount":140,"validationWarnings":["There is a problem with the JQL query."]}}}}',
              schema: {
                $ref: '#/components/schemas/JiraExpressionResult',
              },
            },
          },
          description:
            'Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                "{\"errorMessages\":[\"Evaluation failed: \\\"issue['a' + 'b']\\\" - Unrecognized property of `issue`: \\\"ab\\\" ('a' + 'b'). Available properties of type 'Issue' are: 'assignee', 'comments', 'description', 'id', 'issueType', 'key', 'priority', 'project', 'properties', 'reporter', 'status', 'summary'\"],\"errors\":{}}",
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  the request is invalid, that is:\n    \n     *  invalid data is provided, such as a request including issue ID and key.\n     *  the expression is invalid and can not be parsed.\n *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Issue does not exist or you do not have permission to see it."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if any object provided in the request context is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'],
        },
        {},
      ],
      summary: 'Evaluate Jira expression',
      tags: ['Jira expressions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-expressions:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/expression/evaluate': {
    post: {
      deprecated: false,
      description:
        "Evaluates a Jira expression and returns its value. The difference between this and `eval` is that this endpoint uses the enhanced search API when evaluating JQL queries. This API is eventually consistent, unlike the strongly consistent `eval` API. This allows for better performance and scalability. In addition, this API's response for JQL evaluation is based on a scrolling view (backed by a `nextPageToken`) instead of a paginated view (backed by `startAt` and `totalCount`).\n\nThis resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.\n\n#### Context variables ####\n\nThe following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.\n\n *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.\n *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).\n *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.\n *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.\n *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.\n *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.\n *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.\n *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.\n *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.\n\nIn addition, you can pass custom context variables along with their types. You can then access them from the Jira expression by key. You can use the following variables in a custom context:\n\n *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.\n *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.\n *  `json`: A JSON object containing custom content.\n *  `list`: A JSON list of `user`, `issue`, or `json` variable types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  \nPermission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).",
      operationId: 'evaluateJSISJiraExpression',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              context: {
                board: 10100,
                custom: {
                  config: {
                    type: 'json',
                    value: {
                      userId: '10002',
                    },
                  },
                  issuesList: [
                    {
                      key: 'ACJIRA-1471',
                      type: 'issue',
                    },
                    {
                      id: 100001,
                      type: 'issue',
                    },
                  ],
                  myUser: {
                    accountId: '100001',
                    type: 'user',
                  },
                  nullField: {
                    type: 'json',
                  },
                },
                customerRequest: 1450,
                issue: {
                  key: 'ACJIRA-1470',
                },
                issues: {
                  jql: {
                    maxResults: 100,
                    nextPageToken: 'EgQIlMIC',
                    query: 'project = HSP',
                  },
                },
                project: {
                  key: 'ACJIRA',
                },
                serviceDesk: 10023,
                sprint: 10001,
              },
              expression:
                '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id), listCustomVariable: issuesList.includes(issue), customVariables: myUser.accountId == config.userId}',
            },
            schema: {
              $ref: '#/components/schemas/JiraExpressionEvaluateRequestBean',
            },
          },
        },
        description: 'The Jira expression and the evaluation context.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"value":"The expression\'s result. This value can be any JSON, not necessarily a String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"nextPageToken":"EgQIlMIC"}}}}',
              schema: {
                $ref: '#/components/schemas/JExpEvaluateJiraExpressionResultBean',
              },
            },
          },
          description:
            'Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                "{\"errorMessages\":[\"Evaluation failed: \\\"issue['a' + 'b']\\\" - Unrecognized property of `issue`: \\\"ab\\\" ('a' + 'b'). Available properties of type 'Issue' are: 'assignee', 'comments', 'description', 'id', 'issueType', 'key', 'priority', 'project', 'properties', 'reporter', 'status', 'summary'\"],\"errors\":{}}",
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  the request is invalid, that is:\n    \n     *  invalid data is provided, such as a request including issue ID and key.\n     *  the expression is invalid and can not be parsed.\n *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.\n *  If jql is unbounded or empty.\n *  If nextPageToken is invalid',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Issue does not exist or you do not have permission to see it."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if any object provided in the request context is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'read:jira-user'],
        },
        {},
      ],
      summary: 'Evaluate Jira expression using enhanced search API',
      tags: ['Jira expressions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-expressions:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/field': {
    get: {
      deprecated: false,
      description:
        'Returns system and custom issue fields according to the following rules:\n\n *  Fields that cannot be added to the issue navigator are always returned.\n *  Fields that cannot be placed on an issue screen are always returned.\n *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.\n *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getFields',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"clauseNames":["description"],"custom":false,"id":"description","name":"Description","navigable":true,"orderable":true,"schema":{"system":"description","type":"string"},"searchable":true},{"clauseNames":["summary"],"custom":false,"id":"summary","key":"summary","name":"Summary","navigable":true,"orderable":true,"schema":{"system":"summary","type":"string"},"searchable":true}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/FieldDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get fields',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:field:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:field-configuration:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a custom field.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createCustomField',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Custom field for picking groups',
              name: 'New custom field',
              searcherKey: 'com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher',
              type: 'com.atlassian.jira.plugin.system.customfieldtypes:grouppicker',
            },
            schema: {
              $ref: '#/components/schemas/CustomFieldDefinitionJsonBean',
            },
          },
        },
        description: 'Definition of the custom field to be created',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"}',
              schema: {
                $ref: '#/components/schemas/FieldDetails',
              },
            },
          },
          description: 'Returned if the custom field is created.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the user does not have permission to create custom fields.\n *  any of the request object properties have invalid or missing values.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Create custom field',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:field:jira',
            'read:avatar:jira',
            'read:field:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:field-configuration:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:\n\n *  all fields\n *  specific fields, by defining `id`\n *  fields that contain a string in the field name or description, by defining `query`\n *  specific fields that contain a string in the field name or description, by defining `id` and `query`\n\nOnly custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getFieldsPaginated',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The type of fields to search.',
          in: 'query',
          name: 'type',
          schema: {
            items: {
              default: '',
              enum: ['custom', 'system'],
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'The IDs of the custom fields to return or, where `query` is specified, filter.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with field names or descriptions.',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `contextsCount` sorts by the number of contexts related to a field\n *  `lastUsed` sorts by the date when the value of the field last changed\n *  `name` sorts by the field name\n *  `screensCount` sorts by the number of screens related to a field',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: [
              'contextsCount',
              '-contextsCount',
              '+contextsCount',
              'lastUsed',
              '-lastUsed',
              '+lastUsed',
              'name',
              '-name',
              '+name',
              'screensCount',
              '-screensCount',
              '+screensCount',
              'projectsCount',
              '-projectsCount',
              '+projectsCount',
            ],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `key` returns the key for each field\n *  `stableId` returns the stableId for each field\n *  `lastUsed` returns the date when the value of the field last changed\n *  `screensCount` returns the number of screens related to a field\n *  `contextsCount` returns the number of contexts related to a field\n *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)\n *  `searcherKey` returns the searcher key for each custom field',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":50,"startAt":0,"total":2,"values":[{"id":"customfield_10000","name":"Approvers","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker","customId":10000,"items":"user","type":"array"},"description":"Contains users needed for approval. This custom field was created by Jira Service Desk.","key":"customfield_10000","stableId":"sfid:approvers","isLocked":true,"searcherKey":"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher","screensCount":2,"contextsCount":2,"lastUsed":{"type":"TRACKED","value":"2021-01-28T07:37:40.000+0000"}},{"id":"customfield_10001","name":"Change reason","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:select","customId":10001,"type":"option"},"description":"Choose the reason for the change request","key":"customfield_10001","stableId":"sfid:change-reason","isLocked":false,"searcherKey":"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher","screensCount":2,"contextsCount":2,"projectsCount":2,"lastUsed":{"type":"NOT_TRACKED"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanField',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only custom fields can be queried."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access fields."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get fields paginated',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/search/trashed': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.\n\nOnly custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getTrashedFieldsPaginated',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          in: 'query',
          name: 'id',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with field names or descriptions.',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'expand',
          schema: {
            enum: [
              'name',
              '-name',
              '+name',
              'trashDate',
              '-trashDate',
              '+trashDate',
              'plannedDeletionDate',
              '-plannedDeletionDate',
              '+plannedDeletionDate',
              'projectsCount',
              '-projectsCount',
              '+projectsCount',
            ],
            type: 'string',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date',
          in: 'query',
          name: 'orderBy',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":50,"startAt":0,"total":1,"values":[{"id":"customfield_10000","name":"Approvers","schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker","customId":10003,"type":"array"},"description":"Contains users needed for approval. This custom field was created by Jira Service Desk.","key":"customfield_10003","trashedDate":"2022-10-06T07:32:47.000+0000","trashedBy":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"plannedDeletionDate":"2022-10-24T07:32:47.000+0000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanField',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only custom fields can be queried."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access fields."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get fields in trash paginated',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:field-configuration:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}': {
    put: {
      deprecated: false,
      description:
        'Updates a custom field.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateCustomField',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Select the manager and the corresponding employee.',
              name: 'Managers and employees list',
              searcherKey: 'com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher',
            },
            schema: {
              $ref: '#/components/schemas/UpdateCustomFieldDetails',
            },
          },
        },
        description: 'The custom field update details.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["searcherKey is invalid for the field type."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can edit custom fields."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update custom field',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:\n\n *  With no other parameters set, all contexts.\n *  By defining `id` only, all contexts from the list of IDs.\n *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)\n *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getContextsForField',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether to return contexts that apply to all issue types.',
          in: 'query',
          name: 'isAnyIssueType',
          schema: {
            type: 'boolean',
          },
        },
        {
          description: 'Whether to return contexts that apply to all projects.',
          in: 'query',
          name: 'isGlobalContext',
          schema: {
            type: 'boolean',
          },
        },
        {
          description:
            'The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.',
          in: 'query',
          name: 'contextId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"id":"10025","name":"Bug fields context","description":"A context used to define the custom field options for bugs.","isGlobalContext":true,"isAnyIssueType":false},{"id":"10026","name":"Task fields context","description":"A context used to define the custom field options for tasks.","isGlobalContext":false,"isAnyIssueType":false}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContext',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field was not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get custom field contexts',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:custom-field-contextual-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a custom field context.\n\nIf `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createCustomFieldContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A context used to define the custom field options for bugs.',
              issueTypeIds: ['10010'],
              name: 'Bug fields context',
              projectIds: [],
            },
            schema: {
              $ref: '#/components/schemas/CreateCustomFieldContext',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":"10025","name":"Bug fields context","description":"A context used to define the custom field options for bugs.","projectIds":[],"issueTypeIds":["10010"]}',
              schema: {
                $ref: '#/components/schemas/CreateCustomFieldContext',
              },
            },
          },
          description: 'Returned if the custom field context is created.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the field, project, or issue type is not found.',
        },
        '409': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create custom field context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'write:field:jira', 'read:custom-field-contextual-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/defaultValue': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  \nThe returned object depends on type of the custom field:\n\n *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.\n *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.\n *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.\n *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.\n *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.\n *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.\n *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.\n *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.\n *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.\n *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.\n *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.\n *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).\n *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.\n *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.\n *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.\n *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.\n *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.\n *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.\n\nForge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:\n\n *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.\n *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.\n *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.\n *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.\n *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.\n *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.\n *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.\n *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.\n *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getDefaultValues',
      parameters: [
        {
          description: 'The ID of the custom field, for example `customfield\\_10000`.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The IDs of the contexts.',
          in: 'query',
          name: 'contextId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"contextId":"10100","optionId":"10001"},{"contextId":"10101","optionId":"10003"},{"contextId":"10103"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextDefaultValue',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get custom field contexts default values',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.default-value:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets default for contexts of a custom field. Default are defined using these objects:\n\n *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.\n *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.\n *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.\n *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.\n *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.\n *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.\n *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.\n *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.\n *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.\n *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.\n *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.\n *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).\n *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.\n *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.\n *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.\n *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.\n *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.\n *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.\n\nForge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:\n\n *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.\n *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.\n *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.\n *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.\n *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.\n *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.\n *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.\n *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.\n *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.\n\nOnly one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setDefaultValues',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultValues: [
                {
                  contextId: '10100',
                  optionId: '10001',
                  type: 'option.single',
                },
                {
                  contextId: '10101',
                  optionId: '10003',
                  type: 'option.single',
                },
                {
                  contextId: '10103',
                  optionId: '10005',
                  type: 'option.single',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/CustomFieldContextDefaultValueUpdate',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["All default values in the request must have the same type."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, a context, an option, or a cascading option is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set custom field contexts default values',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field.default-value:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/issuetypemapping': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeMappingsForContexts',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.',
          in: 'query',
          name: 'contextId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"contextId":"10001","issueTypeId":"10010"},{"contextId":"10001","issueTypeId":"10011"},{"contextId":"10002","isAnyIssueType":true}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeToContextMapping',
              },
            },
          },
          description: 'Returned if operation is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue types for custom field context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/mapping': {
    post: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.\n\nIf there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.\n\nDuplicate project and issue type mappings cannot be provided in the request.\n\nThe order of the returned values is the same as provided in the request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getCustomFieldContextsForProjectsAndIssueTypes',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              mappings: [
                {
                  issueTypeId: '10000',
                  projectId: '10000',
                },
                {
                  issueTypeId: '10001',
                  projectId: '10000',
                },
                {
                  issueTypeId: '10002',
                  projectId: '10001',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/ProjectIssueTypeMappings',
            },
          },
        },
        description: 'The list of project and issue type mappings.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"projectId":"10000","issueTypeId":"10000","contextId":"10000"},{"projectId":"10000","issueTypeId":"10001","contextId":null},{"projectId":"10001","issueTypeId":"10002","contextId":"10003"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanContextForProjectAndIssueType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Duplicate project and issue type mappings cannot be provided."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These projects were not found: 10005."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, project, or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get custom field contexts for projects and issue types',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/projectmapping': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getProjectContextMapping',
      parameters: [
        {
          description: 'The ID of the custom field, for example `customfield\\_10000`.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.',
          in: 'query',
          name: 'contextId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"contextId":"10025","projectId":"10001"},{"contextId":"10026","isGlobalContext":true}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextProjectMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get project mappings for custom field context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteCustomFieldContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the context is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The contextId has to be provided."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field or the context is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete custom field context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateCustomFieldContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A context used to define the custom field options for bugs.',
              name: 'Bug fields context',
            },
            schema: {
              $ref: '#/components/schemas/CustomFieldContextUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the context is updated.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The contextId has to be provided."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field or the context is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update custom field context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype': {
    put: {
      deprecated: false,
      description:
        'Adds issue types to a custom field context, appending the issue types to the issue types list.\n\nA custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.\n\nIf any of the issue types exists in the custom field context, the operation fails and no issue types are added.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addIssueTypesToContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10001', '10005', '10006'],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["These issue types are already associated with the context: 10001."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, context, or one or more issue types are not found.',
        },
        '409': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add issue types to context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove': {
    post: {
      deprecated: false,
      description:
        'Removes issue types from a custom field context.\n\nA custom field context without any issue types applies to all issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeIssueTypesFromContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10001', '10005', '10006'],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["These issue types are not associated with the context: 10002."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, context, or one or more issue types are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove issue types from context',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/option': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getOptionsForContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the option.',
          in: 'query',
          name: 'optionId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'Whether only options are returned.',
          in: 'query',
          name: 'onlyOptions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"id":"10001","value":"New York"},{"id":"10002","value":"Boston","disabled":true},{"id":"10004","value":"Denver"},{"id":"10003","value":"Brooklyn","optionId":"10001"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanCustomFieldContextOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: "Returned if the custom field is not found or the context doesn't match the custom field.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get custom field options (context)',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.\n\nThe maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createCustomFieldOption',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              options: [
                {
                  disabled: false,
                  value: 'Scranton',
                },
                {
                  disabled: true,
                  optionId: '10000',
                  value: 'Manhattan',
                },
                {
                  disabled: false,
                  value: 'The Electric City',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/BulkCustomFieldOptionCreateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"options":[{"disabled":false,"id":"10001","value":"Scranton"},{"disabled":true,"id":"10002","optionId":"10000","value":"Manhattan"},{"disabled":false,"id":"10003","value":"The Electric City"}]}',
              schema: {
                $ref: '#/components/schemas/CustomFieldCreatedContextOptionsList',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: "Returned if the custom field is not found or the context doesn't match the custom field.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create custom field options (context)',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira', 'write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Updates the options of a custom field.\n\nIf any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'updateCustomFieldOption',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              options: [
                {
                  disabled: false,
                  id: '10001',
                  value: 'Scranton',
                },
                {
                  disabled: true,
                  id: '10002',
                  value: 'Manhattan',
                },
                {
                  disabled: false,
                  id: '10003',
                  value: 'The Electric City',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/BulkCustomFieldOptionUpdateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"options":[{"disabled":false,"id":"10001","value":"Scranton"},{"disabled":true,"id":"10002","value":"Manhattan"},{"disabled":false,"id":"10003","value":"The Electric City"}]}',
              schema: {
                $ref: '#/components/schemas/CustomFieldUpdatedContextOptionsList',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the field, context, or one or more options is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update custom field options (context)',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira', 'write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/move': {
    put: {
      deprecated: false,
      description:
        'Changes the order of custom field options or cascading options in a context.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'reorderCustomFieldOptions',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              customFieldOptionIds: ['10001', '10002'],
              position: 'First',
            },
            schema: {
              $ref: '#/components/schemas/OrderOfCustomFieldOptions',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if options are reordered.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                "{\"errorMessages\":[\"'after' and 'position' were provided. Only 'after' or 'position' can be specified.\"],\"errors\":{}}",
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the field, the context, or one or more of the options is not found..',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Reorder custom field options (context)',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a custom field option.\n\nOptions with cascading options cannot be deleted without deleting the cascading options first.\n\nThis operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteCustomFieldOption',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context from which an option should be deleted.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the option to delete.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the option is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field doesn\'t support options."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage custom field options."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The custom field was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the field, the context, or the option is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete custom field options (context)',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue': {
    delete: {
      deprecated: false,
      description:
        'Replaces the options of a custom field.\n\nNote that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'replaceCustomFieldOption',
      parameters: [
        {
          description: 'The ID of the option that will replace the currently selected option.',
          in: 'query',
          name: 'replaceWith',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'A JQL query that specifies the issues to be updated. For example, *project=10000*.',
          in: 'query',
          name: 'jql',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the option to be deselected.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              example:
                '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Remove option 1 from issues matched by \'*\', and replace with option 3","status":"COMPLETE","result":{"errors":{"errorMessages":["Option 2 cannot be set on issue MKY-5 as it is not in the correct scope"],"errors":{},"httpStatusCode":{"empty":false,"present":true}},"modifiedIssues":[10001,10010],"unmodifiedIssues":[10005]},"elapsedRuntime":42}',
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult',
              },
            },
          },
          description: 'Returned if the long-running task to deselect the option is started.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Connect and Forge app users with Administer Jira global permission can override screen security."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if the field is not found or does not support options, or the options to be replaced are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Replace custom field options',
      tags: ['Issue custom field options'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira', 'write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/project': {
    put: {
      deprecated: false,
      description:
        'Assigns a custom field context to projects.\n\nIf any project in the request is assigned to any context of the custom field, the operation fails.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'assignProjectsToCustomFieldContext',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10001', '10005', '10006'],
            },
            schema: {
              $ref: '#/components/schemas/ProjectIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The projectIds must not contain duplicates."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, context, or project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign custom field context to projects',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/context/{contextId}/project/remove': {
    post: {
      deprecated: false,
      description:
        'Removes a custom field context from projects.\n\nA custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.\n\nIf any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeCustomFieldContextFromProjects',
      parameters: [
        {
          description: 'The ID of the custom field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the context.',
          in: 'path',
          name: 'contextId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10001', '10005', '10006'],
            },
            schema: {
              $ref: '#/components/schemas/ProjectIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the custom field context is removed from the projects.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The projectIds must not contain duplicates."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access custom field contexts."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The context was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the custom field, context, or one or more projects are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove custom field context from projects',
      tags: ['Issue custom field contexts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/contexts': {
    get: {
      deprecated: true,
      description:
        'Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getContextsForFieldDeprecated',
      parameters: [
        {
          description: 'The ID of the field to return contexts for.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 20,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":10001,"name":"Default Context"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanContext',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Get contexts for a field',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldId}/screens': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of the screens a field is used in.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getScreensForField',
      parameters: [
        {
          description: 'The ID of the field to return screens for.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":10001,"name":"Default Screen","description":"Provides for the update of all system fields.","tab":{"id":10000,"name":"Fields Tab"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanScreenWithTab',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Get screens for a field',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:screen-tab:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldKey}/option': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'getAllIssueFieldOptions',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the field is not found or does not support options.',
        },
        '403': {
          description:
            'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all issue field options',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates an option for a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\nEach field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'createIssueFieldOption',
      parameters: [
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              config: {
                attributes: [],
                scope: {
                  global: {},
                  projects: [],
                  projects2: [
                    {
                      attributes: ['notSelectable'],
                      id: 1001,
                    },
                    {
                      attributes: ['notSelectable'],
                      id: 1002,
                    },
                  ],
                },
              },
              properties: {
                description: "The team's description",
                founded: '2016-06-06',
                leader: {
                  email: 'lname@example.com',
                  name: 'Leader Name',
                },
                members: 42,
              },
              value: 'Team 1',
            },
            schema: {
              $ref: '#/components/schemas/IssueFieldOptionCreateBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}',
              schema: {
                $ref: '#/components/schemas/IssueFieldOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the option is invalid.',
        },
        '403': {
          description:
            'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
        },
        '404': {
          description: 'Returned if the field is not found or does not support options.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create issue field option',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldKey}/option/suggestions/edit': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getSelectableIssueFieldOptions',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'Filters the results to options that are only available in the specified project.',
          in: 'query',
          name: 'projectId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the field is not found or does not support options.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get selectable issue field options',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldKey}/option/suggestions/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getVisibleIssueFieldOptions',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'Filters the results to options that are only available in the specified project.',
          in: 'query',
          name: 'projectId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","startAt":0,"total":10,"values":[{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueFieldOption',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the field is not found or does not support options.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get visible issue field options',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldKey}/option/{optionId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an option from a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'deleteIssueFieldOption',
      parameters: [
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the option to be deleted.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the field option is deleted.',
        },
        '403': {
          description:
            'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
        },
        '404': {
          description: 'Returned if the field or option is not found.',
        },
        '409': {
          description: 'Returned if the option is selected for the field in any issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue field option',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns an option from a select list issue field.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'getIssueFieldOption',
      parameters: [
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the option to be returned.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}',
              schema: {
                $ref: '#/components/schemas/IssueFieldOption',
              },
            },
          },
          description: 'Returned if the requested option is returned.',
        },
        '400': {
          description: 'Returned if the field is not found or does not support options.',
        },
        '403': {
          description:
            'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
        },
        '404': {
          description: 'Returned if the option is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue field option',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'updateIssueFieldOption',
      parameters: [
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the option to be updated.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              config: {
                attributes: [],
                scope: {
                  global: {},
                  projects: [],
                  projects2: [
                    {
                      attributes: ['notSelectable'],
                      id: 1001,
                    },
                    {
                      attributes: ['notSelectable'],
                      id: 1002,
                    },
                  ],
                },
              },
              id: 1,
              properties: {
                description: "The team's description",
                founded: '2016-06-06',
                leader: {
                  email: 'lname@example.com',
                  name: 'Leader Name',
                },
                members: 42,
              },
              value: 'Team 1',
            },
            schema: {
              $ref: '#/components/schemas/IssueFieldOption',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The team\'s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}',
              schema: {
                $ref: '#/components/schemas/IssueFieldOption',
              },
            },
          },
          description: 'Returned if the option is updated or created.',
        },
        '400': {
          description:
            'Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter.',
        },
        '403': {
          description:
            'Returned if the request is not authenticated as a Jira administrator or the app that provided the field.',
        },
        '404': {
          description: 'Returned if field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue field option',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{fieldKey}/option/{optionId}/issue': {
    delete: {
      deprecated: false,
      description:
        'Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.\n\nConnect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.\n\nThis is an [asynchronous operation](#async). The response object contains a link to the long-running task.\n\nNote that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.',
      operationId: 'replaceIssueFieldOption',
      parameters: [
        {
          description: 'The ID of the option that will replace the currently selected option.',
          in: 'query',
          name: 'replaceWith',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'A JQL query that specifies the issues to be updated. For example, *project=10000*.',
          in: 'query',
          name: 'jql',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.',
          in: 'query',
          name: 'overrideScreenSecurity',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app\'s plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`',
          in: 'path',
          name: 'fieldKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the option to be deselected.',
          in: 'path',
          name: 'optionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              example:
                '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Remove option 1 from issues matched by \'*\', and replace with option 3","status":"COMPLETE","result":{"errors":{"errorMessages":["Option 2 cannot be set on issue MKY-5 as it is not in the correct scope"],"errors":{},"httpStatusCode":{"empty":false,"present":true}},"modifiedIssues":[10001,10010],"unmodifiedIssues":[10005]},"elapsedRuntime":42}',
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult',
              },
            },
          },
          description: 'Returned if the long-running task to deselect the option is started.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Connect and Forge app users with Administer Jira global permission can override screen security."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if the field is not found or does not support options, or the options to be replaced are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Replace issue field option',
      tags: ['Issue custom field options (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field.option:jira', 'delete:field.option:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteCustomField',
      parameters: [
        {
          description: 'The ID of a custom field.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if any of these are true:\n\n *  The custom field is locked.\n *  The custom field is used in a issue security scheme or a permission scheme.\n *  The custom field ID format is incorrect.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the custom field is not found.',
        },
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a task to delete the custom field is running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete custom field',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{id}/restore': {
    post: {
      deprecated: false,
      description:
        'Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'restoreCustomField',
      parameters: [
        {
          description: 'The ID of a custom field.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Restore custom field from trash',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/field/{id}/trash': {
    post: {
      deprecated: false,
      description:
        'Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'trashCustomField',
      parameters: [
        {
          description: 'The ID of a custom field.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the custom field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Move custom field to trash',
      tags: ['Issue fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfiguration': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:\n\n *  a list of field configuration item IDs.\n *  whether the field configuration is a default.\n *  whether the field configuration name or description contains a query string.\n\nOnly field configurations used in company-managed (classic) projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllFieldConfigurations',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'If *true* returns default field configurations only.',
          in: 'query',
          name: 'isDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'The query string used to match against field configuration names and descriptions.',
          in: 'query',
          name: 'query',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"id":10000,"name":"Default Field Configuration","description":"The default field configuration description","isDefault":true},{"id":10001,"name":"My Field Configuration","description":"My field configuration description"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all field configurations',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.\n\nThis operation can only create configurations for use in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createFieldConfiguration',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My field configuration description',
              name: 'My Field Configuration',
            },
            schema: {
              $ref: '#/components/schemas/FieldConfigurationDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"My field configuration description","id":10001,"name":"My Field Configuration"}',
              schema: {
                $ref: '#/components/schemas/FieldConfiguration',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create field configuration',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration:jira', 'write:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfiguration/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a field configuration.\n\nThis operation can only delete configurations used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteFieldConfiguration',
      parameters: [
        {
          description: 'The ID of the field configuration.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field configuration is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete field configuration',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a field configuration. The name and the description provided in the request override the existing values.\n\nThis operation can only update configurations used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateFieldConfiguration',
      parameters: [
        {
          description: 'The ID of the field configuration.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A brand new description',
              name: 'My Modified Field Configuration',
            },
            schema: {
              $ref: '#/components/schemas/FieldConfigurationDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field configuration is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update field configuration',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfiguration/{id}/fields': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all fields for a configuration.\n\nOnly the fields from configurations used in company-managed (classic) projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getFieldConfigurationItems',
      parameters: [
        {
          description: 'The ID of the field configuration.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"description":"For example operating system, software platform and/or hardware specifications (include as appropriate for the issue).","id":"environment","isHidden":false,"isRequired":false},{"id":"description","isHidden":false,"isRequired":false}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationItem',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field configuration is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get field configuration items',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.\n\nThis operation can only update field configurations used in company-managed (classic) projects.\n\nThe operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateFieldConfigurationItems',
      parameters: [
        {
          description: 'The ID of the field configuration.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldConfigurationItems: [
                {
                  description: 'The new description of this item.',
                  id: 'customfield_10012',
                  isHidden: false,
                },
                {
                  id: 'customfield_10011',
                  isRequired: true,
                },
                {
                  description: 'Another new description.',
                  id: 'customfield_10010',
                  isHidden: false,
                  isRequired: false,
                  renderer: 'wiki-renderer',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/FieldConfigurationItemsDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field configuration is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update field configuration items',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of field configuration schemes.\n\nOnly field configuration schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllFieldConfigurationSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":10,"startAt":0,"total":3,"values":[{"id":"10000","name":"Field Configuration Scheme for Bugs","description":"This field configuration scheme is for bugs only."},{"id":"10001","name":"Field Configuration Scheme for software related projects","description":"We can use this one for software projects."},{"id":"10002","name":"Field Configuration Scheme for Epics","description":"Use this one for Epic issue type."}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all field configuration schemes',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a field configuration scheme.\n\nThis operation can only create field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createFieldConfigurationScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'We can use this one for software projects.',
              name: 'Field Configuration Scheme for software related projects',
            },
            schema: {
              $ref: '#/components/schemas/UpdateFieldConfigurationSchemeDetails',
            },
          },
        },
        description: 'The details of the field configuration scheme.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"description":"We can use this one for software projects.","id":"10002","name":"Field Configuration Scheme for software related projects"}',
              schema: {
                $ref: '#/components/schemas/FieldConfigurationScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A field configuration scheme is using this name."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create field configuration scheme',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration-scheme:jira', 'read:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme/mapping': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of field configuration issue type items.\n\nOnly items used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getFieldConfigurationSchemeMappings',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.',
          in: 'query',
          name: 'fieldConfigurationSchemeId',
          schema: {
            items: {
              example: 10020,
              format: 'int64',
              type: 'integer',
            },
            maxItems: 50,
            minItems: 1,
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":5,"values":[{"fieldConfigurationSchemeId":"10020","issueTypeId":"10000","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10020","issueTypeId":"10001","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10021","issueTypeId":"10002","fieldConfigurationId":"10000"},{"fieldConfigurationSchemeId":"10022","issueTypeId":"default","fieldConfigurationId":"10011"},{"fieldConfigurationSchemeId":"10023","issueTypeId":"default","fieldConfigurationId":"10000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationIssueTypeItem',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if no field configuration schemes are found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get field configuration issue type items',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme/project': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.\n\nThe list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.\n\nOnly field configuration schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getFieldConfigurationSchemeProjectMapping',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          required: true,
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":5,"values":[{"projectIds":["10","11"]},{"fieldConfigurationScheme":{"id":"10002","name":"Field Configuration Scheme for software related projects","description":"We can use this one for software projects."},"projectIds":["12","13","14"]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFieldConfigurationSchemeProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get field configuration schemes for projects',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.\n\nField configuration schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'assignFieldConfigurationSchemeToProject',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldConfigurationSchemeId: '10000',
              projectId: '10000',
            },
            schema: {
              $ref: '#/components/schemas/FieldConfigurationSchemeProjectAssociation',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only classic projects can have field configuration schemes assigned."],"errors":{}}',
            },
          },
          description: 'Returned if the project is not a classic project.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The project was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the project is missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign field configuration scheme to project',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a field configuration scheme.\n\nThis operation can only delete field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteFieldConfigurationScheme',
      parameters: [
        {
          description: 'The ID of the field configuration scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field configuration scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete field configuration scheme',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a field configuration scheme.\n\nThis operation can only update field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateFieldConfigurationScheme',
      parameters: [
        {
          description: 'The ID of the field configuration scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'We can use this one for software projects.',
              name: 'Field Configuration Scheme for software related projects',
            },
            schema: {
              $ref: '#/components/schemas/UpdateFieldConfigurationSchemeDetails',
            },
          },
        },
        description: 'The details of the field configuration scheme.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A field configuration scheme is using this name."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The field configuration scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the field configuration scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update field configuration scheme',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme/{id}/mapping': {
    put: {
      deprecated: false,
      description:
        'Assigns issue types to field configurations on field configuration scheme.\n\nThis operation can only modify field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setFieldConfigurationSchemeMapping',
      parameters: [
        {
          description: 'The ID of the field configuration scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              mappings: [
                {
                  fieldConfigurationId: '10000',
                  issueTypeId: 'default',
                },
                {
                  fieldConfigurationId: '10002',
                  issueTypeId: '10001',
                },
                {
                  fieldConfigurationId: '10001',
                  issueTypeId: '10002',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/AssociateFieldConfigurationsWithIssueTypesRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if the field configuration scheme, the field configuration, or the issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign issue types to field configurations',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration-scheme:jira', 'read:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete': {
    post: {
      deprecated: false,
      description:
        'Removes issue types from the field configuration scheme.\n\nThis operation can only modify field configuration schemes used in company-managed (classic) projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeIssueTypesFromGlobalFieldConfigurationScheme',
      parameters: [
        {
          description: 'The ID of the field configuration scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10001', '10002'],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeIdsToRemove',
            },
          },
        },
        description: 'The issue type IDs to remove.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issueTypeIds must not contain duplicates."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access field configurations."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The field configuration scheme was not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the field configuration scheme or the issue types are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove issue types from field configuration scheme',
      tags: ['Issue field configurations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:field-configuration-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter': {
    post: {
      deprecated: false,
      description:
        'Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'createFilter',
      parameters: [
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideSharePermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Lists all open bugs',
              jql: 'type = Bug and resolution is empty',
              name: 'All Open Bugs',
            },
            schema: {
              $ref: '#/components/schemas/Filter',
            },
          },
        },
        description: 'The filter to create.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"approximateLastUsed":null,"description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}',
              schema: {
                $ref: '#/components/schemas/Filter',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create filter',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:filter:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/defaultShareScope': {
    get: {
      deprecated: false,
      description:
        'Returns the default sharing settings for new filters and dashboards for a user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getDefaultShareScope',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"scope":"GLOBAL"}',
              schema: {
                $ref: '#/components/schemas/DefaultShareScope',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get default share scope',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:filter.default-share-scope:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the default sharing for new filters and dashboards for a user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'setDefaultShareScope',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: 'GLOBAL',
            },
            schema: {
              $ref: '#/components/schemas/DefaultShareScope',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"scope":"GLOBAL"}',
              schema: {
                $ref: '#/components/schemas/DefaultShareScope',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if an invalid scope is set.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set default share scope',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:filter.default-share-scope:jira', 'read:filter.default-share-scope:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/favourite': {
    get: {
      deprecated: false,
      description:
        'Returns the visible favorite filters of the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.\n\nFor example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.',
      operationId: 'getFavouriteFilters',
      parameters: [
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","favourite":true,"favouritedCount":0,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Filter',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get favorite filters',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/my': {
    get: {
      deprecated: false,
      description:
        "Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.\n\nFor example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.",
      operationId: 'getMyFilters',
      parameters: [
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description: "Include the user's favorite filters in the response.",
          in: 'query',
          name: 'includeFavourites',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","favourite":true,"favouritedCount":0,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Filter',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get my filters',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of filters. Use this operation to get:\n\n *  specific filters, by defining `id` only.\n *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.',
      operationId: 'getFiltersPaginated',
      parameters: [
        {
          description: 'String used to perform a case-insensitive partial match with `name`.',
          in: 'query',
          name: 'filterName',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            minLength: 0,
            type: 'string',
          },
        },
        {
          description:
            'This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.',
          in: 'query',
          name: 'owner',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.',
          in: 'query',
          name: 'projectId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter name.\n *  `owner` Sorts by the ID of the filter owner.\n *  `is_shared` Sorts by whether the filter is shared.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: 'name',
            enum: [
              'description',
              '-description',
              '+description',
              'favourite_count',
              '-favourite_count',
              '+favourite_count',
              'id',
              '-id',
              '+id',
              'is_favourite',
              '-is_favourite',
              '+is_favourite',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
              'is_shared',
              '-is_shared',
              '+is_shared',
            ],
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the filter.\n *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.\n *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.\n *  `jql` Returns the JQL query that the filter uses.\n *  `owner` Returns the owner of the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL query.\n *  `sharePermissions` Returns the share permissions defined for the filter.\n *  `editPermissions` Returns the edit permissions defined for the filter.\n *  `isWritable` Returns whether the current user has permission to edit the filter.\n *  `approximateLastUsed` \\[Experimental\\] Returns the approximate date and time when the filter was last evaluated.\n *  `subscriptions` Returns the users that are subscribed to the filter.\n *  `viewUrl` Returns a URL to view the filter.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideSharePermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/filter/search?accountId=&maxResults=50&filterName=&orderBy=name&startAt=0&expand=description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,subscriptions,approximateLastUsed","startAt":0,"total":2,"values":[{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","editPermissions":[],"expand":"description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,approximateLastUsed,subscriptions","favourite":false,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":[],"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"},{"approximateLastUsed":null,"description":"Issues assigned to me","editPermissions":[{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}],"expand":"description,owner,jql,searchUrl,viewUrl,favourite,favouritedCount,sharePermissions,editPermissions,isWritable,approximateLastUsed,subscriptions","favourite":true,"favouritedCount":123,"id":"10010","jql":"assignee = currentUser() and resolution is empty","name":"My issues","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"}],"subscriptions":[{"id":1,"user":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}}],"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanFilterDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  `owner` and `accountId` are provided.\n *  `expand` includes an invalid value.\n *  `orderBy` is invalid.\n *  `id` identifies more than 200 filter IDs.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for filters',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/{id}': {
    delete: {
      deprecated: false,
      description:
        'Delete a filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteFilter',
      parameters: [
        {
          description: 'The ID of the filter to delete.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the filter is not found.',
        },
        '401': {
          description: 'Returned if the user does not have permission to delete the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete filter',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:filter:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a filter.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, the filter is only returned where it is:\n\n *  owned by the user.\n *  shared with a group that the user is a member of.\n *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared with a public project.\n *  shared with the public.',
      operationId: 'getFilter',
      parameters: [
        {
          description: 'The ID of the filter to return.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideSharePermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}',
              schema: {
                $ref: '#/components/schemas/Filter',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the filter is not found or the user does not have permission to view it.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get filter',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.",
      operationId: 'updateFilter',
      parameters: [
        {
          description: 'The ID of the filter to update.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideSharePermissions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Lists all open bugs',
              jql: 'type = Bug and resolution is empty',
              name: 'All Open Bugs',
            },
            schema: {
              $ref: '#/components/schemas/Filter',
            },
          },
        },
        description: 'The filter to update.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}',
              schema: {
                $ref: '#/components/schemas/Filter',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update filter',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:filter:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/{id}/columns': {
    delete: {
      deprecated: false,
      description:
        "Reset the user's column configuration for the filter to the default.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.",
      operationId: 'resetColumns',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Reset columns',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['delete:filter.column:jira'],
          state: 'Beta',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, column details are only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.",
      operationId: 'getColumns',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the user does not have permission to view the filter.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if a column configuration is not set for the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get columns',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:filter.column:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.\n\nThe parameters for this resource are expressed as HTML form data. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.',
      operationId: 'setColumns',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody',
            },
          },
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody',
            },
          },
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody',
            },
          },
        },
        description:
          'The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  a non-navigable field is set as a column.\n *  the user does not have permission to view the filter.',
        },
        '403': {
          description: 'Returned if the requesting user is not an owner of the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set columns',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:filter.column:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/{id}/favourite': {
    delete: {
      deprecated: false,
      description:
        "Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.\n\n**[Permissions](#permissions) required:** Permission to access Jira.",
      operationId: 'deleteFavouriteForFilter',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}',
              schema: {
                $ref: '#/components/schemas/Filter',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Remove filter as favorite',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:filter:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Add a filter as a favorite for the user.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.',
      operationId: 'setFavouriteForFilter',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"approximateLastUsed":"2023-03-01T13:15:00.000+0000","description":"Lists all open bugs","favourite":true,"favouritedCount":0,"id":"10000","jql":"type = Bug and resolution is empty","name":"All Open Bugs","owner":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","sharePermissions":[],"subscriptions":{"end-index":0,"items":[],"max-results":0,"size":0,"start-index":0},"viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000"}',
              schema: {
                $ref: '#/components/schemas/Filter',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to favorite the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add filter as favorite',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:filter:jira',
            'read:jql:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/{id}/owner': {
    put: {
      deprecated: false,
      description:
        'Changes the owner of the filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'changeFilterOwner',
      parameters: [
        {
          description: 'The ID of the filter to update.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '0000-0000-0000-0000',
            },
            schema: {
              $ref: '#/components/schemas/ChangeFilterOwner',
            },
          },
        },
        description: 'The account ID of the new owner of the filter.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned when:\n\n *  The new owner of the filter owns a filter with the same name.\n *  An attempt is made to change owner of the default filter.',
        },
        '403': {
          description:
            'Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission.',
        },
        '404': {
          description: 'Returned if the filter or the new owner of the filter is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Change filter owner',
      tags: ['Filters'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:filter:jira', 'write:filter:jira'],
          state: 'Beta',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/filter/{id}/permission': {
    get: {
      deprecated: false,
      description:
        'Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, share permissions are only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.',
      operationId: 'getSharePermissions',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/SharePermission',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get share permissions',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.\n\nBe aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).\n\n**[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.',
      operationId: 'addSharePermission',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              groupname: 'jira-administrators',
              rights: 1,
              type: 'group',
            },
            schema: {
              $ref: '#/components/schemas/SharePermissionInputBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '[{"id":10000,"type":"global"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"type":"project"},{"id":10010,"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"type":"project"},{"group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":10010,"type":"group"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/SharePermission',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.\n *  the user does not own the filter.\n *  the user does not have the required permissions.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the user does not have permission to view the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add share permission',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:filter:jira',
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/filter/{id}/permission/{permissionId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a share permission from a filter.\n\n**[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.',
      operationId: 'deleteSharePermission',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the share permission.',
          in: 'path',
          name: 'permissionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if:\n\n *  the filter is not found.\n *  the user does not own the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete share permission',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:filter:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None, however, a share permission is only returned for:\n\n *  filters owned by the user.\n *  filters shared with a group that the user is a member of.\n *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  filters shared with a public project.\n *  filters shared with the public.',
      operationId: 'getSharePermission',
      parameters: [
        {
          description: 'The ID of the filter.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the share permission.',
          in: 'path',
          name: 'permissionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"type":"global"}',
              schema: {
                $ref: '#/components/schemas/SharePermission',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the filter is not found.\n *  the permission is not found.\n *  the user does not have permission to view the filter.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get share permission',
      tags: ['Filter sharing'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:filter:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type-hierarchy:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/group': {
    delete: {
      deprecated: false,
      description:
        'Deletes a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).',
      operationId: 'removeGroup',
      parameters: [
        {
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupname` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            "As a group's name can change, use of `swapGroupId` is recommended to identify a group.  \nThe group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.",
          in: 'query',
          name: 'swapGroup',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.',
          in: 'query',
          name: 'swapGroupId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the group name is not specified.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the group is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:group:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: true,
      description:
        'This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).\n\nReturns all users in a group.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getGroup',
      parameters: [
        {
          description:
            "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'List of fields to expand.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Group',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the group name is not specified.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the calling user does not have the Administer Jira global permission.',
        },
        '404': {
          description: 'Returned if the group is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).',
      operationId: 'createGroup',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'power-users',
            },
            schema: {
              $ref: '#/components/schemas/AddGroupBean',
            },
          },
        },
        description: 'The name of the group.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"expand":"users","groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"power-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625","users":{"end-index":0,"items":[{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}],"max-results":50,"size":1,"start-index":0}}',
              schema: {
                $ref: '#/components/schemas/Group',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if group name is not specified or the group name is in use.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira', 'read:user:jira', 'write:group:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/group/bulk': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of groups.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'bulkGetGroups',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.',
          in: 'query',
          name: 'groupId',
          schema: {
            example: '3571b9a7-348f-414a-9087-8e1ea03a7df8',
            items: {
              default: '',
              example: '3571b9a7-348f-414a-9087-8e1ea03a7df8',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.',
          in: 'query',
          name: 'groupName',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: "The access level of a group. Valid values: 'site-admin', 'admin', 'user'.",
          in: 'query',
          name: 'accessType',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.",
          in: 'query',
          name: 'applicationKey',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":10,"startAt":0,"total":2,"values":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","name":"juvenal-bot"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanGroupDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Browse users and groups permission is required to view groups."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '500': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Couldn\'t retrieve groups with the site-admin accessType."],"errors":{}}',
            },
          },
          description: "Returned if the group with the given access level can't be retrieved.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Bulk get groups',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/group/member': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all users in a group.\n\nNote that users are ordered by username, however the username is not returned in the results due to privacy reasons.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getUsersFromGroup',
      parameters: [
        {
          description:
            "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'Include inactive users.',
          in: 'query',
          name: 'includeInactiveUsers',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/group/member?groupId=276f955c-63d7-42c8-9520-92d01dca0625&includeInactiveUsers=false&startAt=4&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/group/member?groupId=276f955c-63d7-42c8-9520-92d01dca0625&includeInactiveUsers=false&startAt=2&maxResults=2","startAt":3,"total":5,"values":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"avatarUrls":{},"displayName":"Mia","emailAddress":"mia@example.com","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},{"accountId":"5b10a0effa615349cb016cd8","accountType":"atlassian","active":false,"avatarUrls":{},"displayName":"Will","emailAddress":"will@example.com","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a0effa615349cb016cd8","timeZone":"Australia/Sydney"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanUserDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the group name is not specified.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the calling user does not have the Administer Jira global permission.',
        },
        '404': {
          description: 'Returned if the group is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get users from group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/group/user': {
    delete: {
      deprecated: false,
      description:
        'Removes a user from a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).',
      operationId: 'removeUserFromGroup',
      parameters: [
        {
          description:
            "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if:\n\n *  `groupName` is missing.\n *  `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the group or user are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove user from group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:group:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a user to a group.\n\n**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).',
      operationId: 'addUserToGroup',
      parameters: [
        {
          description:
            "As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter.",
          in: 'query',
          name: 'groupname',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the group. This parameter cannot be used with the `groupName` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10ac8d82e05b22cc7d4ef5',
            },
            schema: {
              $ref: '#/components/schemas/UpdateUserToGroupBean',
            },
          },
        },
        description: 'The user to add to the group.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Group',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if:\n\n *  `groupname` is not provided.\n *  `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing from the request.',
        },
        '403': {
          description: 'Returned if the calling user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the group or user are not found.',
        },
        '429': {
          description: 'Returned if rate limiting is being enforced.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add user to group',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:group:jira', 'read:avatar:jira', 'read:group:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/groups/picker': {
    get: {
      deprecated: false,
      description:
        'Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.\n\nThe primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.\n\nThe list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.\n\n*Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.',
      operationId: 'findGroups',
      parameters: [
        {
          description:
            'This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).',
          in: 'query',
          name: 'accountId',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The string to find in group names.',
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
        },
        {
          description:
            "As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  \nA group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.",
          in: 'query',
          name: 'exclude',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.',
          in: 'query',
          name: 'excludeId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.',
          in: 'query',
          name: 'maxResults',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'Whether the search for groups should be case insensitive.',
          in: 'query',
          name: 'caseInsensitive',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'userName',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"groups":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","html":"<b>j</b>dog-developers","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","html":"<b>j</b>uvenal-bot","name":"juvenal-bot"}],"header":"Showing 20 of 25 matching groups","total":25}',
              schema: {
                $ref: '#/components/schemas/FoundGroups',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find groups',
      tags: ['Groups'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/groupuserpicker': {
    get: {
      deprecated: false,
      description:
        'Returns a list of users and groups matching a string. The string is used:\n\n *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.\n *  for groups, to find a case-sensitive match with group name.\n\nFor example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.\n\nOptionally, the search can be refined to:\n\n *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:\n    \n     *  projects.\n     *  issue types.\n    \n    If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.\n *  not return Connect app users and groups.\n *  return groups that have a case-insensitive match with the query.\n\nThe primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'findUsersAndGroups',
      parameters: [
        {
          description: 'The search string.',
          in: 'query',
          name: 'query',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return in each list.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'Whether the user avatar should be returned. If an invalid value is provided, the default value is used.',
          in: 'query',
          name: 'showAvatar',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'The custom field ID of the field this request is for.',
          in: 'query',
          name: 'fieldId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.',
          in: 'query',
          name: 'issueTypeId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'The size of the avatar to return. If an invalid value is provided, the default value is used.',
          in: 'query',
          name: 'avatarSize',
          schema: {
            default: 'xsmall',
            enum: [
              'xsmall',
              'xsmall@2x',
              'xsmall@3x',
              'small',
              'small@2x',
              'small@3x',
              'medium',
              'medium@2x',
              'medium@3x',
              'large',
              'large@2x',
              'large@3x',
              'xlarge',
              'xlarge@2x',
              'xlarge@3x',
              'xxlarge',
              'xxlarge@2x',
              'xxlarge@3x',
              'xxxlarge',
              'xxxlarge@2x',
              'xxxlarge@3x',
            ],
            type: 'string',
          },
        },
        {
          description: 'Whether the search for groups should be case insensitive.',
          in: 'query',
          name: 'caseInsensitive',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.',
          in: 'query',
          name: 'excludeConnectAddons',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"groups":{"groups":[{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","html":"<b>j</b>dog-developers","name":"jdog-developers"},{"groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487","html":"<b>j</b>uvenal-bot","name":"juvenal-bot"}],"header":"Showing 20 of 25 matching groups","total":25},"users":{"header":"Showing 20 of 25 matching groups","total":25,"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","displayName":"Mia Krystof","html":"<strong>Mi</strong>a Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","key":"mia","name":"mia"}]}}',
              schema: {
                $ref: '#/components/schemas/FoundUsersAndGroups',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the query parameter is not provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Find users and groups',
      tags: ['Group and user picker'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/instance/license': {
    get: {
      deprecated: false,
      description:
        'Returns licensing information about the Jira instance.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getLicense',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"applications":[{"id":"jira-core","plan":"PAID"},{"id":"jira-product-discovery","plan":"FREE"},{"id":"jira-servicedesk","plan":"FREE"},{"id":"jira-software","plan":"PAID"}]}',
              schema: {
                $ref: '#/components/schemas/License',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get license',
      tags: ['License metrics'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:license:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue': {
    post: {
      deprecated: false,
      description:
        "Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.\n\nThe content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nCreating a subtask differs from creating an issue as follows:\n\n *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).\n *  `parent` must contain the ID or key of the parent issue.\n\nIn a next-gen project any issue may be made a child providing that the parent and child are members of the same project.\n\n**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.",
      operationId: 'createIssue',
      parameters: [
        {
          description:
            "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.",
          in: 'query',
          name: 'updateHistory',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                assignee: {
                  id: '5b109f2e9729b51b54dc274d',
                },
                components: [
                  {
                    id: '10000',
                  },
                ],
                customfield_10000: '09/Jun/19',
                customfield_20000: '06/Jul/19 3:25 PM',
                customfield_30000: ['10000', '10002'],
                customfield_40000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Occurs on all orders',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                customfield_50000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Could impact day-to-day work.',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                customfield_60000: 'jira-software-users',
                customfield_70000: ['jira-administrators', 'jira-software-users'],
                customfield_80000: {
                  value: 'red',
                },
                description: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Order entry fails when selecting supplier.',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                duedate: '2019-05-11',
                environment: {
                  content: [
                    {
                      content: [
                        {
                          text: 'UAT',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                fixVersions: [
                  {
                    id: '10001',
                  },
                ],
                issuetype: {
                  id: '10000',
                },
                labels: ['bugfix', 'blitz_test'],
                parent: {
                  key: 'PROJ-123',
                },
                priority: {
                  id: '20000',
                },
                project: {
                  id: '10000',
                },
                reporter: {
                  id: '5b10a2844c20165700ede21g',
                },
                security: {
                  id: '10000',
                },
                summary: 'Main order flow broken',
                timetracking: {
                  originalEstimate: '10',
                  remainingEstimate: '5',
                },
                versions: [
                  {
                    id: '10000',
                  },
                ],
              },
              update: {},
            },
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}}',
              schema: {
                $ref: '#/components/schemas/CreatedIssue',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Field \'priority\' is required"],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the request:\n\n *  is missing required fields.\n *  contains invalid field values.\n *  contains fields that cannot be set for the issue type.\n *  is by a user who does not have the necessary permission.\n *  is to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  is invalid for any other reason.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a configuration problem prevents the creation of the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:issue:jira',
            'write:comment:jira',
            'write:comment.property:jira',
            'write:attachment:jira',
            'read:issue:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/archive': {
    post: {
      deprecated: false,
      description:
        "Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.\n\nYou can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.\n\n**Note that:**\n\n *  you can't archive subtasks directly, only through their parent issues\n *  you can only archive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n**Rate limiting:** Only a single request per jira instance can be active at any given time.\n\n  \n",
      operationId: 'archiveIssuesAsync',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = FOO AND updated < -2y',
            },
            schema: {
              $ref: '#/components/schemas/ArchiveIssueAsyncRequest',
            },
          },
        },
        description:
          'A JQL query specifying the issues to archive. Note that subtasks can only be archived through their parent issues.',
        required: true,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              example: '"https://your-domain.atlassian.net/rest/api/3/task/1010"',
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Returns the URL to check the status of the submitted request.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Invalid JQL. Bad request."],"errors":{}}',
            },
          },
          description: 'Returned if no issues were archived due to a bad request, for example an invalid JQL query.',
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Archiving issues is only available for premium editions of Jira."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.',
        },
        '412': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["An issue archival task is already running with ID 1010. To start a new one, cancel the task or wait for it to finish."],"errors":{}}',
            },
          },
          description: 'Returned if a request to archive issue(s) is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Archive issue(s) by JQL',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        "Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.\n\n**Note that:**\n\n *  you can't archive subtasks directly, only through their parent issues\n *  you can only archive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n  \n",
      operationId: 'archiveIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIdsOrKeys: ['PR-1', '1001', 'PROJECT-2'],
            },
            schema: {
              $ref: '#/components/schemas/IssueArchivalSyncRequest',
            },
          },
        },
        description: 'Contains a list of issue keys or IDs to be archived.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"errors":{"issueIsSubtask":{"count":3,"issueIdsOrKeys":["ST-1","ST-2","ST-3"],"message":"Issue is subtask."},"issuesInArchivedProjects":{"count":2,"issueIdsOrKeys":["AR-1","AR-2"],"message":"Issue exists in archived project."},"issuesInUnlicensedProjects":{"count":3,"issueIdsOrKeys":["UL-1","UL-2","UL-3"],"message":"Issues with these IDs are in unlicensed projects."},"issuesNotFound":{"count":3,"issueIdsOrKeys":["PR-1","PR-2","PR-3"],"message":"Issue not found."}},"numberOfIssuesUpdated":10}',
              schema: {
                $ref: '#/components/schemas/IssueArchivalSyncResponse',
              },
            },
          },
          description:
            'Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["No valid issue to archive or unarchive. Bad request."],"errors":{}}',
            },
          },
          description:
            "Returned if none of the issues in the request can be archived. Possible reasons:\n\n *  the issues weren't found\n *  the issues are subtasks\n *  the issues belong to unlicensed projects\n *  the issues belong to archived projects",
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were archived because the provided authentication credentials are either missing or invalid.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only admins can archive or unarchive issues. Access denied."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions.',
        },
        '412': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The number of issues to archive or unarchive exceeds the hard limit of 1000. Precondition failed."],"errors":{}}',
            },
          },
          description:
            'Returned if one or more issues were successfully archived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Archive issue(s) by issue ID/key',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue/bulk': {
    post: {
      deprecated: false,
      description:
        "Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.\n\nThe content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nCreating a subtask differs from creating an issue as follows:\n\n *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).\n *  `parent` the must contain the ID or key of the parent issue.\n\n**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.",
      operationId: 'createIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueUpdates: [
                {
                  fields: {
                    assignee: {
                      id: '5b109f2e9729b51b54dc274d',
                    },
                    components: [
                      {
                        id: '10000',
                      },
                    ],
                    customfield_10000: '09/Jun/19',
                    customfield_20000: '06/Jul/19 3:25 PM',
                    customfield_30000: ['10000', '10002'],
                    customfield_40000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Occurs on all orders',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    customfield_50000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Could impact day-to-day work.',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    customfield_60000: 'jira-software-users',
                    customfield_70000: ['jira-administrators', 'jira-software-users'],
                    customfield_80000: {
                      value: 'red',
                    },
                    description: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Order entry fails when selecting supplier.',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    duedate: '2011-03-11',
                    environment: {
                      content: [
                        {
                          content: [
                            {
                              text: 'UAT',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    fixVersions: [
                      {
                        id: '10001',
                      },
                    ],
                    issuetype: {
                      id: '10000',
                    },
                    labels: ['bugfix', 'blitz_test'],
                    priority: {
                      id: '20000',
                    },
                    project: {
                      id: '10000',
                    },
                    reporter: {
                      id: '5b10a2844c20165700ede21g',
                    },
                    security: {
                      id: '10000',
                    },
                    summary: 'Main order flow broken',
                    timetracking: {
                      originalEstimate: '10',
                      remainingEstimate: '5',
                    },
                    versions: [
                      {
                        id: '10000',
                      },
                    ],
                  },
                  update: {
                    worklog: [
                      {
                        add: {
                          started: '2019-07-05T11:05:00.000+0000',
                          timeSpent: '60m',
                        },
                      },
                    ],
                  },
                },
                {
                  fields: {
                    assignee: {
                      id: '5b109f2e9729b51b54dc274d',
                    },
                    components: [
                      {
                        id: '10000',
                      },
                    ],
                    customfield_10000: '09/Jun/19',
                    customfield_20000: '06/Jul/19 3:25 PM',
                    customfield_30000: ['10000', '10002'],
                    customfield_40000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Occurs on all orders',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    customfield_50000: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Could impact day-to-day work.',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    customfield_60000: 'jira-software-users',
                    customfield_70000: ['jira-administrators', 'jira-software-users'],
                    customfield_80000: {
                      value: 'red',
                    },
                    description: {
                      content: [
                        {
                          content: [
                            {
                              text: 'Order remains pending after approved.',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    duedate: '2019-04-16',
                    environment: {
                      content: [
                        {
                          content: [
                            {
                              text: 'UAT',
                              type: 'text',
                            },
                          ],
                          type: 'paragraph',
                        },
                      ],
                      type: 'doc',
                      version: 1,
                    },
                    fixVersions: [
                      {
                        id: '10001',
                      },
                    ],
                    issuetype: {
                      id: '10000',
                    },
                    labels: ['new_release'],
                    priority: {
                      id: '20000',
                    },
                    project: {
                      id: '1000',
                    },
                    reporter: {
                      id: '5b10a2844c20165700ede21g',
                    },
                    security: {
                      id: '10000',
                    },
                    summary: 'Order stuck in pending',
                    timetracking: {
                      originalEstimate: '15',
                      remainingEstimate: '5',
                    },
                    versions: [
                      {
                        id: '10000',
                      },
                    ],
                  },
                  update: {},
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/IssuesUpdateBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"issues":[{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}},{"id":"10001","key":"ED-25","self":"https://your-domain.atlassian.net/rest/api/3/issue/10001"}],"errors":[]}',
              schema: {
                $ref: '#/components/schemas/CreatedIssues',
              },
            },
          },
          description:
            'Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:\n\n *  is missing required fields.\n *  contains invalid field values.\n *  contains fields that cannot be set for the issue type.\n *  is by a user who does not have the necessary permission.\n *  is to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  is invalid for any other reason.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"issues":[],"errors":[{"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The issue type selected is invalid.","project":"Sub-tasks must be created in the same project as the parent."}},"failedElementNumber":0,"status":400},{"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The issue type selected is invalid.","project":"Sub-tasks must be created in the same project as the parent."}},"failedElementNumber":1,"status":400}]}',
              schema: {
                $ref: '#/components/schemas/CreatedIssues',
              },
            },
          },
          description:
            'Returned if all requests are invalid. Requests may be unsuccessful when they:\n\n *  are missing required fields.\n *  contain invalid field values.\n *  contain fields that cannot be set for the issue type.\n *  are by a user who does not have the necessary permission.\n *  are to create a subtype in a project different that of the parent issue.\n *  is for a subtask when the option to create subtasks is disabled.\n *  are invalid for any other reason.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Bulk create issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:issue:jira',
            'write:comment:jira',
            'write:comment.property:jira',
            'write:attachment:jira',
            'read:issue:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/bulkfetch': {
    post: {
      deprecated: false,
      description:
        "Returns the details for a set of requested issues. You can request up to 100 issues.\n\nEach issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned.\n\nIssues will be returned in ascending `id` order. If there are errors, Jira will return a list of issues which couldn't be fetched along with error messages.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'bulkFetchIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              expand: ['names'],
              fields: ['summary', 'project', 'assignee'],
              fieldsByKeys: false,
              issueIdsOrKeys: ['EX-1', 'EX-2', '10005'],
              properties: [],
            },
            schema: {
              $ref: '#/components/schemas/BulkFetchIssueRequestBean',
            },
          },
        },
        description: 'A JSON object containing the information about which issues and fields to fetch.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"expand":"schema,names","issueErrors":[],"issues":[{"expand":"","fields":{"summary":"My first example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10002","key":"EX-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"},{"expand":"","fields":{"summary":"My second example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10005","key":"EX-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/10003"},{"expand":"","fields":{"summary":"My fourth example issue","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002"},"deleted":true,"deletedBy":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"deletedDate":"2022-11-11T13:35:29.000+0000","id":"10002","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"MKY","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"retentionTillDate":"2023-01-10T13:35:29.000+0000","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","simplified":false,"style":"classic"},"assignee":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}},"id":"10005","key":"EX-4","self":"https://your-domain.atlassian.net/rest/api/3/issue/10005"}]}',
              schema: {
                $ref: '#/components/schemas/BulkIssueResults',
              },
            },
          },
          description:
            'Returned if the request is successful. A response may contain both successful issues and issue errors.',
        },
        '400': {
          description: 'Returned if no issue IDs/keys were present, or more than 100 issue IDs/keys were requested.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Bulk fetch issues',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-meta:jira',
            'read:issue-security-level:jira',
            'read:issue.vote:jira',
            'read:issue.changelog:jira',
            'read:avatar:jira',
            'read:issue:jira',
            'read:status:jira',
            'read:user:jira',
            'read:field-configuration:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue/createmeta': {
    get: {
      deprecated: true,
      description:
        'Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nDeprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).\n\nThe request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.',
      operationId: 'getCreateIssueMeta',
      parameters: [
        {
          description:
            'List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.',
          in: 'query',
          name: 'projectIds',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.',
          in: 'query',
          name: 'projectKeys',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.',
          in: 'query',
          name: 'issuetypeIds',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.',
          in: 'query',
          name: 'issuetypeNames',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"projects":[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000&avatarId=10011","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000&avatarId=10011","48x48":"https://your-domain.atlassian.net/secure/projectavatar?pid=10000&avatarId=10011"},"id":"10000","issuetypes":[{"description":"An error in the code","fields":{"issuetype":{"allowedValues":["set"],"autoCompleteUrl":"issuetype","hasDefaultValue":false,"key":"issuetype","name":"Issue Type","required":true}},"iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","id":"1","name":"Bug","self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"ED","name":"Edison Project","self":"https://your-domain.atlassian.net/rest/api/3/project/ED"}]}',
              schema: {
                $ref: '#/components/schemas/IssueCreateMetadata',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get create issue metadata',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
      'x-changes': [
        {
          announced: '2023-12-11',
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304',
          effective: '2024-06-03',
          type: 'removed',
        },
      ],
    },
  },
  '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes': {
    get: {
      deprecated: false,
      description:
        'Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.',
      operationId: 'getCreateIssueMetaIssueTypes',
      parameters: [
        {
          description: 'The ID or key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            maximum: 200,
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issueTypes":[{"description":"An error in the code","iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","id":"1","name":"Bug","self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"maxResults":1,"startAt":0,"total":1}',
              schema: {
                $ref: '#/components/schemas/PageOfCreateMetaIssueTypes',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Parameter \'maxResults\' must not exceed the limit \'200\'"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get create metadata issue types for a project',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}': {
    get: {
      deprecated: false,
      description:
        'Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.',
      operationId: 'getCreateIssueMetaIssueTypeId',
      parameters: [
        {
          description: 'The ID or key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The issuetype ID.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            maximum: 200,
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"fields":[{"fieldId":"assignee","hasDefaultValue":false,"key":"assignee","name":"Assignee","operations":["set"],"required":true}],"maxResults":1,"startAt":0,"total":1}',
              schema: {
                $ref: '#/components/schemas/PageOfCreateMetaIssueTypeWithField',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Parameter \'maxResults\' must not exceed the limit \'200\'"],"errors":{},"httpStatusCode":{"empty":false,"present":true}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get create field metadata for a project and issue type id',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/limit/report': {
    get: {
      deprecated: false,
      description:
        'Returns all issues breaching and approaching per-issue limits.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueLimitReport',
      parameters: [
        {
          description:
            'Return issue keys instead of issue ids in the response.\n\nUsage: Add `?isReturningKeys=true` to the end of the path to request issue keys.',
          in: 'query',
          name: 'isReturningKeys',
          schema: {
            default: false,
            type: 'boolean',
          },
          'x-showInExample': 'true',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueLimitReportRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issuesApproachingLimit":{"attachment":{"15070L":1822,"15111L":1999},"comment":{"10000L":4997,"15073L":4999,"15110L":5000},"remoteIssueLinks":{"15107L":2000},"worklog":{"15101L":10342}},"issuesBreachingLimit":{"attachment":{"15057L":2005,"15116L":2065,"15117L":3005},"comment":{"15055L":5202},"issuelinks":{"15058L":2120},"remoteIssueLinks":{"15059L":2094},"worklog":{"15056L":10085,"15169L":120864}},"limits":{"attachment":2000,"comment":5000,"issuelinks":2000,"remoteIssueLinks":2000,"worklog":10000}}',
              schema: {
                $ref: '#/components/schemas/IssueLimitReportResponseBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request is invalid. Other possible reasons:\n\n *  the field queried is not supported\n *  the threshold is not within the supported range',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to complete this request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get issue limit report',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira', 'read:issue:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue/picker': {
    get: {
      deprecated: false,
      description:
        "Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.\n\nThis operation returns two lists:\n\n *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.\n *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.",
      operationId: 'getIssuePickerResource',
      parameters: [
        {
          description: 'A string to match against text fields in the issue such as title, description, or comments.',
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.',
          in: 'query',
          name: 'currentJQL',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.',
          in: 'query',
          name: 'currentIssueKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of a project that suggested issues must belong to.',
          in: 'query',
          name: 'currentProjectId',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Indicate whether to include subtasks in the suggestions list.',
          in: 'query',
          name: 'showSubTasks',
          schema: {
            type: 'boolean',
          },
        },
        {
          description:
            'When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.',
          in: 'query',
          name: 'showSubTaskParent',
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssuePickerSuggestions',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue picker suggestions',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-details:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/properties': {
    post: {
      deprecated: false,
      description:
        'Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.\n\nThis operation is:\n\n *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'bulkSetIssuesPropertiesList',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/IssueEntityProperties',
            },
          },
        },
        description: 'Issue properties to be set or updated with values.',
        required: true,
      },
      responses: {
        '303': {
          description: 'Returned if the operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Return if the request is invalid or the user does not have the necessary permission.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk set issues properties by list',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/properties/multi': {
    post: {
      deprecated: false,
      description:
        'Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.\n\nThis operation is:\n\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n *  non-transactional. Updating some entities may fail. Such information will available in the task result.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'bulkSetIssuePropertiesByIssue',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issues: [
                {
                  issueID: 1000,
                  properties: {
                    myProperty: {
                      owner: 'admin',
                      weight: 100,
                    },
                  },
                },
                {
                  issueID: 1001,
                  properties: {
                    myOtherProperty: {
                      cost: 150,
                      transportation: 'car',
                    },
                  },
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/MultiIssueEntityProperties',
            },
          },
        },
        description:
          'Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored.',
        required: true,
      },
      responses: {
        '303': {
          description: 'Returned if the operation is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Return if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Return if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk set issue properties by issue',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.\n\nThe criteria the filter used to identify eligible issues are:\n\n *  `entityIds` Only issues from this list are eligible.\n *  `currentValue` Only issues with the property set to this value are eligible.\n\nIf both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.\n\nIf no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.\n\nThis operation is:\n\n *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.',
      operationId: 'bulkDeleteIssueProperty',
      parameters: [
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              currentValue: 'deprecated value',
              entityIds: [10100, 100010],
            },
            schema: {
              $ref: '#/components/schemas/IssueFilterForBulkPropertyDelete',
            },
          },
        },
        required: true,
      },
      responses: {
        '303': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk delete issue property',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets a property value on multiple issues.\n\nThe value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.\n\nThe issues to be updated can be specified by a filter.\n\nThe filter identifies issues eligible for update using these criteria:\n\n *  `entityIds` Only issues from this list are eligible.\n *  `currentValue` Only issues with the property set to this value are eligible.\n *  `hasProperty`:\n    \n     *  If *true*, only issues with the property are eligible.\n     *  If *false*, only issues without the property are eligible.\n\nIf more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.\n\nIf an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).\n\nThe filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\\_ISSUES permission for the issue are considered eligible.\n\nThis operation is:\n\n *  transactional, either all eligible issues are updated or, when errors occur, none are updated.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.',
      operationId: 'bulkSetIssueProperty',
      parameters: [
        {
          description: 'The key of the property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              filter: {
                currentValue: {
                  owner: 'admin',
                  weight: 50,
                },
                entityIds: [10100, 100010],
                hasProperty: true,
              },
              value: {
                owner: 'admin',
                weight: 100,
              },
            },
            schema: {
              $ref: '#/components/schemas/BulkIssuePropertyUpdateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '303': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Bulk set issue property',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-expressions:jira', 'write:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/unarchive': {
    put: {
      deprecated: false,
      description:
        "Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.\n\n**Note that:**\n\n *  you can't unarchive subtasks directly, only through their parent issues\n *  you can only unarchive issues from software, service management, and business projects\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n  \n",
      operationId: 'unarchiveIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIdsOrKeys: ['PR-1', '1001', 'PROJECT-2'],
            },
            schema: {
              $ref: '#/components/schemas/IssueArchivalSyncRequest',
            },
          },
        },
        description: 'Contains a list of issue keys or IDs to be unarchived.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"errors":{"issueIsSubtask":{"count":3,"issueIdsOrKeys":["ST-1","ST-2","ST-3"],"message":"Issue is subtask."},"issuesInArchivedProjects":{"count":2,"issueIdsOrKeys":["AR-1","AR-2"],"message":"Issue exists in archived project."},"issuesNotFound":{"count":3,"issueIdsOrKeys":["PR-1","PR-2","PR-3"],"message":"Issue not found."}},"numberOfIssuesUpdated":10}',
              schema: {
                $ref: '#/components/schemas/IssueArchivalSyncResponse',
              },
            },
          },
          description:
            'Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["No valid issue to archive or unarchive. Bad request."],"errors":{}}',
            },
          },
          description:
            "Returned if none of the issues in the request are eligible to be unarchived. Possible reasons:\n\n *  the issues weren't found\n *  the issues are subtasks\n *  the issues belong to archived projects",
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only admins can archive or unarchive issues. Access denied."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.',
        },
        '412': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The number of issues to archive or unarchive exceeds the hard limit of 1000. Precondition failed."],"errors":{}}',
            },
          },
          description:
            'Returned if one or more issues were successfully unarchived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Unarchive issue(s) by issue keys/ID',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue/watching': {
    post: {
      deprecated: false,
      description:
        'Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getIsWatchingIssueBulk',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIds: ['10001', '10002', '10005'],
            },
            schema: {
              $ref: '#/components/schemas/IssueList',
            },
          },
        },
        description: 'A list of issue IDs.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issuesIsWatching":{"10001":true,"10002":false,"10005":true}}',
              schema: {
                $ref: '#/components/schemas/BulkIssueIsWatching',
              },
            },
          },
          description: 'Returned if the request is successful',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get is watching issue bulk',
      tags: ['Issue watchers'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.watcher:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes an issue.\n\nAn issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'deleteIssue',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: "Whether the issue's subtasks are deleted when the issue is deleted.",
          in: 'query',
          name: 'deleteSubtasks',
          schema: {
            default: 'false',
            enum: ['true', 'false'],
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to delete the issue.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the details for an issue.\n\nThe issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'getIssue',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.',
          in: 'query',
          name: 'fields',
          schema: {
            items: {
              default: '*all',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.",
          in: 'query',
          name: 'fieldsByKeys',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              default: 'null',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.",
          in: 'query',
          name: 'updateHistory',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).',
          in: 'query',
          name: 'failFast',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}',
              schema: {
                $ref: '#/components/schemas/IssueBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-meta:jira',
            'read:issue-security-level:jira',
            'read:issue.vote:jira',
            'read:issue.changelog:jira',
            'read:avatar:jira',
            'read:issue:jira',
            'read:status:jira',
            'read:user:jira',
            'read:field-configuration:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.\n\nThe edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).\n\nThe parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.\n\nConnect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'editIssue',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.",
          in: 'query',
          name: 'notifyUsers',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideScreenSecurity',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).',
          in: 'query',
          name: 'returnIssue',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                customfield_10000: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Investigation underway',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                customfield_10010: 1,
                summary: 'Completed orders still displaying in pending',
              },
              historyMetadata: {
                activityDescription: 'Complete order processing',
                actor: {
                  avatarUrl: 'http://mysystem/avatar/tony.jpg',
                  displayName: 'Tony',
                  id: 'tony',
                  type: 'mysystem-user',
                  url: 'http://mysystem/users/tony',
                },
                cause: {
                  id: 'myevent',
                  type: 'mysystem-event',
                },
                description: 'From the order testing process',
                extraData: {
                  Iteration: '10a',
                  Step: '4',
                },
                generator: {
                  id: 'mysystem-1',
                  type: 'mysystem-application',
                },
                type: 'myplugin:type',
              },
              properties: [
                {
                  key: 'key1',
                  value: 'Order number 10784',
                },
                {
                  key: 'key2',
                  value: 'Order number 10923',
                },
              ],
              update: {
                components: [
                  {
                    set: '',
                  },
                ],
                labels: [
                  {
                    add: 'triaged',
                  },
                  {
                    remove: 'blocker',
                  },
                ],
                summary: [
                  {
                    set: 'Bug in business logic',
                  },
                ],
                timetracking: [
                  {
                    edit: {
                      originalEstimate: '1w 1d',
                      remainingEstimate: '4d',
                    },
                  },
                ],
              },
            },
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful and the `returnIssue` parameter is `true`',
        },
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if:\n\n *  the request body is missing.\n *  the user does not have the necessary permission to edit one or more fields.\n *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.\n *  the request includes an invalid transition.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            "Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission.",
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
        '409': {
          description: 'Returned if the issue could not be updated due to a conflicting update.',
        },
        '422': {
          description: 'Returned if a configuration problem prevents the issue being updated.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Edit issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/assignee': {
    put: {
      deprecated: false,
      description:
        'Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.\n\nIf `name` or `accountId` is set to:\n\n *  `"-1"`, the issue is assigned to the default assignee for the project.\n *  `null`, the issue is set to unassigned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'assignIssue',
      parameters: [
        {
          description: 'The ID or key of the issue to be assigned.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10ac8d82e05b22cc7d4ef5',
            },
            schema: {
              $ref: '#/components/schemas/User',
            },
          },
        },
        description: 'The request object with the user that the issue is assigned to.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the user is not found.\n *  `name`, `key`, or `accountId` is missing.\n *  more than one of `name`, `key`, and `accountId` are provided.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the issue is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Assign issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/attachments': {
    post: {
      deprecated: false,
      description:
        "Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).\n\nNote that:\n\n *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.\n *  The name of the multipart/form-data parameter that contains the attachments must be `file`.\n\nThe following examples upload a file called *myfile.txt* to the issue *TEST-123*:\n\n#### curl ####\n\n    curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'\n     -u 'email@example.com:<api_token>'\n     -H 'X-Atlassian-Token: no-check'\n     --form 'file=@\"myfile.txt\"'\n\n#### Node.js ####\n\n    // This code sample uses the 'node-fetch' and 'form-data' libraries:\n     // https://www.npmjs.com/package/node-fetch\n     // https://www.npmjs.com/package/form-data\n     const fetch = require('node-fetch');\n     const FormData = require('form-data');\n     const fs = require('fs');\n    \n     const filePath = 'myfile.txt';\n     const form = new FormData();\n     const stats = fs.statSync(filePath);\n     const fileSizeInBytes = stats.size;\n     const fileStream = fs.createReadStream(filePath);\n    \n     form.append('file', fileStream, {knownLength: fileSizeInBytes});\n    \n     fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {\n         method: 'POST',\n         body: form,\n         headers: {\n             'Authorization': `Basic ${Buffer.from(\n                 'email@example.com:'\n             ).toString('base64')}`,\n             'Accept': 'application/json',\n             'X-Atlassian-Token': 'no-check'\n         }\n     })\n         .then(response => {\n             console.log(\n                 `Response: ${response.status} ${response.statusText}`\n             );\n             return response.text();\n         })\n         .then(text => console.log(text))\n         .catch(err => console.error(err));\n\n#### Java ####\n\n    // This code sample uses the  'Unirest' library:\n     // http://unirest.io/java.html\n     HttpResponse response = Unirest.post(\"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\")\n             .basicAuth(\"email@example.com\", \"\")\n             .header(\"Accept\", \"application/json\")\n             .header(\"X-Atlassian-Token\", \"no-check\")\n             .field(\"file\", new File(\"myfile.txt\"))\n             .asJson();\n    \n             System.out.println(response.getBody());\n\n#### Python ####\n\n    # This code sample uses the 'requests' library:\n     # http://docs.python-requests.org\n     import requests\n     from requests.auth import HTTPBasicAuth\n     import json\n    \n     url = \"https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\"\n    \n     auth = HTTPBasicAuth(\"email@example.com\", \"\")\n    \n     headers = {\n        \"Accept\": \"application/json\",\n        \"X-Atlassian-Token\": \"no-check\"\n     }\n    \n     response = requests.request(\n        \"POST\",\n        url,\n        headers = headers,\n        auth = auth,\n        files = {\n             \"file\": (\"myfile.txt\", open(\"myfile.txt\",\"rb\"), \"application-type\")\n        }\n     )\n    \n     print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(\",\", \": \")))\n\n#### PHP ####\n\n    // This code sample uses the 'Unirest' library:\n     // http://unirest.io/php.html\n     Unirest\\Request::auth('email@example.com', '');\n    \n     $headers = array(\n       'Accept' => 'application/json',\n       'X-Atlassian-Token' => 'no-check'\n     );\n    \n     $parameters = array(\n       'file' => File::add('myfile.txt')\n     );\n    \n     $response = Unirest\\Request::post(\n       'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',\n       $headers,\n       $parameters\n     );\n    \n     var_dump($response)\n\n#### Forge ####\n\n    // This sample uses Atlassian Forge and the `form-data` library.\n     // https://developer.atlassian.com/platform/forge/\n     // https://www.npmjs.com/package/form-data\n     import api from \"@forge/api\";\n     import FormData from \"form-data\";\n    \n     const form = new FormData();\n     form.append('file', fileStream, {knownLength: fileSizeInBytes});\n    \n     const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {\n         method: 'POST',\n         body: form,\n         headers: {\n             'Accept': 'application/json',\n             'X-Atlassian-Token': 'no-check'\n         }\n     });\n    \n     console.log(`Response: ${response.status} ${response.statusText}`);\n     console.log(await response.json());\n\nTip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** \n\n *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'addAttachment',
      parameters: [
        {
          description: 'The ID or key of the issue that attachments are added to.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'multipart/form-data': {
            schema: {
              items: {
                $ref: '#/components/schemas/MultipartFile',
              },
              type: 'array',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"content":"https://your-domain.atlassian.net/rest/api/3/attachment/content/10000","created":1651316514000,"filename":"picture.jpg","id":"10001","mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/rest/api/3/attachment/thumbnail/10000"},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"content":"https://your-domain.atlassian.net/rest/api/3/attachment/content/10001","created":1658898511000,"filename":"dbeuglog.txt","mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10001","size":2460}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Attachment',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  the issue is not found.\n *  the user does not have permission to view the issue.',
        },
        '413': {
          description:
            'Returned if any of the following is true:\n\n *  the attachments exceed the maximum attachment size for issues.\n *  more than 60 files are requested to be uploaded.\n *  the per-issue limit for attachments has been breached.\n\nSee [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add attachment',
      tags: ['Issue attachments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira', 'write:attachment:jira', 'read:attachment:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/changelog': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getChangeLogs',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?&startAt=4&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?startAt=2&maxResults=2","startAt":2,"total":5,"values":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","id":"10001","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","id":"10002","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1 label-2"}]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanChangelog',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get changelogs',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:issue.changelog:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/changelog/list': {
    post: {
      deprecated: false,
      description:
        'Returns changelogs for an issue specified by a list of changelog IDs.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getChangeLogsByIds',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              changelogIds: [10001, 10002],
            },
            schema: {
              $ref: '#/components/schemas/IssueChangelogIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"histories":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","id":"10001","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"author":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","id":"10002","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1 label-2"}]}],"maxResults":2,"startAt":0,"total":2}',
              schema: {
                $ref: '#/components/schemas/PageOfChangelogs',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get changelogs by IDs',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:avatar:jira', 'read:issue.changelog:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/comment': {
    get: {
      deprecated: false,
      description:
        'Returns all comments for an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Comments are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.',
      operationId: 'getComments',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 5000,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['created', '-created', '+created'],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"comments":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"maxResults":1,"startAt":0,"total":1}',
              schema: {
                $ref: '#/components/schemas/PageOfComments',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `orderBy` is set to a value other than *created*.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get comments',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a comment to an issue.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'addComment',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              body: {
                content: [
                  {
                    content: [
                      {
                        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.',
                        type: 'text',
                      },
                    ],
                    type: 'paragraph',
                  },
                ],
                type: 'doc',
                version: 1,
              },
              visibility: {
                identifier: 'Administrators',
                type: 'role',
                value: 'Administrators',
              },
            },
            schema: {
              $ref: '#/components/schemas/Comment',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}',
              schema: {
                $ref: '#/components/schemas/Comment',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
        '413': {
          description:
            'Returned if the per-issue limit has been breached for one of the following fields:\n\n *  comments\n *  attachments',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add comment',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/comment/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a comment.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.',
      operationId: 'deleteComment',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the user does not have permission to delete the comment.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.',
        },
        '405': {
          description: 'Returned if an anonymous call is made to the operation.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete comment',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:comment:jira', 'delete:comment.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.',
      operationId: 'getComment',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}',
              schema: {
                $ref: '#/components/schemas/Comment',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get comment',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a comment.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.\n *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.',
      operationId: 'updateComment',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the comment.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether users are notified when a comment is updated.',
          in: 'query',
          name: 'notifyUsers',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              body: {
                content: [
                  {
                    content: [
                      {
                        text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.',
                        type: 'text',
                      },
                    ],
                    type: 'paragraph',
                  },
                ],
                type: 'doc',
                version: 1,
              },
              visibility: {
                identifier: 'Administrators',
                type: 'role',
                value: 'Administrators',
              },
            },
            schema: {
              $ref: '#/components/schemas/Comment',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}',
              schema: {
                $ref: '#/components/schemas/Comment',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the user does not have permission to edit the comment or the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update comment',
      tags: ['Issue comments'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/editmeta': {
    get: {
      deprecated: false,
      description:
        'Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).\n\nThis endpoint will check for these conditions:\n\n1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.\n2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.\n3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.\n4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.\n5.  Issue has a project, issue type, and status defined.\n6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.\n7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.\n8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).\n9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.\n\nFields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.\n\nConnect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:\n\n *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).\n *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nNote: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.',
      operationId: 'getEditIssueMeta',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideScreenSecurity',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}}}',
              schema: {
                $ref: '#/components/schemas/IssueUpdateMetadata',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: "Returned if the user uses an override parameter but doesn't have permission to do so.",
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get edit issue metadata',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-meta:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/notify': {
    post: {
      deprecated: false,
      description:
        'Creates an email notification for an issue and adds it to the mail queue.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'notify',
      parameters: [
        {
          description: 'ID or key of the issue that the notification is sent for.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              htmlBody: 'The <strong>latest</strong> test results for this ticket are now available.',
              restrict: {
                groupIds: [],
                groups: [
                  {
                    name: 'notification-group',
                  },
                ],
                permissions: [
                  {
                    key: 'BROWSE',
                  },
                ],
              },
              subject: 'Latest test results',
              textBody: 'The latest test results for this ticket are now available.',
              to: {
                assignee: false,
                groupIds: [],
                groups: [
                  {
                    name: 'notification-group',
                  },
                ],
                reporter: false,
                users: [
                  {
                    accountId: '5b10a2844c20165700ede21g',
                    active: false,
                  },
                ],
                voters: true,
                watchers: true,
              },
            },
            schema: {
              $ref: '#/components/schemas/Notification',
            },
          },
        },
        description: 'The request object for the notification and recipients.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the email is queued for sending.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the recipient is the same as the calling user.\n *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.\n *  the request is invalid. For example, required fields are missing or have invalid values.',
        },
        '403': {
          description: 'Returned if:\n\n *  outgoing emails are disabled.\n *  no SMTP server is configured.',
        },
        '404': {
          description: 'Returned if the issue is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Send notification for issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['send:notification:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/properties': {
    get: {
      deprecated: false,
      description:
        "Returns the URLs and keys of an issue's properties.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Property details are only returned where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'getIssuePropertyKeys',
      parameters: [
        {
          description: 'The key or ID of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permissions to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue property keys',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes an issue's property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'deleteIssueProperty',
      parameters: [
        {
          description: 'The key or ID of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue or property is not found, or the user does not have permission to edit the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete issue property',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the key and value of an issue's property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'getIssueProperty',
      parameters: [
        {
          description: 'The key or ID of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue or property is not found or the user does not have permission to see the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue property',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the value of an issue's property. Use this resource to store custom data against an issue.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'setIssueProperty',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the issue property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue property is created.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to edit the issue.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set issue property',
      tags: ['Issue properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/remotelink': {
    delete: {
      deprecated: false,
      description:
        "Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.",
      operationId: 'deleteRemoteIssueLinkByGlobalId',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The global ID of a remote issue link.',
          in: 'query',
          name: 'globalId',
          required: true,
          schema: {
            example: 'system=http://www.mycompany.com/support&id=1',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if a global ID isn't provided.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to link issues.',
        },
        '404': {
          description:
            'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete remote issue link by global ID',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue.remote-link:jira', 'write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getRemoteIssueLinks',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The global ID of the remote issue link.',
          in: 'query',
          name: 'globalId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"application":{"name":"My Acme Tracker","type":"com.acme.tracker"},"globalId":"system=http://www.mycompany.com/support&id=1","id":10000,"object":{"icon":{"title":"Support Ticket","url16x16":"http://www.mycompany.com/support/ticket.png"},"status":{"icon":{"link":"http://www.mycompany.com/support?id=1&details=closed","title":"Case Closed","url16x16":"http://www.mycompany.com/support/resolved.png"},"resolved":true},"summary":"Customer support issue","title":"TSTSUP-111","url":"http://www.mycompany.com/support?id=1"},"relationship":"causes","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"},{"application":{"name":"My Acme Tester","type":"com.acme.tester"},"globalId":"system=http://www.anothercompany.com/tester&id=1234","id":10001,"object":{"icon":{"title":"Test Case","url16x16":"http://www.anothercompany.com/tester/images/testcase.gif"},"status":{"icon":{"link":"http://www.anothercompany.com/tester/person?accountId=5b10a2844c20165700ede21g","title":"Tested by Mia Krystof","url16x16":"http://www.anothercompany.com/tester/images/person/mia.gif"},"resolved":false},"summary":"Test that the submit button saves the item","title":"Test Case #1234","url":"http://www.anothercompany.com/tester/testcase/1234"},"relationship":"is tested by","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10001"}]',
              schema: {
                $ref: '#/components/schemas/RemoteIssueLink',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if issue linking is disabled.',
        },
        '404': {
          description:
            'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
        },
        '413': {
          description: 'Returned if the per-issue limit for remote links has been breached.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get remote issue links',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.remote-link:jira', 'read:status:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates or updates a remote issue link for an issue.\n\nIf a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'createOrUpdateRemoteIssueLink',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              application: {
                name: 'My Acme Tracker',
                type: 'com.acme.tracker',
              },
              globalId: 'system=http://www.mycompany.com/support&id=1',
              object: {
                icon: {
                  title: 'Support Ticket',
                  url16x16: 'http://www.mycompany.com/support/ticket.png',
                },
                status: {
                  icon: {
                    link: 'http://www.mycompany.com/support?id=1&details=closed',
                    title: 'Case Closed',
                    url16x16: 'http://www.mycompany.com/support/resolved.png',
                  },
                  resolved: true,
                },
                summary: 'Customer support issue',
                title: 'TSTSUP-111',
                url: 'http://www.mycompany.com/support?id=1',
              },
              relationship: 'causes',
            },
            schema: {
              $ref: '#/components/schemas/RemoteIssueLinkRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}',
              schema: {
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies',
              },
            },
          },
          description: 'Returned if the remote issue link is updated.',
        },
        '201': {
          content: {
            'application/json': {
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}',
              schema: {
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies',
              },
            },
          },
          description: 'Returned if the remote issue link is created.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"title":"\'title\' is required."}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to link issues.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create or update remote issue link',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira', 'write:issue.remote-link:jira', 'read:issue.remote-link:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a remote issue link from an issue.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'deleteRemoteIssueLinkById',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The ID of a remote issue link.',
          in: 'path',
          name: 'linkId',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to link issues.',
        },
        '404': {
          description:
            'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete remote issue link by ID',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue.remote-link:jira', 'write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a remote issue link for an issue.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'getRemoteIssueLinkById',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the remote issue link.',
          in: 'path',
          name: 'linkId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"application":{"name":"My Acme Tracker","type":"com.acme.tracker"},"globalId":"system=http://www.mycompany.com/support&id=1","id":10000,"object":{"icon":{"title":"Support Ticket","url16x16":"http://www.mycompany.com/support/ticket.png"},"status":{"icon":{"link":"http://www.mycompany.com/support?id=1&details=closed","title":"Case Closed","url16x16":"http://www.mycompany.com/support/resolved.png"},"resolved":true},"summary":"Customer support issue","title":"TSTSUP-111","url":"http://www.mycompany.com/support?id=1"},"relationship":"causes","self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}',
              schema: {
                $ref: '#/components/schemas/RemoteIssueLink',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the link ID is invalid or the remote issue link does not belong to the issue.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if issue linking is disabled.',
        },
        '404': {
          description:
            'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get remote issue link by ID',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.remote-link:jira', 'read:status:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a remote issue link for an issue.\n\nNote: Fields without values in the request are set to null.\n\nThis operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'updateRemoteIssueLink',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The ID of the remote issue link.',
          in: 'path',
          name: 'linkId',
          required: true,
          schema: {
            example: '10000',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              application: {
                name: 'My Acme Tracker',
                type: 'com.acme.tracker',
              },
              globalId: 'system=http://www.mycompany.com/support&id=1',
              object: {
                icon: {
                  title: 'Support Ticket',
                  url16x16: 'http://www.mycompany.com/support/ticket.png',
                },
                status: {
                  icon: {
                    link: 'http://www.mycompany.com/support?id=1&details=closed',
                    title: 'Case Closed',
                    url16x16: 'http://www.mycompany.com/support/resolved.png',
                  },
                  resolved: true,
                },
                summary: 'Customer support issue',
                title: 'TSTSUP-111',
                url: 'http://www.mycompany.com/support?id=1',
              },
              relationship: 'causes',
            },
            schema: {
              $ref: '#/components/schemas/RemoteIssueLinkRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"title":"\'title\' is required."}}',
            },
          },
          description:
            'Returned if:\n\n *  the link ID is invalid.\n *  the remote issue link does not belong to the issue.\n *  the request body is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to link issues.',
        },
        '404': {
          description:
            'Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update remote issue link by ID',
      tags: ['Issue remote links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira', 'write:issue.remote-link:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/transitions': {
    get: {
      deprecated: false,
      description:
        "Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.\n\nNote, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required: A list or transition is returned only when the user has:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nHowever, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.",
      operationId: 'getTransitions',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the transition.',
          in: 'query',
          name: 'transitionId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether transitions with the condition *Hide From User Condition* are included in the response.',
          in: 'query',
          name: 'skipRemoteOnlyCondition',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'Whether details of transitions that fail a condition are included in the response',
          in: 'query',
          name: 'includeUnavailableTransitions',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.',
          in: 'query',
          name: 'sortByOpsBarAndStatus',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"transitions":[{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}},"hasScreen":false,"id":"2","isAvailable":true,"isConditional":false,"isGlobal":false,"isInitial":false,"name":"Close Issue","to":{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}},{"fields":{"summary":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}},"colour":{"allowedValues":["red","blue"],"defaultValue":"red","hasDefaultValue":false,"key":"field_key","name":"My Multi Select","operations":["set","add"],"required":false,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001,"items":"option","type":"array"}}},"hasScreen":true,"id":"711","name":"QA Review","to":{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}}]}',
              schema: {
                $ref: '#/components/schemas/Transitions',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get transitions',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.transition:jira', 'read:status:jira', 'read:field-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.\n\nsortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'doTransition',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fields: {
                assignee: {
                  name: 'bob',
                },
                resolution: {
                  name: 'Fixed',
                },
              },
              historyMetadata: {
                activityDescription: 'Complete order processing',
                actor: {
                  avatarUrl: 'http://mysystem/avatar/tony.jpg',
                  displayName: 'Tony',
                  id: 'tony',
                  type: 'mysystem-user',
                  url: 'http://mysystem/users/tony',
                },
                cause: {
                  id: 'myevent',
                  type: 'mysystem-event',
                },
                description: 'From the order testing process',
                extraData: {
                  Iteration: '10a',
                  Step: '4',
                },
                generator: {
                  id: 'mysystem-1',
                  type: 'mysystem-application',
                },
                type: 'myplugin:type',
              },
              transition: {
                id: '5',
              },
              update: {
                comment: [
                  {
                    add: {
                      body: {
                        content: [
                          {
                            content: [
                              {
                                text: 'Bug has been fixed',
                                type: 'text',
                              },
                            ],
                            type: 'paragraph',
                          },
                        ],
                        type: 'doc',
                        version: 1,
                      },
                    },
                  },
                ],
              },
            },
            schema: {
              $ref: '#/components/schemas/IssueUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if:\n\n *  no transition is specified.\n *  the user does not have permission to transition the issue.\n *  a field that isn't included on the transition screen is defined in `fields` or `update`.\n *  a field is specified in both `fields` and `update`.\n *  the request is invalid for any other reason.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
        '409': {
          description: 'Returned if the issue could not be updated due to a conflicting update.',
        },
        '413': {
          description:
            'Returned if a per-issue limit has been breached for one of the following fields:\n\n *  comments\n *  worklogs\n *  attachments\n *  issue links\n *  remote issue links',
        },
        '422': {
          description: 'Returned if a configuration problem prevents the creation of the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Transition issue',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira', 'write:issue.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/votes': {
    delete: {
      deprecated: false,
      description:
        "Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'removeVote',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  voting is disabled.\n *  the user has not voted on the issue.\n *  the issue is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete vote',
      tags: ['Issue votes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.vote:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns details about the votes on an issue.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n\nNote that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.',
      operationId: 'getVotes',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"hasVoted":true,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/votes","voters":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}],"votes":24}',
              schema: {
                $ref: '#/components/schemas/Votes',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  voting is disabled.\n *  the user does not have permission to view the issue.\n *  the issue is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get votes',
      tags: ['Issue votes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue.vote:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.\n\nThis operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'addVote',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if:\n\n *  voting is disabled.\n *  the issue is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add vote',
      tags: ['Issue votes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.vote:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/watchers': {
    delete: {
      deprecated: false,
      description:
        'Deletes a user as a watcher of an issue.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.',
      operationId: 'removeWatcher',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `accountId` is not supplied.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the permission to manage the watcher list.',
        },
        '404': {
          description:
            'Returned if the issue or the user is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete watcher',
      tags: ['Issue watchers'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.watcher:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the watchers for an issue.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.',
      operationId: 'getIssueWatchers',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1,"watchers":[{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}]}',
              schema: {
                $ref: '#/components/schemas/Watchers',
              },
            },
          },
          description: 'Returned if the request is successful',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue watchers',
      tags: ['Issue watchers'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue.watcher:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.\n\nThis operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.',
      operationId: 'addWatcher',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              type: 'string',
            },
          },
        },
        description: 'The account ID of the user. Note that username cannot be used due to privacy changes.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the permission to manage the watcher list.',
        },
        '404': {
          description:
            'Returned if the issue or the user is not found or the user does not have permission to view the issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add watcher',
      tags: ['Issue watchers'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue.watcher:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/worklog': {
    delete: {
      deprecated: false,
      description:
        "Deletes a list of worklogs from an issue. This is an experimental API with limitations:\n\n *  You can't delete more than 5000 worklogs at once.\n *  No notifications will be sent for deleted worklogs.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog.\n *  If any worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
      operationId: 'bulkDeleteWorklogs',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "Defines how to update the issue's time estimate, the options are:\n\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Reduces the estimate by the aggregate value of `timeSpent` across all worklogs being deleted.",
          in: 'query',
          name: 'adjustEstimate',
          schema: {
            default: 'auto',
            enum: ['leave', 'auto'],
            type: 'string',
          },
        },
        {
          description:
            'Whether the work log entries should be removed to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10],
            },
            schema: {
              $ref: '#/components/schemas/WorklogIdsRequestBean',
            },
          },
        },
        description: 'A JSON object containing a list of worklog IDs.',
        required: true,
      },
      responses: {
        '200': {
          description:
            'Returned if the bulk deletion request was partially successful, with a message indicating partial success.',
        },
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `request` is not provided or is invalid\n *  the user does not have permission to delete the worklogs\n *  the number of worklogs being deleted exceeds the limit',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue\n *  at least one of the worklogs is not associated with the provided issue\n *  time tracking is disabled',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Bulk delete worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'delete:issue-worklog:jira',
            'delete:issue-worklog.property:jira',
            'write:issue.time-tracking:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:issue-worklog.property:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    get: {
      deprecated: false,
      description:
        'Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Workloads are only returned where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getIssueWorklog',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 5000,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.',
          in: 'query',
          name: 'startedAfter',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.',
          in: 'query',
          name: 'startedBefore',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"maxResults":1,"startAt":0,"total":1,"worklogs":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}]}',
              schema: {
                $ref: '#/components/schemas/PageOfWorklogs',
              },
            },
          },
          description: 'Returned if the request is successful',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or the user does not have permission to view the issue.\n *  `startAt` or `maxResults` has non-numeric values.\n *  time tracking is disabled.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a worklog to an issue.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'addWorklog',
      parameters: [
        {
          description: 'The ID or key the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether users watching the issue are notified by email.',
          in: 'query',
          name: 'notifyUsers',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description:
            "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.",
          in: 'query',
          name: 'adjustEstimate',
          schema: {
            default: 'auto',
            enum: ['new', 'leave', 'manual', 'auto'],
            type: 'string',
          },
        },
        {
          description:
            "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.",
          in: 'query',
          name: 'newEstimate',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.",
          in: 'query',
          name: 'reduceBy',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description:
            'Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                content: [
                  {
                    content: [
                      {
                        text: 'I did some work here.',
                        type: 'text',
                      },
                    ],
                    type: 'paragraph',
                  },
                ],
                type: 'doc',
                version: 1,
              },
              started: '2021-01-17T12:34:00.000+0000',
              timeSpentSeconds: 12000,
              visibility: {
                identifier: '276f955c-63d7-42c8-9520-92d01dca0625',
                type: 'group',
              },
            },
            schema: {
              $ref: '#/components/schemas/Worklog',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/Worklog',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.\n *  the user does not have permission to add the worklog.\n *  the request JSON is malformed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if the issue is not found or the user does not have permission to view it.',
        },
        '413': {
          description:
            'Returned if the per-issue limit has been breached for one of the following fields:\n\n *  worklogs\n *  attachments',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Add worklog',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:issue-worklog:jira',
            'write:issue-worklog.property:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:issue-worklog.property:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/worklog/move': {
    post: {
      deprecated: false,
      description:
        "Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:\n\n *  You can't move more than 5000 worklogs at once.\n *  You can't move worklogs containing an attachment.\n *  You can't move worklogs restricted by project roles.\n *  No notifications will be sent for moved worklogs.\n *  No webhooks or events will be sent for moved worklogs.\n *  No issue history will be recorded for moved worklogs.\n *  Time tracking will not be updated for the source and destination issues.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.",
      operationId: 'bulkMoveWorklogs',
      parameters: [
        {
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10],
              issueIdOrKey: 'ABC-1234',
            },
            schema: {
              $ref: '#/components/schemas/WorklogsMoveRequestBean',
            },
          },
        },
        description: 'A JSON object containing a list of worklog IDs and the ID or key of the destination issue.',
        required: true,
      },
      responses: {
        '200': {
          description: 'Returned if the request is partially successful.',
        },
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `request` is not provided or is invalid\n *  the user does not have permission to move the worklogs\n *  the number of worklogs being moved exceeds the limit\n *  the total size of worklogs being moved is too large\n *  any worklog contains attachments',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or the user does not have permission to view the issue\n *  at least one of the worklogs is not associated with the provided issue\n *  time tracking is disabled',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Bulk move worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-worklog:jira',
            'write:issue-worklog:jira',
            'delete:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'write:issue-worklog.property:jira',
            'delete:issue-worklog.property:jira',
            'write:issue.time-tracking:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a worklog from an issue.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'deleteWorklog',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether users watching the issue are notified by email.',
          in: 'query',
          name: 'notifyUsers',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description:
            "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.",
          in: 'query',
          name: 'adjustEstimate',
          schema: {
            default: 'auto',
            enum: ['new', 'leave', 'manual', 'auto'],
            type: 'string',
          },
        },
        {
          description:
            "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.",
          in: 'query',
          name: 'newEstimate',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`.",
          in: 'query',
          name: 'increaseBy',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.\n *  the user does not have permission to delete the worklog.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete worklog',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-worklog:jira', 'delete:issue-worklog.property:jira', 'write:issue.time-tracking:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a worklog.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getWorklog',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts\n\n`properties`, which returns worklog properties.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}',
              schema: {
                $ref: '#/components/schemas/Worklog',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or the user does not have permission to view it.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.\n\n.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get worklog',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a worklog.\n\nTime tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'updateWorklog',
      parameters: [
        {
          description: 'The ID or key the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether users watching the issue are notified by email.',
          in: 'query',
          name: 'notifyUsers',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
        {
          description:
            "Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.",
          in: 'query',
          name: 'adjustEstimate',
          schema: {
            default: 'auto',
            enum: ['new', 'leave', 'manual', 'auto'],
            type: 'string',
          },
        },
        {
          description:
            "The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`.",
          in: 'query',
          name: 'newEstimate',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description:
            'Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.',
          in: 'query',
          name: 'overrideEditableFlag',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                content: [
                  {
                    content: [
                      {
                        text: 'I did some work here.',
                        type: 'text',
                      },
                    ],
                    type: 'paragraph',
                  },
                ],
                type: 'doc',
                version: 1,
              },
              started: '2021-01-17T12:34:00.000+0000',
              timeSpentSeconds: 12000,
              visibility: {
                identifier: '276f955c-63d7-42c8-9520-92d01dca0625',
                type: 'group',
              },
            },
            schema: {
              $ref: '#/components/schemas/Worklog',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}',
              schema: {
                $ref: '#/components/schemas/Worklog',
              },
            },
          },
          description: 'Returned if the request is successful',
        },
        '400': {
          description:
            'Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.\n *  the user does not have permission to update the worklog.\n *  the request JSON is malformed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue is not found or user does not have permission to view the issue.\n *  the worklog is not found or the user does not have permission to view it.\n *  time tracking is disabled.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update worklog',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:comment:jira',
            'write:issue-worklog:jira',
            'write:issue-worklog.property:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties': {
    get: {
      deprecated: false,
      description:
        'Returns the keys of all properties for a worklog.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getWorklogPropertyKeys',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'worklogId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the worklog ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue or worklog is not found.\n *  the user does not have permission to view the issue or worklog.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get worklog property keys',
      tags: ['Issue worklog properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a worklog property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'deleteWorklogProperty',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'worklogId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the worklog property is removed.',
        },
        '400': {
          description: 'Returned if the worklog key or id is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to edit the worklog.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue, worklog, or property is not found.\n *  the user does not have permission to view the issue or worklog.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete worklog property',
      tags: ['Issue worklog properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the value of a worklog property.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'getWorklogProperty',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'worklogId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the worklog ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue, worklog, or property is not found.\n *  the user does not have permission to view the issue or worklog.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get worklog property',
      tags: ['Issue worklog properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the value of a worklog property. Use this operation to store custom data against the worklog.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.\n *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'setWorklogProperty',
      parameters: [
        {
          description: 'The ID or key of the issue.',
          in: 'path',
          name: 'issueIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the worklog.',
          in: 'path',
          name: 'worklogId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the issue property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the worklog property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the worklog property is created.',
        },
        '400': {
          description: 'Returned if the worklog ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to edit the worklog.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue or worklog is not found.\n *  the user does not have permission to view the issue or worklog.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Set worklog property',
      tags: ['Issue worklog properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issueLink': {
    post: {
      deprecated: false,
      description:
        'Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.\n\nIf the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.\n *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.',
      operationId: 'linkIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              comment: {
                body: {
                  content: [
                    {
                      content: [
                        {
                          text: 'Linked related issue!',
                          type: 'text',
                        },
                      ],
                      type: 'paragraph',
                    },
                  ],
                  type: 'doc',
                  version: 1,
                },
                visibility: {
                  identifier: '276f955c-63d7-42c8-9520-92d01dca0625',
                  type: 'group',
                  value: 'jira-software-users',
                },
              },
              inwardIssue: {
                key: 'HSP-1',
              },
              outwardIssue: {
                key: 'MKY-1',
              },
              type: {
                name: 'Duplicate',
              },
            },
            schema: {
              $ref: '#/components/schemas/LinkIssueRequestJsonBean',
            },
          },
        },
        description: 'The issue link request.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            "Returned if:\n\n *  issue linking is disabled.\n *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.\n *  the user does not have *link issues* project permission.\n *  either of the link issues are not found.\n *  the issue link type is not found.",
        },
        '413': {
          description: 'Returned if the per-issue limit for issue links has been breached.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create issue link',
      tags: ['Issue links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:comment:jira', 'write:issue:jira', 'write:issue-link:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issueLink/{linkId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue link.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.',
      operationId: 'deleteIssueLink',
      parameters: [
        {
          description: 'The ID of the issue link.',
          in: 'path',
          name: 'linkId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          description: '200 response',
        },
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue link ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            "Returned if:\n\n *  issue linking is disabled.\n *  the issue link is not found.\n *  the user doesn't have the required permissions.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete issue link',
      tags: ['Issue links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-link:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns an issue link.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.',
      operationId: 'getIssueLink',
      parameters: [
        {
          description: 'The ID of the issue link.',
          in: 'path',
          name: 'linkId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"10001","inwardIssue":{"fields":{"issuetype":{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false},"priority":{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"},"status":{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"outwardIssue":{"fields":{"issuetype":{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},"priority":{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},"status":{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}}',
              schema: {
                $ref: '#/components/schemas/IssueLink',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue link ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            "Returned if:\n\n *  issue linking is disabled.\n *  the issue link is not found.\n *  the user doesn't have the required permissions.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue link',
      tags: ['Issue links'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:field:jira',
            'read:issue-link-type:jira',
            'read:issue:jira',
            'read:issue-type:jira',
            'read:priority:jira',
            'read:status:jira',
            'read:avatar:jira',
            'read:issue.time-tracking:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issueLinkType': {
    get: {
      deprecated: false,
      description:
        'Returns a list of all issue link types.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.',
      operationId: 'getIssueLinkTypes',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issueLinkTypes":[{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"},{"id":"1010","inward":"Blocked by","name":"Blocks","outward":"Blocks","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1010"}]}',
              schema: {
                $ref: '#/components/schemas/IssueLinkTypes',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if issue linking is disabled.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue link types',
      tags: ['Issue link types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-link-type:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'createIssueLinkType',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              inward: 'Duplicated by',
              name: 'Duplicate',
              outward: 'Duplicates',
            },
            schema: {
              $ref: '#/components/schemas/IssueLinkType',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}',
              schema: {
                $ref: '#/components/schemas/IssueLinkType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type name is in use.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Create issue link type',
      tags: ['Issue link types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-link-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issueLinkType/{issueLinkTypeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteIssueLinkType',
      parameters: [
        {
          description: 'The ID of the issue link type.',
          in: 'path',
          name: 'issueLinkTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue link type ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete issue link type',
      tags: ['Issue link types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-link-type:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.',
      operationId: 'getIssueLinkType',
      parameters: [
        {
          description: 'The ID of the issue link type.',
          in: 'path',
          name: 'issueLinkTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}',
              schema: {
                $ref: '#/components/schemas/IssueLinkType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue link type ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue link type',
      tags: ['Issue link types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-link-type:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates an issue link type.\n\nTo use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateIssueLinkType',
      parameters: [
        {
          description: 'The ID of the issue link type.',
          in: 'path',
          name: 'issueLinkTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              inward: 'Duplicated by',
              name: 'Duplicate',
              outward: 'Duplicates',
            },
            schema: {
              $ref: '#/components/schemas/IssueLinkType',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":"1000","inward":"Duplicated by","name":"Duplicate","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}',
              schema: {
                $ref: '#/components/schemas/IssueLinkType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue link type ID or the request body are invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  issue linking is disabled.\n *  the issue link type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Update issue link type',
      tags: ['Issue link types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-link-type:jira', 'write:issue-link-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issues/archive/export': {
    put: {
      deprecated: false,
      description:
        "Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.\n\nNote that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.\n\n**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)\n\n**License required:** Premium or Enterprise\n\n**Signed-in users only:** This API can't be accessed anonymously.\n\n**Rate limiting:** Only a single request can be active at any given time.\n\n  \n",
      operationId: 'exportArchivedIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              archivedBy: ['uuid-rep-001', 'uuid-rep-002'],
              archivedDate: {
                dateAfter: '2023-01-01',
                dateBefore: '2023-01-12',
              },
              archivedDateRange: {
                dateAfter: '2023-01-01',
                dateBefore: '2023-01-12',
              },
              issueTypes: ['10001', '10002'],
              projects: ['FOO', 'BAR'],
              reporters: ['uuid-rep-001', 'uuid-rep-002'],
            },
            schema: {
              $ref: '#/components/schemas/ArchivedIssuesFilterRequest',
            },
          },
        },
        description:
          "You can filter the issues in your request by the `projects`, `archivedBy`, `archivedDate`, `issueTypes`, and `reporters` fields. All filters are optional. If you don't provide any filters, you'll get a list of up to one million archived issues.",
        required: true,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              example:
                '{"payload":"{projects=[FOO, BAR], reporters=[uuid-rep-001, uuid-rep-002], issueTypes=[10001, 10002], archivedDate={dateAfterInstant=2023-01-01, dateBeforeInstant=2023-01-12}, archivedBy=[uuid-rep-001, uuid-rep-002]}","progress":0,"status":"ENQUEUED","submittedTime":1623230887000,"taskId":"10990"}',
              schema: {
                $ref: '#/components/schemas/ExportArchivedIssuesTaskProgressResponse',
              },
            },
          },
          description:
            'Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request.',
        },
        '400': {
          content: {
            'application/json': {
              example: '["Your filter contains invalid values {errorMessage}"]',
            },
          },
          description:
            'Returned when:\n\n *  The request is invalid, or the filters provided are incorrect\n *  You requested too many issues for export. The limit is one million issues per request',
        },
        '401': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not logged in."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["User is not an admin."],"errors":{}}',
            },
          },
          description:
            'Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions.',
        },
        '412': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["An issue archival task is already running with ID 1010. To start a new one, cancel the task or wait for it to finish."],"errors":{}}',
            },
          },
          description: 'Returned if a request to export archived issues is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Export archived issue(s)',
      tags: ['Issues'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes': {
    get: {
      deprecated: false,
      description:
        'Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueSecuritySchemes',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issueSecuritySchemes":[{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}]}',
              schema: {
                $ref: '#/components/schemas/SecuritySchemes',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to administer issue security schemes.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get issue security schemes',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'createIssueSecurityScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Newly created issue security scheme',
              levels: [
                {
                  description: 'Newly created level',
                  isDefault: true,
                  members: [
                    {
                      parameter: 'administrators',
                      type: 'group',
                    },
                  ],
                  name: 'New level',
                },
              ],
              name: 'New security scheme',
            },
            schema: {
              $ref: '#/components/schemas/CreateIssueSecuritySchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/SecuritySchemeId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create issue security scheme',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/level': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue security levels.\n\nOnly issue security levels in the context of classic projects are returned.\n\nFiltering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getSecurityLevels',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description:
            'The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.',
          in: 'query',
          name: 'schemeId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.',
          in: 'query',
          name: 'onlyDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","isDefault":true,"issueSecuritySchemeId":"10001","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityscheme/level?id=10021"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanSecurityLevel',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["-1000 is not a valid value. id must be zero or a positive integer."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue security levels',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/level/default': {
    put: {
      deprecated: false,
      description:
        'Sets default issue security levels for schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setDefaultLevels',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultValues: [
                {
                  defaultLevelId: '20000',
                  issueSecuritySchemeId: '10000',
                },
                {
                  defaultLevelId: '30000',
                  issueSecuritySchemeId: '12000',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/SetDefaultLevelsRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue resolution isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set default issue security levels',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/level/member': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue security level members.\n\nOnly issue security level members in the context of classic projects are returned.\n\nFiltering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getSecurityLevelMembers',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description:
            'The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`.',
          in: 'query',
          name: 'schemeId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`.',
          in: 'query',
          name: 'levelId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about the custom field granted the permission\n *  `group` Returns information about the group that is granted the permission\n *  `projectRole` Returns information about the project role granted the permission\n *  `user` Returns information about the user who is granted the permission',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"10000","issueSecurityLevelId":"20010","issueSecuritySchemeId":"10010","holder":{"expand":"group","type":"group"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanSecurityLevelMember',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue security level members',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/project': {
    get: {
      deprecated: false,
      description:
        "Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'searchProjectsUsingSecuritySchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The list of security scheme IDs to be filtered out.',
          in: 'query',
          name: 'issueSecuritySchemeId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The list of project IDs to be filtered out.',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueSecuritySchemeId":"10000","projectId":"10000"}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueSecuritySchemeToProjectMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the search criteria is invalid.If you specify the project ID parameter',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get projects using issue security schemes',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'associateSchemesToProjects',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              oldToNewSecurityLevelMappings: [
                {
                  newLevelId: '30001',
                  oldLevelId: '30000',
                },
              ],
              projectId: '10000',
              schemeId: '20000',
            },
            schema: {
              $ref: '#/components/schemas/AssociateSecuritySchemeWithProjectDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the security scheme isn't found.",
        },
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a task to remove the issue security level is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Associate security scheme to project',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue security schemes.  \nIf you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.\n\nOnly issue security schemes in the context of classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'searchSecuritySchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description:
            'The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityscheme/10000","name":"Default scheme","description":"Default scheme description","defaultLevel":10001,"projectIds":[10002]}',
              schema: {
                $ref: '#/components/schemas/PageBeanSecuritySchemeWithProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["-1000 is not a valid value. id must be zero or a positive integer."],"errors":{}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Search issue security schemes',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns an issue security scheme along with its security levels.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.',
      operationId: 'getIssueSecurityScheme',
      parameters: [
        {
          description:
            'The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}],"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}',
              schema: {
                $ref: '#/components/schemas/SecurityScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get issue security scheme',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates the issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateIssueSecurityScheme',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My issue security scheme description',
              name: 'My issue security scheme name',
            },
            schema: {
              $ref: '#/components/schemas/UpdateIssueSecuritySchemeRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue security scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue security scheme',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members': {
    get: {
      deprecated: false,
      description:
        'Returns issue security level members.\n\nOnly issue security level members in context of classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueSecurityLevelMembers',
      parameters: [
        {
          description:
            'The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.',
          in: 'path',
          name: 'issueSecuritySchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.',
          in: 'query',
          name: 'issueSecurityLevelId',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":10000,"issueSecurityLevelId":10020,"holder":{"expand":"user","type":"user","user":{"accountId":"5b10a2844c20165700ede21g","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}}},{"id":10001,"issueSecurityLevelId":10020,"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"9c559b11-6c5d-4f96-992c-a746cabab28b"}},{"id":10002,"issueSecurityLevelId":10021,"holder":{"type":"assignee"}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueSecurityLevelMember',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if no issue security level members are found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue security level members by issue security scheme',
      tags: ['Issue security level'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:issue-security-level:jira', 'read:project-role:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuesecurityschemes/{schemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteSecurityScheme',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '"You can\'t delete an issue security scheme if any projects are associated with it."',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue security scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue security scheme',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{schemeId}/level': {
    put: {
      deprecated: false,
      description:
        "Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'addSecurityLevel',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              levels: [
                {
                  description: 'First Level Description',
                  isDefault: true,
                  members: [
                    {
                      type: 'reporter',
                    },
                    {
                      parameter: 'jira-administrators',
                      type: 'group',
                    },
                  ],
                  name: 'First Level',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/AddSecuritySchemeLevelsRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the security scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add issue security levels',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue security level.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeLevel',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level to remove.',
          in: 'path',
          name: 'levelId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level that will replace the currently selected level.',
          in: 'query',
          name: 'replaceWith',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '"You can\'t delete an issue security scheme if any projects are associated with it."',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue security level isn't found.",
        },
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a task to remove the issue security level is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove issue security level',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Updates the issue security level.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateSecurityLevel',
      parameters: [
        {
          description: 'The ID of the issue security scheme level belongs to.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level to update.',
          in: 'path',
          name: 'levelId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'New level description',
              name: 'New level name',
            },
            schema: {
              $ref: '#/components/schemas/UpdateIssueSecurityLevelDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 4,000 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue security level isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue security level',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member': {
    put: {
      deprecated: false,
      description:
        'Adds members to the issue security level. You can add up to 100 members per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addSecurityLevelMembers',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level.',
          in: 'path',
          name: 'levelId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              members: [
                {
                  type: 'reporter',
                },
                {
                  parameter: 'jira-administrators',
                  type: 'group',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/SecuritySchemeMembersRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["some-wrong-string is not a valid value. The issue security scheme ID must be a positive integer."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the security scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add issue security level members',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}': {
    delete: {
      deprecated: false,
      description:
        'Removes an issue security level member from an issue security scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeMemberFromSecurityLevel',
      parameters: [
        {
          description: 'The ID of the issue security scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level.',
          in: 'path',
          name: 'levelId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue security level member to be removed.',
          in: 'path',
          name: 'memberId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Issue security scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the security scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove member from issue security level',
      tags: ['Issue security schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuetype': {
    get: {
      deprecated: false,
      description:
        'Returns all issue types.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issue types are only returned as follows:\n\n *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.\n *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.',
      operationId: 'getIssueAllTypes',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all issue types for user',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates an issue type and adds it to the default issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createIssueType',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description',
              name: 'name',
              type: 'standard',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeCreateBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request is invalid because:\n\n *  no content is sent.\n *  the issue type name exceeds 60 characters.\n *  a subtask issue type is requested on an instance where subtasks are disabled.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '409': {
          description: 'Returned if the issue type name is in use.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Create issue type',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:issue-type:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetype/project': {
    get: {
      deprecated: false,
      description:
        'Returns issue types for a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypesForProject',
      parameters: [
        {
          description: 'The ID of the project.',
          in: 'query',
          name: 'projectId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The level of the issue type to filter by. Use:\n\n *  `-1` for Subtask.\n *  `0` for Base.\n *  `1` for Epic.',
          in: 'query',
          name: 'level',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false},{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project is not found.\n *  the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue types for project',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/issuetype/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteIssueType',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the replacement issue type.',
          in: 'query',
          name: 'alternativeIssueTypeId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if any issues cannot be updated with the alternative issue type.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue type is in use and an alternative issue type is not specified.\n *  the issue type or alternative issue type is not found.',
        },
        '409': {
          description:
            'Returned if the issue type is in use and:\n\n *  also specified as the alternative issue type.\n *  is a *standard* issue type and the alternative issue type is a *subtask*.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete issue type',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-type:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns an issue type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueType',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false}',
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue type ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue type',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type:jira', 'read:avatar:jira', 'read:project-category:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates the issue type.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateIssueType',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              avatarId: 1,
              description: 'description',
              name: 'name',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeUpdateBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/IssueTypeDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request is invalid because:\n\n *  no content is sent.\n *  the issue type name exceeds 60 characters.\n *  the avatar is not associated with this issue type.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the issue type is not found.',
        },
        '409': {
          description: 'Returned if the issue type name is in use.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Update issue type',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:issue-type:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetype/{id}/alternatives': {
    get: {
      deprecated: false,
      description:
        'Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAlternativeIssueTypes',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get alternative issue types',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type:jira', 'read:project-category:jira', 'read:project:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetype/{id}/avatar2': {
    post: {
      deprecated: false,
      description:
        "Loads an avatar for the issue type.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST \\ --user email@example.com:<api_token> \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/< image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'createIssueTypeAvatar',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'x',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'y',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The length of each side of the crop region.',
          in: 'query',
          name: 'size',
          required: true,
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          '*/*': {
            schema: {},
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}',
              schema: {
                $ref: '#/components/schemas/Avatar',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.\n *  `cropSize` is missing.\n *  the issue type ID is invalid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Load issue type avatar',
      tags: ['Issue types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:avatar:jira', 'write:issue-type:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetype/{issueTypeId}/properties': {
    get: {
      deprecated: false,
      description:
        'Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.',
      operationId: 'getIssueTypePropertyKeys',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue type ID is invalid.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue type property keys',
      tags: ['Issue type properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteIssueTypeProperty',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the issue type property is deleted.',
        },
        '400': {
          description: 'Returned if the issue type ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the issue type or property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete issue type property',
      tags: ['Issue type properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-type.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.',
      operationId: 'getIssueTypeProperty',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the issue type ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the issue type or property is not found or the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get issue type property',
      tags: ['Issue type properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setIssueTypeProperty',
      parameters: [
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the issue type property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5,
              string: 'string-value',
            },
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue type property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue type property is created.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the issue type ID is invalid.\n *  a property value is not provided.\n *  the property value JSON content is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to modify the issue type.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the issue type is not found.\n *  the user does not have the permission view the issue type.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Set issue type property',
      tags: ['Issue type properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type schemes.\n\nOnly issue type schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllIssueTypeSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type scheme name.\n *  `id` Sorts by issue type scheme ID.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: 'id',
            enum: ['name', '-name', '+name', 'id', '-id', '+id'],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.\n *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with issue type scheme name.',
          in: 'query',
          name: 'queryString',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"10000","name":"Default Issue Type Scheme","description":"Default issue type scheme is the list of global issue types. All newly created issue types will automatically be added to this scheme.","defaultIssueTypeId":"10003","isDefault":true},{"id":"10001","name":"SUP: Kanban Issue Type Scheme","description":"A collection of issue types suited to use in a kanban style project.","projects":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}},{"id":"10002","name":"HR: Scrum issue type scheme","description":"","defaultIssueTypeId":"10004","issueTypes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"description":"Improvement Issue Type","hierarchyLevel":-1,"iconUrl":"www.example.com","id":"1000L","name":"Improvements","subtask":true}]}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all issue type schemes',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createIssueTypeScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultIssueTypeId: '10002',
              description: 'A collection of issue types suited to use in a kanban style project.',
              issueTypeIds: ['10001', '10002', '10003'],
              name: 'Kanban Issue Type Scheme',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"issueTypeSchemeId":"10010"}',
              schema: {
                $ref: '#/components/schemas/IssueTypeSchemeID',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The default issue type ID has to be present in issue type IDs list."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '409': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the scheme name is used by another scheme.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create issue type scheme',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/mapping': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type scheme items.\n\nOnly issue type scheme items used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeSchemesMapping',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.',
          in: 'query',
          name: 'issueTypeSchemeId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"issueTypeSchemeId":"10000","issueTypeId":"10000"},{"issueTypeSchemeId":"10000","issueTypeId":"10001"},{"issueTypeSchemeId":"10000","issueTypeId":"10002"},{"issueTypeSchemeId":"10001","issueTypeId":"10000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeSchemeMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type scheme items',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/project': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.\n\nOnly issue type schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeSchemeForProjects',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          required: true,
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"issueTypeScheme":{"id":"10000","name":"Default Issue Type Scheme","description":"Default issue type scheme is the list of global issue types. All newly created issue types will automatically be added to this scheme.","defaultIssueTypeId":"10003","isDefault":true},"projectIds":["10000","10001"]},{"issueTypeScheme":{"id":"10001","name":"SUP: Kanban Issue Type Scheme","description":"A collection of issue types suited to use in a kanban style project."},"projectIds":["10002"]},{"issueTypeScheme":{"id":"10002","name":"HR: Scrum issue type scheme","description":"","defaultIssueTypeId":"10004","issueTypes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"description":"Improvement Issue Type","hierarchyLevel":-1,"iconUrl":"www.example.com","id":"1000L","name":"Improvements","subtask":true}]}},"projectIds":["10003","10004","10005"]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeSchemeProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type schemes for projects',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Assigns an issue type scheme to a project.\n\nIf any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.\n\nIssue type schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'assignIssueTypeSchemeToProject',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeSchemeId: '10000',
              projectId: '10000',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeProjectAssociation',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["This issue type scheme can\'t be assigned to the project. This is because some issues in this project use issue types not present in the scheme. Before assigning the scheme to the project, update the issue types on these issues: 7"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type scheme or the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign issue type scheme to project',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira', 'write:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue type scheme.\n\nOnly issue type schemes used in classic projects can be deleted.\n\nAny projects assigned to the scheme are reassigned to the default issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteIssueTypeScheme',
      parameters: [
        {
          description: 'The ID of the issue type scheme.',
          in: 'path',
          name: 'issueTypeSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue type scheme is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The default issue type scheme can\'t be removed."],"errors":{}}',
            },
          },
          description: 'Returned if the request is to delete the default issue type scheme.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue type scheme',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-type-scheme:jira', 'write:project:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateIssueTypeScheme',
      parameters: [
        {
          description: 'The ID of the issue type scheme.',
          in: 'path',
          name: 'issueTypeSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultIssueTypeId: '10002',
              description: 'A collection of issue types suited to use in a kanban style project.',
              name: 'Kanban Issue Type Scheme',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeSchemeUpdateDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The default issue type has to be one of the issue types of the scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue type scheme',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype': {
    put: {
      deprecated: false,
      description:
        'Adds issue types to an issue type scheme.\n\nThe added issue types are appended to the issue types list.\n\nIf any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addIssueTypesToIssueTypeScheme',
      parameters: [
        {
          description: 'The ID of the issue type scheme.',
          in: 'path',
          name: 'issueTypeSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10002', '10003'],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["These issue types were not added because they are already present in the issue type scheme: 10002, 10003"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["These issue types were not found: 10000, 10002"],"errors":{}}',
            },
          },
          description: 'Returned if the issue type or the issue type scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add issue types to issue type scheme',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move': {
    put: {
      deprecated: false,
      description:
        'Changes the order of issue types in an issue type scheme.\n\nThe request body parameters must meet the following requirements:\n\n *  all of the issue types must belong to the issue type scheme.\n *  either `after` or `position` must be provided.\n *  the issue type in `after` must not be in the issue type list.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'reorderIssueTypesInIssueTypeScheme',
      parameters: [
        {
          description: 'The ID of the issue type scheme.',
          in: 'path',
          name: 'issueTypeSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10008',
              issueTypeIds: ['10001', '10004', '10002'],
            },
            schema: {
              $ref: '#/components/schemas/OrderOfIssueTypes',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The issue type scheme does not include some of the specified issue types. Issue type IDs missing from the scheme are:  10007, 10008"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Change order of issue types',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}': {
    delete: {
      deprecated: false,
      description:
        'Removes an issue type from an issue type scheme.\n\nThis operation cannot remove:\n\n *  any issue type used by issues.\n *  any issue types from the default issue type scheme.\n *  the last standard issue type from an issue type scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeIssueTypeFromIssueTypeScheme',
      parameters: [
        {
          description: 'The ID of the issue type scheme.',
          in: 'path',
          name: 'issueTypeSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueTypeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Can\'t remove the last standard issue type from the issue type scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access issue type schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type was not found in the issue type scheme."],"errors":{}}',
            },
          },
          description:
            'Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove issue type from issue type scheme',
      tags: ['Issue type schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type screen schemes.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeScreenSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with issue type screen scheme name.',
          in: 'query',
          name: 'queryString',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type screen scheme name.\n *  `id` Sorts by issue type screen scheme ID.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: 'id',
            enum: ['name', '-name', '+name', 'id', '-id', '+id'],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"id":"1","name":"Default Issue Type Screen Scheme","description":"The default issue type screen scheme"},{"id":"10000","name":"Office issue type screen scheme","description":"Managing office projects","projects":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type screen schemes',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createIssueTypeScreenScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeMappings: [
                {
                  issueTypeId: 'default',
                  screenSchemeId: '10001',
                },
                {
                  issueTypeId: '10001',
                  screenSchemeId: '10002',
                },
                {
                  issueTypeId: '10002',
                  screenSchemeId: '10002',
                },
              ],
              name: 'Scrum issue type screen scheme',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeDetails',
            },
          },
        },
        description: 'An issue type screen scheme bean.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/IssueTypeScreenSchemeId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["One or more issue type IDs are repeated, an issue type ID can only be specified once."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["One or more issue type IDs were not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type or screen scheme is not found.',
        },
        '409': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create issue type screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/mapping': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type screen scheme items.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeScreenSchemeMappings',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.',
          in: 'query',
          name: 'issueTypeScreenSchemeId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":4,"values":[{"issueTypeId":"10000","issueTypeScreenSchemeId":"10020","screenSchemeId":"10010"},{"issueTypeId":"10001","issueTypeScreenSchemeId":"10021","screenSchemeId":"10010"},{"issueTypeId":"10002","issueTypeScreenSchemeId":"10022","screenSchemeId":"10010"},{"issueTypeId":"default","issueTypeScreenSchemeId":"10023","screenSchemeId":"10011"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemeItem',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type screen scheme items',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/project': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.\n\nOnly issue type screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueTypeScreenSchemeProjectAssociations',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          required: true,
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"issueTypeScreenScheme":{"id":"1","name":"Default Issue Type Screen Scheme","description":"The default issue type screen scheme"},"projectIds":["10000","10001"]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemesProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type screen schemes for projects',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Assigns an issue type screen scheme to a project.\n\nIssue type screen schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'assignIssueTypeScreenSchemeToProject',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeScreenSchemeId: '10001',
              projectId: '10002',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeProjectAssociation',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only classic projects can have issue type screen schemes assigned."],"errors":{}}',
            },
          },
          description:
            'Returned if:\n\n *  project is not found.\n *  issue type screen scheme is not found.\n *  the project is not a classic project.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type screen scheme or the project are missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign issue type screen scheme to project',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira', 'write:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteIssueTypeScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the issue type screen scheme is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The issue type screen scheme cannot be deleted because it is assigned to one or more projects."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type screen scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue type screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateIssueTypeScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Screens for scrum issue types.',
              name: 'Scrum scheme',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeUpdateDetails',
            },
          },
        },
        description: 'The issue type screen scheme update details.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme name is in use."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type screen scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue type screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping': {
    put: {
      deprecated: false,
      description:
        'Appends issue type to screen scheme mappings to an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'appendMappingsForIssueTypeScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeMappings: [
                {
                  issueTypeId: '10000',
                  screenSchemeId: '10001',
                },
                {
                  issueTypeId: '10001',
                  screenSchemeId: '10002',
                },
                {
                  issueTypeId: '10002',
                  screenSchemeId: '10002',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeScreenSchemeMappingDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["A default mapping cannot be added."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type screen scheme, issue type, or screen scheme is not found.',
        },
        '409': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Sub-tasks are disabled in Jira. At least one of the issue types is a sub-task."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Append mappings to issue type screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default': {
    put: {
      deprecated: false,
      description:
        'Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateDefaultScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              screenSchemeId: '10010',
            },
            schema: {
              $ref: '#/components/schemas/UpdateDefaultScreenScheme',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screenSchemeId has to be provided."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description:
            "Returned if the issue type screen scheme or the screen scheme is not found, or the screen scheme isn't used in classic projects.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update issue type screen scheme default screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove': {
    post: {
      deprecated: false,
      description:
        'Removes issue type to screen scheme mappings from an issue type screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeMappingsFromIssueTypeScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypeIds: ['10000', '10001', '10004'],
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeIds',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the screen scheme mappings are removed from the issue type screen scheme.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issueTypeIds must not contain duplicates."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The issue type screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the issue type screen scheme or one or more issue type mappings are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove mappings from issue type screen scheme',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.\n\nOnly company-managed projects associated with an issue type screen scheme are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getProjectsForIssueTypeScreenScheme',
      parameters: [
        {
          description: 'The ID of the issue type screen scheme.',
          in: 'path',
          name: 'issueTypeScreenSchemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          in: 'query',
          name: 'query',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanProjectDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue type screen scheme projects',
      tags: ['Issue type screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira', 'read:avatar:jira', 'read:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/jql/autocompletedata': {
    get: {
      deprecated: false,
      description:
        'Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.\n\nTo filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAutoComplete',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"jqlReservedWords":["empty","and","or","in","distinct"],"visibleFieldNames":[{"displayName":"summary","operators":["~","!~","is","is not"],"orderable":"true","searchable":"true","types":["java.lang.String"],"value":"summary"},{"auto":"true","cfid":"cf[10880]","displayName":"Sprint - cf[10880]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","searchable":"true","types":["com.atlassian.greenhopper.service.sprint.Sprint"],"value":"Sprint"}],"visibleFunctionNames":[{"displayName":"standardIssueTypes()","isList":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"standardIssueTypes()"},{"displayName":"issuesWithText()","supportsListAndSingleValueOperators":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"issuesWithText()"}]}',
              schema: {
                $ref: '#/components/schemas/JQLReferenceData',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get field reference data (GET)',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.\n\nThis operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.\n\nIt can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAutoCompletePost',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              includeCollapsedFields: true,
              projectIds: [10000, 10001, 10002],
            },
            schema: {
              $ref: '#/components/schemas/SearchAutoCompleteFilter',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"jqlReservedWords":["empty","and","or","in","distinct"],"visibleFieldNames":[{"displayName":"summary","operators":["~","!~","is","is not"],"orderable":"true","searchable":"true","types":["java.lang.String"],"value":"summary"},{"auto":"true","cfid":"cf[10061]","displayName":"Component - cf[10061]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"cf[10061]"},{"auto":"true","cfid":"cf[10062]","displayName":"Component - cf[10062]","operators":["=","!=","in","not in","is","is not"],"orderable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"cf[10062]"},{"auto":"true","displayName":"Component - Component[Dropdown]","operators":["=","!=","in","not in","is","is not"],"searchable":"true","types":["com.atlassian.jira.issue.customfields.option.Option"],"value":"\\"Component[Dropdown]\\""}],"visibleFunctionNames":[{"displayName":"standardIssueTypes()","isList":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"],"value":"standardIssueTypes()"}]}',
              schema: {
                $ref: '#/components/schemas/JQLReferenceData',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get field reference data (POST)',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/jql/autocompletedata/suggestions': {
    get: {
      deprecated: false,
      description:
        'Returns the JQL search auto complete suggestions for a field.\n\nSuggestions can be obtained by providing:\n\n *  `fieldName` to get a list of all values for the field.\n *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.\n *  `fieldName` and `predicateName` to get a list of all predicate values for the field.\n *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getFieldAutoCompleteForQueryString',
      parameters: [
        {
          description: 'The name of the field.',
          in: 'query',
          name: 'fieldName',
          schema: {
            example: 'reporter',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The partial field item name entered by the user.',
          in: 'query',
          name: 'fieldValue',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.',
          in: 'query',
          name: 'predicateName',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The partial predicate item name entered by the user.',
          in: 'query',
          name: 'predicateValue',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"results":[{"displayName":"<b>Ac</b>tiveObjects (AO)","value":"ActiveObjects"},{"displayName":"Atlassian Connect (<b>AC</b>)","value":"Atlassian Connect"},{"displayName":"Atlassian Connect in Jira (<b>AC</b>JIRA)","value":"Atlassian Connect in Jira"}]}',
              schema: {
                $ref: '#/components/schemas/AutoCompleteSuggestions',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if an invalid combination of parameters is passed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get field auto complete suggestions',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-details:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/jql/function/computation': {
    get: {
      deprecated: false,
      description:
        "Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \\- the JQL fragment to replace the custom function clause with.\n\n**[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.\n\nThe new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'getPrecomputations',
      parameters: [
        {
          description:
            'The function key in format:\n\n *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`\n *  Connect: `[App key]__[Module key]`',
          in: 'query',
          name: 'functionKey',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `functionKey` Sorts by the functionKey.\n *  `used` Sorts by the used timestamp.\n *  `created` Sorts by the created timestamp.\n *  `updated` Sorts by the updated timestamp.',
          in: 'query',
          name: 'orderBy',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"id":"cf75a1b0-4ac6-4bd8-8a50-29a465a96520","value":"issue in (TEST-1, TEST-2, TEST-3)","functionKey":"ari:cloud:ecosystem::extension/00000000-1111-2222-3333-4444444/111111-2222-3333-4444-55555/static/issuesWithText","field":"issue","operator":"in","functionName":"issuesWithText","arguments":["Test"],"created":"2023-10-14T05:25:20.000+0000","updated":"2023-10-14T05:25:20.000+0000","used":"2023-10-14T05:25:20.000+0000"},{"id":"2a854f11-d0e1-4260-aea8-64a562a7062a","error":"Error message to be displayed to the user","functionKey":"ari:cloud:ecosystem::extension/00000000-1111-2222-3333-4444444/111111-2222-3333-4444-55555/static/issuesWithText","field":"issue","operator":"=","functionName":"issuesWithText","arguments":["10001"],"created":"2023-10-14T05:25:20.000+0000","updated":"2023-10-14T05:25:20.000+0000","used":"2023-10-14T05:25:20.000+0000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanJqlFunctionPrecomputationBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the function.',
        },
        '404': {
          description: 'Returned if the function is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Get precomputations (apps)',
      tags: ['JQL functions (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:app-data:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    post: {
      deprecated: false,
      description:
        "Update the precomputation value of a function created by a Forge/Connect app.\n\n**[Permissions](#permissions) required:** An API for apps to update their own precomputations.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'updatePrecomputations',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              values: [
                {
                  id: 'f2ef228b-367f-4c6b-bd9d-0d0e96b5bd7b',
                  value: 'issue in (TEST-1, TEST-2, TEST-3)',
                },
                {
                  error: 'Error message to be displayed to the user',
                  id: '2a854f11-d0e1-4260-aea8-64a562a7062a',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/JqlFunctionPrecomputationUpdateRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description: 'Returned if the request is not authenticated as the app that provided the function.',
        },
        '404': {
          description: 'Returned if the function is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Update precomputations (apps)',
      tags: ['JQL functions (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/jql/match': {
    post: {
      deprecated: false,
      description:
        'Checks whether one or more issues would be returned by one or more JQL queries.\n\n**[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'matchIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueIds: [10001, 1000, 10042],
              jqls: ['project = FOO', 'issuetype = Bug', 'summary ~ "some text" AND project in (FOO, BAR)'],
            },
            schema: {
              $ref: '#/components/schemas/IssuesAndJQLQueries',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"matches":[{"matchedIssues":[10000,10004],"errors":[]},{"matchedIssues":[100134,10025,10236],"errors":[]},{"matchedIssues":[],"errors":[]},{"matchedIssues":[],"errors":["Invalid JQL: broken = value"]}]}',
              schema: {
                $ref: '#/components/schemas/IssueMatches',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Check issues against JQL',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-details:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/jql/parse': {
    post: {
      deprecated: false,
      description:
        'Parses and validates JQL queries.\n\nValidation is performed in context of the current user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'parseJqlQueries',
      parameters: [
        {
          description:
            'How to validate the JQL query and treat the validation results. Validation options include:\n\n *  `strict` Returns all errors. If validation fails, the query structure is not returned.\n *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.\n *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.',
          in: 'query',
          name: 'validation',
          required: true,
          schema: {
            default: 'strict',
            enum: ['strict', 'warn', 'none'],
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              queries: [
                'summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER startOfMonth(-1M) ORDER BY updated DESC',
                'issue.property["spaces here"].value in ("Service requests", Incidents)',
                'invalid query',
                'summary = test',
                'summary in test',
                'project = INVALID',
                'universe = 42',
              ],
            },
            schema: {
              $ref: '#/components/schemas/JqlQueriesToParse',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"queries":[{"query":"summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER -5d ORDER BY updated DESC","structure":{"orderBy":{"fields":[{"direction":"desc","field":{"encodedName":"updated","name":"updated"}}]},"where":{"clauses":[{"field":{"encodedName":"summary","name":"summary"},"operand":{"encodedValue":"test","value":"test"},"operator":"~"},{"clauses":[{"field":{"encodedName":"labels","name":"labels"},"operand":{"encodedOperand":"urgent, blocker)","values":[{"encodedValue":"urgent","value":"urgent"},{"encodedValue":"blocker","value":"blocker"}]},"operator":"in"},{"field":{"encodedName":"lastCommentedBy","name":"lastCommentedBy","property":[{"entity":"issue","key":"propertyKey","path":"path.in.property","type":"user"}]},"operand":{"arguments":[],"encodedOperand":"currentUser()","function":"currentUser"},"operator":"="}],"operator":"or"},{"field":{"encodedName":"status","name":"status"},"operator":"changed","predicates":[{"operand":{"arguments":["-1M"],"encodedOperand":"startOfMonth(-1M)","function":"startOfMonth"},"operator":"after"}]}],"operator":"and"}}},{"query":"issue.property[\\"spaces here\\"].value in (\\"Service requests\\", Incidents)","structure":{"where":{"field":{"encodedName":"issue.property[\\"spaces here\\"].value","name":"issue.property[spaces here].value","property":[{"entity":"issue","key":"spaces here","path":"value"}]},"operand":{"encodedOperand":"(\\"Service requests\\", Incidents)","values":[{"encodedValue":"\\"Service requests\\"","value":"Service requests"},{"encodedValue":"Incidents","value":"Incidents"}]},"operator":"in"}}},{"errors":["Error in the JQL Query: Expecting operator but got \'query\'. The valid operators are \'=\', \'!=\', \'<\', \'>\', \'<=\', \'>=\', \'~\', \'!~\', \'IN\', \'NOT IN\', \'IS\' and \'IS NOT\'. (line 1, character 9)"],"query":"invalid query"},{"errors":["The operator \'=\' is not supported by the \'summary\' field."],"query":"summary = test"},{"errors":["Operator \'in\' does not support the non-list value \'\\"test\\"\' for field \'summary\'."],"query":"summary in test"},{"errors":["The value \'INVALID\' does not exist for the field \'project\'."],"query":"project = INVALID"},{"errors":["Field \'universe\' does not exist or you do not have permission to view it."],"query":"universe = 42"}]}',
              schema: {
                $ref: '#/components/schemas/ParsedJqlQueries',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Parse JQL query',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'validate:jql:jira', 'read:jql:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/jql/pdcleaner': {
    post: {
      deprecated: false,
      description:
        'Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.\n\nYou may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'migrateQueries',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              queryStrings: [
                'assignee = mia',
                'issuetype = Bug AND assignee in (mia) AND reporter in (alana) order by lastViewed DESC',
              ],
            },
            schema: {
              $ref: '#/components/schemas/JQLPersonalDataMigrationRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"queriesWithUnknownUsers":[{"convertedQuery":"assignee = unknown","originalQuery":"assignee = mia"}],"queryStrings":["issuetype = Bug AND assignee in (abcde-12345) AND reporter in (abc551-c4e99) order by lastViewed DESC"]}',
              schema: {
                $ref: '#/components/schemas/ConvertedJQLQueries',
              },
            },
          },
          description:
            'Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                type: 'string',
              },
            },
          },
          description:
            'Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Convert user identifiers to account IDs in JQL queries',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira', 'read:jql:jira', 'validate:jql:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/jql/sanitize': {
    post: {
      deprecated: false,
      description:
        "Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.\n\nFor example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project \"Secret project\", the sanitized query replaces the clause with *project = 12345\"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.\n\nNote that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).\n\nBefore sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'sanitiseJqlQueries',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              queries: [
                {
                  query: "project = 'Sample project'",
                },
                {
                  accountId: '5b10ac8d82e05b22cc7d4ef5',
                  query: "project = 'Sample project'",
                },
                {
                  accountId: 'cda2aa1395ac195d951b3387',
                  query: "project = 'Sample project'",
                },
                {
                  accountId: '5b10ac8d82e05b22cc7d4ef5',
                  query: 'invalid query',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/JqlQueriesToSanitize',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"queries":[{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = 12345"},{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = \'Sample project\'","accountId":"5b10ac8d82e05b22cc7d4ef5"},{"initialQuery":"project = \'Sample project\'","sanitizedQuery":"project = 12345","accountId":"cda2aa1395ac195d951b3387"},{"initialQuery":"non-parsable query","errors":{"errorMessages":["Error in the JQL Query: Expecting operator but got \'query\'. The valid operators are \'=\', \'!=\', \'<\', \'>\', \'<=\', \'>=\', \'~\', \'!~\', \'IN\', \'NOT IN\', \'IS\' and \'IS NOT\'. (line 1, character 9)"],"errors":{}},"accountId":"5b10ac8d82e05b22cc7d4ef5"}]}',
              schema: {
                $ref: '#/components/schemas/SanitizedJqlQueries',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The queries has to be provided."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Sanitize JQL queries',
      tags: ['JQL'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jql:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/label': {
    get: {
      deprecated: false,
      description: 'Returns a [paginated](#pagination) list of labels.',
      operationId: 'getAllLabels',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 1000,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"isLast":false,"maxResults":2,"startAt":0,"total":100,"values":["performance","security"]}',
              schema: {
                $ref: '#/components/schemas/PageBeanString',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get all labels',
      tags: ['Labels'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:label:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/license/approximateLicenseCount': {
    get: {
      deprecated: false,
      description:
        'Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getApproximateLicenseCount',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"license.totalApproximateUserCount","value":"1000"}',
              schema: {
                $ref: '#/components/schemas/LicenseMetric',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollections',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access license details."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollections',
              },
            },
          },
          description: 'Returned if the user does not have permission to complete this request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get approximate license count',
      tags: ['License metrics'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:license:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/license/approximateLicenseCount/product/{applicationKey}': {
    get: {
      deprecated: false,
      description:
        'Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getApproximateApplicationLicenseCount',
      parameters: [
        {
          description: 'The ID of the application, represents a specific version of Jira.',
          in: 'path',
          name: 'applicationKey',
          required: true,
          schema: {
            enum: ['jira-core', 'jira-product-discovery', 'jira-software', 'jira-servicedesk'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"license.jira-software.approximateUserCount","value":"115"}',
              schema: {
                $ref: '#/components/schemas/LicenseMetric',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access license details."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have permission to complete this request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get approximate application license count',
      tags: ['License metrics'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:license:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/mypermissions': {
    get: {
      deprecated: false,
      description:
        "Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.\n\nThe user is reported as having a project permission:\n\n *  in the global context, if the user has the project permission in any project.\n *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.\n *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.\n *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\\_PROJECTS, a 400 error will be returned.\n\nThis means that users may be shown as having an issue permission (such as EDIT\\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\\_ISSUES permission for that issue.\n\nFor [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\\_PROJECTS permission.\n\nGlobal permissions are unaffected by context.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.",
      operationId: 'getMyPermissions',
      parameters: [
        {
          description: 'The key of project. Ignored if `projectId` is provided.',
          in: 'query',
          name: 'projectKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of project.',
          in: 'query',
          name: 'projectId',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the issue. Ignored if `issueId` is provided.',
          in: 'query',
          name: 'issueKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue.',
          in: 'query',
          name: 'issueId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).',
          in: 'query',
          name: 'permissions',
          schema: {
            example: 'BROWSE_PROJECTS,EDIT_ISSUES',
            type: 'string',
          },
          'x-changes': [
            {
              announced: '2018-08-01',
              details:
                'https://developer.atlassian.com/cloud/jira/platform/change-notice-get-my-permissions-requires-permissions-query-parameter/',
              effective: '2019-02-01',
              type: 'required',
            },
          ],
          'x-showInExample': 'true',
        },
        {
          in: 'query',
          name: 'projectUuid',
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'projectConfigurationUuid',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the comment.',
          in: 'query',
          name: 'commentId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"permissions":{"EDIT_ISSUES":{"description":"Ability to edit issues.","havePermission":true,"id":"12","key":"EDIT_ISSUES","name":"Edit Issues","type":"PROJECT"}}}',
              schema: {
                $ref: '#/components/schemas/Permissions',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\\_PROJECTS when commentId is provided.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if the project or issue is not found or the user does not have permission to view the project or issue.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get my permissions',
      tags: ['Permissions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:permission:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/mypreferences': {
    delete: {
      deprecated: false,
      description:
        'Deletes a preference of the user, which restores the default value of system defined settings.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.\n *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'removePreference',
      parameters: [
        {
          description: 'The key of the preference.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the key is not provided or not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete preference',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:user-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the value of a preference of the current user.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.\n *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.\n\nThese system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.\n\n *  *user.notifications.watcher* Whether the user gets notified when they are watcher.\n *  *user.notifications.assignee* Whether the user gets notified when they are assignee.\n *  *user.notifications.reporter* Whether the user gets notified when they are reporter.\n *  *user.notifications.mentions* Whether the user gets notified when they are mentions.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPreference',
      parameters: [
        {
          description: 'The key of the preference.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the key is not provided or not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get preference',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:\n\n *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.\n *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.\n *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.\n *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.\n *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.\n\nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.\n *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.\n\nThese system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.\n\n *  *user.notifications.watcher* Whether the user gets notified when they are watcher.\n *  *user.notifications.assignee* Whether the user gets notified when they are assignee.\n *  *user.notifications.reporter* Whether the user gets notified when they are reporter.\n *  *user.notifications.mentions* Whether the user gets notified when they are mentions.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.\n\n**[Permissions](#permissions) required:** Permission to access Jira.",
      operationId: 'setPreference',
      parameters: [
        {
          description: 'The key of the preference. The maximum length is 255 characters.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              type: 'string',
            },
          },
          'text/plain': {
            schema: {
              type: 'string',
            },
          },
        },
        description: 'The value of the preference as a plain text string. The maximum length is 255 characters.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the key or value is not provided or invalid.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set preference',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:user-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/mypreferences/locale': {
    delete: {
      deprecated: true,
      description:
        'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.\n\nDeletes the locale of the user, which restores the default setting.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'deleteLocale',
      parameters: [],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Delete locale',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the locale for the user.\n\nIf the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.",
      operationId: 'getLocale',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"locale":"en_US"}',
              schema: {
                $ref: '#/components/schemas/Locale',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Get locale',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user-configuration:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: true,
      description:
        'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.\n\nSets the locale of the user. The locale must be one supported by the instance of Jira.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'setLocale',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              locale: 'en_US',
            },
            schema: {
              $ref: '#/components/schemas/Locale',
            },
          },
        },
        description: 'The locale defined in a LocaleBean.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Set locale',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/myself': {
    get: {
      deprecated: false,
      description:
        'Returns details for the current user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getCurrentUser',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` Returns all groups, including nested groups, the user belongs to.\n *  `applicationRoles` Returns the application roles the user is assigned to.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}',
              schema: {
                $ref: '#/components/schemas/User',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get current user',
      tags: ['Myself'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/notificationscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.\n\n*Note that you should allow for events without recipients to appear in responses.*\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.',
      operationId: 'getNotificationSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The list of notification schemes IDs to be filtered by',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The list of projects IDs to be filtered by',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.',
          in: 'query',
          name: 'onlyDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":6,"startAt":1,"total":5,"values":[{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanNotificationScheme',
              },
            },
          },
          description:
            'Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["%20. is not a valid value. id must be zero or a positive integer."],"errors":{}}',
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get notification schemes paginated',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:field:jira',
            'read:notification-scheme:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:project-category:jira',
            'read:field-configuration:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a notification scheme with notifications. You can create up to 1000 notifications per request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createNotificationScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My new scheme description',
              name: 'My new notification scheme',
              notificationSchemeEvents: [
                {
                  event: {
                    id: '1',
                  },
                  notifications: [
                    {
                      notificationType: 'Group',
                      parameter: 'jira-administrators',
                    },
                  ],
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/CreateNotificationSchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/NotificationSchemeId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 4000 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/notificationscheme/project': {
    get: {
      deprecated: false,
      description:
        "Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.\n\n**[Permissions](#permissions) required:** Permission to access Jira.",
      operationId: 'getNotificationSchemeToProjectMappings',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The list of notifications scheme IDs to be filtered out',
          in: 'query',
          name: 'notificationSchemeId',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The list of project IDs to be filtered out',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":4,"values":[{"notificationSchemeId":"10001","projectId":"100001"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanNotificationSchemeAndProjectMappingJsonBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get projects using notification schemes paginated',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:notification-scheme:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/notificationscheme/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.',
      operationId: 'getNotificationScheme',
      parameters: [
        {
          description:
            'The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}',
              schema: {
                $ref: '#/components/schemas/NotificationScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the notification scheme is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:field:jira',
            'read:notification-scheme:jira',
            'read:project:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:group:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateNotificationScheme',
      parameters: [
        {
          description: 'The ID of the notification scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated notification scheme description',
              name: 'My updated notification scheme',
            },
            schema: {
              $ref: '#/components/schemas/UpdateNotificationSchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 4000 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the notification scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/notificationscheme/{id}/notification': {
    put: {
      deprecated: false,
      description:
        'Adds notifications to a notification scheme. You can add up to 1000 notifications per request.\n\n*Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addNotifications',
      parameters: [
        {
          description: 'The ID of the notification scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              notificationSchemeEvents: [
                {
                  event: {
                    id: '1',
                  },
                  notifications: [
                    {
                      notificationType: 'Group',
                      parameter: 'jira-administrators',
                    },
                  ],
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/AddNotificationsDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Event type with ID 2 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10001 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the notification scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add notifications to notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/notificationscheme/{notificationSchemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteNotificationScheme',
      parameters: [
        {
          description: 'The ID of the notification scheme.',
          in: 'path',
          name: 'notificationSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["You can’t delete the default notification scheme."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the notification scheme isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}': {
    delete: {
      deprecated: false,
      description:
        'Removes a notification from a notification scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeNotificationFromNotificationScheme',
      parameters: [
        {
          description: 'The ID of the notification scheme.',
          in: 'path',
          name: 'notificationSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the notification.',
          in: 'path',
          name: 'notificationId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Notification scheme with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if either the notification scheme or notification isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Remove notification from notification scheme',
      tags: ['Issue notification schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/permissions': {
    get: {
      deprecated: false,
      description:
        'Returns all permissions, including:\n\n *  global permissions.\n *  project permissions.\n *  global permissions added by plugins.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllPermissions',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"permissions":{"BULK_CHANGE":{"description":"Ability to modify a collection of issues at once. For example, resolve multiple issues in one step.","key":"BULK_CHANGE","name":"Bulk Change","type":"GLOBAL"}}}',
              schema: {
                $ref: '#/components/schemas/Permissions',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Get all permissions',
      tags: ['Permissions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:permission:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissions/check': {
    post: {
      deprecated: false,
      description:
        "Returns:\n\n *  for a list of global permissions, the global permissions granted to a user.\n *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.\n\nIf no account ID is provided, the operation returns details for the logged in user.\n\nNote that:\n\n *  Invalid project and issue IDs are ignored.\n *  A maximum of 1000 projects and 1000 issues can be checked.\n *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.\n *  Empty strings in `projectPermissions.permissions` are ignored.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  **Classic**: `read:jira-work`\n *  **Granular**: `read:permission:jira`\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.",
      operationId: 'getBulkPermissions',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              accountId: '5b10a2844c20165700ede21g',
              globalPermissions: ['ADMINISTER'],
              projectPermissions: [
                {
                  issues: [10010, 10011, 10012, 10013, 10014],
                  permissions: ['EDIT_ISSUES'],
                  projects: [10001],
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/BulkPermissionsRequestBean',
            },
          },
        },
        description: 'Details of the permissions to check.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"globalPermissions":["ADMINISTER"],"projectPermissions":[{"issues":[10010,10013,10014],"permission":"EDIT_ISSUES","projects":[10001]}]}',
              schema: {
                $ref: '#/components/schemas/BulkPermissionGrants',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"PERMISSION_123":"Unrecognized permission"}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description:
            'Returned if:\n\n *  `projectPermissions` is provided without at least one project permission being provided.\n *  an invalid global permission is provided in the global permissions list.\n *  an invalid project permission is provided in the project permissions list.\n *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.\n *  an invalid account ID is provided.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can perform this operation."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
        {},
      ],
      summary: 'Get bulk permissions',
      tags: ['Permissions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:permission:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissions/project': {
    post: {
      deprecated: false,
      description:
        'Returns all the projects where the user is granted a list of project permissions.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getPermittedProjects',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/PermissionsKeysBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PermittedProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if a project permission is not found.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get permitted projects',
      tags: ['Permissions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:permission:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissionscheme': {
    get: {
      deprecated: false,
      description:
        'Returns all permission schemes.\n\n### About permission schemes and grants ###\n\nA permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.\n\n#### Holder object ####\n\nThe `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.\n\nThe `holder` object is defined by the following properties:\n\n *  `type` Identifies the user or group (see the list of types below).\n *  `parameter` As a group\'s name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.\n *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`\n\nThe following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):\n\n *  `anyone` Grant for anonymous users.\n *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.\n *  `assignee` Grant for the user currently assigned to an issue.\n *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).\n *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).\n *  `projectLead` Grant for a project lead.\n *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).\n *  `reporter` Grant for the user who reported the issue.\n *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.\n *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).\n *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).\n\n#### Built-in permissions ####\n\nThe [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.\n\n**Project permissions**\n\n *  `ADMINISTER_PROJECTS`\n *  `BROWSE_PROJECTS`\n *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)\n *  `SERVICEDESK_AGENT` (Jira Service Desk only)\n *  `VIEW_DEV_TOOLS` (Jira Software only)\n *  `VIEW_READONLY_WORKFLOW`\n\n**Issue permissions**\n\n *  `ASSIGNABLE_USER`\n *  `ASSIGN_ISSUES`\n *  `CLOSE_ISSUES`\n *  `CREATE_ISSUES`\n *  `DELETE_ISSUES`\n *  `EDIT_ISSUES`\n *  `LINK_ISSUES`\n *  `MODIFY_REPORTER`\n *  `MOVE_ISSUES`\n *  `RESOLVE_ISSUES`\n *  `SCHEDULE_ISSUES`\n *  `SET_ISSUE_SECURITY`\n *  `TRANSITION_ISSUES`\n\n**Voters and watchers permissions**\n\n *  `MANAGE_WATCHERS`\n *  `VIEW_VOTERS_AND_WATCHERS`\n\n**Comments permissions**\n\n *  `ADD_COMMENTS`\n *  `DELETE_ALL_COMMENTS`\n *  `DELETE_OWN_COMMENTS`\n *  `EDIT_ALL_COMMENTS`\n *  `EDIT_OWN_COMMENTS`\n\n**Attachments permissions**\n\n *  `CREATE_ATTACHMENTS`\n *  `DELETE_ALL_ATTACHMENTS`\n *  `DELETE_OWN_ATTACHMENTS`\n\n**Time tracking permissions**\n\n *  `DELETE_ALL_WORKLOGS`\n *  `DELETE_OWN_WORKLOGS`\n *  `EDIT_ALL_WORKLOGS`\n *  `EDIT_OWN_WORKLOGS`\n *  `WORK_ON_ISSUES`\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getAllPermissionSchemes',
      parameters: [
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"permissionSchemes":[{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}]}',
              schema: {
                $ref: '#/components/schemas/PermissionSchemes',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get all permission schemes',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createPermissionScheme',
      parameters: [
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description',
              name: 'Example permission scheme',
              permissions: [
                {
                  holder: {
                    parameter: 'jira-core-users',
                    type: 'group',
                    value: 'ca85fac0-d974-40ca-a615-7af99c48d24f',
                  },
                  permission: 'ADMINISTER_PROJECTS',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/PermissionScheme',
            },
          },
        },
        description: 'The permission scheme to create.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionScheme',
              },
            },
          },
          description: 'Returned if the permission scheme is created.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create permission scheme',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:permission-scheme:jira',
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissionscheme/{schemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a permission scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deletePermissionScheme',
      parameters: [
        {
          description: 'The ID of the permission scheme being deleted.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the permission scheme is deleted.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the permission scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete permission scheme',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:permission-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a permission scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPermissionScheme',
      parameters: [
        {
          description: 'The ID of the permission scheme to return.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the permission scheme is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get permission scheme',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a permission scheme. Below are some important things to note when using this resource:\n\n *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.\n *  If you want to update only the name and description, then do not send a permissions list in the request.\n *  Sending an empty list will remove all permission grants from the permission scheme.\n\nIf you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).\n\nSee [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updatePermissionScheme',
      parameters: [
        {
          description: 'The ID of the permission scheme to update.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'description',
              name: 'Example permission scheme',
              permissions: [
                {
                  holder: {
                    parameter: 'jira-core-users',
                    type: 'group',
                    value: 'ca85fac0-d974-40ca-a615-7af99c48d24f',
                  },
                  permission: 'ADMINISTER_PROJECTS',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/PermissionScheme',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","id":10000,"name":"Example permission scheme","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}],"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionScheme',
              },
            },
          },
          description: 'Returned if the scheme is updated.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if:\n\n *  the user does not have the necessary permission to update permission schemes.\n *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.',
        },
        '404': {
          description: 'Returned if the permission scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update permission scheme',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:permission-scheme:jira',
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissionscheme/{schemeId}/permission': {
    get: {
      deprecated: false,
      description:
        'Returns all permission grants for a permission scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPermissionSchemeGrants',
      parameters: [
        {
          description: 'The ID of the permission scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"expand":"user,group,projectRole,field,all","permissions":[{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}]}',
              schema: {
                $ref: '#/components/schemas/PermissionGrants',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the permission schemes is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get permission scheme grants',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a permission grant in a permission scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createPermissionGrant',
      parameters: [
        {
          description: 'The ID of the permission scheme in which to create a new permission grant.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              holder: {
                parameter: 'jira-core-users',
                type: 'group',
                value: 'ca85fac0-d974-40ca-a615-7af99c48d24f',
              },
              permission: 'ADMINISTER_PROJECTS',
            },
            schema: {
              $ref: '#/components/schemas/PermissionGrant',
            },
          },
        },
        description: 'The permission grant to create.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionGrant',
              },
            },
          },
          description: 'Returned if the scheme permission is created.',
        },
        '400': {
          description: 'Returned if the value for expand is invalid or the same permission grant is present.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create permission grant',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:permission:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deletePermissionSchemeEntity',
      parameters: [
        {
          description: 'The ID of the permission scheme to delete the permission grant from.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the permission grant to delete.',
          in: 'path',
          name: 'permissionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the permission grant is deleted.',
        },
        '400': {
          description: 'Returned if permission grant with the provided ID is not found.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete permission scheme grant',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:permission:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a permission grant.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPermissionSchemeGrant',
      parameters: [
        {
          description: 'The ID of the permission scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the permission grant.',
          in: 'path',
          name: 'permissionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"holder":{"expand":"group","parameter":"jira-core-users","type":"group","value":"ca85fac0-d974-40ca-a615-7af99c48d24f"},"id":10000,"permission":"ADMINISTER_PROJECTS","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionGrant',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get permission scheme grant',
      tags: ['Permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/priority': {
    get: {
      deprecated: true,
      description:
        'Returns the list of all issue priorities.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPriorities',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Priority',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get priorities',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:priority:jira'],
          state: 'Beta',
        },
      ],
      'x-changes': [
        {
          announced: '2022-10-11',
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-762',
          effective: '2023-04-11',
          type: 'removed',
        },
      ],
    },
    post: {
      deprecated: true,
      description:
        'Creates an issue priority.\n\nDeprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createPriority',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My priority description',
              iconUrl: 'images/icons/priorities/major.png',
              name: 'My new priority',
              statusColor: '#ABCDEF',
            },
            schema: {
              $ref: '#/components/schemas/CreatePriorityDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/PriorityId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access issue type screen schemes."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create priority',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-changes': [
        {
          announced: '2024-09-16',
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1525',
          effective: '2025-03-16',
          type: 'removed',
        },
      ],
    },
  },
  '/rest/api/3/priority/default': {
    put: {
      deprecated: false,
      description:
        'Sets default issue priority.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setDefaultPriority',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '3',
            },
            schema: {
              $ref: '#/components/schemas/SetDefaultPriorityRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue priority isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set default priority',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/priority/move': {
    put: {
      deprecated: false,
      description:
        'Changes the order of issue priorities.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'movePriorities',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10003',
              ids: ['10004', '10005'],
            },
            schema: {
              $ref: '#/components/schemas/ReorderIssuePriorities',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The ids must contain no more than 1,000 items."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue priority isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Move priorities',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/priority/search': {
    get: {
      deprecated: true,
      description:
        'Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:\n\n *  a list of priority IDs. Any invalid priority IDs are ignored.\n *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.\n *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'searchPriorities',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description:
            'The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&projectId=10111`.',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'The name of priority to search for.',
          in: 'query',
          name: 'priorityName',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description: 'Whether only the default priority is returned.',
          in: 'query',
          name: 'onlyDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Use `schemes` to return the associated priority schemes for each priority. Limited to returning first 15 priority schemes per priority.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","isDefault":true,"name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"},{"description":"Very little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","id":"2","isDefault":false,"name":"Trivial","self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanPriority',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Search priorities',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-changes': [
        {
          announced: '2024-05-22',
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1655',
          effective: '2024-11-22',
          type: 'removed',
        },
      ],
    },
  },
  '/rest/api/3/priority/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue priority.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deletePriority',
      parameters: [
        {
          description: 'The ID of the issue priority.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The newPriority has to be provided."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue priority isn't found.",
        },
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a task to delete the issue priority is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete priority',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-changes': [
        {
          announced: '2023-07-18',
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1067',
          effective: '2024-05-24',
          type: 'removed',
        },
      ],
    },
    get: {
      deprecated: false,
      description: 'Returns an issue priority.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPriority',
      parameters: [
        {
          description: 'The ID of the issue priority.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"Major loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","id":"1","name":"Major","self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900"}',
              schema: {
                $ref: '#/components/schemas/Priority',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: "Returned if the issue priority isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get priority',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:priority:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: true,
      description:
        'Updates an issue priority.\n\nAt least one request body parameter must be defined.\n\nDeprecation applies to iconUrl param in request body which will be sunset on 16th Mar 2025. For more details refer to [changelog](https://developer.atlassian.com/changelog/#CHANGE-1525).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updatePriority',
      parameters: [
        {
          description: 'The ID of the issue priority.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated priority description',
              iconUrl: 'images/icons/priorities/minor.png',
              name: 'My updated priority',
              statusColor: '#123456',
            },
            schema: {
              $ref: '#/components/schemas/UpdatePriorityDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue priority isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update priority',
      tags: ['Issue priorities'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-changes': [
        {
          announced: '2024-09-16',
          details: 'https://developer.atlassian.com/changelog/#CHANGE-1525',
          effective: '2025-03-16',
          type: 'removed',
        },
      ],
    },
  },
  '/rest/api/3/priorityscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of priority schemes.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPrioritySchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description:
            'A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`.',
          in: 'query',
          name: 'priorityId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`.',
          in: 'query',
          name: 'schemeId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The name of scheme to search for.',
          in: 'query',
          name: 'schemeName',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description: 'Whether only the default priority is returned.',
          in: 'query',
          name: 'onlyDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description: 'The ordering to return the priority schemes by.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: '+name',
            enum: ['name', '+name', '-name'],
            type: 'string',
          },
        },
        {
          description:
            'A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"This is the default scheme used by all new and unassigned projects","id":"1","isDefault":true,"name":"Default Priority Scheme","priorities":{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]},"projects":{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get priority schemes',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    post: {
      deprecated: false,
      description:
        'Creates a new priority scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createPriorityScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultPriorityId: 10001,
              description: 'My priority scheme description',
              mappings: {
                in: {
                  '10002': 10000,
                  '10005': 10001,
                  '10006': 10001,
                  '10008': 10003,
                },
                out: {},
              },
              name: 'My new priority scheme',
              priorityIds: [10000, 10001, 10003],
              projectIds: [10005, 10006, 10007],
            },
            schema: {
              $ref: '#/components/schemas/CreatePrioritySchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/PrioritySchemeId',
              },
            },
          },
          description: 'Returned if the request is completed.',
        },
        '202': {
          content: {
            'application/json': {
              example:
                '{"id":"10001","task":{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000}}',
              schema: {
                $ref: '#/components/schemas/PrioritySchemeId',
              },
            },
          },
          description: 'Returned if the request is accepted.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.",
        },
        '409': {
          description: 'Returned if an action with this priority scheme is still in progress.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/priorityscheme/mappings': {
    post: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'suggestedPrioritiesForMappings',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              maxResults: 50,
              priorities: {
                add: [10001, 10002],
                remove: [10003],
              },
              projects: {
                add: [10021],
              },
              schemeId: 10005,
              startAt: 0,
            },
            schema: {
              $ref: '#/components/schemas/SuggestedMappingsRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Suggested priorities for mappings',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/priorityscheme/priorities/available': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getAvailablePrioritiesByPriorityScheme',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The string to query priorities on by name.',
          in: 'query',
          name: 'query',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description: 'The priority scheme ID.',
          in: 'query',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'A list of priority IDs to exclude from the results.',
          in: 'query',
          name: 'exclude',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get available priorities by priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/priorityscheme/{schemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a priority scheme.\n\nThis operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deletePriorityScheme',
      parameters: [
        {
          description: 'The priority scheme ID.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Updates a priority scheme. This includes its details, the lists of priorities and projects in it\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updatePriorityScheme',
      parameters: [
        {
          description: 'The ID of the priority scheme.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultPriorityId: 10001,
              description: 'My priority scheme description',
              mappings: {
                in: {
                  '10005': 10002,
                },
                out: {
                  '10004': 10001,
                },
              },
              name: 'My new priority scheme',
              priorities: {
                add: {
                  ids: [10001, 10002],
                },
                remove: {
                  ids: [10003, 10004],
                  mappings: [
                    {
                      in: {
                        '10001': 10011,
                      },
                      out: {
                        '10012': 10002,
                      },
                    },
                  ],
                },
              },
              projects: {
                add: {
                  ids: [10101, 10102],
                },
                remove: {
                  ids: [10103, 10104],
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/UpdatePrioritySchemeRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              example:
                '{"task":{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000},"updated":{"description":"This is the default scheme used by all new and unassigned projects","id":"1","isDefault":true,"name":"Default Priority Scheme","priorities":{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]},"projects":{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}}}',
              schema: {
                $ref: '#/components/schemas/UpdatePrioritySchemeResponseBean',
              },
            },
          },
          description: 'Returned if the request is accepted.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: "Returned if the user doesn't have the necessary permissions.",
        },
        '409': {
          description: 'Returned if an action with this priority scheme is still in progress.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/priorityscheme/{schemeId}/priorities': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of priorities by scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getPrioritiesByPriorityScheme',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The priority scheme ID.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":3,"values":[{"description":"Serious problem that could block progress.","iconUrl":"/images/icons/priorities/high.svg","id":"1","isDefault":false,"name":"High","statusColor":"#f15C75"},{"description":"Has the potential to affect progress.","iconUrl":"/images/icons/priorities/medium.svg","id":"2","isDefault":true,"name":"Medium","statusColor":"#f79232"},{"description":"Minor problem or easily worked around.","iconUrl":"/images/icons/priorities/low.svg","id":"3","isDefault":false,"name":"Low","statusColor":"#707070"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanPriorityWithSequence',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get priorities by priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/priorityscheme/{schemeId}/projects': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of projects by scheme.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getProjectsByPriorityScheme',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The project IDs to filter by. For example, `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The priority scheme ID.',
          in: 'path',
          name: 'schemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The string to query projects on by name.',
          in: 'query',
          name: 'query',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanProject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: "Returned if the request isn't valid.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get projects by priority scheme',
      tags: ['Priority schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/project': {
    get: {
      deprecated: true,
      description:
        'Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getAllProjects',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `lead` Returns information about the project lead.\n *  `projectKeys` Returns all project keys associated with the project.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.",
          in: 'query',
          name: 'recent',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'A list of project properties to return for the project. This parameter accepts a comma-separated list.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"CLASSIC"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"CLASSIC"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Project',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all projects',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-changes': [
        {
          announced: '2018-10-19',
          details:
            'https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-removal-of-get-filters-and-get-all-projects/',
          effective: '2019-04-19',
          type: 'removed',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a project based on a project type template, as shown in the following table:\n\n| Project Type Key | Project Template Key |  \n|--|--|  \n| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  \n| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  \n| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  \nThe project types are available according to the installed Jira features as follows:\n\n *  Jira Core, the default, enables `business` projects.\n *  Jira Service Management enables `service_desk` projects.\n *  Jira Software enables `software` projects.\n\nTo determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createProject',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD',
              avatarId: 10200,
              categoryId: 10120,
              description: 'Cloud migration initiative',
              issueSecurityScheme: 10001,
              key: 'EX',
              leadAccountId: '5b10a0effa615349cb016cd8',
              name: 'Example',
              notificationScheme: 10021,
              permissionScheme: 10011,
              projectTemplateKey: 'com.atlassian.jira-core-project-templates:jira-core-simplified-process-control',
              projectTypeKey: 'business',
              url: 'http://atlassian.com',
            },
            schema: {
              $ref: '#/components/schemas/CreateProjectDetails',
            },
          },
        },
        description: 'The JSON representation of the project being created.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":10010,"key":"EX","self":"https://your-domain.atlassian.net/jira/rest/api/3/project/10042"}',
              schema: {
                $ref: '#/components/schemas/ProjectIdentifiers',
              },
            },
          },
          description: 'Returned if the project is created.',
        },
        '400': {
          description: 'Returned if the request is not valid and the project could not be created.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to create projects.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Create project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project:jira', 'read:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/recent': {
    get: {
      deprecated: false,
      description:
        'Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has one of:\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getRecent',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `permissions` Returns the permissions associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\n *  `*` Returns the project with all available expand options.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              $ref: '#/components/schemas/StringList',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"CLASSIC"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":1619069825000,"totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"CLASSIC"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Project',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get recent projects',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/project/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of projects visible to the user.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects are returned only where the user has one of:\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'searchProjects',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.',
          in: 'query',
          name: 'orderBy',
          schema: {
            default: 'key',
            enum: [
              'category',
              '-category',
              '+category',
              'key',
              '-key',
              '+key',
              'name',
              '-name',
              '+name',
              'owner',
              '-owner',
              '+owner',
              'issueCount',
              '-issueCount',
              '+issueCount',
              'lastIssueUpdatedDate',
              '-lastIssueUpdatedDate',
              '+lastIssueUpdatedDate',
              'archivedDate',
              '+archivedDate',
              '-archivedDate',
              'deletedDate',
              '+deletedDate',
              '-deletedDate',
            ],
            type: 'string',
          },
        },
        {
          description:
            'The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided.',
          in: 'query',
          name: 'keys',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.',
          in: 'query',
          name: 'typeKey',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.",
          in: 'query',
          name: 'categoryId',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.',
          in: 'query',
          name: 'action',
          schema: {
            default: 'view',
            enum: ['view', 'browse', 'edit', 'create'],
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin.',
          in: 'query',
          name: 'status',
          schema: {
            items: {
              default: 'live',
              enum: ['live', 'archived', 'deleted'],
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              $ref: '#/components/schemas/StringList',
            },
            type: 'array',
          },
        },
        {
          description:
            'EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.',
          in: 'query',
          name: 'propertyQuery',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001"},"id":"10001","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"ABC","name":"Alphabetical","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","simplified":false,"style":"classic"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanProject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if no projects matching the search criteria are found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get projects paginated',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/type': {
    get: {
      deprecated: false,
      description:
        'Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAllProjectTypes',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"},{"color":"#AAAAAA","descriptionI18nKey":"jira.project.type.software.description","formattedKey":"Software","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"software"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectType',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all project types',
      tags: ['Project types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/type/accessible': {
    get: {
      deprecated: false,
      description: 'Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.',
      operationId: 'getAllAccessibleProjectTypes',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"},{"color":"#AAAAAA","descriptionI18nKey":"jira.project.type.software.description","formattedKey":"Software","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"software"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectType',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get licensed project types',
      tags: ['Project types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/type/{projectTypeKey}': {
    get: {
      deprecated: false,
      description:
        'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getProjectTypeByKey',
      parameters: [
        {
          description: 'The key of the project type.',
          in: 'path',
          name: 'projectTypeKey',
          required: true,
          schema: {
            enum: ['software', 'service_desk', 'business', 'product_discovery'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"}',
              schema: {
                $ref: '#/components/schemas/ProjectType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if the project type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project type by key',
      tags: ['Project types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/type/{projectTypeKey}/accessible': {
    get: {
      deprecated: false,
      description:
        'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getAccessibleProjectTypeByKey',
      parameters: [
        {
          description: 'The key of the project type.',
          in: 'path',
          name: 'projectTypeKey',
          required: true,
          schema: {
            enum: ['software', 'service_desk', 'business', 'product_discovery'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"color":"#FFFFFF","descriptionI18nKey":"jira.project.type.business.description","formattedKey":"Business","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","key":"business"}',
              schema: {
                $ref: '#/components/schemas/ProjectType',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project type is not accessible to the user.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get accessible project type by key',
      tags: ['Project types'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-type:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes a project.\n\nYou can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            example: '10001',
            type: 'string',
          },
        },
        {
          description:
            'Whether this project is placed in the Jira recycle bin where it will be available for restoration.',
          in: 'query',
          name: 'enableUndo',
          schema: {
            default: true,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the project is deleted.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to delete it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.\n *  `issueTypeHierarchy` The project issue type hierarchy.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of project properties to return for the project. This parameter accepts a comma-separated list.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}',
              schema: {
                $ref: '#/components/schemas/Project',
              },
            },
          },
          description: 'Returned if successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.\n\nAll parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'updateProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            example: '10001',
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              assigneeType: 'PROJECT_LEAD',
              avatarId: 10200,
              categoryId: 10120,
              description: 'Cloud migration initiative',
              issueSecurityScheme: 10001,
              key: 'EX',
              leadAccountId: '5b10a0effa615349cb016cd8',
              name: 'Example',
              notificationScheme: 10021,
              permissionScheme: 10011,
              url: 'http://atlassian.com',
            },
            schema: {
              $ref: '#/components/schemas/UpdateProjectDetails',
            },
          },
        },
        description: 'The project details to be updated.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}',
              schema: {
                $ref: '#/components/schemas/Project',
              },
            },
          },
          description: 'Returned if the project is updated.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if:\n\n *  the user does not have the necessary permission to update project details.\n *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Update project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'write:project:jira',
            'write:project.avatar:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/archive': {
    post: {
      deprecated: false,
      description:
        "Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'archiveProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permissions.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Archive project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/avatar': {
    put: {
      deprecated: false,
      description:
        'Sets the avatar displayed for a project.\n\nUse [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'updateProjectAvatar',
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '10010',
            },
            schema: {
              $ref: '#/components/schemas/Avatar',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to administer the project.',
        },
        '404': {
          description:
            'Returned if the project or avatar is not found or the user does not have permission to view the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Set project avatar',
      tags: ['Project avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project.avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/avatar/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a custom avatar from a project. Note that system avatars cannot be deleted.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'deleteProjectAvatar',
      parameters: [
        {
          description: 'The project ID or (case-sensitive) key.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the avatar.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the avatar is a system avatar or the user does not have permission to administer the project.',
        },
        '404': {
          description:
            'Returned if the project or avatar is not found or the user does not have permission to view the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete project avatar',
      tags: ['Project avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project.avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/avatar2': {
    post: {
      deprecated: false,
      description:
        "Loads an avatar for a project.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token> `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type: image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\" `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).",
      operationId: 'createProjectAvatar',
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'x',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'y',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The length of each side of the crop region.',
          in: 'query',
          name: 'size',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          '*/*': {
            schema: {},
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}',
              schema: {
                $ref: '#/components/schemas/Avatar',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have permission to administer the project or an anonymous call is made to the operation.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Load project avatar',
      tags: ['Project avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project.avatar:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/avatars': {
    get: {
      deprecated: false,
      description:
        'Returns all project avatars, grouped by system and custom avatars.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getAllProjectAvatars',
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"custom":[{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}],"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}]}',
              schema: {
                $ref: '#/components/schemas/ProjectAvatars',
              },
            },
          },
          description: 'Returned if request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all project avatars',
      tags: ['Project avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project.avatar:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/classification-level/default': {
    delete: {
      deprecated: false,
      description:
        'Remove the default data classification level for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeDefaultProjectClassification',
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Remove the default data classification level from a project',
      tags: ['Project classification levels'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    get: {
      deprecated: false,
      description:
        'Returns the default data classification for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getDefaultProjectClassification',
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"classification":{"id":"ari:cloud:platform::classification-tag/5bfa70f7-4af1-44f5-9e12-1ce185f15a38","status":"published","name":"Restricted","rank":1,"description":"Data we hold that would be very damaging and would cause loss of trust with customers and present legal risk if mishandled","guideline":"Access to data must be restricted to only individuals who need access in order to perform their job duties.","color":"RED"}}',
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get the default data classification level of a project',
      tags: ['Project classification levels'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Updates the default data classification level for a project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateDefaultProjectClassification',
      parameters: [
        {
          description: 'The project ID or project key (case-sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 'ari:cloud:platform::classification-tag/dec24c48-5073-4c25-8fef-9d81a992c30c',
            },
            schema: {
              $ref: '#/components/schemas/UpdateDefaultProjectClassificationBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Update the default data classification level of a project',
      tags: ['Project classification levels'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/component': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.\n\nIf your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectComponentsPaginated',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            "[Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `issueCount` Sorts by the count of issues associated with the component.\n *  `lead` Sorts by the user key of the component's project lead.\n *  `name` Sorts by component name.",
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: [
              'description',
              '-description',
              '+description',
              'issueCount',
              '-issueCount',
              '+issueCount',
              'lead',
              '-lead',
              '+lead',
              'name',
              '-name',
              '+name',
            ],
            type: 'string',
          },
        },
        {
          description:
            'The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.',
          in: 'query',
          name: 'componentSource',
          schema: {
            default: 'jira',
            enum: ['jira', 'compass', 'auto'],
            type: 'string',
          },
        },
        {
          description:
            'Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","componentBean":{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},"description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"issueCount":1,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},{"assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","componentBean":{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-11ee-4e70-be56-0242ac120002/fdb3fdec-4e70-11ee-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},"description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"issueCount":5,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanComponentWithIssueCount',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project components paginated',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/components': {
    get: {
      deprecated: false,
      description:
        'Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.\n\nIf your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectComponents',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`.',
          in: 'query',
          name: 'componentSource',
          schema: {
            default: 'jira',
            enum: ['jira', 'compass', 'auto'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"},{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-11ee-4e70-be56-0242ac120002/fdb3fdec-4e70-11ee-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a another Jira component","id":"10050","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"PXA","project":"PROJECTKEY","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectComponent',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project components',
      tags: ['Project components'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:project.component:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/delete': {
    post: {
      deprecated: false,
      description:
        'Deletes a project asynchronously.\n\nThis operation is:\n\n *  transactional, that is, if part of the delete fails the project is not deleted.\n *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteProjectAsynchronously',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete project asynchronously',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project:jira', 'write:project.property:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/features': {
    get: {
      deprecated: false,
      description: 'Returns the list of features for a project.',
      operationId: 'getFeaturesForProject',
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"features":[{"feature":"jsw.classic.roadmap","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-roadmap-feature.svg","localisedDescription":"Your roadmap is an optimized location to create and manage your epics.","localisedName":"Roadmap","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true},{"feature":"jsw.classic.backlog","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-backlog-feature.svg","localisedDescription":"Plan and prioritize work in a dedicated space. To enable and configure the backlog for each board, go to board settings.","localisedName":"Backlog","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true}]}',
              schema: {
                $ref: '#/components/schemas/ContainerForProjectFeatures',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get project features',
      tags: ['Project features'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project.feature:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/features/{featureKey}': {
    put: {
      deprecated: false,
      description: 'Sets the state of a project feature.',
      operationId: 'toggleFeatureForProject',
      parameters: [
        {
          description: 'The ID or (case-sensitive) key of the project.',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the feature.',
          in: 'path',
          name: 'featureKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              state: 'ENABLED',
            },
            schema: {
              $ref: '#/components/schemas/ProjectFeatureState',
            },
          },
        },
        description: 'Details of the feature state change.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"features":[{"feature":"jsw.classic.roadmap","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-roadmap-feature.svg","localisedDescription":"Your roadmap is an optimized location to create and manage your epics.","localisedName":"Roadmap","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true},{"feature":"jsw.classic.backlog","imageUri":"https://jira.atlassian.com/s/sb53l8/b/3/ab8a7691e4738b4f147e293f0864adfd5b8d3c85/_/download/resources/com.atlassian.jira.rest:classic-project-features/simple-backlog-feature.svg","localisedDescription":"Plan and prioritize work in a dedicated space. To enable and configure the backlog for each board, go to board settings.","localisedName":"Backlog","prerequisites":[],"projectId":10001,"state":"ENABLED","toggleLocked":true}]}',
              schema: {
                $ref: '#/components/schemas/ContainerForProjectFeatures',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the project or project feature is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Set project feature state',
      tags: ['Project features'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project.feature:jira', 'read:project.feature:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/properties': {
    get: {
      deprecated: false,
      description:
        'Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectPropertyKeys',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to view the project.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project property keys',
      tags: ['Project properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        'Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.',
      operationId: 'deleteProjectProperty',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the project property is deleted.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to administer the project.',
        },
        '404': {
          description: 'Returned if the project or property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete project property',
      tags: ['Project properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.',
      operationId: 'getProjectProperty',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to view the project.',
        },
        '404': {
          description: 'Returned if the project or property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project property',
      tags: ['Project properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.',
      operationId: 'setProjectProperty',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the project property. The maximum length is 255 characters.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              number: 5,
              string: 'string-value',
            },
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the project property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the project property is created.',
        },
        '400': {
          description: 'Returned if the project key or id is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have permission to administer the project.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Set project property',
      tags: ['Project properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/restore': {
    post: {
      deprecated: false,
      description:
        'Restores a project that has been archived or placed in the Jira recycle bin.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.',
      operationId: 'restore',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"assigneeType":"PROJECT_LEAD","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"components":[{"ari":"ari:cloud:compass:fdb3fdec-4e70-be56-11ee-0242ac120002:component/fdb3fdec-4e70-11ee-be56-0242ac120002/fdb3fdec-11ee-4e70-be56-0242ac120002","assignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"assigneeType":"PROJECT_LEAD","description":"This is a Jira component","id":"10000","isAssigneeTypeValid":false,"lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"metadata":{"icon":"https://www.example.com/icon.png"},"name":"Component 1","project":"HSP","projectId":10000,"realAssignee":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"realAssigneeType":"PROJECT_LEAD","self":"https://your-domain.atlassian.net/rest/api/3/component/10000"}],"description":"This project was created as an example for REST.","email":"from-jira@example.com","id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"issueTypes":[{"avatarId":1,"description":"A task that needs to be done.","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\\",","id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","subtask":false},{"avatarId":10002,"description":"A problem with the software.","entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","hierarchyLevel":0,"iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\\",","id":"1","name":"Bug","scope":{"project":{"id":"10000"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","subtask":false}],"key":"EX","lead":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"properties":{"propertyKey":"propertyValue"},"roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic","url":"https://www.example.com","versions":[]}',
              schema: {
                $ref: '#/components/schemas/Project',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Restore deleted or archived project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-type:jira',
            'read:project:jira',
            'read:project.property:jira',
            'read:user:jira',
            'write:project:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type-hierarchy:jira',
            'read:project-category:jira',
            'read:project-version:jira',
            'read:project.component:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/role': {
    get: {
      deprecated: false,
      description:
        'Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.\n\nNote that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getProjectRoles',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"Administrators":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10002","Developers":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10000","Users":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10001"}',
              schema: {
                additionalProperties: {
                  format: 'uri',
                  type: 'string',
                },
                type: 'object',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description:
            'Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project.',
        },
        '404': {
          description:
            'Returned if the project is not found or or if the user does not have administrative permissions for the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project roles for project',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-role:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/role/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes actors from a project role for the project.\n\nTo remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteActor',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The user account ID of the user to remove from the project role.',
          in: 'query',
          name: 'user',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            "The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.",
          in: 'query',
          name: 'group',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project or project role is not found.\n *  the calling user does not have administrative permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete actors from project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-role:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.\n\nTo check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getProjectRole',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'Exclude inactive users.',
          in: 'query',
          name: 'excludeInactiveUsers',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project or project role is not found.\n *  the user does not have administrative permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project role for project',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds actors to a project role for the project.\n\nTo replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addActorUsers',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              groupId: ['952d12c3-5b5b-4d04-bb32-44d383afc4b2'],
            },
            schema: {
              $ref: '#/components/schemas/ActorsMap',
            },
          },
        },
        description:
          "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.",
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description:
            'Returned if the request is successful. The complete list of actors for the project is returned.\n\nFor example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project is not found.\n *  the user or group is not found.\n *  the group or user is not active.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Add actors to project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the actors for a project role for a project, replacing all existing actors.\n\nTo add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).\n\n**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setActors',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              categorisedActors: {
                'atlassian-group-role-actor-id': ['952d12c3-5b5b-4d04-bb32-44d383afc4b2'],
                'atlassian-user-role-actor': ['12345678-9abc-def1-2345-6789abcdef12'],
              },
            },
            schema: {
              $ref: '#/components/schemas/ProjectRoleActorsUpdateBean',
            },
          },
        },
        description:
          "The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.",
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description:
            'Returned if the request is successful. The complete list of actors for the project is returned.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            'Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project is not found.\n *  a user or group is not found.\n *  a group or user is not active.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Set actors for project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/roledetails': {
    get: {
      deprecated: false,
      description:
        'Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectRoleDetails',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Whether the roles should be filtered to include only those the user is assigned to.',
          in: 'query',
          name: 'currentMember',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          in: 'query',
          name: 'excludeConnectAddons',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","admin":false,"default":true,"roleConfigurable":true,"translatedName":"Developers"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectRoleDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the project is not found or if the user does not have the necessary permissions for the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project role details',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-category:jira', 'read:project-role:jira', 'read:project:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/statuses': {
    get: {
      deprecated: false,
      description:
        'Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getAllStatuses',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"id":"3","name":"Task","self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","statuses":[{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000"},{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5"}],"subtask":false}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/IssueTypeWithStatus',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all statuses for project',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-status:jira', 'read:issue-type:jira', 'read:status:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/version': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectVersionsPaginated',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `description` Sorts by version description.\n *  `name` Sorts by version name.\n *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.\n *  `sequence` Sorts by the order of appearance in the user interface.\n *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: [
              'description',
              '-description',
              '+description',
              'name',
              '-name',
              '+name',
              'releaseDate',
              '-releaseDate',
              '+releaseDate',
              'sequence',
              '-sequence',
              '+sequence',
              'startDate',
              '-startDate',
              '+startDate',
            ],
            type: 'string',
          },
        },
        {
          description:
            'Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).',
          in: 'query',
          name: 'query',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.',
          in: 'query',
          name: 'status',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `issuesstatus` Returns the number of issues in each status category for each version.\n *  `operations` Returns actions that can be performed on the specified version.\n *  `driver` Returns the Atlassian account ID of the version driver.\n *  `approvers` Returns a list containing the approvers for this version.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=0&maxResults=2","startAt":0,"total":7,"values":[{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"},{"archived":false,"description":"Minor Bugfix version","id":"10010","issuesStatusForFixVersion":{"done":100,"inProgress":20,"toDo":10,"unmapped":0},"name":"Next Version","overdue":false,"projectId":10000,"released":false,"self":"https://your-domain.atlassian.net/rest/api/3/version/10010"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanVersion',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project versions paginated',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectIdOrKey}/versions': {
    get: {
      deprecated: false,
      description:
        'Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getProjectVersions',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectIdOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":1278385482288,"releaseDateSet":false,"released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","startDateSet":false,"userReleaseDate":"6/Jul/2010"},{"archived":false,"description":"Minor Bugfix version","id":"10010","issuesStatusForFixVersion":{"done":100,"inProgress":20,"toDo":10,"unmapped":0},"name":"Next Version","overdue":false,"projectId":10000,"releaseDateSet":false,"released":false,"self":"https://your-domain.atlassian.net/rest/api/3/version/10010","startDateSet":false}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Version',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project versions',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectId}/email': {
    get: {
      deprecated: false,
      description:
        "Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.",
      operationId: 'getProjectEmail',
      parameters: [
        {
          description: 'The project ID.',
          in: 'path',
          name: 'projectId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"emailAddress":"jira@example.customdomain.com","emailAddressStatus":["Email address or domain not verified."]}',
              schema: {
                $ref: '#/components/schemas/ProjectEmailAddress',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to read project.',
        },
        '404': {
          description: "Returned if the project or project's sender email address is not found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: "Get project's sender email",
      tags: ['Project email'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project.email:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).\n\nIf `emailAddress` is an empty string, the default email address is restored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)",
      operationId: 'updateProjectEmail',
      parameters: [
        {
          description: 'The project ID.',
          in: 'path',
          name: 'projectId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              emailAddress: 'jira@example.atlassian.net',
            },
            schema: {
              $ref: '#/components/schemas/ProjectEmailAddress',
            },
          },
        },
        description: "The project's sender email address to be set.",
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: "Returned if the project's sender email address is successfully set.",
        },
        '400': {
          description: 'Returned if the request is not valid, if the email address is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have permission to administer the project.',
        },
        '404': {
          description: 'Returned if the project is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: "Set project's sender email",
      tags: ['Project email'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project.email:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectId}/hierarchy': {
    get: {
      deprecated: false,
      description:
        'Get the issue type hierarchy for a next-gen project.\n\nThe issue type hierarchy for a project consists of:\n\n *  *Epic* at level 1 (optional).\n *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.\n *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.',
      operationId: 'getHierarchy',
      parameters: [
        {
          description: 'The ID of the project.',
          in: 'path',
          name: 'projectId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"hierarchy":[{"issueTypes":[{"avatarId":10324,"entityId":"ce32639b-8911-4689-81da-65681f451516","id":10008,"name":"Story"},{"avatarId":10324,"entityId":"ffdbced5-fbfc-4370-a848-94e2ce3751af","id":10001,"name":"Bug"}],"level":0,"name":"Base"},{"issueTypes":[{"avatarId":10179,"entityId":"80f20d47-34dc-4680-8937-936b7e762a35","id":10007,"name":"Epic"}],"level":1,"name":"Epic"},{"issueTypes":[{"avatarId":10573,"entityId":"210b4879-15cc-414c-9746-f8f6b6be0a72","id":10009,"name":"Subtask"}],"level":-1,"name":"Subtask"}],"projectId":10030}',
              schema: {
                $ref: '#/components/schemas/ProjectIssueTypeHierarchy',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get project issue type hierarchy',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-type:jira', 'read:issue-type-hierarchy:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme': {
    get: {
      deprecated: false,
      description:
        'Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'getProjectIssueSecurityScheme',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectKeyOrId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultSecurityLevelId":10021,"description":"Description for the default issue security scheme","id":10000,"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}],"name":"Default Issue Security Scheme","self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000"}',
              schema: {
                $ref: '#/components/schemas/SecurityScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            "Returned if the project is visible to the user but the user doesn't have administrative permissions.",
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get project issue security scheme',
      tags: ['Project permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira', 'read:issue-security-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectKeyOrId}/notificationscheme': {
    get: {
      deprecated: false,
      description:
        'Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'getNotificationSchemeForProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectKeyOrId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"name":"notification scheme name","notificationSchemeEvents":[{"event":{"description":"Event published when an issue is created","id":1,"name":"Issue created"},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]},{"event":{"description":"Custom event that is published together with an issue created event","id":20,"name":"Custom event","templateEvent":{"description":"Event published when an issue is created","id":1,"name":"Issue created"}},"notifications":[{"expand":"group","group":{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"},"id":1,"notificationType":"Group","parameter":"jira-administrators","recipient":"276f955c-63d7-42c8-9520-92d01dca0625"},{"id":2,"notificationType":"CurrentAssignee"},{"expand":"projectRole","id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A project role that represents developers in a project","actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"}},"recipient":"10360"},{"emailAddress":"rest-developer@atlassian.com","id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","recipient":"rest-developer@atlassian.com"},{"expand":"user","id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","recipient":"5b10a2844c20165700ede21g","user":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"}},{"expand":"field","field":{"clauseNames":["cf[10101]","New custom field"],"custom":true,"id":"customfield_10101","key":"customfield_10101","name":"New custom field","navigable":true,"orderable":true,"schema":{"custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101,"type":"project"},"searchable":true,"untranslatedName":"New custom field"},"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","recipient":"customfield_10101"}]}],"projects":[10001,10002],"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme"}',
              schema: {
                $ref: '#/components/schemas/NotificationScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project is not found or the user is not an administrator.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get project notification scheme',
      tags: ['Projects'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project-category:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:user:jira',
            'read:group:jira',
            'read:field:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:notification-scheme:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectKeyOrId}/permissionscheme': {
    get: {
      deprecated: false,
      description:
        'Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).',
      operationId: 'getAssignedPermissionScheme',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectKeyOrId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: "Returned if the user does not have permission to view the project's configuration.",
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view the project.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get assigned permission scheme',
      tags: ['Project permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)',
      operationId: 'assignPermissionScheme',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectKeyOrId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: 10000,
            },
            schema: {
              $ref: '#/components/schemas/IdBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"description","id":10000,"name":"Example permission scheme","self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000"}',
              schema: {
                $ref: '#/components/schemas/PermissionScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            "Returned if:\n\n *  the user does not have the necessary permission to edit the project's configuration.\n *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans.",
        },
        '404': {
          description: 'Returned if the project or permission scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Assign permission scheme',
      tags: ['Project permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:application-role:jira',
            'read:field:jira',
            'read:group:jira',
            'read:permission-scheme:jira',
            'read:permission:jira',
            'read:project-role:jira',
            'read:user:jira',
            'write:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/project/{projectKeyOrId}/securitylevel': {
    get: {
      deprecated: false,
      description:
        'Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.',
      operationId: 'getSecurityLevelsForProject',
      parameters: [
        {
          description: 'The project ID or project key (case sensitive).',
          in: 'path',
          name: 'projectKeyOrId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"levels":[{"description":"Only the reporter and internal staff can see this issue.","id":"100000","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100000"},{"description":"Only internal staff can see this issue.","id":"100001","name":"Staff Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100001"}]}',
              schema: {
                $ref: '#/components/schemas/ProjectIssueSecurityLevels',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '404': {
          description: 'Returned if the project is not found or the user does not have permission to view it.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get project issue security levels',
      tags: ['Project permission schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-security-level:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/projectCategory': {
    get: {
      deprecated: false,
      description:
        'Returns all project categories.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getAllProjectCategories',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},{"description":"Second Project Category","id":"10001","name":"SECOND","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10001"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectCategory',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get all project categories',
      tags: ['Project categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createProjectCategory',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Created Project Category',
              name: 'CREATED',
            },
            schema: {
              $ref: '#/components/schemas/ProjectCategory',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"description":"Created Project Category","id":"10100","name":"CREATED","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100"}',
              schema: {
                $ref: '#/components/schemas/ProjectCategory',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `name` is not provided or exceeds 255 characters.\n *  `description` exceeds 1000 characters.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '409': {
          description: 'Returned if the project category name is in use.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Create project category',
      tags: ['Project categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project-category:jira', 'read:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/projectCategory/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeProjectCategory',
      parameters: [
        {
          description: 'ID of the project category to delete.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the project category is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Delete project category',
      tags: ['Project categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a project category.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getProjectCategoryById',
      parameters: [
        {
          description: 'The ID of the project category.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"}',
              schema: {
                $ref: '#/components/schemas/ProjectCategory',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project category is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get project category by ID',
      tags: ['Project categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a project category.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateProjectCategory',
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Updated Project Category',
              name: 'UPDATED',
            },
            schema: {
              $ref: '#/components/schemas/ProjectCategory',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"Updated Project Category","id":"10100","name":"UPDATED","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100"}',
              schema: {
                $ref: '#/components/schemas/UpdatedProjectCategory',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `name` has been modified and exceeds 255 characters.\n *  `description` has been modified and exceeds 1000 characters.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the project category is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Update project category',
      tags: ['Project categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-category:jira', 'write:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/projectvalidate/key': {
    get: {
      deprecated: false,
      description:
        'Validates a project key by confirming the key is a valid string and not in use.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'validateProjectKey',
      parameters: [
        {
          description: 'The project key.',
          in: 'query',
          name: 'key',
          schema: {
            example: 'HSP',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"projectKey":"A project with that project key already exists."}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Validate project key',
      tags: ['Project key and name validation'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/projectvalidate/validProjectKey': {
    get: {
      deprecated: false,
      description:
        'Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getValidProjectKey',
      parameters: [
        {
          description: 'The project key.',
          in: 'query',
          name: 'key',
          schema: {
            example: 'HSP',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '"VPNE"',
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get valid project key',
      tags: ['Project key and name validation'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/projectvalidate/validProjectName': {
    get: {
      deprecated: false,
      description:
        "Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.\n\n**[Permissions](#permissions) required:** None.",
      operationId: 'getValidProjectName',
      parameters: [
        {
          description: 'The project name.',
          in: 'query',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '"Valid Project Name Example"',
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if a valid project name cannot be generated.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get valid project name',
      tags: ['Project key and name validation'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/resolution': {
    get: {
      deprecated: true,
      description:
        'Returns a list of all issue resolution values.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getResolutions',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"A fix for this issue is checked into the tree and tested.","id":"10000","name":"Fixed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/1"},{"description":"This is what it is supposed to do.","id":"10001","name":"Works as designed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/3"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Resolution',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get resolutions',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:resolution:jira'],
          state: 'Beta',
        },
      ],
      'x-changes': [
        {
          announced: '2022-10-20',
          details: 'https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-767',
          effective: '2023-04-20',
          type: 'removed',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates an issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createResolution',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My resolution description',
              name: 'My new resolution',
            },
            schema: {
              $ref: '#/components/schemas/CreateResolutionDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"10001"}',
              schema: {
                $ref: '#/components/schemas/ResolutionId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create resolution',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/resolution/default': {
    put: {
      deprecated: false,
      description:
        'Sets default issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setDefaultResolution',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              id: '3',
            },
            schema: {
              $ref: '#/components/schemas/SetDefaultResolutionRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue resolution isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set default resolution',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/resolution/move': {
    put: {
      deprecated: false,
      description:
        'Changes the order of issue resolutions.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'moveResolutions',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: '10002',
              ids: ['10000', '10001'],
            },
            schema: {
              $ref: '#/components/schemas/ReorderIssueResolutionsRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The IDs must contain no more than 1,000 items."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Resolution with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue resolution isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Move resolutions',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/resolution/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:\n\n *  a list of resolutions IDs.\n *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'searchResolutions',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: '0',
            type: 'string',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: '50',
            type: 'string',
          },
        },
        {
          description: 'The list of resolutions IDs to be filtered out',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false',
          in: 'query',
          name: 'onlyDefault',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":1,"values":[{"description":"This is what it is supposed to do.","id":"10001","isDefault":true,"name":"Works as designed"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanResolutionJsonBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Search resolutions',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:resolution:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/resolution/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an issue resolution.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteResolution',
      parameters: [
        {
          description: 'The ID of the issue resolution.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the issue resolution that will replace the currently selected resolution.',
          in: 'query',
          name: 'replaceWith',
          required: true,
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The id has to be provided."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Priority with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue resolution isn't found.",
        },
        '409': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if a task to delete the issue resolution is already running.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete resolution',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    get: {
      deprecated: false,
      description:
        'Returns an issue resolution value.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getResolution',
      parameters: [
        {
          description: 'The ID of the issue resolution value.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"A fix for this issue is checked into the tree and tested.","id":"10000","name":"Fixed","self":"https://your-domain.atlassian.net/rest/api/3/resolution/1"}',
              schema: {
                $ref: '#/components/schemas/Resolution',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue resolution value is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get resolution',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:resolution:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates an issue resolution.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateResolution',
      parameters: [
        {
          description: 'The ID of the issue resolution.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'My updated resolution description',
              name: 'My updated resolution',
            },
            schema: {
              $ref: '#/components/schemas/UpdateResolutionDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The length of the description must not exceed 255 characters."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the request isn't valid.",
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["You are not authorized to perform this action. Administrator privileges are required."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Resolution with ID 10000 not found."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the issue resolution isn't found.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update resolution',
      tags: ['Issue resolutions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/role': {
    get: {
      deprecated: false,
      description:
        "Gets a list of all project roles, complete with project role details and default actors.\n\n### About project roles ###\n\n[Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).\n\nProject roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.\n\n#### Members and actors ####\n\nIn the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.\n\nActors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:\n\n *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.\n *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getAllProjectRoles',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ProjectRole',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all project roles',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.\n\n*Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createProjectRole',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project',
              name: 'Developers',
            },
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"A project role that represents developers in a project","id":10360,"name":"Developers","self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '409': {
          description: 'Returned if a project role with the provided name already exists.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create project role',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/role/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteProjectRole',
      parameters: [
        {
          description:
            'The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the project role that will replace the one being deleted.',
          in: 'query',
          name: 'swap',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid or if the replacement project role is not found.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role being deleted is not found.',
        },
        '409': {
          description:
            'Returned if the project role being deleted is in use and a replacement project role is not specified in the request.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete project role',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-role:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getProjectRoleById',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get project role by ID',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Updates either the project role's name or its description.\n\nYou cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'partialUpdateProjectRole',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project',
              name: 'Developers',
            },
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Partial update project role',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Updates the project role's name and description. You must include both a name and a description in the request.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'fullyUpdateProjectRole',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'A project role that represents developers in a project',
              name: 'Developers',
            },
            schema: {
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2","name":"jira-developers"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor","user":"jira-developers"},{"actorUser":{"accountId":"5b10a2844c20165700ede21g"},"displayName":"Mia Krystof","id":10241,"type":"atlassian-user-role-actor"}],"description":"A project role that represents developers in a project","id":10360,"name":"Developers","scope":{"project":{"id":"10000","key":"KEY","name":"Next Gen Project"},"type":"PROJECT"},"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360"}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Fully update project role',
      tags: ['Project roles'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project-role:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/role/{id}/actors': {
    delete: {
      deprecated: false,
      description:
        "Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.\n\nChanging a project role's default actors does not affect project role members for projects already created.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteProjectRoleActorsFromRole',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The user account ID of the user to remove as a default actor.',
          in: 'query',
          name: 'user',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.',
          in: 'query',
          name: 'groupId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.",
          in: 'query',
          name: 'group',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete default actors from project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:project-role:jira',
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getProjectRoleActorsForRole',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get default actors for project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.\n\nChanging a project role's default actors does not affect project role members for projects already created.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'addProjectRoleActorsToRole',
      parameters: [
        {
          description:
            'The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              user: ['admin'],
            },
            schema: {
              $ref: '#/components/schemas/ActorInputBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"actors":[{"actorGroup":{"name":"jira-developers","displayName":"jira-developers","groupId":"952d12c3-5b5b-4d04-bb32-44d383afc4b2"},"displayName":"jira-developers","id":10240,"name":"jira-developers","type":"atlassian-group-role-actor"}]}',
              schema: {
                $ref: '#/components/schemas/ProjectRole',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have administrative permissions.',
        },
        '404': {
          description: 'Returned if the project role is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Add default actors to project role',
      tags: ['Project role actors'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:group:jira',
            'read:project-role:jira',
            'read:project:jira',
            'write:project-role:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getScreens',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with screen name.',
          in: 'query',
          name: 'queryString',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description:
            'The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`.',
          in: 'query',
          name: 'scope',
          schema: {
            items: {
              default: '',
              enum: ['GLOBAL', 'TEMPLATE', 'PROJECT'],
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen ID.\n *  `name` Sorts by screen name.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['name', '-name', '+name', 'id', '-id', '+id'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/screens","startAt":0,"total":3,"values":[{"id":1,"name":"Default Screen","description":"Provides for the update all system fields."},{"id":2,"name":"Workflow Screen","description":"This screen is used in the workflow and enables you to assign issues."},{"id":3,"name":"Resolve Issue Screen","description":"Offers the ability to set resolution, change fix versions, and assign an issue."}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanScreen',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get screens',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira', 'read:screen:jira', 'read:avatar:jira', 'read:project-category:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a screen with a default field tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createScreen',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Enables changes to resolution and linked issues.',
              name: 'Resolve Security Issue Screen',
            },
            schema: {
              $ref: '#/components/schemas/ScreenDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":10005,"name":"Resolve Security Issue Screen","description":"Enables changes to resolution and linked issues."}',
              schema: {
                $ref: '#/components/schemas/Screen',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another screen."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Create screen',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:screen:jira',
            'write:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/screens/addToDefault/{fieldId}': {
    post: {
      deprecated: false,
      description:
        'Adds a field to the default tab of the default screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addFieldToDefaultScreen',
      parameters: [
        {
          description: 'The ID of the field.',
          in: 'path',
          name: 'fieldId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the field it not found or the field is already present.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Add field to default screen',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project:jira', 'read:screen:jira', 'write:screen:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/tabs': {
    get: {
      deprecated: false,
      description:
        'Returns the list of tabs for a bulk of screens.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getBulkScreenTabs',
      parameters: [
        {
          description:
            'The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`.',
          in: 'query',
          name: 'screenId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`.',
          in: 'query',
          name: 'tabId',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page. The maximum number is 100,',
          in: 'query',
          name: 'maxResult',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":2,"values":[{"screenId":10000,"tabId":10001,"tabName":"My Custom Tab 1"},{"screenId":10001,"tabId":10002,"tabName":"My Custom Tab 2"}]}',
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the screen ID or the tab ID is empty.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get bulk screen tabs',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-tab:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/screens/{screenId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.\n\nOnly screens used in classic projects can be deleted.',
      operationId: 'deleteScreen',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen is used in a screen scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the screen is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Delete screen',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:screen:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        'Updates a screen. Only screens used in classic projects can be updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateScreen',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Enables changes to resolution and linked issues for accessibility related issues.',
              name: 'Resolve Accessibility Issue Screen',
            },
            schema: {
              $ref: '#/components/schemas/UpdateScreenDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"id":10005,"name":"Resolve Security Issue Screen","description":"Enables changes to resolution and linked issues."}',
              schema: {
                $ref: '#/components/schemas/Screen',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another screen."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can manage screens."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the screen is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Update screen',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:screen:jira',
            'write:screen:jira',
            'read:avatar:jira',
            'read:project-category:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/screens/{screenId}/availableFields': {
    get: {
      deprecated: false,
      description:
        'Returns the fields that can be added to a tab on a screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAvailableScreenFields',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableField',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Get available screen fields',
      tags: ['Screens'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-field:jira', 'read:screenable-field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs': {
    get: {
      deprecated: false,
      description:
        'Returns the list of tabs for a screen.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.',
      operationId: 'getAllScreenTabs',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The key of the project.',
          in: 'query',
          name: 'projectKey',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableTab',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the screen ID is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Get all screen tabs',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-tab:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a tab for a screen.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addScreenTab',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'Fields Tab',
            },
            schema: {
              $ref: '#/components/schemas/ScreenableTab',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"name":"Fields Tab"}',
              schema: {
                $ref: '#/components/schemas/ScreenableTab',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Create screen tab',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-tab:jira', 'write:screen-tab:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs/{tabId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteScreenTab',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen or screen tab is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete screen tab',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:screen-tab:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates the name of a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'renameScreenTab',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ScreenableTab',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":10000,"name":"Fields Tab"}',
              schema: {
                $ref: '#/components/schemas/ScreenableTab',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen or screen tab is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Update screen tab',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-tab:jira', 'write:screen-tab:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields': {
    get: {
      deprecated: false,
      description:
        'Returns all fields for a screen tab.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.',
      operationId: 'getAllScreenTabFields',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The key of the project.',
          in: 'query',
          name: 'projectKey',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ScreenableField',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen or screen tab is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Get all screen tab fields',
      tags: ['Screen tab fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screenable-field:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a field to a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'addScreenTabField',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              fieldId: 'summary',
            },
            schema: {
              $ref: '#/components/schemas/AddFieldBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"id":"summary","name":"Summary"}',
              schema: {
                $ref: '#/components/schemas/ScreenableField',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen, screen tab, or field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Add screen tab field',
      tags: ['Screen tab fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screenable-field:jira', 'write:screenable-field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}': {
    delete: {
      deprecated: false,
      description:
        'Removes a field from a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'removeScreenTabField',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the field.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen, screen tab, or field is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Remove screen tab field',
      tags: ['Screen tab fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:screenable-field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move': {
    post: {
      deprecated: false,
      description:
        'Moves a screen tab field.\n\nIf `after` and `position` are provided in the request, `position` is ignored.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'moveScreenTabField',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the field.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/MoveFieldBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            "Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Move screen tab field',
      tags: ['Screen tab fields'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:screenable-field:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}': {
    post: {
      deprecated: false,
      description:
        'Moves a screen tab.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'moveScreenTab',
      parameters: [
        {
          description: 'The ID of the screen.',
          in: 'path',
          name: 'screenId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the screen tab.',
          in: 'path',
          name: 'tabId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The position of tab. The base index is 0.',
          in: 'path',
          name: 'pos',
          required: true,
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the screen or screen tab is not found or the position is invalid.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Move screen tab',
      tags: ['Screen tabs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:screen:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screenscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of screen schemes.\n\nOnly screen schemes used in classic projects are returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getScreenSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 25,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.',
          in: 'query',
          name: 'id',
          schema: {
            items: {
              format: 'int64',
              type: 'integer',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with screen scheme name.',
          in: 'query',
          name: 'queryString',
          schema: {
            default: '',
            type: 'string',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen scheme ID.\n *  `name` Sorts by screen scheme name.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['name', '-name', '+name', 'id', '-id', '+id'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"self":"https://your-domain.atlassian.net/rest/api/3/screenscheme?maxResults=25&startAt=0","startAt":0,"total":2,"values":[{"id":10010,"name":"Employee screen scheme","description":"Manage employee data","screens":{"default":10017,"edit":10019,"create":10019,"view":10020},"issueTypeScreenSchemes":{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"id":"10000","name":"Office issue type screen scheme","description":"Managing office projects"}]}},{"id":10032,"name":"Office screen scheme","description":"Manage office data","screens":{"default":10020}}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanScreenScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get screen schemes',
      tags: ['Screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:screen-scheme:jira', 'read:issue-type-screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a screen scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createScreenScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'Manage employee data',
              name: 'Employee screen scheme',
              screens: {
                default: 10017,
                edit: 10019,
                view: 10020,
              },
            },
            schema: {
              $ref: '#/components/schemas/ScreenSchemeDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":10001}',
              schema: {
                $ref: '#/components/schemas/ScreenSchemeId',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["One or more screens assigned to screen types was not found."],"errors":{}}',
            },
          },
          description: 'Returned if a screen used as one of the screen types in the screen scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create screen scheme',
      tags: ['Screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/screenscheme/{screenSchemeId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.\n\nOnly screens schemes used in classic projects can be deleted.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteScreenScheme',
      parameters: [
        {
          description: 'The ID of the screen scheme.',
          in: 'path',
          name: 'screenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the screen scheme is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["The screen scheme cannot be deleted as it is in use in an issue type screen scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the screen scheme is used in an issue type screen scheme.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the screen scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Delete screen scheme',
      tags: ['Screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a screen scheme. Only screen schemes used in classic projects can be updated.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateScreenScheme',
      parameters: [
        {
          description: 'The ID of the screen scheme.',
          in: 'path',
          name: 'screenSchemeId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              name: 'Employee screen scheme v2',
              screens: {
                create: '10019',
                default: '10018',
              },
            },
            schema: {
              $ref: '#/components/schemas/UpdateScreenSchemeDetails',
            },
          },
        },
        description: 'The screen scheme update details.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is used by another scheme."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access screen schemes."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The screen scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the screen scheme or a screen used as one of the screen types is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update screen scheme',
      tags: ['Screen schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:screen-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/search': {
    get: {
      deprecated: false,
      description:
        'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'searchForIssuesUsingJql',
      parameters: [
        {
          description:
            'The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.',
          in: 'query',
          name: 'jql',
          schema: {
            example: 'project = HSP',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.',
          in: 'query',
          name: 'validateQuery',
          schema: {
            default: 'strict',
            enum: ['strict', 'warn', 'none', 'true', 'false'],
            type: 'string',
          },
        },
        {
          description:
            'A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.',
          in: 'query',
          name: 'fields',
          schema: {
            items: {
              default: '*navigable',
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            "Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.",
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.',
          in: 'query',
          name: 'properties',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description: 'Reference fields by their key (rather than ID).',
          in: 'query',
          name: 'fieldsByKeys',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s).',
          in: 'query',
          name: 'failFast',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"expand":"names,schema","issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}],"maxResults":50,"startAt":0,"total":1,"warningMessages":["The value \'bar\' does not exist for the field \'foo\'."]}',
              schema: {
                $ref: '#/components/schemas/SearchResults',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the JQL query is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for issues using JQL (GET)',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:audit-log:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:issue-meta:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nThere is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'searchForIssuesUsingJqlPost',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              expand: ['names', 'schema', 'operations'],
              fields: ['summary', 'status', 'assignee'],
              fieldsByKeys: false,
              jql: 'project = HSP',
              maxResults: 15,
              startAt: 0,
            },
            schema: {
              $ref: '#/components/schemas/SearchRequestBean',
            },
          },
        },
        description: 'A JSON object containing the search request.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"expand":"names,schema","issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10000","created":"2022-10-06T07:32:47.000+0000","filename":"picture.jpg","id":10000,"mimeType":"image/jpeg","self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","size":23123,"thumbnail":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/thumbnail/10000"}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main order flow broken"}]}]},"project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper."}]}]},"created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}],"maxResults":50,"startAt":0,"total":1,"warningMessages":["The value \'bar\' does not exist for the field \'foo\'."]}',
              schema: {
                $ref: '#/components/schemas/SearchResults',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the JQL query is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for issues using JQL (POST)',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/search/approximate-count': {
    post: {
      deprecated: false,
      description:
        'Provide an estimated count of the issues that match the [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned output. This endpoint requires JQL to be bounded.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'countIssues',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = HSP',
            },
            schema: {
              $ref: '#/components/schemas/JQLCountRequestBean',
            },
          },
        },
        description: 'A JSON object containing the search request.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"count":153}',
              schema: {
                $ref: '#/components/schemas/JQLCountResultsBean',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the JQL query cannot be parsed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Count issues using JQL',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/search/id': {
    post: {
      deprecated: false,
      description:
        "Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\nUse the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
      operationId: 'searchForIssuesIds',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              jql: 'project = HSP',
              maxResults: 1000,
              nextPageToken: 'EgQIlMIC',
            },
            schema: {
              $ref: '#/components/schemas/IdSearchRequestBean',
            },
          },
        },
        description: 'A JSON object containing the search request.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueIds":[10000,10001,10002],"nextPageToken":"EgQIlMIC"}',
              schema: {
                $ref: '#/components/schemas/IdSearchResults',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the JQL query is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search issue IDs using JQL',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/search/jql': {
    get: {
      deprecated: false,
      description:
        'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need read-after-write consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.\n\nIf the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'searchAndReconsileIssuesUsingJql',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/SearchAndReconcileRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10001","created":"2023-06-24T19:24:50.000+0000","filename":"debuglog.txt","id":10001,"mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/2/attachments/10001","size":2460}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":"Main order flow broken","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.","created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":"I did some work here.","id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}]}',
              schema: {
                $ref: '#/components/schemas/SearchAndReconcileResults',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the search request is invalid',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if any of the ids provided in reconcileIssues were not found',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for issues using JQL enhanced search (GET)',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:audit-log:jira',
            'read:avatar:jira',
            'read:field-configuration:jira',
            'read:issue-meta:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    post: {
      deprecated: false,
      description:
        'Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need read-after-write consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues are included in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.',
      operationId: 'searchAndReconsileIssuesUsingJqlPost',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/SearchAndReconcileRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issues":[{"expand":"","fields":{"watcher":{"isWatching":false,"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","watchCount":1},"attachment":[{"author":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"content":"https://your-domain.atlassian.net/jira/rest/api/3/attachment/content/10001","created":"2023-06-24T19:24:50.000+0000","filename":"debuglog.txt","id":10001,"mimeType":"text/plain","self":"https://your-domain.atlassian.net/rest/api/2/attachments/10001","size":2460}],"sub-tasks":[{"id":"10000","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2"},"type":{"id":"10000","inward":"Parent","name":"","outward":"Sub-task"}}],"description":"Main order flow broken","project":{"avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000","48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000"},"id":"10000","insight":{"lastIssueUpdateTime":"2021-04-22T05:37:05.000+0000","totalIssueCount":100},"key":"EX","name":"Example","projectCategory":{"description":"First Project Category","id":"10000","name":"FIRST","self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000"},"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","simplified":false,"style":"classic"},"comment":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.","created":"2021-01-17T12:34:00.000+0000","id":"10000","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"Administrators","type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","outwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}},{"id":"10002","inwardIssue":{"fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}},"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3"},"type":{"id":"10000","inward":"depends on","name":"Dependent","outward":"is depended by"}}],"worklog":[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":"I did some work here.","id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}],"updated":1,"timetracking":{"originalEstimate":"10m","originalEstimateSeconds":600,"remainingEstimate":"3m","remainingEstimateSeconds":200,"timeSpent":"6m","timeSpentSeconds":400}},"id":"10002","key":"ED-1","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002"}]}',
              schema: {
                $ref: '#/components/schemas/SearchAndReconcileResults',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the search request is invalid',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if any of the ids provided in reconcileIssues were not found',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Search for issues using JQL enhanced search (POST)',
      tags: ['Issue search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:field.default-value:jira',
            'read:field.option:jira',
            'read:field:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/securitylevel/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns details of an issue security level.\n\nUse [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getIssueSecurityLevel',
      parameters: [
        {
          description: 'The ID of the issue security level.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"Only the reporter and internal staff can see this issue.","id":"10021","name":"Reporter Only","self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021"}',
              schema: {
                $ref: '#/components/schemas/SecurityLevel',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if the issue security level is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Get issue security level',
      tags: ['Issue security level'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:issue-security-level:jira', 'read:project-role:jira', 'read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/serverInfo': {
    get: {
      deprecated: false,
      description:
        'Returns information about the Jira instance.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getServerInfo',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"baseUrl":"https://your-domain.atlassian.net","buildDate":"2020-03-26T22:20:59.000+0000","buildNumber":582,"defaultLocale":{"locale":"en_AU"},"displayUrl":"https://instance.jira.your-domain.com","displayUrlConfluence":"https://instance.confluence.your-domain.com","displayUrlServicedeskHelpCenter":"https://instance.help.your-domain.com","scmInfo":"1f51473f5c7b75c1a69a0090f4832cdc5053702a","serverTime":"2020-03-31T16:43:50.000+0000","serverTimeZone":"Australia/Sydney","serverTitle":"My Jira instance","version":"1001.0.0-SNAPSHOT","versionNumbers":[5,0,0]}',
              schema: {
                $ref: '#/components/schemas/ServerInformation',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
        {},
      ],
      summary: 'Get Jira instance info',
      tags: ['Server info'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/settings/columns': {
    get: {
      deprecated: false,
      description:
        'Returns the default issue navigator columns.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getIssueNavigatorDefaultColumns',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get issue navigator default columns',
      tags: ['Issue navigator settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the default issue navigator columns.\n\nThe `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`\n\nIf no column details are sent, then all default columns are removed.\n\nA navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setIssueNavigatorDefaultColumns',
      parameters: [],
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody',
            },
          },
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/ColumnRequestBody',
            },
          },
        },
        description: 'A navigable field value.',
        required: true,
      },
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if invalid parameters are passed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if a navigable field value is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Set issue navigator default columns',
      tags: ['Issue navigator settings'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/status': {
    get: {
      deprecated: false,
      description:
        'Returns a list of all statuses associated with active workflows.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getStatuses',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}},{"description":"The issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","id":"5","name":"Closed","self":"https://your-domain.atlassian.net/rest/api/3/status/5","statusCategory":{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/StatusDetails',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all statuses',
      tags: ['Workflow statuses'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:status:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/status/{idOrName}': {
    get: {
      deprecated: false,
      description:
        'Returns a status. The status must be associated with an active workflow to be returned.\n\nIf a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.\n\nThis operation can be accessed anonymously.\n\n[Permissions](#permissions) required: None.',
      operationId: 'getStatus',
      parameters: [
        {
          description: 'The ID or name of the status.',
          in: 'path',
          name: 'idOrName',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"description":"The issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","id":"10000","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/status/10000","statusCategory":{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}}',
              schema: {
                $ref: '#/components/schemas/StatusDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the status is not found.\n *  the status is not associated with a workflow.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get status',
      tags: ['Workflow statuses'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:status:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/statuscategory': {
    get: {
      deprecated: false,
      description:
        'Returns a list of all status categories.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getStatusCategories',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"},{"colorName":"green","id":9,"key":"completed","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/StatusCategory',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get all status categories',
      tags: ['Workflow status categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:status:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/statuscategory/{idOrKey}': {
    get: {
      deprecated: false,
      description:
        'Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getStatusCategory',
      parameters: [
        {
          description: 'The ID or key of the status category.',
          in: 'path',
          name: 'idOrKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"colorName":"yellow","id":1,"key":"in-flight","name":"In Progress","self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1"}',
              schema: {
                $ref: '#/components/schemas/StatusCategory',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the status category is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get status category',
      tags: ['Workflow status categories'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:status:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/statuses': {
    delete: {
      deprecated: false,
      description:
        'Deletes statuses by ID.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'deleteStatusesById',
      parameters: [
        {
          description:
            'The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`',
          in: 'query',
          name: 'id',
          required: true,
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk delete Statuses',
      tags: ['Status'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a list of the statuses specified by one or more status IDs.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'getStatusesById',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow.\n *  `workflowUsages` Returns the workflows that use the status.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50`',
          in: 'query',
          name: 'id',
          required: true,
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[{"issueTypes":["10002"],"project":{"id":"1"}}],"workflowUsages":[{"workflowId":"545d80a3-91ff-4949-8b0d-a2bc484e70e5","workflowName":"Workflow 1"}]}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/JiraStatus',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk get statuses',
      tags: ['Status'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates statuses for a global or project scope.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'createStatuses',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: {
                project: {
                  id: '1',
                },
                type: 'PROJECT',
              },
              statuses: [
                {
                  description: 'The issue is resolved',
                  name: 'Finished',
                  statusCategory: 'DONE',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/StatusCreateRequest',
            },
          },
        },
        description: 'Details of the statuses being created and their scope.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[],"workflowUsages":[]}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/JiraStatus',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
        '409': {
          description: 'Returned if another workflow configuration update task is ongoing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk create statuses',
      tags: ['Status'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates statuses by ID.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'updateStatuses',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              statuses: [
                {
                  description: 'The issue is resolved',
                  id: '1000',
                  name: 'Finished',
                  statusCategory: 'DONE',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/StatusUpdateRequest',
            },
          },
        },
        description: 'The list of statuses that will be updated.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The name is too long, maxSize=255"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
        '409': {
          description: 'Returned if another workflow configuration update task is ongoing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk update statuses',
      tags: ['Status'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/statuses/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)\n *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)',
      operationId: 'search',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow.\n *  `workflowUsages` Returns the workflows that use the status.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The project the status is part of or null for global statuses.',
          in: 'query',
          name: 'projectId',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 200,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'Term to match status names against or null to search for all statuses in the search scope.',
          in: 'query',
          name: 'searchString',
          schema: {
            maxLength: 255,
            type: 'string',
          },
        },
        {
          description:
            'Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.',
          in: 'query',
          name: 'statusCategory',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":2,"nextPage":"https://your-domain.atlassian.net/rest/api/3/statuses/search?startAt=2&maxResults=2","self":"https://your-domain.atlassian.net/rest/api/3/statuses/search?startAt=0&maxResults=2","startAt":0,"total":5,"values":[{"description":"The issue is resolved","id":"1000","name":"Finished","scope":{"project":{"id":"1"},"type":"PROJECT"},"statusCategory":"DONE","usages":[{"issueTypes":["10002"],"project":{"id":"1"}}],"workflowUsages":[{"workflowId":"545d80a3-91ff-4949-8b0d-a2bc484e70e5","workflowName":"Workflow 1"}]}]}',
              schema: {
                $ref: '#/components/schemas/PageOfStatuses',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Search statuses paginated',
      tags: ['Status'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/task/{taskId}': {
    get: {
      deprecated: false,
      description:
        'Returns the status of a [long-running asynchronous task](#async).\n\nWhen a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.\n\n**Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.\n\n *  `read:jira-work`\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  Creator of the task.',
      operationId: 'getTask',
      parameters: [
        {
          description: 'The ID of the task.',
          in: 'path',
          name: 'taskId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task description","status":"COMPLETE","result":"the task result, this may be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1501708132800,"started":1501708132900,"finished":1501708133000,"lastUpdate":1501708133000}',
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the task is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get task',
      tags: ['Tasks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/task/{taskId}/cancel': {
    post: {
      deprecated: false,
      description:
        'Cancels a task.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  Creator of the task.',
      operationId: 'cancelTask',
      parameters: [
        {
          description: 'The ID of the task.',
          in: 'path',
          name: 'taskId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '202': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if cancellation of the task is not possible.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the task is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Cancel task',
      tags: ['Tasks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:async-task:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/uiModifications': {
    get: {
      deprecated: false,
      description:
        "Gets UI modifications. UI modifications can only be retrieved by Forge apps.\n\n**[Permissions](#permissions) required:** None.\n\nThe new `read:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'getUiModifications',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `data` Returns UI modification data.\n *  `contexts` Returns UI modification contexts.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":3,"values":[{"id":"d7dbda8a-6239-4b63-8e13-a5ef975c8e61","name":"Reveal Story Points","description":"Reveals Story Points field when any Sprint is selected.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d7dbda8a-6239-4b63-8e13-a5ef975c8e61","data":"{field: \'Story Points\', config: {hidden: false}}","contexts":[{"id":"1533537a-bda3-4ac6-8481-846128cd9ef4","projectId":"10000","issueTypeId":"10000","viewType":"GIC","isAvailable":true},{"id":"c016fefa-6eb3-40c9-8596-4c4ef273e67c","projectId":"10000","issueTypeId":"10001","viewType":"IssueView","isAvailable":true}]},{"id":"e4fe8db5-f82f-416b-a3aa-b260b55da577","name":"Set Assignee","description":"Sets the Assignee field automatically.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/e4fe8db5-f82f-416b-a3aa-b260b55da577","contexts":[{"id":"8b3740f9-8780-4958-8228-69dcfbda11d9","projectId":"10000","issueTypeId":"10000","viewType":"GIC","isAvailable":true}]},{"id":"1453f993-79ce-4389-a36d-eb72d5c85dd6","name":"Hide Labels","description":"Hides Labels if any component is provided.","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/1453f993-79ce-4389-a36d-eb72d5c85dd6","contexts":[]},{"id":"d3f4097e-8d8e-451e-9fb6-27c3c8c3bfff","name":"Wildcard example","description":"This context is applied to all issue types","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d3f4097e-8d8e-451e-9fb6-27c3c8c3bfff","contexts":[{"id":"521f2181-5d5e-46ea-9fc9-871bbf245b8b","projectId":"10000","issueTypeId":null,"viewType":"GIC","isAvailable":true}]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanUiModificationDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the request is not from a Forge app.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get UI modifications',
      tags: ['UI modifications (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'read:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Creates a UI modification. UI modification can only be created by Forge apps.\n\nEach app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.\n\n**[Permissions](#permissions) required:**\n\n *  *None* if the UI modification is created without contexts.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'createUiModification',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              contexts: [
                {
                  issueTypeId: '10000',
                  projectId: '10000',
                  viewType: 'GIC',
                },
                {
                  issueTypeId: '10001',
                  projectId: '10000',
                  viewType: 'IssueView',
                },
                {
                  issueTypeId: '10002',
                  projectId: '10000',
                  viewType: null,
                },
              ],
              data: "{field: 'Story Points', config: {hidden: false}}",
              description: 'Reveals Story Points field when any Sprint is selected.',
              name: 'Reveal Story Points',
            },
            schema: {
              $ref: '#/components/schemas/CreateUiModificationDetails',
            },
          },
        },
        description: 'Details of the UI modification.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"id":"d7dbda8a-6239-4b63-8e13-a5ef975c8e61","self":"https://api.atlassian.com/ex/jira/{cloudid}/rest/api/2/uiModifications/d7dbda8a-6239-4b63-8e13-a5ef975c8e61"}',
              schema: {
                $ref: '#/components/schemas/UiModificationIdentifiers',
              },
            },
          },
          description: 'Returned if the UI modification is created.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the request is not from a Forge app.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"details":{"issueTypesNotFound":{"10001":["10000","10001"]},"projectNotFound":["10000"]},"errorMessages":["Project with ID \'10000\' was not found.","Project with ID \'10001\'. The following issue types were not found: [10000, 10001]"],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/DetailedErrorCollection',
              },
            },
          },
          description: 'Returned if a project or an issue type in the context are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Create UI modification',
      tags: ['UI modifications (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'write:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/uiModifications/{uiModificationId}': {
    delete: {
      deprecated: false,
      description:
        "Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.\n\n**[Permissions](#permissions) required:** None.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'deleteUiModification',
      parameters: [
        {
          description: 'The ID of the UI modification.',
          in: 'path',
          name: 'uiModificationId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the UI modification is deleted.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the request is not from a Forge app.',
        },
        '404': {
          description: 'Returned if the UI modification is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Delete UI modification',
      tags: ['UI modifications (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Updates a UI modification. UI modification can only be updated by Forge apps.\n\nEach UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.\n\n**[Permissions](#permissions) required:**\n\n *  *None* if the UI modification is created without contexts.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'updateUiModification',
      parameters: [
        {
          description: 'The ID of the UI modification.',
          in: 'path',
          name: 'uiModificationId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              contexts: [
                {
                  issueTypeId: '10000',
                  projectId: '10000',
                  viewType: 'GIC',
                },
                {
                  issueTypeId: '10001',
                  projectId: '10000',
                  viewType: 'IssueView',
                },
              ],
              data: "{field: 'Story Points', config: {hidden: true}}",
              name: 'Updated Reveal Story Points',
            },
            schema: {
              $ref: '#/components/schemas/UpdateUiModificationDetails',
            },
          },
        },
        description: 'Details of the UI modification.',
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the UI modification is updated.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the request is not from a Forge app.',
        },
        '404': {
          content: {
            'application/json': {
              example:
                '{"details":{"issueTypesNotFound":{"10001":["10000","10001"]},"projectNotFound":["10000"]},"errorMessages":["Project with ID \'10000\' was not found.","Project with ID \'10001\'. The following issue types were not found: [10000, 10001]"],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/DetailedErrorCollection',
              },
            },
          },
          description: 'Returned if the UI modification, a project or an issue type in the context are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Update UI modification',
      tags: ['UI modifications (apps)'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'write:app-data:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/universal_avatar/type/{type}/owner/{entityId}': {
    get: {
      deprecated: false,
      description:
        'Returns the system and custom avatars for a project, issue type or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  for system avatars, none.\n *  for priority avatars, none.',
      operationId: 'getAvatars',
      parameters: [
        {
          description: 'The avatar type.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['project', 'issuetype', 'priority'],
            type: 'string',
          },
        },
        {
          description: 'The ID of the item the avatar is associated with.',
          in: 'path',
          name: 'entityId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"custom":[{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}],"system":[{"id":"1000","isDeletable":false,"isSelected":false,"isSystemAvatar":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}]}',
              schema: {
                $ref: '#/components/schemas/Avatars',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Get avatars',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        "Loads a custom avatar for a project, issue type or priority.\n\nSpecify the avatar's local file location in the body of the request. Also, include the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).\n *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token> `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type: image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\" `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`\n\nThe avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.\n\nThe cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.\n\nAfter creating the avatar use:\n\n *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.\n *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.\n *  [Update priority](#api-rest-api-3-priority-id-put) to set it as the priority's displayed avatar.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'storeAvatar',
      parameters: [
        {
          description: 'The avatar type.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['project', 'issuetype', 'priority'],
            type: 'string',
          },
        },
        {
          description: 'The ID of the item the avatar is associated with.',
          in: 'path',
          name: 'entityId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The X coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'x',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The Y coordinate of the top-left corner of the crop region.',
          in: 'query',
          name: 'y',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The length of each side of the crop region.',
          in: 'query',
          name: 'size',
          required: true,
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          '*/*': {
            schema: {},
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"id":"1010","isDeletable":true,"isSelected":false,"isSystemAvatar":false}',
              schema: {
                $ref: '#/components/schemas/Avatar',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            "Returned if:\n\n *  an image isn't included in the request.\n *  the image type is unsupported.\n *  the crop parameters extend the crop area beyond the edge of the image.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permissions.',
        },
        '404': {
          description:
            'Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Load avatar',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:avatar:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes an avatar from a project, issue type or priority.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteAvatar',
      parameters: [
        {
          description: 'The avatar type.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['project', 'issuetype', 'priority'],
            type: 'string',
          },
        },
        {
          description: 'The ID of the item the avatar is associated with.',
          in: 'path',
          name: 'owningObjectId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the avatar.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description:
            'Returned if the user does not have permission to delete the avatar, the avatar is not deletable.',
        },
        '404': {
          description: 'Returned if the avatar type, associated item ID, or avatar ID is invalid.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
        {},
      ],
      summary: 'Delete avatar',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/universal_avatar/view/type/{type}': {
    get: {
      deprecated: false,
      description:
        'Returns the default project, issue type or priority avatar image.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.',
      operationId: 'getAvatarImageByType',
      parameters: [
        {
          description: 'The icon type of the avatar.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['issuetype', 'project', 'priority'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.',
          in: 'query',
          name: 'size',
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'The format to return the avatar image in. If not provided the original content format is returned.',
          in: 'query',
          name: 'format',
          schema: {
            enum: ['png', 'svg'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            '*/*': {},
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody',
              },
            },
            'image/png': {},
            'image/svg+xml': {},
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get avatar image by type',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}': {
    get: {
      deprecated: false,
      description:
        'Returns a project, issue type or priority avatar image by ID.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  For system avatars, none.\n *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  For priority avatars, none.',
      operationId: 'getAvatarImageByID',
      parameters: [
        {
          description: 'The icon type of the avatar.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['issuetype', 'project', 'priority'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The ID of the avatar.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.',
          in: 'query',
          name: 'size',
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'The format to return the avatar image in. If not provided the original content format is returned.',
          in: 'query',
          name: 'format',
          schema: {
            enum: ['png', 'svg'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            '*/*': {},
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody',
              },
            },
            'image/png': {},
            'image/svg+xml': {},
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get avatar image by ID',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}': {
    get: {
      deprecated: false,
      description:
        'Returns the avatar image for a project, issue type or priority.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  For system avatars, none.\n *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.\n *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.\n *  For priority avatars, none.',
      operationId: 'getAvatarImageByOwner',
      parameters: [
        {
          description: 'The icon type of the avatar.',
          in: 'path',
          name: 'type',
          required: true,
          schema: {
            enum: ['issuetype', 'project', 'priority'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The ID of the project or issue type the avatar belongs to.',
          in: 'path',
          name: 'entityId',
          required: true,
          schema: {
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The size of the avatar image. If not provided the default size is returned.',
          in: 'query',
          name: 'size',
          schema: {
            enum: ['xsmall', 'small', 'medium', 'large', 'xlarge'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'The format to return the avatar image in. If not provided the original content format is returned.',
          in: 'query',
          name: 'format',
          schema: {
            enum: ['png', 'svg'],
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            '*/*': {},
            'application/json': {
              schema: {
                $ref: '#/components/schemas/StreamingResponseBody',
              },
            },
            'image/png': {},
            'image/svg+xml': {},
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            '*/*': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
            'image/png': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
            'image/svg+xml': {
              example: '{"errorMessages":["Human readable error message"],"errors":{}}',
            },
          },
          description: 'Returned if an avatar is not found or an avatar matching the requested size is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get avatar image by owner',
      tags: ['Avatars'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user': {
    delete: {
      deprecated: false,
      description:
        "Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.\n\n**[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).",
      operationId: 'removeUser',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'key',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the user cannot be removed.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {},
      ],
      summary: 'Delete user',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
    get: {
      deprecated: false,
      description:
        "Returns a user.\n\nPrivacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getUser',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.',
          in: 'query',
          name: 'key',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` includes all groups and nested groups to which the user belongs.\n *  `applicationRoles` includes details of all the applications to which the user has access.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}',
              schema: {
                $ref: '#/components/schemas/User',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the calling user does not have the *Browse users and groups* global permission.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Get user',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.\n\nIf the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createUser',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              emailAddress: 'mia@atlassian.com',
            },
            schema: {
              $ref: '#/components/schemas/NewUserDetails',
            },
          },
        },
        description: 'Details about the user to be created.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}',
              schema: {
                $ref: '#/components/schemas/User',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid or the number of licensed users is exceeded.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {},
      ],
      summary: 'Create user',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/user/assignable/multiProjectSearch': {
    get: {
      deprecated: false,
      description:
        "Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** None.",
      operationId: 'findBulkAssignableUsers',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.",
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description: 'A list of project keys (case sensitive). This parameter accepts a comma-separated list.',
          in: 'query',
          name: 'projectKeys',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `projectKeys` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if one or more of the projects is not found.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users assignable to projects',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/assignable/search': {
    get: {
      deprecated: false,
      description:
        "Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:\n\n *  a new issue, by providing the `projectKeyOrId`.\n *  an updated issue, by providing the `issueKey`.\n *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).\n\nIn all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)",
      operationId: 'findAssignableUsers',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.",
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description: 'The sessionId of this request. SessionId is the same until the assignee is set.',
          in: 'query',
          name: 'sessionId',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description: 'The project ID or project key (case sensitive). Required, unless `issueKey` is specified.',
          in: 'query',
          name: 'project',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the issue. Required, unless `project` is specified.',
          in: 'query',
          name: 'issueKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the transition.',
          in: 'query',
          name: 'actionDescriptorId',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
        {
          in: 'query',
          name: 'recommend',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `issueKey` or `project` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the project, issue, or transition is not found.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users assignable to issues',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/bulk': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of the users specified by one or more account IDs.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'bulkGetUsers',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 10,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'key',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            items: {
              example: '5b10ac8d82e05b22cc7d4ef5',
              maxLength: 128,
              type: 'string',
            },
            maxLength: 128,
            type: 'array',
          },
          'x-showInExample': 'true',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":100,"startAt":0,"total":1,"values":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanUser',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `accountID` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Bulk get users',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:application-role:jira', 'read:group:jira', 'read:user:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/user/bulk/migration': {
    get: {
      deprecated: false,
      description:
        'Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'bulkGetUsersMigration',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 10,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            "Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.",
          in: 'query',
          name: 'username',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            "Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.",
          in: 'query',
          name: 'key',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"username":"mia","accountId":"5b10a2844c20165700ede21g"},{"username":"emma","accountId":"5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/UserMigrationBean',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `key` or `username`',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get account IDs for users',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/user/columns': {
    delete: {
      deprecated: false,
      description:
        "Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.\n *  Permission to access Jira, to set the calling user's columns.",
      operationId: 'resetUserColumns',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {},
      ],
      summary: 'Reset user default columns',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.\n *  Permission to access Jira, to get the calling user's column details.",
      operationId: 'getUserDefaultColumns',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ColumnItem',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the requested user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Get user default columns',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user.columns:jira', 'read:filter.column:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.\n\nThe parameters for this resource are expressed as HTML form data. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.\n *  Permission to access Jira, to set the calling user's columns.",
      operationId: 'setUserColumns',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
      ],
      requestBody: {
        content: {
          '*/*': {
            schema: {
              $ref: '#/components/schemas/UserColumnRequestBody',
            },
          },
          'multipart/form-data': {
            schema: {
              $ref: '#/components/schemas/UserColumnRequestBody',
            },
          },
        },
        description: 'The ID of a column to set. To set multiple columns, send multiple `columns` parameters.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the requested user is not found.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
        '500': {
          description: 'Returned if an invalid issue table column ID is sent.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {},
      ],
      summary: 'Set user default columns',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/user/email': {
    get: {
      deprecated: false,
      description:
        "Returns a user's email address regardless of the user\\\\u2019s profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603)",
      operationId: 'getUserEmail',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: 'name@example.com',
              schema: {
                $ref: '#/components/schemas/UnrestrictedUserEmail',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the calling app is not approved to use this API.',
        },
        '401': {
          description:
            'Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API).',
        },
        '404': {
          description: "Returned if a user with the given `accountId` doesn't exist",
        },
        '503': {
          description: 'Indicates the API is not currently enabled',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get user email',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:email-address:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/email/bulk': {
    get: {
      deprecated: false,
      description:
        "Returns a user's email address regardless of the user\\\\u2019s profile visibility settings. For Connect apps, this API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603)",
      operationId: 'getUserEmailBulk',
      parameters: [
        {
          description:
            'The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            items: {
              maxLength: 128,
              type: 'string',
            },
            maxLength: 128,
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/UnrestrictedUserEmail',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the calling app is not approved to use this API.',
        },
        '401': {
          description:
            'Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API).',
        },
        '503': {
          description: 'Indicates the API is not currently enabled.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Get user email bulk',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:email-address:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/groups': {
    get: {
      deprecated: false,
      description:
        'Returns the groups to which a user belongs.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getUserGroups',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          required: true,
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'key',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"groupId":"276f955c-63d7-42c8-9520-92d01dca0625","name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"}',
              schema: {
                items: {
                  $ref: '#/components/schemas/GroupName',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the calling user does not have the *Browse users and groups* global permission.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Get user groups',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:group:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/permission/search': {
    get: {
      deprecated: false,
      description:
        "Returns a list of users who fulfill these criteria:\n\n *  their user attributes match a search string.\n *  they have a set of permissions for a project or issue.\n\nIf no search string is provided, a list of all users with the permissions is returned.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.",
      operationId: 'findUsersWithAllPermissions',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.",
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description:
            'A comma separated list of permissions. Permissions can be specified as any:\n\n *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).\n *  custom project permission added by Connect apps.\n *  (deprecated) one of the following:\n    \n     *  ASSIGNABLE\\_USER\n     *  ASSIGN\\_ISSUE\n     *  ATTACHMENT\\_DELETE\\_ALL\n     *  ATTACHMENT\\_DELETE\\_OWN\n     *  BROWSE\n     *  CLOSE\\_ISSUE\n     *  COMMENT\\_DELETE\\_ALL\n     *  COMMENT\\_DELETE\\_OWN\n     *  COMMENT\\_EDIT\\_ALL\n     *  COMMENT\\_EDIT\\_OWN\n     *  COMMENT\\_ISSUE\n     *  CREATE\\_ATTACHMENT\n     *  CREATE\\_ISSUE\n     *  DELETE\\_ISSUE\n     *  EDIT\\_ISSUE\n     *  LINK\\_ISSUE\n     *  MANAGE\\_WATCHER\\_LIST\n     *  MODIFY\\_REPORTER\n     *  MOVE\\_ISSUE\n     *  PROJECT\\_ADMIN\n     *  RESOLVE\\_ISSUE\n     *  SCHEDULE\\_ISSUE\n     *  SET\\_ISSUE\\_SECURITY\n     *  TRANSITION\\_ISSUE\n     *  VIEW\\_VERSION\\_CONTROL\n     *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n     *  VIEW\\_WORKFLOW\\_READONLY\n     *  WORKLOG\\_DELETE\\_ALL\n     *  WORKLOG\\_DELETE\\_OWN\n     *  WORKLOG\\_EDIT\\_ALL\n     *  WORKLOG\\_EDIT\\_OWN\n     *  WORK\\_ISSUE',
          in: 'query',
          name: 'permissions',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The issue key for the issue.',
          in: 'query',
          name: 'issueKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The project key for the project (case sensitive).',
          in: 'query',
          name: 'projectKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.\n *  `permissions` is empty or contains an invalid entry.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the issue or project is not found.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users with permissions',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/picker': {
    get: {
      deprecated: false,
      description:
        "Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.\n\nThis operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.",
      operationId: 'findUsersForPicker',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.",
          in: 'query',
          name: 'query',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The maximum number of items to return. The total number of matched users is returned in `total`.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: "Include the URI to the user's avatar.",
          in: 'query',
          name: 'showAvatar',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'exclude',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          description:
            'A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.',
          in: 'query',
          name: 'excludeAccountIds',
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
        {
          in: 'query',
          name: 'avatarSize',
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'excludeConnectUsers',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"header":"Showing 20 of 25 matching groups","total":25,"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","displayName":"Mia Krystof","html":"<strong>Mi</strong>a Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","key":"mia","name":"mia"}]}',
              schema: {
                $ref: '#/components/schemas/FoundUsers',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `exclude` and `excludeAccountIds` are provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users for picker',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/properties': {
    get: {
      deprecated: false,
      description:
        "Returns the keys of all properties for a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.\n *  Access to Jira, to access the calling user's property keys.",
      operationId: 'getUserPropertyKeys',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'userKey',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"keys":[{"key":"issue.support","self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support"}]}',
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get user property keys',
      tags: ['User properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes a property from a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.\n *  Access to Jira, to delete a property from the calling user's record.",
      operationId: 'deleteUserProperty',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'userKey',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description: "The key of the user's property.",
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the user property is deleted.',
        },
        '400': {
          description: 'Returned if `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the user or the property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Delete user property',
      tags: ['User properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:user.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.\n *  Access to Jira, to get a property from the calling user's record.",
      operationId: 'getUserProperty',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'userKey',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description: "The key of the user's property.",
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}',
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Get user property',
      tags: ['User properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the value of a user's property. Use this resource to store custom data against a user.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.\n *  Access to Jira, to set a property on the calling user's record.",
      operationId: 'setUserProperty',
      parameters: [
        {
          description:
            'The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.',
          in: 'query',
          name: 'accountId',
          schema: {
            example: '5b10ac8d82e05b22cc7d4ef5',
            maxLength: 128,
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'userKey',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description: "The key of the user's property. The maximum length is 255 characters.",
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        description:
          'The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the user property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the user property is created.',
        },
        '400': {
          description: 'Returned if `accountId` is missing.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description:
            'Returned if the user does not have the necessary permission or is not accessing their user record.',
        },
        '404': {
          description: 'Returned if the user is not found.',
        },
        '405': {
          description: 'Returned if the property key is not specified.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
      ],
      summary: 'Set user property',
      tags: ['User properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:user.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/search': {
    get: {
      deprecated: false,
      description:
        "Returns a list of active users that match the search string and property.\n\nThis operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nThis operation can be accessed anonymously.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.",
      operationId: 'findUsers',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.",
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of filtered results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.',
          in: 'query',
          name: 'property',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `accountId`, `query` or `property` is missing.\n *  `query` and `accountId` are provided.\n *  `property` parameter is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:user:jira',
            'read:user.property:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/search/query': {
    get: {
      deprecated: false,
      description:
        'Finds users with a structured query and returns a [paginated](#pagination) list of user details.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.\n *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.\n\nThe list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`',
      operationId: 'findUsersByQuery',
      parameters: [
        {
          description: 'The search query.',
          in: 'query',
          name: 'query',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PageBeanUser',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the query is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '408': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the search is timed out.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Find users by query',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:issue:jira',
            'read:issue.vote:jira',
            'read:issue.watcher:jira',
            'read:project:jira',
            'read:user:jira',
            'read:user.property:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/search/query/key': {
    get: {
      deprecated: false,
      description:
        'Finds users with a structured query and returns a [paginated](#pagination) list of user keys.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.\n *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.\n\nThe list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`',
      operationId: 'findUserKeysByQuery',
      parameters: [
        {
          description: 'The search query.',
          in: 'query',
          name: 'query',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResult',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/PageBeanUserKey',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the query is invalid.',
        },
        '401': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
        '408': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the search is timed out.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
      ],
      summary: 'Find user keys by query',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:issue:jira',
            'read:issue.vote:jira',
            'read:issue.watcher:jira',
            'read:project:jira',
            'read:user.property:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/user/viewissue/search': {
    get: {
      deprecated: false,
      description:
        "Returns a list of users who fulfill these criteria:\n\n *  their user attributes match a search string.\n *  they have permission to browse issues.\n\nUse this resource to find users who can browse:\n\n *  an issue, by providing the `issueKey`.\n *  any issue in a project, by providing the `projectKey`.\n\nThis operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.",
      operationId: 'findUsersWithBrowsePermission',
      parameters: [
        {
          description:
            "A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.",
          in: 'query',
          name: 'query',
          schema: {
            example: 'query',
            type: 'string',
          },
          'x-showInExample': 'true',
        },
        {
          description:
            'This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.',
          in: 'query',
          name: 'username',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.',
          in: 'query',
          name: 'accountId',
          schema: {
            maxLength: 128,
            type: 'string',
          },
        },
        {
          description: 'The issue key for the issue. Required, unless `projectKey` is specified.',
          in: 'query',
          name: 'issueKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The project key for the project (case sensitive). Required, unless `issueKey` is specified.',
          in: 'query',
          name: 'projectKey',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n *  `query` or `accountId` is missing.\n *  `query` and `accountId` are provided.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the issue or project is not found.',
        },
        '429': {
          description:
            "Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Find users with browse permission',
      tags: ['User search'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue:jira',
            'read:project:jira',
            'read:user:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/users': {
    get: {
      deprecated: false,
      description:
        "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getAllUsersDefault',
      parameters: [
        {
          description: 'The index of the first item to return.',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '409': {
          description: 'Returned if the request takes longer than 10 seconds or is interrupted.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Get all users default',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira', 'read:application-role:jira', 'read:avatar:jira', 'read:group:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/users/search': {
    get: {
      deprecated: false,
      description:
        "Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.\n\nPrivacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.\n\n**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getAllUsers',
      parameters: [
        {
          description: 'The index of the first item to return.',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},{"accountId":"5b10ac8d82e05b22cc7d4ef5","accountType":"atlassian","active":false,"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48"},"displayName":"Emma Richards","key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/User',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description: "Returned if the user doesn't have the necessary permission.",
        },
        '409': {
          description: 'Returned if the request takes longer than 10 seconds or is interrupted.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-user'],
        },
        {},
      ],
      summary: 'Get all users',
      tags: ['Users'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-user'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:user:jira', 'read:application-role:jira', 'read:avatar:jira', 'read:group:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version': {
    post: {
      deprecated: false,
      description:
        'Creates a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.',
      operationId: 'createVersion',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              archived: false,
              description: 'An excellent version',
              name: 'New Version 1',
              projectId: 10000,
              releaseDate: '2010-07-06',
              released: true,
            },
            schema: {
              $ref: '#/components/schemas/Version',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","project":"PXA","projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}',
              schema: {
                $ref: '#/components/schemas/Version',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the project is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Create version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project-version:jira', 'read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}': {
    delete: {
      deprecated: true,
      description:
        'Deletes a project version.\n\nDeprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.\n\nAlternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.',
      operationId: 'deleteVersion',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.',
          in: 'query',
          name: 'moveFixIssuesTo',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.',
          in: 'query',
          name: 'moveAffectedIssuesTo',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the version is deleted.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description:
            'Returned if:\n\n *  the authentication credentials are incorrect.\n *  the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the version is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.',
      operationId: 'getVersion',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `operations` Returns the list of operations available for this version.\n *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.\n *  `driver` Returns the Atlassian account ID of the version driver.\n *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}',
              schema: {
                $ref: '#/components/schemas/Version',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the version is not found or the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.',
      operationId: 'updateVersion',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              archived: false,
              description: 'An excellent version',
              id: '10000',
              name: 'New Version 1',
              overdue: true,
              projectId: 10000,
              releaseDate: '2010-07-06',
              released: true,
              self: 'https://your-domain.atlassian.net/rest/api/~ver~/version/10000',
              userReleaseDate: '6/Jul/2010',
            },
            schema: {
              $ref: '#/components/schemas/Version',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","project":"PXA","projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}',
              schema: {
                $ref: '#/components/schemas/Version',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  the request is invalid.\n *  the user does not have the required permissions.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description: 'Returned if the version is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Update version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project-version:jira', 'read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/mergeto/{moveIssuesTo}': {
    put: {
      deprecated: false,
      description:
        'Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.\n\nConsider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.',
      operationId: 'mergeVersions',
      parameters: [
        {
          description: 'The ID of the version to delete.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the version to merge into.',
          in: 'path',
          name: 'moveIssuesTo',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the version is deleted.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description:
            'Returned if:\n\n *  the authentication credentials are incorrect or missing.\n *  the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the version to be deleted or the version to merge to are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Merge versions',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-version:jira', 'write:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/move': {
    post: {
      deprecated: false,
      description:
        "Modifies the version's sequence within the project, which affects the display order of the versions in Jira.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.",
      operationId: 'moveVersion',
      parameters: [
        {
          description: 'The ID of the version to be moved.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              after: 'https://your-domain.atlassian.net/rest/api/~ver~/version/10000',
            },
            schema: {
              $ref: '#/components/schemas/VersionMoveBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"archived":false,"description":"An excellent version","id":"10000","name":"New Version 1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}',
              schema: {
                $ref: '#/components/schemas/Version',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description:
            'Returned if:\n\n *  no body parameters are provided.\n *  `after` and `position` are provided.\n *  `position` is invalid.',
        },
        '401': {
          description:
            'Returned if:\n\n *  the authentication credentials are incorrect or missing\n *  the user does not have the required commissions.',
        },
        '404': {
          description: 'Returned if the version or move after version are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Move version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:project-version:jira', 'read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/relatedIssueCounts': {
    get: {
      deprecated: false,
      description:
        'Returns the following counts for a version:\n\n *  Number of issues where the `fixVersion` is set to the version.\n *  Number of issues where the `affectedVersion` is set to the version.\n *  Number of issues where a version custom field is set to the version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.',
      operationId: 'getVersionRelatedIssues',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"customFieldUsage":[{"customFieldId":10000,"fieldName":"Field1","issueCountWithVersionInCustomField":2},{"customFieldId":10010,"fieldName":"Field2","issueCountWithVersionInCustomField":3}],"issueCountWithCustomFieldsShowingVersion":54,"issuesAffectedCount":101,"issuesFixedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}',
              schema: {
                $ref: '#/components/schemas/VersionIssueCounts',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the version is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: "Get version's related issues count",
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/relatedwork': {
    get: {
      deprecated: false,
      description:
        'Returns related work items for the given version id.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.',
      operationId: 'getRelatedWork',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"category":"Design","issueId":10001,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"},{"category":"Communications","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abce","title":"Chat application","url":"https://www.atlassian.com"},{"category":"External Link","issueId":10003,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcf","url":"https://www.atlassian.com"}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/VersionRelatedWork',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description: 'Returned if the version is not found or the user does not have the necessary permission.',
        },
        '500': {
          description: 'Returned if reading related work fails',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: 'Get related work',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.',
      operationId: 'createRelatedWork',
      parameters: [
        {
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              category: 'Design',
              title: 'Design link',
              url: 'https://www.atlassian.com',
            },
            schema: {
              $ref: '#/components/schemas/VersionRelatedWork',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"category":"Design","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"}',
              schema: {
                $ref: '#/components/schemas/VersionRelatedWork',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the version is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Create related work',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.",
      operationId: 'updateRelatedWork',
      parameters: [
        {
          description:
            'The ID of the version to update the related work on. For the related work id, pass it to the input JSON.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              category: 'Design',
              relatedWorkId: 'fabcdef6-7878-1234-beaf-43211234abcd',
              title: 'Design link',
              url: 'https://www.atlassian.com',
            },
            schema: {
              $ref: '#/components/schemas/VersionRelatedWork',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"category":"Design","relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design link","url":"https://www.atlassian.com"}',
              schema: {
                $ref: '#/components/schemas/VersionRelatedWork',
              },
            },
          },
          description: 'Returned if the request is successful together with updated related work.',
        },
        '400': {
          description: 'Returned if the request data is invalid',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the version or the related work is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Update related work',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/removeAndSwap': {
    post: {
      deprecated: false,
      description:
        'Deletes a project version.\n\nAlternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.',
      operationId: 'deleteAndReplaceVersion',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/DeleteAndReplaceVersionBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the version is deleted.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the version to delete is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
        {},
      ],
      summary: 'Delete and replace version',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:project-version:jira', 'write:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{id}/unresolvedIssueCount': {
    get: {
      deprecated: false,
      description:
        'Returns counts of the issues and unresolved issues for the project version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.',
      operationId: 'getVersionUnresolvedIssues',
      parameters: [
        {
          description: 'The ID of the version.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"issuesCount":30,"issuesUnresolvedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}',
              schema: {
                $ref: '#/components/schemas/VersionUnresolvedIssuesCount',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the version is not found.\n *  the user does not have the required permissions.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
        {},
      ],
      summary: "Get version's unresolved issues count",
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:project-version:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes the given related work for the given version.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.',
      operationId: 'deleteRelatedWork',
      parameters: [
        {
          description: 'The ID of the version that the target related work belongs to.',
          in: 'path',
          name: 'versionId',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The ID of the related work to delete.',
          in: 'path',
          name: 'relatedWorkId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the related work is deleted.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if\n\nthe authentication credentials are incorrect.',
        },
        '403': {
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          description: 'Returned if the version/related work is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['write:jira-work'],
        },
        {},
      ],
      summary: 'Delete related work',
      tags: ['Project versions'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['write:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:issue:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/webhook': {
    delete: {
      deprecated: false,
      description:
        'Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.',
      operationId: 'deleteWebhookById',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              webhookIds: [10000, 10001, 10042],
            },
            schema: {
              $ref: '#/components/schemas/ContainerForWebhookIDs',
            },
          },
        },
        required: true,
      },
      responses: {
        '202': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the list of webhook IDs is missing.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the caller isn't an app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'],
        },
      ],
      summary: 'Delete webhooks by ID',
      tags: ['Webhooks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'manage:jira-webhook'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:webhook:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of the webhooks registered by the calling app.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.',
      operationId: 'getDynamicWebhooksForApp',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 100,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":3,"startAt":0,"total":3,"values":[{"events":["jira:issue_updated","jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000","fieldIdsFilter":["summary","customfield_10029"],"id":10000,"jqlFilter":"project = PRJ"},{"events":["jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000","id":10001,"jqlFilter":"issuetype = Bug"},{"events":["issue_property_set"],"expirationDate":"2019-06-01T12:42:30.000+0000","id":10002,"issuePropertyKeysFilter":["my-issue-property-key"],"jqlFilter":"project = PRJ"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanWebhook',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the caller isn't an app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'],
        },
      ],
      summary: 'Get dynamic webhooks for app',
      tags: ['Webhooks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'manage:jira-webhook'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:webhook:jira', 'read:jql:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Registers webhooks.\n\n**NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.',
      operationId: 'registerDynamicWebhooks',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              url: 'https://your-app.example.com/webhook-received',
              webhooks: [
                {
                  events: ['jira:issue_created', 'jira:issue_updated'],
                  fieldIdsFilter: ['summary', 'customfield_10029'],
                  jqlFilter: 'project = PROJ',
                },
                {
                  events: ['jira:issue_deleted'],
                  jqlFilter: 'project IN (PROJ, EXP) AND status = done',
                },
                {
                  events: ['issue_property_set'],
                  issuePropertyKeysFilter: ['my-issue-property-key'],
                  jqlFilter: 'project = PROJ',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WebhookRegistrationDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"webhookRegistrationResult":[{"createdWebhookId":1000},{"errors":["The clause watchCount is unsupported"]},{"createdWebhookId":1001}]}',
              schema: {
                $ref: '#/components/schemas/ContainerForRegisteredWebhooks',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the caller isn't an app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'],
        },
      ],
      summary: 'Register dynamic webhooks',
      tags: ['Webhooks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'manage:jira-webhook'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:field:jira', 'read:project:jira', 'write:webhook:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/webhook/failed': {
    get: {
      deprecated: false,
      description:
        'Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.\n\nAfter 72 hours the failure may no longer be returned by this operation.\n\nThe oldest failure is returned first.\n\nThis method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.\n\n**[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.',
      operationId: 'getFailedWebhooks',
      parameters: [
        {
          description:
            'The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.',
          in: 'query',
          name: 'after',
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"values":[{"id":"1","body":"{\\"data\\":\\"webhook data\\"}","url":"https://example.com","failureTime":1573118132000},{"id":"2","url":"https://example.com","failureTime":1573540473480}],"maxResults":100,"next":"https://your-domain.atlassian.net/rest/api/3/webhook/failed?failedAfter=1573540473480&maxResults=100"}',
              schema: {
                $ref: '#/components/schemas/FailedWebhooks',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: '400 response',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the caller is not a Connect app.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'],
        },
      ],
      summary: 'Get failed webhooks',
      tags: ['Webhooks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'manage:jira-webhook'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:issue-details:jira',
            'read:webhook:jira',
            'read:comment.property:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-role:jira',
            'read:epic:jira-software',
          ],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/webhook/refresh': {
    put: {
      deprecated: false,
      description:
        'Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.\n\nUnrecognized webhook IDs (those that are not found or belong to other apps) are ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.',
      operationId: 'refreshWebhooks',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              webhookIds: [10000, 10001, 10042],
            },
            schema: {
              $ref: '#/components/schemas/ContainerForWebhookIDs',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"expirationDate":"2019-06-01T12:42:30.000+0000"}',
              schema: {
                $ref: '#/components/schemas/WebhooksExpirationDate',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: "Returned if the caller isn't an app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work', 'manage:jira-webhook'],
        },
      ],
      summary: 'Extend webhook life',
      tags: ['Webhooks'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work', 'manage:jira-webhook'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:webhook:jira', 'read:webhook:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflow': {
    get: {
      deprecated: true,
      description:
        'Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).\n\nIf the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllWorkflows',
      parameters: [
        {
          description: 'The name of the workflow to be returned. Only one workflow can be specified.',
          in: 'query',
          name: 'workflowName',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"default":true,"description":"A classic Jira workflow","lastModifiedDate":"01-01-2011","lastModifiedUser":"admin","lastModifiedUserAccountId":"5b10a2844c20165700ede21g","name":"classic workflow","steps":5}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/DeprecatedWorkflow',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira', 'read:project:jira', 'read:project-category:jira', 'read:avatar:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: true,
      description:
        'Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.\n\n#### Conditions ####\n\nConditions enable workflow rules that govern whether a transition can execute.\n\n##### Always false condition #####\n\nA condition that always fails.\n\n    {\n       "type": "AlwaysFalseCondition"\n     }\n\n##### Block transition until approval #####\n\nA condition that blocks issue transition if there is a pending approval.\n\n    {\n       "type": "BlockInProgressApprovalCondition"\n     }\n\n##### Compare number custom field condition #####\n\nA condition that allows transition if a comparison between a number custom field and a value is true.\n\n    {\n       "type": "CompareNumberCFCondition",\n       "configuration": {\n         "comparator": "=",\n         "fieldId": "customfield_10029",\n         "fieldValue": 2\n       }\n     }\n\n *  `comparator` One of the supported comparator: `=`, `>`, and `<`.\n *  `fieldId` The custom numeric field ID. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n *  `fieldValue` The value for comparison.\n\n##### Hide from user condition #####\n\nA condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.\n\n    {\n       "type": "RemoteOnlyCondition"\n     }\n\n##### Only assignee condition #####\n\nA condition that allows only the assignee to execute a transition.\n\n    {\n       "type": "AllowOnlyAssignee"\n     }\n\n##### Only Bamboo notifications workflow condition (deprecated) #####\n\nA condition that makes the transition available only to Bamboo build notifications.\n\n    {\n       "type": "OnlyBambooNotificationsCondition"\n     }\n\n##### Only reporter condition #####\n\nA condition that allows only the reporter to execute a transition.\n\n    {\n       "type": "AllowOnlyReporter"\n     }\n\n##### Permission condition #####\n\nA condition that allows only users with a permission to execute a transition.\n\n    {\n       "type": "PermissionCondition",\n       "configuration": {\n           "permissionKey": "BROWSE_PROJECTS"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status condition #####\n\nA condition that allows a transition based on whether an issue has or has not transitioned through a status.\n\n    {\n       "type": "PreviousStatusCondition",\n       "configuration": {\n         "ignoreLoopTransitions": true,\n         "includeCurrentStatus": true,\n         "mostRecentStatusOnly": true,\n         "reverseCondition": true,\n         "previousStatus": {\n           "id": "5"\n         }\n       }\n     }\n\nBy default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:\n\n *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.\n *  `includeCurrentStatus` is `true`, then the current issue status is also checked.\n *  `mostRecentStatusOnly` is `true`, then only the issue\'s preceding status (the one immediately before the current status) is checked.\n *  `reverseCondition` is `true`, then the status must not be present.\n\n##### Separation of duties condition #####\n\nA condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.\n\n    {\n       "type": "SeparationOfDutiesCondition",\n       "configuration": {\n         "fromStatus": {\n           "id": "5"\n         },\n         "toStatus": {\n           "id": "6"\n         }\n       }\n     }\n\n *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.\n *  `toStatus` An object containing the ID of the target status of the transition that is blocked.\n\n##### Subtask blocking condition #####\n\nA condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.\n\n    {\n       "type": "SubTaskBlockingCondition",\n       "configuration": {\n         "statuses": [\n           {\n             "id": "1"\n           },\n           {\n             "id": "3"\n           }\n         ]\n       }\n     }\n\n *  `statuses` A list of objects containing status IDs.\n\n##### User is in any group condition #####\n\nA condition that allows users belonging to any group from a list of groups to execute a transition.\n\n    {\n       "type": "UserInAnyGroupCondition",\n       "configuration": {\n         "groups": [\n           "administrators",\n           "atlassian-addons-admin"\n         ]\n       }\n     }\n\n *  `groups` A list of group names.\n\n##### User is in any project role condition #####\n\nA condition that allows only users with at least one project roles from a list of project roles to execute a transition.\n\n    {\n       "type": "InAnyProjectRoleCondition",\n       "configuration": {\n         "projectRoles": [\n           {\n             "id": "10002"\n           },\n           {\n             "id": "10003"\n           },\n           {\n             "id": "10012"\n           },\n           {\n             "id": "10013"\n           }\n         ]\n       }\n     }\n\n *  `projectRoles` A list of objects containing project role IDs.\n\n##### User is in custom field condition #####\n\nA condition that allows only users listed in a given custom field to execute the transition.\n\n    {\n       "type": "UserIsInCustomFieldCondition",\n       "configuration": {\n         "allowUserInField": false,\n         "fieldId": "customfield_10010"\n       }\n     }\n\n *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.\n *  `fieldId` The ID of the field containing the list of users.\n\n##### User is in group condition #####\n\nA condition that allows users belonging to a group to execute a transition.\n\n    {\n       "type": "UserInGroupCondition",\n       "configuration": {\n         "group": "administrators"\n       }\n     }\n\n *  `group` The name of the group.\n\n##### User is in group custom field condition #####\n\nA condition that allows users belonging to a group specified in a custom field to execute a transition.\n\n    {\n       "type": "InGroupCFCondition",\n       "configuration": {\n         "fieldId": "customfield_10012"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n\n##### User is in project role condition #####\n\nA condition that allows users with a project role to execute a transition.\n\n    {\n       "type": "InProjectRoleCondition",\n       "configuration": {\n         "projectRole": {\n           "id": "10002"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of a project role.\n\n##### Value field condition #####\n\nA conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.\n\n    {\n       "type": "ValueFieldCondition",\n       "configuration": {\n         "fieldId": "assignee",\n         "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",\n         "comparisonType": "NUMBER",\n         "comparator": "="\n       }\n     }\n\n *  `fieldId` The ID of a field used in the comparison.\n *  `fieldValue` The expected value of the field.\n *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n\n**Notes:**\n\n *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.\n *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.\n *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.\n\n#### Validators ####\n\nValidators check that any input made to the transition is valid before the transition is performed.\n\n##### Date field validator #####\n\nA validator that compares two dates.\n\n    {\n       "type": "DateFieldValidator",\n       "configuration": {\n           "comparator": ">",\n           "date1": "updated",\n           "date2": "created",\n           "expression": "1d",\n           "includeTime": true\n         }\n     }\n\n *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.\n *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn\'t have a time part, 00:00:00 is used.\n\n##### Windows date validator #####\n\nA validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.\n\n    {\n       "type": "WindowsDateValidator",\n       "configuration": {\n           "date1": "customfield_10009",\n           "date2": "created",\n           "windowsDays": 5\n         }\n     }\n\n *  `date1` The date field to validate. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `date2` The reference date. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`\n     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`\n     *  `duedate`\n     *  `created`\n     *  `updated`\n     *  `resolutiondate`\n *  `windowsDays` A positive integer indicating a number of days.\n\n##### Field required validator #####\n\nA validator that checks fields are not empty. By default, if a field is not included in the current context it\'s ignored and not validated.\n\n    {\n         "type": "FieldRequiredValidator",\n         "configuration": {\n             "ignoreContext": true,\n             "errorMessage": "Hey",\n             "fieldIds": [\n                 "versions",\n                 "customfield_10037",\n                 "customfield_10003"\n             ]\n         }\n     }\n\n *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.\n *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.\n *  `fieldIds` The list of fields to validate.\n\n##### Field changed validator #####\n\nA validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.\n\n    {\n         "type": "FieldChangedValidator",\n         "configuration": {\n             "fieldId": "comment",\n             "errorMessage": "Hey",\n             "exemptedGroups": [\n                 "administrators",\n                 "atlassian-addons-admin"\n             ]\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.\n *  `exemptedGroups` OPTIONAL. The list of groups.\n\n##### Field has single value validator #####\n\nA validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.\n\n    {\n         "type": "FieldHasSingleValueValidator",\n         "configuration": {\n             "fieldId": "attachment,\n             "excludeSubtasks": true\n         }\n     }\n\n *  `fieldId` The ID of a field.\n *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.\n\n##### Parent status validator #####\n\nA validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.\n\n    {\n         "type": "ParentStatusValidator",\n         "configuration": {\n             "parentStatuses": [\n                 {\n                   "id":"1"\n                 },\n                 {\n                   "id":"2"\n                 }\n             ]\n         }\n     }\n\n *  `parentStatus` The list of required parent issue statuses.\n\n##### Permission validator #####\n\nA validator that checks the user has a permission.\n\n    {\n       "type": "PermissionValidator",\n       "configuration": {\n           "permissionKey": "ADMINISTER_PROJECTS"\n       }\n     }\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n\n##### Previous status validator #####\n\nA validator that checks if the issue has held a status.\n\n    {\n       "type": "PreviousStatusValidator",\n       "configuration": {\n           "mostRecentStatusOnly": false,\n           "previousStatus": {\n               "id": "15"\n           }\n       }\n     }\n\n *  `mostRecentStatusOnly` If `true`, then only the issue\'s preceding status (the one immediately before the current status) is checked.\n *  `previousStatus` An object containing the ID of an issue status.\n\n##### Regular expression validator #####\n\nA validator that checks the content of a field against a regular expression.\n\n    {\n       "type": "RegexpFieldValidator",\n       "configuration": {\n           "regExp": "[0-9]",\n           "fieldId": "customfield_10029"\n       }\n     }\n\n *  `regExp`A regular expression.\n *  `fieldId` The ID of a field. Allowed field types:\n    \n     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`\n     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`\n     *  `com.pyxis.greenhopper.jira:jsw-story-points`\n     *  `com.pyxis.greenhopper.jira:gh-epic-status`\n     *  `description`\n     *  `summary`\n\n##### User permission validator #####\n\nA validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.\n\n    {\n         "type": "UserPermissionValidator",\n         "configuration": {\n             "permissionKey": "BROWSE_PROJECTS",\n             "nullAllowed": false,\n             "username": "TestUser"\n         }\n     }\n\n *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.\n *  `nullAllowed` If `true`, allows the transition when `username` is empty.\n *  `username` The username to validate against the `permissionKey`.\n\n#### Post functions ####\n\nPost functions carry out any additional processing required after a Jira workflow transition is executed.\n\n##### Fire issue event function #####\n\nA post function that fires an event that is processed by the listeners.\n\n    {\n       "type": "FireIssueEventFunction",\n       "configuration": {\n         "event": {\n           "id":"1"\n         }\n       }\n     }\n\n**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.\n\n *  `event` An object containing the ID of the issue event.\n\n##### Update issue status #####\n\nA post function that sets issue status to the linked status of the destination workflow status.\n\n    {\n       "type": "UpdateIssueStatusFunction"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Create comment #####\n\nA post function that adds a comment entered during the transition to an issue.\n\n    {\n       "type": "CreateCommentFunction"\n     }\n\n**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.\n\n##### Store issue #####\n\nA post function that stores updates to an issue.\n\n    {\n       "type": "IssueStoreFunction"\n     }\n\n**Note:** This post function can only be added to the initial transition and can only be added once.\n\n##### Assign to current user function #####\n\nA post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.\n\n    {\n         "type": "AssignToCurrentUserFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to lead function #####\n\nA post function that assigns the issue to the project or component lead developer.\n\n    {\n         "type": "AssignToLeadFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Assign to reporter function #####\n\nA post function that assigns the issue to the reporter.\n\n    {\n         "type": "AssignToReporterFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Clear field value function #####\n\nA post function that clears the value from a field.\n\n    {\n       "type": "ClearFieldValuePostFunction",\n       "configuration": {\n         "fieldId": "assignee"\n       }\n     }\n\n *  `fieldId` The ID of the field.\n\n##### Copy value from other field function #####\n\nA post function that copies the value of one field to another, either within an issue or from parent to subtask.\n\n    {\n       "type": "CopyValueFromOtherFieldPostFunction",\n       "configuration": {\n         "sourceFieldId": "assignee",\n         "destinationFieldId": "creator",\n         "copyType": "same"\n       }\n     }\n\n *  `sourceFieldId` The ID of the source field.\n *  `destinationFieldId` The ID of the destination field.\n *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.\n\n##### Create Crucible review workflow function (deprecated) #####\n\nA post function that creates a Crucible review for all unreviewed code for the issue.\n\n    {\n         "type": "CreateCrucibleReviewWorkflowFunction"\n     }\n\n**Note:** This post function can be included once in a transition.\n\n##### Set issue security level based on user\'s project role function #####\n\nA post function that sets the issue\'s security level if the current user has a project role.\n\n    {\n       "type": "SetIssueSecurityFromRoleFunction",\n       "configuration": {\n         "projectRole": {\n             "id":"10002"\n         },\n         "issueSecurityLevel": {\n             "id":"10000"\n         }\n       }\n     }\n\n *  `projectRole` An object containing the ID of the project role.\n *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.\n\n##### Trigger a webhook function #####\n\nA post function that triggers a webhook.\n\n    {\n       "type": "TriggerWebhookFunction",\n       "configuration": {\n         "webhook": {\n           "id": "1"\n         }\n       }\n     }\n\n *  `webhook` An object containing the ID of the webhook listener to trigger.\n\n##### Update issue custom field function #####\n\nA post function that updates the content of an issue custom field.\n\n    {\n       "type": "UpdateIssueCustomFieldPostFunction",\n       "configuration": {\n         "mode": "append",\n         "fieldId": "customfield_10003",\n         "fieldValue": "yikes"\n       }\n     }\n\n *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.\n *  `fieldId` The ID of the field.\n *  `fieldValue` The update content.\n\n##### Update issue field function #####\n\nA post function that updates a simple issue field.\n\n    {\n       "type": "UpdateIssueFieldFunction",\n       "configuration": {\n         "fieldId": "assignee",\n         "fieldValue": "5f0c277e70b8a90025a00776"\n       }\n     }\n\n *  `fieldId` The ID of the field. Allowed field types:\n    \n     *  `assignee`\n     *  `description`\n     *  `environment`\n     *  `priority`\n     *  `resolution`\n     *  `summary`\n     *  `timeoriginalestimate`\n     *  `timeestimate`\n     *  `timespent`\n *  `fieldValue` The update value.\n *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:\n    \n     *  an account ID.\n     *  `automatic`.\n     *  a blank string, which sets the value to `unassigned`.\n\n#### Connect rules ####\n\nConnect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule\'s module must exist.\n\n    {\n       "type": "appKey__moduleKey",\n       "configuration": {\n         "value":"{\\"isValid\\":\\"true\\"}"\n       }\n     }\n\n *  `type` A Connect rule key in a form of `appKey__moduleKey`.\n *  `value` The stringified JSON configuration of a Connect rule.\n\n#### Forge rules ####\n\nForge transition rules are not yet supported.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createWorkflow',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              description: 'This is a workflow used for Stories and Tasks',
              name: 'Workflow 1',
              statuses: [
                {
                  id: '1',
                  properties: {
                    'jira.issue.editable': 'false',
                  },
                },
                {
                  id: '2',
                },
                {
                  id: '3',
                },
              ],
              transitions: [
                {
                  from: [],
                  name: 'Created',
                  to: '1',
                  type: 'initial',
                },
                {
                  from: ['1'],
                  name: 'In progress',
                  properties: {
                    'custom-property': 'custom-value',
                  },
                  rules: {
                    conditions: {
                      conditions: [
                        {
                          type: 'RemoteOnlyCondition',
                        },
                        {
                          configuration: {
                            groups: ['developers', 'qa-testers'],
                          },
                          type: 'UserInAnyGroupCondition',
                        },
                      ],
                      operator: 'AND',
                    },
                    postFunctions: [
                      {
                        type: 'AssignToCurrentUserFunction',
                      },
                    ],
                  },
                  screen: {
                    id: '10001',
                  },
                  to: '2',
                  type: 'directed',
                },
                {
                  name: 'Completed',
                  rules: {
                    postFunctions: [
                      {
                        configuration: {
                          fieldId: 'assignee',
                        },
                        type: 'ClearFieldValuePostFunction',
                      },
                    ],
                    validators: [
                      {
                        configuration: {
                          parentStatuses: [
                            {
                              id: '3',
                            },
                          ],
                        },
                        type: 'ParentStatusValidator',
                      },
                      {
                        configuration: {
                          permissionKey: 'ADMINISTER_PROJECTS',
                        },
                        type: 'PermissionValidator',
                      },
                    ],
                  },
                  to: '3',
                  type: 'global',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/CreateWorkflowDetails',
            },
          },
        },
        description: 'The workflow details.',
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example: '{"entityId":"d7178e8d-bf6c-4c0c-9e90-758a0b965b67","name":"Workflow 1"}',
              schema: {
                $ref: '#/components/schemas/WorkflowIDs',
              },
            },
          },
          description: 'Returned if the workflow is created.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The request body parameters are missing."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access the workflow configuration."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Status with ID 10000 was not found"],"errors":{}}',
            },
          },
          description: 'Returned if one or more statuses is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create workflow',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira', 'read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflow/rule/config': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:\n\n *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).\n *  matching one or more transition rule keys.\n\nOnly workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.\n\nDue to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.',
      operationId: 'getWorkflowTransitionRuleConfigurations',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 10,
            format: 'int32',
            maximum: 50,
            type: 'integer',
          },
        },
        {
          description: 'The types of the transition rules to return.',
          in: 'query',
          name: 'types',
          required: true,
          schema: {
            items: {
              default: '',
              enum: ['postfunction', 'condition', 'validator'],
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.',
          in: 'query',
          name: 'keys',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The list of workflow names to filter by.',
          in: 'query',
          name: 'workflowNames',
          schema: {
            items: {
              default: '',
              maxLength: 50,
              type: 'string',
            },
            maxLength: 50,
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description: 'The list of `tags` to filter by.',
          in: 'query',
          name: 'withTags',
          schema: {
            items: {
              default: '',
              maxLength: 20,
              type: 'string',
            },
            maxLength: 20,
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Whether draft or published workflows are returned. If not provided, both workflow types are returned.',
          in: 'query',
          name: 'draft',
          schema: {
            type: 'boolean',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":10,"startAt":0,"total":1,"values":[{"workflowId":{"name":"My Workflow name","draft":false},"postFunctions":[{"id":"b4d6cbdc-59f5-11e9-8647-d663bd873d93","key":"postfunction-key","configuration":{"value":"{ \\"color\\": \\"red\\" }","disabled":false,"tag":"Sample tag"},"transition":{"id":1,"name":"Open"}}],"conditions":[{"id":"d663bd873d93-59f5-11e9-8647-b4d6cbdc","key":"condition-key","configuration":{"value":"{ \\"size\\": \\"medium\\" }","disabled":false,"tag":"Another tag"},"transition":{"id":1,"name":"Open"}}],"validators":[{"id":"11e9-59f5-b4d6cbdc-8647-d663bd873d93","key":"validator-key","configuration":{"value":"\\"{ \\\\\\"shape\\\\\\": \\\\\\"square\\\\\\" }\\"","disabled":false},"transition":{"id":1,"name":"Open"}}]}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflowTransitionRules',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the caller is not a Connect or Forge app.',
        },
        '404': {
          description: 'Returned if any transition rule type is not supported.',
        },
        '503': {
          description: 'Returned if we encounter a problem while trying to access the required data.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow transition rule configurations',
      tags: ['Workflow transition rules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates configuration of workflow transition rules. The following rule types are supported:\n\n *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)\n *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)\n *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)\n\nOnly rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.\n\nTo assist with app migration, this operation can be used to:\n\n *  Disable a rule.\n *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).\n\nRules are enabled if the `disabled` parameter is not provided.\n\n**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.',
      operationId: 'updateWorkflowTransitionRuleConfigurations',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              workflows: [
                {
                  conditions: [
                    {
                      configuration: {
                        disabled: false,
                        tag: 'Another tag',
                        value: '{ "size": "medium" }',
                      },
                      id: 'd663bd873d93-59f5-11e9-8647-b4d6cbdc',
                    },
                  ],
                  postFunctions: [
                    {
                      configuration: {
                        disabled: false,
                        tag: 'Sample tag',
                        value: '{ "color": "red" }',
                      },
                      id: 'b4d6cbdc-59f5-11e9-8647-d663bd873d93',
                    },
                  ],
                  validators: [
                    {
                      configuration: {
                        disabled: false,
                        value: '{ "shape": "square" }',
                      },
                      id: '11e9-59f5-b4d6cbdc-8647-d663bd873d93',
                    },
                  ],
                  workflowId: {
                    draft: false,
                    name: 'My Workflow name',
                  },
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionRulesUpdate',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"updateResults":[{"workflowId":{"name":"Workflow with one rule not updated","draft":false},"ruleUpdateErrors":{"example-rule-id":["The rule with this id does not exist: example-rule-id"]},"updateErrors":[]},{"workflowId":{"name":"Workflow with all rules successfully updated","draft":true},"ruleUpdateErrors":{},"updateErrors":[]},{"workflowId":{"name":"Non-existing workflow","draft":false},"ruleUpdateErrors":{},"updateErrors":["Workflow not found: WorkflowIdBean{name=Non-existing workflow, draft=false}"]}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrors',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the caller is not a Connect or Forge app.',
        },
        '503': {
          description: 'Returned if we encounter a problem while trying to access the required data.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update workflow transition rule configurations',
      tags: ['Workflow transition rules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflow/rule/config/delete': {
    put: {
      deprecated: false,
      description:
        'Deletes workflow transition rules from one or more workflows. These rule types are supported:\n\n *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)\n *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)\n *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)\n\nOnly rules created by the calling Connect app can be deleted.\n\n**[Permissions](#permissions) required:** Only Connect apps can use this operation.',
      operationId: 'deleteWorkflowTransitionRuleConfigurations',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              workflows: [
                {
                  workflowId: {
                    draft: false,
                    name: 'Internal support workflow',
                  },
                  workflowRuleIds: [
                    'b4d6cbdc-59f5-11e9-8647-d663bd873d93',
                    'd663bd873d93-59f5-11e9-8647-b4d6cbdc',
                    '11e9-59f5-b4d6cbdc-8647-d663bd873d93',
                  ],
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowsWithTransitionRulesDetails',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"updateResults":[{"workflowId":{"name":"Workflow with one rule not updated","draft":false},"ruleUpdateErrors":{"example-rule-id":["The rule with this id does not exist: example-rule-id"]},"updateErrors":[]},{"workflowId":{"name":"Workflow with all rules successfully updated","draft":true},"ruleUpdateErrors":{},"updateErrors":[]},{"workflowId":{"name":"Non-existing workflow","draft":false},"ruleUpdateErrors":{},"updateErrors":["Workflow not found: WorkflowIdBean{name=Non-existing workflow, draft=false}"]}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrors',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Jira Administration permission is required to access workflow configuration."],"errors":{},"httpStatusCode":{"empty":false,"present":true}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the caller is not a Connect app.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
      ],
      summary: 'Delete workflow transition rule configurations',
      tags: ['Workflow transition rules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/api/3/workflow/search': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.\n\nThis operation does not return next-gen workflows.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowsPaginated',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
        {
          description:
            'The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`.',
          in: 'query',
          name: 'workflowName',
          schema: {
            items: {
              default: '',
              type: 'string',
            },
            type: 'array',
            uniqueItems: true,
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `transitions` For each workflow, returns information about the transitions inside the workflow.\n *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.\n *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.\n *  `statuses` For each workflow, returns information about the statuses inside the workflow.\n *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.\n *  `default` For each workflow, returns information about whether this is the default workflow.\n *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.\n *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.\n *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.\n *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'String used to perform a case-insensitive partial match with workflow name.',
          in: 'query',
          name: 'queryString',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            '[Order](#ordering) the results by a field:\n\n *  `name` Sorts by workflow name.\n *  `created` Sorts by create time.\n *  `updated` Sorts by update time.',
          in: 'query',
          name: 'orderBy',
          schema: {
            enum: ['name', '-name', '+name', 'created', '-created', '+created', 'updated', '+updated', '-updated'],
            type: 'string',
          },
        },
        {
          description: 'Filters active and inactive workflows.',
          in: 'query',
          name: 'isActive',
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":false,"maxResults":1,"startAt":0,"total":5,"values":[{"id":{"name":"SCRUM Workflow","entityId":"5ed312c5-f7a6-4a78-a1f6-8ff7f307d063"},"description":"A workflow used for Software projects in the SCRUM methodology","transitions":[{"id":"5","name":"In Progress","description":"Start working on the issue.","from":["10","13"],"to":"14","type":"directed","screen":{"id":"10000","name":"Issue screen"},"rules":{"conditionsTree":{"nodeType":"compound","operator":"AND","conditions":[{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"WORK_ON_ISSUES"}},{"nodeType":"simple","type":"PermissionCondition","configuration":{"permissionKey":"RESOLVE_ISSUES"}}]},"validators":[{"type":"FieldRequiredValidator","configuration":{"errorMessage":"A custom error message","fields":["description","assignee"],"ignoreContext":true}}],"postFunctions":[{"type":"UpdateIssueStatusFunction"},{"type":"GenerateChangeHistoryFunction"},{"type":"FireIssueEventFunction"}]},"properties":{"jira.fieldscreen.id":1}}],"statuses":[{"id":"3","name":"In Progress","properties":{"issueEditable":false,"jira.issue.editable":"false"}}],"isDefault":false,"schemes":[{"id":"10001","name":"Test Workflow Scheme"}],"projects":[{"avatarUrls":{"16x16":"secure/projectavatar?size=xsmall&pid=10000","24x24":"secure/projectavatar?size=small&pid=10000","32x32":"secure/projectavatar?size=medium&pid=10000","48x48":"secure/projectavatar?size=large&pid=10000"},"id":"10000","key":"EX","name":"Example","projectCategory":{"description":"Project category description","id":"10000","name":"A project category"},"projectTypeKey":"ProjectTypeKey{key=\'software\'}","self":"project/EX","simplified":false}],"hasDraftWorkflow":true,"operations":{"canEdit":true,"canDelete":false},"created":"2018-12-10T16:30:15.000+0000","updated":"2018-12-11T11:45:13.000+0000"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflow',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only Jira administrators can access workflows."],"errors":{}}',
              schema: {
                $ref: '#/components/schemas/ErrorCollection',
              },
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-project'],
        },
      ],
      summary: 'Get workflows paginated',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-project'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow:jira',
            'read:webhook:jira',
            'read:avatar:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflow/transitions/{transitionId}/properties': {
    delete: {
      deprecated: false,
      description:
        'Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteWorkflowTransitionProperty',
      parameters: [
        {
          description:
            'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.',
          in: 'path',
          name: 'transitionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The name of the transition property to delete, also known as the name of the property.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The name of the workflow that the transition belongs to.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.',
          in: 'query',
          name: 'workflowMode',
          schema: {
            enum: ['live', 'draft'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          description: '200 response',
        },
        '304': {
          description:
            'Returned if no changes were made by the request. For example, trying to delete a property that cannot be found.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow transition is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete workflow transition property',
      tags: ['Workflow transition properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow.property:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowTransitionProperties',
      parameters: [
        {
          description:
            'The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.',
          in: 'path',
          name: 'transitionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.',
          in: 'query',
          name: 'includeReservedKeys',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.',
          in: 'query',
          name: 'key',
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The name of the workflow that the transition belongs to.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.',
          in: 'query',
          name: 'workflowMode',
          schema: {
            default: 'live',
            enum: ['live', 'draft'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"id":"jira.i18n.title","key":"jira.i18n.title","value":"some.title"},{"id":"jira.permission","key":"jira.permission","value":"createissue"}]',
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty',
              },
            },
          },
          description: '200 response',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have admin permission',
        },
        '404': {
          description: 'Returned if the workflow transition or property is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow transition properties',
      tags: ['Workflow transition properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow.property:jira'],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createWorkflowTransitionProperty',
      parameters: [
        {
          description:
            'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.',
          in: 'path',
          name: 'transitionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The name of the workflow that the transition belongs to.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.',
          in: 'query',
          name: 'workflowMode',
          schema: {
            default: 'live',
            enum: ['live', 'draft'],
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              value: 'createissue',
            },
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionProperty',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}',
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty',
              },
            },
          },
          description: '200 response',
        },
        '400': {
          description: 'Returned if a workflow property with the same key is present on the transition.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow transition is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create workflow transition property',
      tags: ['Workflow transition properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow.property:jira', 'read:workflow.property:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateWorkflowTransitionProperty',
      parameters: [
        {
          description:
            'The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.',
          in: 'path',
          name: 'transitionId',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.',
          in: 'query',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The name of the workflow that the transition belongs to.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.',
          in: 'query',
          name: 'workflowMode',
          schema: {
            enum: ['live', 'draft'],
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              value: 'createissue',
            },
            schema: {
              $ref: '#/components/schemas/WorkflowTransitionProperty',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}',
              schema: {
                $ref: '#/components/schemas/WorkflowTransitionProperty',
              },
            },
          },
          description: '200 response',
        },
        '304': {
          description:
            'Returned if no changes were made by the request. For example, attempting to update a property with its current value.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow transition is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update workflow transition property',
      tags: ['Workflow transition properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow.property:jira', 'read:workflow.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflow/{entityId}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a workflow.\n\nThe workflow cannot be deleted if it is:\n\n *  an active workflow.\n *  a system workflow.\n *  associated with any workflow scheme.\n *  associated with any draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteInactiveWorkflow',
      parameters: [
        {
          description: 'The entity ID of the workflow.',
          in: 'path',
          name: 'entityId',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the workflow is deleted.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Cannot delete an active workflow."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access the workflow configuration."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The workflow was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the workflow is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete inactive workflow',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows': {
    post: {
      deprecated: false,
      description:
        'Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* global permission to access all, including project-scoped, workflows\n *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows',
      operationId: 'readWorkflows',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow is associated with.\n *  `statuses.usages` Returns the project and issue types that each status is associated with.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Return the new fields (`toStatusReference`/`links`) instead of the deprecated fields (`to`/`from`) for workflow transition port mappings.',
          in: 'query',
          name: 'useTransitionLinksFormat',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
        {
          description:
            'Return the new field `approvalConfiguration` instead of the deprecated status properties for approval configuration.',
          in: 'query',
          name: 'useApprovalConfiguration',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectAndIssueTypes: [],
              workflowIds: [],
              workflowNames: ['Workflow 1', 'Workflow 2'],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowReadRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","id":"21","links":[],"name":"In Progress","properties":{},"toStatusReference":"10002","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"11","links":[],"name":"To Do","properties":{},"toStatusReference":"10001","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"31","links":[],"name":"Done","properties":{},"toStatusReference":"10003","triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","id":"41","links":[{"fromPort":0,"fromStatusReference":"10001","toPort":1}],"name":"Start work","properties":{},"toStatusReference":"10002","triggers":[],"type":"DIRECTED","validators":[]},{"actions":[],"description":"","id":"1","links":[],"name":"Create","properties":{},"toStatusReference":"10001","triggers":[],"type":"INITIAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowReadResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk get workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows/capabilities': {
    get: {
      deprecated: false,
      description:
        'Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to access all, including global-scoped, workflows\n *  *Administer projects* project permissions to access project-scoped workflows\n\nThe current list of Atlassian-provided rules:\n\n#### Validators ####\n\nA validator rule that checks if a user has the required permissions to execute the transition in the workflow.\n\n##### Permission validator #####\n\nA validator rule that checks if a user has the required permissions to execute the transition in the workflow.\n\n    {\n       "ruleKey": "system:check-permission-validator",\n       "parameters": {\n         "permissionKey": "ADMINISTER_PROJECTS"\n       }\n     }\n\nParameters:\n\n *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).\n\n##### Parent or child blocking validator #####\n\nA validator to block the child issue\\\\u2019s transition depending on the parent issue\\\\u2019s status.\n\n    {\n       "ruleKey" : "system:parent-or-child-blocking-validator"\n       "parameters" : {\n         "blocker" : "PARENT"\n         "statusIds" : "1,2,3"\n       }\n     }\n\nParameters:\n\n *  `blocker` currently only supports `PARENT`.\n *  `statusIds` a comma-separated list of status IDs.\n\n##### Previous status validator #####\n\nA validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.\n\n    {\n       "ruleKey": "system:previous-status-validator",\n       "parameters": {\n         "previousStatusIds": "10014",\n         "mostRecentStatusOnly": "true"\n       }\n     }\n\nParameters:\n\n *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.\n *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.\n\n##### Validate a field value #####\n\nA validation that ensures a specific field\'s value meets the defined criteria before allowing an issue to transition in the workflow.\n\nDepending on the rule type, the result will vary:\n\n###### Field required ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldRequired",\n         "fieldsRequired": "assignee",\n         "ignoreContext": "true",\n         "errorMessage": "An assignee must be set!"\n       }\n     }\n\nParameters:\n\n *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.\n *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn\'t check a required field if its context isn\'t configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.\n *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don\'t provide one (Optional).\n\n###### Field changed ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldChanged",\n         "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",\n         "fieldKey": "versions",\n         "errorMessage": "Affect versions must be modified before transition"\n       }\n     }\n\nParameters:\n\n *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.\n *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.\n *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don\'t provide one (Optional).\n\n###### Field has a single value ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldHasSingleValue",\n         "fieldKey": "created",\n         "excludeSubtasks": "true"\n       }\n     }\n\nParameters:\n\n *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.\n *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.\n\n###### Field matches regular expression ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "fieldMatchesRegularExpression",\n         "regexp": "[0-9]{4}",\n         "fieldKey": "description"\n       }\n     }\n\nParameters:\n\n *  `regexp` the regular expression used to validate the field\\\\u2019s content.\n *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.\n\n###### Date field comparison ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "dateFieldComparison",\n         "date1FieldKey": "duedate",\n         "date2FieldKey": "customfield_10054",\n         "includeTime": "true",\n         "conditionSelected": ">="\n       }\n     }\n\nParameters:\n\n *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.\n *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.\n *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.\n *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n\n###### Date range comparison ######\n\n    {\n       "ruleKey": "system:validate-field-value",\n       "parameters": {\n         "ruleType": "windowDateComparison",\n         "date1FieldKey": "customfield_10009",\n         "date2FieldKey": "customfield_10054",\n         "numberOfDays": "3"\n       }\n     }\n\nParameters:\n\n *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.\n *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.\n *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.\n\nThis rule is composed by aggregating the following legacy rules:\n\n *  FieldRequiredValidator\n *  FieldChangedValidator\n *  FieldHasSingleValueValidator\n *  RegexpFieldValidator\n *  DateFieldValidator\n *  WindowsDateValidator\n\n##### Proforma: Forms attached validator #####\n\nValidates that one or more forms are attached to the issue.\n\n    {\n       "ruleKey" : "system:proforma-forms-attached"\n       "parameters" : {}\n     }\n\n##### Proforma: Forms submitted validator #####\n\nValidates that all forms attached to the issue have been submitted.\n\n    {\n       "ruleKey" : "system:proforma-forms-submitted"\n       "parameters" : {}\n     }\n\n#### Conditions ####\n\nConditions enable workflow rules that govern whether a transition can execute.\n\n##### Check field value #####\n\nA condition rule evaluates as true if a specific field\'s value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field\'s value matches the desired condition.\n\n    {\n       "ruleKey": "system:check-field-value",\n       "parameters": {\n         "fieldId": "description",\n         "fieldValue": "[\\"Done\\"]",\n         "comparator": "=",\n         "comparisonType": "STRING"\n       }\n     }\n\nParameters:\n\n *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.\n *  `fieldValue` the list of values to check against the field\\\\u2019s value.\n *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.\n *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.\n\n##### Restrict issue transition #####\n\nThis rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.\n\n    {\n       "ruleKey": "system:restrict-issue-transition",\n       "parameters": {\n         "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",\n         "roleIds": "10002,10004",\n         "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",\n         "permissionKeys": "ADMINISTER_PROJECTS",\n         "groupCustomFields": "customfield_10028",\n         "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",\n         "denyUserCustomFields": "customfield_10107"\n       }\n     }\n\nParameters:\n\n *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects\n *  `roleIds` a comma-separated list of role IDs.\n *  `groupIds` a comma-separated list of group IDs.\n *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).\n *  `groupCustomFields` a comma-separated list of group custom field IDs.\n *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.\n *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.\n\nThis rule is composed by aggregating the following legacy rules:\n\n *  AllowOnlyAssignee\n *  AllowOnlyReporter\n *  InAnyProjectRoleCondition\n *  InProjectRoleCondition\n *  UserInAnyGroupCondition\n *  UserInGroupCondition\n *  PermissionCondtion\n *  InGroupCFCondition\n *  UserIsInCustomFieldCondition\n\n##### Previous status condition #####\n\nA condition that evaluates based on an issue\'s previous status(es) and specific criteria.\n\n    {\n       "ruleKey" : "system:previous-status-condition"\n       "parameters" : {\n         "previousStatusIds" : "10004",\n         "not": "true",\n         "mostRecentStatusOnly" : "true",\n         "includeCurrentStatus": "true",\n         "ignoreLoopTransitions": "true"\n       }\n     }\n\nParameters:\n\n *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.\n *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.\n *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.\n *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.\n *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.\n\n##### Parent or child blocking condition #####\n\nA condition to block the parent\\\\u2019s issue transition depending on the child\\\\u2019s issue status.\n\n    {\n       "ruleKey" : "system:parent-or-child-blocking-condition"\n       "parameters" : {\n         "blocker" : "CHILD",\n         "statusIds" : "1,2,3"\n       }\n     }\n\nParameters:\n\n *  `blocker` currently only supports `CHILD`.\n *  `statusIds` a comma-separated list of status IDs.\n\n##### Separation of duties #####\n\nA condition preventing the user from performing, if the user has already performed a transition on the issue.\n\n    {\n       "ruleKey": "system:separation-of-duties",\n       "parameters": {\n         "fromStatusId": "10161",\n         "toStatusId": "10160"\n       }\n     }\n\nParameters:\n\n *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.\n *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.\n\n##### Restrict transitions #####\n\nA condition preventing all users from transitioning the issue can also optionally include APIs as well.\n\n    {\n       "ruleKey": "system:restrict-from-all-users",\n       "parameters": {\n         "restrictMode": "users"\n       }\n     }\n\nParameters:\n\n *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.\n\n##### Jira Service Management block until approved #####\n\nBlock an issue transition until approval. Note: This is only supported in team-managed projects.\n\n    {\n       "ruleKey": "system:jsd-approvals-block-until-approved",\n       "parameters": {\n         "approvalConfigurationJson": "{"statusExternalUuid...}"\n       }\n     }\n\nParameters:\n\n *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.\n\n##### Jira Service Management block until rejected #####\n\nBlock an issue transition until rejected. Note: This is only supported in team-managed projects.\n\n    {\n       "ruleKey": "system:jsd-approvals-block-until-rejected",\n       "parameters": {\n         "approvalConfigurationJson": "{"statusExternalUuid...}"\n       }\n     }\n\nParameters:\n\n *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.\n\n##### Block in progress approval #####\n\nCondition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.\n\n    {\n       "ruleKey": "system:block-in-progress-approval",\n       "parameters": {}\n     }\n\n#### Post functions ####\n\nPost functions carry out any additional processing required after a workflow transition is executed.\n\n##### Change assignee #####\n\nA post function rule that changes the assignee of an issue after a transition.\n\n    {\n       "ruleKey": "system:change-assignee",\n       "parameters": {\n         "type": "to-selected-user",\n         "accountId": "example-account-id"\n       }\n     }\n\nParameters:\n\n *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`\n *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.\n\n##### Copy field value #####\n\nA post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.\n\n    {\n       "ruleKey": "system:copy-value-from-other-field",\n       "parameters": {\n         "sourceFieldKey": "description",\n         "targetFieldKey": "components",\n         "issueSource": "SAME"\n       }\n     }\n\nParameters:\n\n *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`\n *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`\n *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.\n\n##### Update field #####\n\nA post function that updates or appends a specific field with the given value.\n\n    {\n       "ruleKey": "system:update-field",\n       "parameters": {\n         "field": "customfield_10056",\n         "value": "asdf",\n         "mode": "append"\n       }\n     }\n\nParameters:\n\n *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`\n *  `value` the value to update the field with.\n *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.\n\n##### Trigger webhook #####\n\nA post function that automatically triggers a predefined webhook when a transition occurs in the workflow.\n\n    {\n       "ruleKey": "system:trigger-webhook",\n       "parameters": {\n         "webhookId": "1"\n       }\n     }\n\nParameters:\n\n *  `webhookId` the ID of the webhook.\n\n#### Screen ####\n\n##### Remind people to update fields #####\n\nA screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.\n\n    {\n       "ruleKey": "system:remind-people-to-update-fields",\n       "params": {\n         "remindingFieldIds": "assignee,customfield_10025",\n         "remindingMessage": "The message",\n         "remindingAlwaysAsk": "true"\n       }\n     }\n\nParameters:\n\n *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.\n *  `remindingMessage` the message to display when prompting the users to update the fields.\n *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.\n\n##### Shared transition screen #####\n\nA common screen that is shared between transitions in a workflow.\n\n    {\n       "ruleKey": "system:transition-screen",\n       "params": {\n         "screenId": "3"\n       }\n     }\n\nParameters:\n\n *  `screenId` the ID of the screen.\n\n#### Connect & Forge ####\n\n##### Connect rules #####\n\nValidator/Condition/Post function for Connect app.\n\n    {\n       "ruleKey": "connect:expression-validator",\n       "parameters": {\n         "appKey": "com.atlassian.app",\n         "config": "",\n         "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",\n         "disabled": "false",\n         "tag": ""\n       }\n     }\n\nParameters:\n\n *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`\n *  `appKey` the reference to the Connect app\n *  `config` a JSON payload string describing the configuration\n *  `id` the ID of the rule\n *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.\n *  `tag` additional tags for the Connect app\n\n##### Forge rules #####\n\nValidator/Condition/Post function for Forge app.\n\n    {\n       "ruleKey": "forge:expression-validator",\n       "parameters": {\n         "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",\n         "config": "{"searchString":"workflow validator"}",\n         "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"\n       }\n     }\n\nParameters:\n\n *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`\n *  `key` the identifier for the Forge app\n *  `config` the persistent stringified JSON configuration for the Forge rule\n *  `id` the ID of the Forge rule',
      operationId: 'workflowCapabilities',
      parameters: [
        {
          in: 'query',
          name: 'workflowId',
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'projectId',
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'issueTypeId',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"connectRules":[{"addonKey":"com.atlassian.jira.refapp","createUrl":"/validators/jira-expression/create?id={validator.id}","description":"Validates if the given Jira expression is true.","editUrl":"/validators/jira-expression/edit?id={validator.id}","moduleKey":"jiraExpressionValidator","name":"Jira expression validator (by APPNAME)","ruleKey":"connect:expression-validator","ruleType":"Validator","viewUrl":"/validators/jira-expression/view?id={validator.id}"}],"editorScope":"GLOBAL","forgeRules":[{"description":"A Jira workflow validator example.","id":"ari:cloud:ecosystem::extension/9df6d15f-1bbe-443e-be08-150309e8dbb0/f6a3bed3-737f-4e7a-8942-130df302b749/static/workflow-validator-example-workflow-validator","name":"workflow-validator","ruleKey":"forge:expression-validator","ruleType":"Validator"}],"projectTypes":["software","business"],"systemRules":[{"description":"Automatically assign a request to someone after moving the request using a particular transition.","incompatibleRuleKeys":[],"isAvailableForInitialTransition":true,"isVisible":true,"name":"Assign a request","ruleKey":"system:change-assignee","ruleType":"Function"}],"triggerRules":[{"availableTypes":[{"description":"Automatically transitions the issue when a related branch is created in a connected repository","name":"Branch created","type":"com.atlassian.jira.plugins.jira-development-integration-plugin:branch-created-trigger"}],"ruleKey":"system:development-triggers"}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowCapabilities',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get available workflow capabilities',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows/create': {
    post: {
      deprecated: false,
      description:
        'Create workflows and related statuses.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows',
      operationId: 'createWorkflows',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              scope: {
                type: 'GLOBAL',
              },
              statuses: [
                {
                  description: '',
                  name: 'To Do',
                  statusCategory: 'TODO',
                  statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                },
                {
                  description: '',
                  name: 'In Progress',
                  statusCategory: 'IN_PROGRESS',
                  statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                },
                {
                  description: '',
                  name: 'Done',
                  statusCategory: 'DONE',
                  statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                },
              ],
              workflows: [
                {
                  description: '',
                  name: 'Software workflow 1',
                  startPointLayout: {
                    x: -100.00030899047852,
                    y: -153.00020599365234,
                  },
                  statuses: [
                    {
                      layout: {
                        x: 114.99993896484375,
                        y: -16,
                      },
                      properties: {},
                      statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                    },
                    {
                      layout: {
                        x: 317.0000915527344,
                        y: -16,
                      },
                      properties: {},
                      statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                    },
                    {
                      layout: {
                        x: 508.000244140625,
                        y: -16,
                      },
                      properties: {},
                      statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                    },
                  ],
                  transitions: [
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '1',
                      name: 'Create',
                      properties: {},
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      triggers: [],
                      type: 'INITIAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '11',
                      name: 'To Do',
                      properties: {},
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '21',
                      name: 'In Progress',
                      properties: {},
                      to: {
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '31',
                      name: 'Done',
                      properties: {},
                      to: {
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                  ],
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowCreateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Software workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","from":[],"id":"31","name":"Done","properties":{},"to":{"statusReference":"10003"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"1","name":"Create","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"INITIAL","validators":[]},{"actions":[],"description":"","from":[],"id":"21","name":"In Progress","properties":{},"to":{"statusReference":"10002"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"11","name":"To Do","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"GLOBAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowCreateResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk create workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows/create/validation': {
    post: {
      deprecated: false,
      description:
        'Validate the payload for bulk create workflows.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows',
      operationId: 'validateCreateWorkflows',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              payload: {
                scope: {
                  type: 'GLOBAL',
                },
                statuses: [
                  {
                    description: '',
                    name: 'To Do',
                    statusCategory: 'TODO',
                    statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                  },
                  {
                    description: '',
                    name: 'In Progress',
                    statusCategory: 'IN_PROGRESS',
                    statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                  },
                  {
                    description: '',
                    name: 'Done',
                    statusCategory: 'DONE',
                    statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                  },
                ],
                workflows: [
                  {
                    description: '',
                    name: 'Software workflow 1',
                    startPointLayout: {
                      x: -100.00030899047852,
                      y: -153.00020599365234,
                    },
                    statuses: [
                      {
                        layout: {
                          x: 114.99993896484375,
                          y: -16,
                        },
                        properties: {},
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      {
                        layout: {
                          x: 317.0000915527344,
                          y: -16,
                        },
                        properties: {},
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                      },
                      {
                        layout: {
                          x: 508.000244140625,
                          y: -16,
                        },
                        properties: {},
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                      },
                    ],
                    transitions: [
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '1',
                        name: 'Create',
                        properties: {},
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                        },
                        triggers: [],
                        type: 'INITIAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '11',
                        name: 'To Do',
                        properties: {},
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '21',
                        name: 'In Progress',
                        properties: {},
                        to: {
                          statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '31',
                        name: 'Done',
                        properties: {},
                        to: {
                          statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                    ],
                  },
                ],
              },
              validationOptions: {
                levels: ['ERROR', 'WARNING'],
              },
            },
            schema: {
              $ref: '#/components/schemas/WorkflowCreateValidateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"errors":[{"code":"NON_UNIQUE_STATUS_NAME","elementReference":{"statusReference":"1f0443ff-47e4-4306-9c26-0af696059a43"},"level":"ERROR","message":"You must use a unique status name.","type":"STATUS"}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowValidationErrorList',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Validate create workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows/update': {
    post: {
      deprecated: false,
      description:
        'Update workflows and related statuses.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows',
      operationId: 'updateWorkflows',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow is associated with.\n *  `statuses.usages` Returns the project and issue types that each status is associated with.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              statuses: [
                {
                  description: '',
                  name: 'To Do',
                  statusCategory: 'TODO',
                  statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                },
                {
                  description: '',
                  name: 'In Progress',
                  statusCategory: 'IN_PROGRESS',
                  statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                },
                {
                  description: '',
                  name: 'Done',
                  statusCategory: 'DONE',
                  statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                },
              ],
              workflows: [
                {
                  defaultStatusMappings: [
                    {
                      newStatusReference: '10011',
                      oldStatusReference: '10010',
                    },
                  ],
                  description: '',
                  id: '10001',
                  startPointLayout: {
                    x: -100.00030899047852,
                    y: -153.00020599365234,
                  },
                  statusMappings: [
                    {
                      issueTypeId: '10002',
                      projectId: '10003',
                      statusMigrations: [
                        {
                          newStatusReference: '10011',
                          oldStatusReference: '10010',
                        },
                      ],
                    },
                  ],
                  statuses: [
                    {
                      layout: {
                        x: 114.99993896484375,
                        y: -16,
                      },
                      properties: {},
                      statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                    },
                    {
                      layout: {
                        x: 317.0000915527344,
                        y: -16,
                      },
                      properties: {},
                      statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                    },
                    {
                      layout: {
                        x: 508.000244140625,
                        y: -16,
                      },
                      properties: {},
                      statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                    },
                  ],
                  transitions: [
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '1',
                      name: 'Create',
                      properties: {},
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      triggers: [],
                      type: 'INITIAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '11',
                      name: 'To Do',
                      properties: {},
                      to: {
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '21',
                      name: 'In Progress',
                      properties: {},
                      to: {
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                    {
                      actions: [],
                      description: '',
                      from: [],
                      id: '31',
                      name: 'Done',
                      properties: {},
                      to: {
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                      },
                      triggers: [],
                      type: 'GLOBAL',
                      validators: [],
                    },
                  ],
                  version: {
                    id: '6f6c988b-2590-4358-90c2-5f7960265592',
                    versionNumber: 1,
                  },
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowUpdateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"statuses":[{"description":"","id":"10001","name":"To Do","scope":{"type":"GLOBAL"},"statusCategory":"TODO","statusReference":"10001","usages":[]},{"description":"","id":"10002","name":"In Progress","scope":{"type":"GLOBAL"},"statusCategory":"IN_PROGRESS","statusReference":"10002","usages":[]},{"description":"","id":"10003","name":"Done","scope":{"type":"GLOBAL"},"statusCategory":"DONE","statusReference":"10003","usages":[]}],"taskId":"10001","workflows":[{"description":"","id":"b9ff2384-d3b6-4d4e-9509-3ee19f607168","isEditable":true,"name":"Software workflow 1","scope":{"type":"GLOBAL"},"startPointLayout":{"x":-100.00030899047852,"y":-153.00020599365234},"statuses":[{"deprecated":false,"layout":{"x":317.0000915527344,"y":-16.0},"properties":{},"statusReference":"10002"},{"deprecated":false,"layout":{"x":508.000244140625,"y":-16.0},"properties":{},"statusReference":"10003"},{"deprecated":false,"layout":{"x":114.99993896484375,"y":-16.0},"properties":{},"statusReference":"10001"}],"transitions":[{"actions":[],"description":"","from":[],"id":"31","name":"Done","properties":{},"to":{"statusReference":"10003"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"1","name":"Create","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"INITIAL","validators":[]},{"actions":[],"description":"","from":[],"id":"21","name":"In Progress","properties":{},"to":{"statusReference":"10002"},"triggers":[],"type":"GLOBAL","validators":[]},{"actions":[],"description":"","from":[],"id":"11","name":"To Do","properties":{},"to":{"statusReference":"10001"},"triggers":[],"type":"GLOBAL","validators":[]}],"usages":[],"version":{"id":"f010ac1b-3dd3-43a3-aa66-0ee8a447f76e","versionNumber":0}}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowUpdateResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk update workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflows/update/validation': {
    post: {
      deprecated: false,
      description:
        'Validate the payload for bulk update workflows.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to create all, including global-scoped, workflows\n *  *Administer projects* project permissions to create project-scoped workflows',
      operationId: 'validateUpdateWorkflows',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              payload: {
                statuses: [
                  {
                    description: '',
                    name: 'To Do',
                    statusCategory: 'TODO',
                    statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                  },
                  {
                    description: '',
                    name: 'In Progress',
                    statusCategory: 'IN_PROGRESS',
                    statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                  },
                  {
                    description: '',
                    name: 'Done',
                    statusCategory: 'DONE',
                    statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                  },
                ],
                workflows: [
                  {
                    defaultStatusMappings: [
                      {
                        newStatusReference: '10011',
                        oldStatusReference: '10010',
                      },
                    ],
                    description: '',
                    id: '10001',
                    startPointLayout: {
                      x: -100.00030899047852,
                      y: -153.00020599365234,
                    },
                    statusMappings: [
                      {
                        issueTypeId: '10002',
                        projectId: '10003',
                        statusMigrations: [
                          {
                            newStatusReference: '10011',
                            oldStatusReference: '10010',
                          },
                        ],
                      },
                    ],
                    statuses: [
                      {
                        layout: {
                          x: 114.99993896484375,
                          y: -16,
                        },
                        properties: {},
                        statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                      },
                      {
                        layout: {
                          x: 317.0000915527344,
                          y: -16,
                        },
                        properties: {},
                        statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                      },
                      {
                        layout: {
                          x: 508.000244140625,
                          y: -16,
                        },
                        properties: {},
                        statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                      },
                    ],
                    transitions: [
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '1',
                        name: 'Create',
                        properties: {},
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                        },
                        triggers: [],
                        type: 'INITIAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '11',
                        name: 'To Do',
                        properties: {},
                        to: {
                          statusReference: 'f0b24de5-25e7-4fab-ab94-63d81db6c0c0',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '21',
                        name: 'In Progress',
                        properties: {},
                        to: {
                          statusReference: 'c7a35bf0-c127-4aa6-869f-4033730c61d8',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                      {
                        actions: [],
                        description: '',
                        from: [],
                        id: '31',
                        name: 'Done',
                        properties: {},
                        to: {
                          statusReference: '6b3fc04d-3316-46c5-a257-65751aeb8849',
                        },
                        triggers: [],
                        type: 'GLOBAL',
                        validators: [],
                      },
                    ],
                    version: {
                      id: '6f6c988b-2590-4358-90c2-5f7960265592',
                      versionNumber: 1,
                    },
                  },
                ],
              },
              validationOptions: {
                levels: ['ERROR', 'WARNING'],
              },
            },
            schema: {
              $ref: '#/components/schemas/WorkflowUpdateValidateRequestBean',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"errors":[{"code":"NON_UNIQUE_STATUS_NAME","elementReference":{"statusReference":"1f0443ff-47e4-4306-9c26-0af696059a43"},"level":"ERROR","message":"You must use a unique status name.","type":"STATUS"}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowValidationErrorList',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Validate update workflows',
      tags: ['Workflows'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflowscheme': {
    get: {
      deprecated: false,
      description:
        'Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getAllWorkflowSchemes',
      parameters: [
        {
          description: 'The index of the first item to return in a page of results (page offset).',
          in: 'query',
          name: 'startAt',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The maximum number of items to return per page.',
          in: 'query',
          name: 'maxResults',
          schema: {
            default: 50,
            format: 'int32',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"isLast":true,"maxResults":50,"startAt":0,"total":2,"values":[{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"},{"defaultWorkflow":"jira","description":"The description of the another example workflow scheme.","id":101011,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Another example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101011"}]}',
              schema: {
                $ref: '#/components/schemas/PageBeanWorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get all workflow schemes',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Creates a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createWorkflowScheme',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira',
              description: 'The description of the example workflow scheme.',
              issueTypeMappings: {
                '10000': 'scrum workflow',
                '10001': 'builds workflow',
              },
              name: 'Example workflow scheme',
            },
            schema: {
              $ref: '#/components/schemas/WorkflowScheme',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/project': {
    get: {
      deprecated: false,
      description:
        'Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.\n\nIf the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowSchemeProjectAssociations',
      parameters: [
        {
          description:
            'The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.',
          in: 'query',
          name: 'projectId',
          required: true,
          schema: {
            items: {
              example: 10010,
              format: 'int64',
              type: 'integer',
            },
            maxItems: 100,
            minItems: 1,
            type: 'array',
            uniqueItems: true,
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"values":[{"projectIds":["10010","10020"],"workflowScheme":{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}}]}',
              schema: {
                $ref: '#/components/schemas/ContainerOfWorkflowSchemeAssociations',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":[],"errors":{"projectId":"The ID of a project has to be provided."}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access workflow scheme associations."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow scheme project associations',
      tags: ['Workflow scheme project associations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.\n\nWorkflow schemes can only be assigned to classic projects.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'assignSchemeToProject',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectId: '10001',
              workflowSchemeId: '10032',
            },
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeProjectAssociation',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Only classic projects can have workflow schemes assigned."],"errors":{}}',
            },
          },
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Only Jira administrators can access workflow scheme associations."],"errors":{}}',
            },
          },
          description: 'Returned if the user does not have the required permissions.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["The workflow scheme was not found."],"errors":{}}',
            },
          },
          description: 'Returned if the workflow scheme or the project are not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Assign workflow scheme to project',
      tags: ['Workflow scheme project associations'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/read': {
    post: {
      deprecated: false,
      description:
        'Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes\n *  *Administer projects* project permissions to access project-scoped workflow schemes',
      operationId: 'readWorkflowSchemes',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.',
          in: 'query',
          name: 'expand',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              projectIds: ['10047', '10048'],
              workflowSchemeIds: ['3e59db0f-ed6c-47ce-8d50-80c0c4572677'],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeReadRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"defaultWorkflow":{"description":"This is the default workflow for Software Development projects.","id":"3e59db0f-ed6c-47ce-8d50-80c0c4572677","name":"Default Software Development Workflow","usage":[{"issueTypeIds":[],"projectId":"10047"}],"version":{"id":"657812fc-bc72-400f-aae0-df8d88db3d9g","versionNumber":1}},"description":"This is the workflow scheme for the Software Development project type.","id":"3g78dg2a-ns2n-56ab-9812-42h5j1464567","name":"Software Developer Workflow Scheme","projectIdsUsingScheme":["10047"],"scope":{"project":{"id":"10047"},"type":"GLOBAL"},"taskId":"3f83dg2a-ns2n-56ab-9812-42h5j1461629","version":{"id":"527213fc-bc72-400f-aae0-df8d88db2c8a","versionNumber":1},"workflowsForIssueTypes":[{"issueTypeIds":["10013"],"workflow":{"description":"This is the workflow for the Software Development bug issue type.","id":"5e79ae0f-ed6c-47ce-8d50-80c0c4572745","name":"Software Development Bug Workflow","usage":[{"issueTypeIds":["10013"],"projectId":"10047"}],"version":{"id":"897812dc-bc72-400f-aae0-df8d88fe3d8f","versionNumber":1}}}]}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/WorkflowSchemeReadResponse',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Bulk get workflow schemes',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflowscheme/update': {
    post: {
      deprecated: false,
      description:
        "Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.\n *  *Administer projects* project permission to update project-scoped workflow schemes.",
      operationId: 'updateSchemes',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677',
              description: 'description',
              id: '10000',
              name: 'name',
              statusMappingsByIssueTypeOverride: [
                {
                  issueTypeId: '10001',
                  statusMappings: [
                    {
                      newStatusId: '2',
                      oldStatusId: '1',
                    },
                    {
                      newStatusId: '4',
                      oldStatusId: '3',
                    },
                  ],
                },
                {
                  issueTypeId: '10002',
                  statusMappings: [
                    {
                      newStatusId: '4',
                      oldStatusId: '1',
                    },
                    {
                      newStatusId: '2',
                      oldStatusId: '3',
                    },
                  ],
                },
              ],
              statusMappingsByWorkflows: [
                {
                  newWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677',
                  oldWorkflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677',
                  statusMappings: [
                    {
                      newStatusId: '2',
                      oldStatusId: '1',
                    },
                    {
                      newStatusId: '4',
                      oldStatusId: '3',
                    },
                  ],
                },
              ],
              version: {
                id: '527213fc-bc72-400f-aae0-df8d88db2c8a',
                versionNumber: 1,
              },
              workflowsForIssueTypes: [
                {
                  issueTypeIds: ['10000', '10003'],
                  workflowId: '3e59db0f-ed6c-47ce-8d50-80c0c4572677',
                },
                {
                  issueTypeIds: ['10001`', '10002'],
                  workflowId: '3f83dg2a-ns2n-56ab-9812-42h5j1461629',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeUpdateRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful and there is no asynchronous task.',
        },
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful and there is an asynchronous task for the migrations.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflowscheme/update/mappings': {
    post: {
      deprecated: false,
      description:
        'Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.\n\n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.\n *  *Administer projects* project permission to update project-scoped workflow schemes.',
      operationId: 'updateWorkflowSchemeMappings',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflowId: '10010',
              id: '10001',
              workflowsForIssueTypes: [
                {
                  issueTypeIds: ['10010', '10011'],
                  workflowId: '10001',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/WorkflowSchemeUpdateRequiredMappingsRequest',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"statusMappingsByIssueTypes":[{"issueTypeId":"10000","statusIds":["10000","10001"]}],"statusMappingsByWorkflows":[{"sourceWorkflowId":"10000","statusIds":["10000","10001"],"targetWorkflowId":"10001"}],"statuses":[{"category":"TODO","id":"10000","name":"To Do"}],"statusesPerWorkflow":[{"initialStatusId":"10000","statuses":["10000","10001"],"workflowId":"10000"}]}',
              schema: {
                $ref: '#/components/schemas/WorkflowSchemeUpdateRequiredMappingsResponse',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '401': {
          description:
            "Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get required status mappings for workflow scheme update',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/api/3/workflowscheme/{id}': {
    delete: {
      deprecated: false,
      description:
        'Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteWorkflowScheme',
      parameters: [
        {
          description:
            'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the scheme is active.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowScheme',
      parameters: [
        {
          description:
            'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.",
          in: 'query',
          name: 'returnDraftIfExists',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateWorkflowScheme',
      parameters: [
        {
          description:
            'The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira',
              description: 'The description of the example workflow scheme.',
              issueTypeMappings: {
                '10000': 'scrum workflow',
              },
              name: 'Example workflow scheme',
              updateDraftIfNeeded: false,
            },
            schema: {
              $ref: '#/components/schemas/WorkflowScheme',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Classic update workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/createdraft': {
    post: {
      deprecated: false,
      description:
        'Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'createWorkflowSchemeDraftFromParent',
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft is created from.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Create draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/default': {
    delete: {
      deprecated: false,
      description:
        "Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.',
          in: 'query',
          name: 'updateDraftIfNeeded',
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete default workflow',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            "Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.",
          in: 'query',
          name: 'returnDraftIfExists',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/DefaultWorkflow',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get default workflow',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the default workflow for a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateDraftIfNeeded: false,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/DefaultWorkflow',
            },
          },
        },
        description: 'The new default workflow.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update default workflow',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:workflow-scheme:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/draft': {
    delete: {
      deprecated: false,
      description:
        'Deletes a draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteWorkflowSchemeDraft',
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission..',
        },
        '404': {
          description:
            'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  \nNote that:\n\n *  Only active workflow schemes can have draft workflow schemes.\n *  An active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowSchemeDraft',
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateWorkflowSchemeDraft',
      parameters: [
        {
          description: 'The ID of the active workflow scheme that the draft was created from.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              defaultWorkflow: 'jira',
              description: 'The description of the example workflow scheme.',
              issueTypeMappings: {
                '10000': 'scrum workflow',
              },
              name: 'Example workflow scheme',
              updateDraftIfNeeded: false,
            },
            schema: {
              $ref: '#/components/schemas/WorkflowScheme',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if:\n\n *  the original active workflow scheme is not found.\n *  the original active workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:group:jira',
            'read:issue-security-level:jira',
            'read:project-role:jira',
            'read:screen:jira',
            'read:status:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'write:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/draft/default': {
    delete: {
      deprecated: false,
      description:
        "Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteDraftDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete draft default workflow',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getDraftDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/DefaultWorkflow',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission..',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get draft default workflow',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the default workflow for a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'updateDraftDefaultWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateDraftIfNeeded: false,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/DefaultWorkflow',
            },
          },
        },
        description: 'The object for the new default workflow.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Update draft default workflow',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}': {
    delete: {
      deprecated: false,
      description:
        "Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteWorkflowSchemeDraftIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete workflow for issue type in draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getWorkflowSchemeDraftIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueType":"10000","workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/IssueTypeWorkflowMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow for issue type in draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the workflow for an issue type in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'setWorkflowSchemeDraftIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueType: '10000',
              updateDraftIfNeeded: false,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeWorkflowMapping',
            },
          },
        },
        description: 'The issue type-project mapping.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"scrum workflow","description":"The description of the example workflow scheme.","draft":true,"id":17218781,"issueTypeMappings":{"10000":"jira","10001":"jira"},"lastModified":"Today 6:38 PM","lastModifiedUser":{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","active":true,"applicationRoles":{"items":[],"size":1},"avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"},"displayName":"Mia Krystof","emailAddress":"mia@example.com","groups":{"items":[],"size":3},"key":"","name":"","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","timeZone":"Australia/Sydney"},"name":"Example workflow scheme","originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set workflow for issue type in draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/draft/publish': {
    post: {
      deprecated: false,
      description:
        'Publishes a draft workflow scheme.\n\nWhere the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.\n\nThis operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'publishDraftWorkflowScheme',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'Whether the request only performs a validation.',
          in: 'query',
          name: 'validateOnly',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              statusMappings: [
                {
                  issueTypeId: '10001',
                  newStatusId: '1',
                  statusId: '3',
                },
                {
                  issueTypeId: '10001',
                  newStatusId: '2',
                  statusId: '2',
                },
                {
                  issueTypeId: '10002',
                  newStatusId: '10003',
                  statusId: '10005',
                },
                {
                  issueTypeId: '10003',
                  newStatusId: '1',
                  statusId: '4',
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/PublishDraftWorkflowScheme',
            },
          },
        },
        description: 'Details of the status mappings.',
        required: true,
      },
      responses: {
        '204': {
          description: 'Returned if the request is only for validation and is successful.',
        },
        '303': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TaskProgressBeanObject',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example:
                '{"errorMessages":["Issue type with ID \'2\',\'4\' is missing the mappings required for statuses with IDs 10004."],"errors":{}}',
            },
          },
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          content: {
            'application/json': {
              example: '{"errorMessages":["Draft workflow scheme was not found."],"errors":{}}',
            },
          },
          description:
            'Returned if any of these are true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  A new status in the draft workflow scheme is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Publish draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/draft/workflow': {
    delete: {
      deprecated: false,
      description:
        "Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'deleteDraftWorkflowMapping',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The name of the workflow.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  The workflow is not found.\n *  The workflow is not specified.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue types for workflow in draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the workflow-issue type mappings for a workflow scheme's draft.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'getDraftWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.',
          in: 'query',
          name: 'workflowName',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultMapping":false,"issueTypes":["10000","10001"],"workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/IssueTypesWorkflowMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if either the workflow scheme or workflow (if specified) is not found. session.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue types for workflows in draft workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).",
      operationId: 'updateDraftWorkflowMapping',
      parameters: [
        {
          description: 'The ID of the workflow scheme that the draft belongs to.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The name of the workflow.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypes: ['10000'],
              updateDraftIfNeeded: true,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypesWorkflowMapping',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow scheme does not have a draft.\n *  The workflow is not found.\n *  The workflow is not specified.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set issue types for workflow in workflow scheme',
      tags: ['Workflow scheme drafts'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/issuetype/{issueType}': {
    delete: {
      deprecated: false,
      description:
        'Deletes the issue type-workflow mapping for an issue type in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteWorkflowSchemeIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.',
          in: 'query',
          name: 'updateDraftIfNeeded',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete workflow for issue type in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'delete:workflow-scheme:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
          ],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the issue type-workflow mapping for an issue type in a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflowSchemeIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.",
          in: 'query',
          name: 'returnDraftIfExists',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"issueType":"10000","workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/IssueTypeWorkflowMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get workflow for issue type in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the workflow for an issue type in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'setWorkflowSchemeIssueType',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The ID of the issue type.',
          in: 'path',
          name: 'issueType',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueType: '10000',
              updateDraftIfNeeded: false,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypeWorkflowMapping',
            },
          },
        },
        description: 'The issue type-project mapping.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if the workflow scheme or issue type is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set workflow for issue type in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/workflowscheme/{id}/workflow': {
    delete: {
      deprecated: false,
      description:
        'Deletes the workflow-issue type mapping for a workflow in a workflow scheme.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'deleteWorkflowMapping',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The name of the workflow.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.',
          in: 'query',
          name: 'updateDraftIfNeeded',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow is not found.\n *  The workflow is not specified.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Delete issue types for workflow in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['delete:workflow-scheme:jira'],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns the workflow-issue type mappings for a workflow scheme.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'getWorkflow',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.',
          in: 'query',
          name: 'workflowName',
          schema: {
            type: 'string',
          },
        },
        {
          description:
            "Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.",
          in: 'query',
          name: 'returnDraftIfExists',
          schema: {
            default: false,
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: '{"defaultMapping":false,"issueTypes":["10000","10001"],"workflow":"jira"}',
              schema: {
                $ref: '#/components/schemas/IssueTypesWorkflowMapping',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description: 'Returned if either the workflow scheme or workflow is not found.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Get issue types for workflows in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:workflow-scheme:jira', 'read:workflow:jira', 'read:issue-type:jira'],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        'Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.\n\nNote that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.\n\n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).',
      operationId: 'updateWorkflowMapping',
      parameters: [
        {
          description: 'The ID of the workflow scheme.',
          in: 'path',
          name: 'id',
          required: true,
          schema: {
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description: 'The name of the workflow.',
          in: 'query',
          name: 'workflowName',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              issueTypes: ['10000'],
              updateDraftIfNeeded: true,
              workflow: 'jira',
            },
            schema: {
              $ref: '#/components/schemas/IssueTypesWorkflowMapping',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"defaultWorkflow":"jira","description":"The description of the example workflow scheme.","draft":false,"id":101010,"issueTypeMappings":{"10000":"scrum workflow","10001":"builds workflow"},"name":"Example workflow scheme","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}',
              schema: {
                $ref: '#/components/schemas/WorkflowScheme',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          description: 'Returned if the user does not have the necessary permission.',
        },
        '404': {
          description:
            'Returned if any of the following is true:\n\n *  The workflow scheme is not found.\n *  The workflow is not found.\n *  The workflow is not specified.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['manage:jira-configuration'],
        },
      ],
      summary: 'Set issue types for workflow in workflow scheme',
      tags: ['Workflow schemes'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['manage:jira-configuration'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'write:workflow-scheme:jira',
            'read:workflow-scheme:jira',
            'read:workflow:jira',
            'read:application-role:jira',
            'read:avatar:jira',
            'read:group:jira',
            'read:issue-type:jira',
            'read:project-category:jira',
            'read:project:jira',
            'read:user:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/worklog/deleted': {
    get: {
      deprecated: false,
      description:
        'Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.\n\nThis resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.\n\nThis resource does not return worklogs deleted during the minute preceding the request.\n\n**[Permissions](#permissions) required:** Permission to access Jira.',
      operationId: 'getIdsOfWorklogsDeletedSince',
      parameters: [
        {
          description:
            'The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.',
          in: 'query',
          name: 'since',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"lastPage":true,"nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013693136","self":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013671562","since":1438013671562,"until":1438013693136,"values":[{"properties":[],"updatedTime":1438013671562,"worklogId":103},{"properties":[],"updatedTime":1438013672165,"worklogId":104},{"properties":[],"updatedTime":1438013693136,"worklogId":105}]}',
              schema: {
                $ref: '#/components/schemas/ChangedWorklogs',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get IDs of deleted worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-worklog:jira', 'read:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/worklog/list': {
    post: {
      deprecated: false,
      description:
        'Returns worklog details for a list of worklog IDs.\n\nThe returned list of worklogs is limited to 1000 items.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:\n\n *  the worklog is set as *Viewable by All Users*.\n *  the user is a member of a project role or group with permission to view the worklog.',
      operationId: 'getWorklogsForIds',
      parameters: [
        {
          description:
            'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              ids: [1, 2, 5, 10],
            },
            schema: {
              $ref: '#/components/schemas/WorklogIdsRequestBean',
            },
          },
        },
        description: 'A JSON object containing a list of worklog IDs.',
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '[{"author":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I did some work here."}]}]},"id":"100028","issueId":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","started":"2021-01-17T12:34:00.000+0000","timeSpent":"3h 20m","timeSpentSeconds":12000,"updateAuthor":{"accountId":"5b10a2844c20165700ede21g","active":false,"displayName":"Mia Krystof","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g"},"updated":"2021-01-18T23:45:00.000+0000","visibility":{"identifier":"276f955c-63d7-42c8-9520-92d01dca0625","type":"group","value":"jira-developers"}}]',
              schema: {
                items: {
                  $ref: '#/components/schemas/Worklog',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request contains more than 1000 worklog IDs or is empty.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [
            'read:comment:jira',
            'read:group:jira',
            'read:issue-worklog:jira',
            'read:issue-worklog.property:jira',
            'read:project-role:jira',
            'read:user:jira',
            'read:avatar:jira',
          ],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/api/3/worklog/updated': {
    get: {
      deprecated: false,
      description:
        'Returns a list of IDs and update timestamps for worklogs updated after a date and time.\n\nThis resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.\n\nThis resource does not return worklogs updated during the minute preceding the request.\n\n**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:\n\n *  the worklog is set as *Viewable by All Users*.\n *  the user is a member of a project role or group with permission to view the worklog.',
      operationId: 'getIdsOfWorklogsModifiedSince',
      parameters: [
        {
          description:
            'The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.',
          in: 'query',
          name: 'since',
          schema: {
            default: 0,
            format: 'int64',
            type: 'integer',
          },
        },
        {
          description:
            'Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.',
          in: 'query',
          name: 'expand',
          schema: {
            default: '',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example:
                '{"lastPage":true,"nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013693136","self":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013671562","since":1438013671562,"until":1438013693136,"values":[{"properties":[],"updatedTime":1438013671562,"worklogId":103},{"properties":[],"updatedTime":1438013672165,"worklogId":104},{"properties":[],"updatedTime":1438013693136,"worklogId":105}]}',
              schema: {
                $ref: '#/components/schemas/ChangedWorklogs',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: ['read:jira-work'],
        },
      ],
      summary: 'Get IDs of updated worklogs',
      tags: ['Issue worklogs'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': false,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: ['read:jira-work'],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['read:issue-worklog:jira', 'read:issue-worklog.property:jira'],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/addons/{addonKey}/properties': {
    get: {
      deprecated: false,
      description:
        'Gets all the properties of an app.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).',
      operationId: 'AddonPropertiesResource.getAddonProperties_get',
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.',
          in: 'path',
          name: 'addonKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                keys: [
                  {
                    self: 'https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey',
                    key: 'propertyKey',
                  },
                ],
              },
              schema: {
                $ref: '#/components/schemas/PropertyKeys',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.',
                statusCode: 401,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Get app properties',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes an app's property.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).",
      operationId: 'AddonPropertiesResource.deleteAddonProperty_delete',
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.',
          in: 'path',
          name: 'addonKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.',
                statusCode: 400,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the property key is longer than 127 characters.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.',
                statusCode: 401,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.',
                statusCode: 404,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: "Returned if the property is not found or doesn't belong to the app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Delete app property',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        "Returns the key and value of an app's property.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).",
      operationId: 'AddonPropertiesResource.getAddonProperty_get',
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.',
          in: 'path',
          name: 'addonKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                self: 'https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey',
                key: 'propertyKey',
                value: 'propertyValue',
              },
              schema: {
                $ref: '#/components/schemas/EntityProperty',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.',
                statusCode: 400,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the property key is longer than 127 characters.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.',
                statusCode: 401,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.',
                statusCode: 404,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: "Returned if the property is not found or doesn't belong to the app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Get app property',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
    put: {
      deprecated: false,
      description:
        "Sets the value of an app's property. Use this resource to store custom data for your app.\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.\nAdditionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).",
      operationId: 'AddonPropertiesResource.putAddonProperty_put',
      parameters: [
        {
          description: 'The key of the app, as defined in its descriptor.',
          in: 'path',
          name: 'addonKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                message: 'Property updated.',
                statusCode: 200,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              example: {
                message: 'Property created.',
                statusCode: 201,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned is the property is created.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.',
                statusCode: 400,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description:
            'Returned if:\n  * the property key is longer than 127 characters.\n  * the value is not valid JSON.\n  * the value is longer than 32768 characters.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'Access to this resource must be authenticated as an app.',
                statusCode: 401,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Set app property',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Beta',
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/app/module/dynamic': {
    delete: {
      deprecated: false,
      description:
        'Remove all or a list of modules registered by the calling app.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.',
      operationId: 'DynamicModulesResource.removeModules_delete',
      parameters: [
        {
          description:
            'The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.\nFor example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.\nNonexistent keys are ignored.',
          in: 'query',
          name: 'moduleKey',
          required: false,
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.',
              },
              schema: {
                $ref: '#/components/schemas/ErrorMessage',
              },
            },
          },
          description: 'Returned if the call is not from a Connect app.',
        },
      },
      summary: 'Remove modules',
      tags: ['Dynamic modules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    get: {
      deprecated: false,
      description:
        'Returns all modules registered dynamically by the calling app.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.',
      operationId: 'DynamicModulesResource.getModules_get',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ConnectModules',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.',
              },
              schema: {
                $ref: '#/components/schemas/ErrorMessage',
              },
            },
          },
          description: 'Returned if the call is not from a Connect app.',
        },
      },
      summary: 'Get modules',
      tags: ['Dynamic modules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
    post: {
      deprecated: false,
      description:
        'Registers a list of modules.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request.',
      operationId: 'DynamicModulesResource.registerModules_post',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/ConnectModules',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message:
                  'Installation failed. The app com.example.app.key has duplicate module keys: [module-key]. Please contact the app vendor.',
              },
              schema: {
                $ref: '#/components/schemas/ErrorMessage',
              },
            },
          },
          description:
            'Returned if:\n* any of the provided modules is invalid. For example, required properties are missing.\n* any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.\n\nDetails of the issues encountered are included in the error message.',
        },
        '401': {
          content: {
            'application/json': {
              example: {
                message: 'The request is not from a Connect app.',
              },
              schema: {
                $ref: '#/components/schemas/ErrorMessage',
              },
            },
          },
          description: 'Returned if the call is not from a Connect app.',
        },
      },
      summary: 'Register modules',
      tags: ['Dynamic modules'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/migration/field': {
    put: {
      deprecated: false,
      description:
        'Updates the value of a custom field added by Connect apps on one or more issues.\nThe values of up to 200 custom fields can be updated.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request',
      operationId: 'AppIssueFieldValueUpdateResource.updateIssueFields_put',
      parameters: [
        {
          description: 'The ID of the transfer.',
          in: 'header',
          name: 'Atlassian-Transfer-Id',
          required: true,
          schema: {
            format: 'uuid',
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            example: {
              updateValueList: [
                {
                  _type: 'StringIssueField',
                  issueID: 10001,
                  fieldID: 10076,
                  string: 'new string value',
                },
                {
                  _type: 'TextIssueField',
                  issueID: 10002,
                  fieldID: 10077,
                  text: 'new text value',
                },
                {
                  _type: 'SingleSelectIssueField',
                  issueID: 10003,
                  fieldID: 10078,
                  optionID: '1',
                },
                {
                  _type: 'MultiSelectIssueField',
                  issueID: 10004,
                  fieldID: 10079,
                  optionID: '2',
                },
                {
                  _type: 'RichTextIssueField',
                  issueID: 10005,
                  fieldID: 10080,
                  richText: 'new rich text value',
                },
                {
                  _type: 'NumberIssueField',
                  issueID: 10006,
                  fieldID: 10082,
                  number: 54,
                },
              ],
            },
            schema: {
              $ref: '#/components/schemas/ConnectCustomFieldValues',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {},
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '403': {
          description:
            'Returned if:\n* the transfer ID is not found.\n* the authorisation credentials are incorrect or missing.',
        },
      },
      summary: 'Bulk update custom field value',
      tags: ['App migration'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/migration/properties/{entityType}': {
    put: {
      description:
        'Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.',
      operationId: 'MigrationResource.updateEntityPropertiesValue_put',
      parameters: [
        {
          description: 'The app migration transfer ID.',
          in: 'header',
          name: 'Atlassian-Transfer-Id',
          required: true,
          schema: {
            format: 'uuid',
            type: 'string',
          },
        },
        {
          description: 'The type indicating the object that contains the entity properties.',
          in: 'path',
          name: 'entityType',
          required: true,
          schema: {
            enum: [
              'IssueProperty',
              'CommentProperty',
              'DashboardItemProperty',
              'IssueTypeProperty',
              'ProjectProperty',
              'UserProperty',
              'WorklogProperty',
              'BoardProperty',
              'SprintProperty',
            ],
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              items: {
                $ref: '#/components/schemas/EntityPropertyDetails',
              },
              maxItems: 50,
              minItems: 1,
              type: 'array',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '403': {
          description: 'Returned if the authorisation credentials are incorrect or missing.',
        },
      },
      summary: 'Bulk update entity properties',
      tags: ['App migration'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/migration/workflow/rule/search': {
    post: {
      description:
        'Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.',
      operationId: 'MigrationResource.workflowRuleSearch_post',
      parameters: [
        {
          description: 'The app migration transfer ID.',
          in: 'header',
          name: 'Atlassian-Transfer-Id',
          required: true,
          schema: {
            format: 'uuid',
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {
              $ref: '#/components/schemas/WorkflowRulesSearch',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                workflowEntityId: 'a498d711-685d-428d-8c3e-bc03bb450ea7',
                invalidRules: ['55d44f1d-c859-42e5-9c27-2c5ec3f340b1'],
                validRules: [
                  {
                    workflowId: {
                      name: 'Workflow name',
                      draft: true,
                    },
                    postFunctions: [
                      {
                        id: '123',
                        key: 'WorkflowKey',
                        configuration: {
                          value: 'WorkflowValidator',
                        },
                        transition: {
                          name: 'transition',
                          id: 123,
                        },
                      },
                    ],
                    conditions: [
                      {
                        id: '123',
                        key: 'WorkflowKey',
                        configuration: {
                          value: 'WorkflowValidator',
                        },
                        transition: {
                          name: 'transition',
                          id: 123,
                        },
                      },
                    ],
                    validators: [
                      {
                        id: '123',
                        key: 'WorkflowKey',
                        configuration: {
                          value: 'WorkflowValidator',
                        },
                        transition: {
                          name: 'transition',
                          id: 123,
                        },
                      },
                    ],
                  },
                ],
              },
              schema: {
                $ref: '#/components/schemas/WorkflowRulesSearchDetails',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is not valid.',
        },
        '403': {
          description: 'Returned if the authorisation credentials are incorrect or missing.',
        },
      },
      summary: 'Get workflow transition rule configurations',
      tags: ['App migration'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
    },
  },
  '/rest/atlassian-connect/1/service-registry': {
    get: {
      deprecated: false,
      description:
        'Retrieve the attributes of given service registries.\n\n**[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting',
      operationId: 'ServiceRegistryResource.services_get',
      parameters: [
        {
          description: 'The ID of the services (the strings starting with "b:" need to be decoded in Base64).',
          example:
            '["ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000000", "ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000001"]',
          explode: true,
          in: 'query',
          name: 'serviceIds',
          required: true,
          schema: {
            items: {
              type: 'string',
            },
            maxItems: 20,
            minItems: 1,
            type: 'array',
          },
          style: 'form',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              schema: {
                items: {
                  $ref: '#/components/schemas/ServiceRegistry',
                },
                type: 'array',
              },
            },
          },
          description: 'Returned if the request is successful.',
        },
        '400': {
          description: 'Returned if the request is invalid.',
        },
        '401': {
          description: 'The request needs to be authenticated.',
        },
        '403': {
          description: "The request isn't authorized.",
        },
        '500': {
          description: 'The endpoint failed internally.',
        },
        '501': {
          description: "The endpoint isn't ready for receiving requests.",
        },
        '504': {
          description: 'The upstream service is busy.',
        },
      },
      summary: 'Retrieve the attributes of service registries',
      tags: ['Service Registry'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-experimental': true,
    },
  },
  '/rest/forge/1/app/properties/{propertyKey}': {
    delete: {
      deprecated: false,
      description:
        "Deletes a Forge app's property.\n\n**[Permissions](#permissions) required:** Only Forge apps can make this request.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'deleteForgeAppProperty',
      parameters: [
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Returned if the request is successful.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message: 'The property key cannot be longer than 127 characters.',
                statusCode: 400,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the property key is longer than 127 characters.',
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: {
                errorMessages: ['Access to this resource must be authenticated as an app.'],
              },
            },
          },
          description: "Returned if the request isn't made directly by an app or if it's an impersonated request.",
        },
        '404': {
          content: {
            'application/json': {
              example: {
                message: 'Property with key not found.',
                statusCode: 404,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: "Returned if the property isn't found or doesn't belong to the app.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Delete app property (Forge)',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
    put: {
      deprecated: false,
      description:
        "Sets the value of a Forge app's property.\nThese values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)\nthrough the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).\n\nFor other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).\n\nThe value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions) required:** Only Forge apps can make this request.\n\nThe new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won't break your app. However, we recommend adding it to your app's scope list because we will eventually make it mandatory.",
      operationId: 'putForgeAppProperty',
      parameters: [
        {
          description: 'The key of the property.',
          in: 'path',
          name: 'propertyKey',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            schema: {},
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              example: {
                message: 'Property updated.',
                statusCode: 200,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned if the property is updated.',
        },
        '201': {
          content: {
            'application/json': {
              example: {
                message: 'Property created.',
                statusCode: 201,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description: 'Returned is the property is created.',
        },
        '400': {
          content: {
            'application/json': {
              example: {
                message: "The property key can't be longer than 127 characters.",
                statusCode: 400,
              },
              schema: {
                $ref: '#/components/schemas/OperationMessage',
              },
            },
          },
          description:
            "Returned if:\n  * the property key is longer than 127 characters.\n  * the value isn't valid JSON.\n  * the value is longer than 32768 characters.",
        },
        '401': {
          description: 'Returned if the authentication credentials are incorrect or missing.',
        },
        '403': {
          content: {
            'application/json': {
              example: {
                errorMessages: ['Access to this resource must be authenticated as an app.'],
              },
            },
          },
          description: "Returned if the request isn't made directly by an app or if it's an impersonated request.",
        },
      },
      security: [
        {
          basicAuth: [],
        },
        {
          OAuth2: [],
        },
      ],
      summary: 'Set app property (Forge)',
      tags: ['App properties'],
      'x-atlassian-data-security-policy': [
        {
          'app-access-rule-exempt': true,
        },
      ],
      'x-atlassian-oauth2-scopes': [
        {
          scheme: 'OAuth2',
          scopes: [],
          state: 'Current',
        },
        {
          scheme: 'OAuth2',
          scopes: ['write:app-data:jira'],
          state: 'Beta',
        },
      ],
      'x-experimental': true,
    },
  },
} as TPaths;
