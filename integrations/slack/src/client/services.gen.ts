// This file is auto-generated by @hey-api/openapi-ts
import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';

import type {
  AdminAppsApproveData,
  AdminAppsApproveError,
  AdminAppsApproveResponse,
  AdminAppsApprovedListData,
  AdminAppsApprovedListError,
  AdminAppsApprovedListResponse,
  AdminAppsRequestsListData,
  AdminAppsRequestsListError,
  AdminAppsRequestsListResponse,
  AdminAppsRestrictData,
  AdminAppsRestrictError,
  AdminAppsRestrictResponse,
  AdminAppsRestrictedListData,
  AdminAppsRestrictedListError,
  AdminAppsRestrictedListResponse,
  AdminConversationsArchiveData,
  AdminConversationsArchiveError,
  AdminConversationsArchiveResponse,
  AdminConversationsConvertToPrivateData,
  AdminConversationsConvertToPrivateError,
  AdminConversationsConvertToPrivateResponse,
  AdminConversationsCreateData,
  AdminConversationsCreateError,
  AdminConversationsCreateResponse,
  AdminConversationsDeleteData,
  AdminConversationsDeleteError,
  AdminConversationsDeleteResponse,
  AdminConversationsDisconnectSharedData,
  AdminConversationsDisconnectSharedError,
  AdminConversationsDisconnectSharedResponse,
  AdminConversationsEkmListOriginalConnectedChannelInfoData,
  AdminConversationsEkmListOriginalConnectedChannelInfoError,
  AdminConversationsEkmListOriginalConnectedChannelInfoResponse,
  AdminConversationsGetConversationPrefsData,
  AdminConversationsGetConversationPrefsError,
  AdminConversationsGetConversationPrefsResponse,
  AdminConversationsGetTeamsData,
  AdminConversationsGetTeamsError,
  AdminConversationsGetTeamsResponse,
  AdminConversationsInviteData,
  AdminConversationsInviteError,
  AdminConversationsInviteResponse,
  AdminConversationsRenameData,
  AdminConversationsRenameError,
  AdminConversationsRenameResponse,
  AdminConversationsRestrictAccessAddGroupData,
  AdminConversationsRestrictAccessAddGroupError,
  AdminConversationsRestrictAccessAddGroupResponse,
  AdminConversationsRestrictAccessListGroupsData,
  AdminConversationsRestrictAccessListGroupsError,
  AdminConversationsRestrictAccessListGroupsResponse,
  AdminConversationsRestrictAccessRemoveGroupData,
  AdminConversationsRestrictAccessRemoveGroupError,
  AdminConversationsRestrictAccessRemoveGroupResponse,
  AdminConversationsSearchData,
  AdminConversationsSearchError,
  AdminConversationsSearchResponse,
  AdminConversationsSetConversationPrefsData,
  AdminConversationsSetConversationPrefsError,
  AdminConversationsSetConversationPrefsResponse,
  AdminConversationsSetTeamsData,
  AdminConversationsSetTeamsError,
  AdminConversationsSetTeamsResponse,
  AdminConversationsUnarchiveData,
  AdminConversationsUnarchiveError,
  AdminConversationsUnarchiveResponse,
  AdminEmojiAddData,
  AdminEmojiAddError,
  AdminEmojiAddResponse,
  AdminEmojiAddAliasData,
  AdminEmojiAddAliasError,
  AdminEmojiAddAliasResponse,
  AdminEmojiListData,
  AdminEmojiListError,
  AdminEmojiListResponse,
  AdminEmojiRemoveData,
  AdminEmojiRemoveError,
  AdminEmojiRemoveResponse,
  AdminEmojiRenameData,
  AdminEmojiRenameError,
  AdminEmojiRenameResponse,
  AdminInviteRequestsApproveData,
  AdminInviteRequestsApproveError,
  AdminInviteRequestsApproveResponse,
  AdminInviteRequestsApprovedListData,
  AdminInviteRequestsApprovedListError,
  AdminInviteRequestsApprovedListResponse,
  AdminInviteRequestsDeniedListData,
  AdminInviteRequestsDeniedListError,
  AdminInviteRequestsDeniedListResponse,
  AdminInviteRequestsDenyData,
  AdminInviteRequestsDenyError,
  AdminInviteRequestsDenyResponse,
  AdminInviteRequestsListData,
  AdminInviteRequestsListError,
  AdminInviteRequestsListResponse,
  AdminTeamsAdminsListData,
  AdminTeamsAdminsListError,
  AdminTeamsAdminsListResponse,
  AdminTeamsCreateData,
  AdminTeamsCreateError,
  AdminTeamsCreateResponse,
  AdminTeamsListData,
  AdminTeamsListError,
  AdminTeamsListResponse,
  AdminTeamsOwnersListData,
  AdminTeamsOwnersListError,
  AdminTeamsOwnersListResponse,
  AdminTeamsSettingsInfoData,
  AdminTeamsSettingsInfoError,
  AdminTeamsSettingsInfoResponse,
  AdminTeamsSettingsSetDefaultChannelsData,
  AdminTeamsSettingsSetDefaultChannelsError,
  AdminTeamsSettingsSetDefaultChannelsResponse,
  AdminTeamsSettingsSetDescriptionData,
  AdminTeamsSettingsSetDescriptionError,
  AdminTeamsSettingsSetDescriptionResponse,
  AdminTeamsSettingsSetDiscoverabilityData,
  AdminTeamsSettingsSetDiscoverabilityError,
  AdminTeamsSettingsSetDiscoverabilityResponse,
  AdminTeamsSettingsSetIconData,
  AdminTeamsSettingsSetIconError,
  AdminTeamsSettingsSetIconResponse,
  AdminTeamsSettingsSetNameData,
  AdminTeamsSettingsSetNameError,
  AdminTeamsSettingsSetNameResponse,
  AdminUsergroupsAddChannelsData,
  AdminUsergroupsAddChannelsError,
  AdminUsergroupsAddChannelsResponse,
  AdminUsergroupsAddTeamsData,
  AdminUsergroupsAddTeamsError,
  AdminUsergroupsAddTeamsResponse,
  AdminUsergroupsListChannelsData,
  AdminUsergroupsListChannelsError,
  AdminUsergroupsListChannelsResponse,
  AdminUsergroupsRemoveChannelsData,
  AdminUsergroupsRemoveChannelsError,
  AdminUsergroupsRemoveChannelsResponse,
  AdminUsersAssignData,
  AdminUsersAssignError,
  AdminUsersAssignResponse,
  AdminUsersInviteData,
  AdminUsersInviteError,
  AdminUsersInviteResponse,
  AdminUsersListData,
  AdminUsersListError,
  AdminUsersListResponse,
  AdminUsersRemoveData,
  AdminUsersRemoveError,
  AdminUsersRemoveResponse,
  AdminUsersSessionInvalidateData,
  AdminUsersSessionInvalidateError,
  AdminUsersSessionInvalidateResponse,
  AdminUsersSessionResetData,
  AdminUsersSessionResetError,
  AdminUsersSessionResetResponse,
  AdminUsersSetAdminData,
  AdminUsersSetAdminError,
  AdminUsersSetAdminResponse,
  AdminUsersSetExpirationData,
  AdminUsersSetExpirationError,
  AdminUsersSetExpirationResponse,
  AdminUsersSetOwnerData,
  AdminUsersSetOwnerError,
  AdminUsersSetOwnerResponse,
  AdminUsersSetRegularData,
  AdminUsersSetRegularError,
  AdminUsersSetRegularResponse,
  ApiTestData,
  ApiTestError,
  ApiTestResponse,
  AppsEventAuthorizationsListData,
  AppsEventAuthorizationsListError,
  AppsEventAuthorizationsListResponse,
  AppsPermissionsInfoData,
  AppsPermissionsInfoError,
  AppsPermissionsInfoResponse,
  AppsPermissionsRequestData,
  AppsPermissionsRequestError,
  AppsPermissionsRequestResponse,
  AppsPermissionsResourcesListData,
  AppsPermissionsResourcesListError,
  AppsPermissionsResourcesListResponse,
  AppsPermissionsScopesListData,
  AppsPermissionsScopesListError,
  AppsPermissionsScopesListResponse,
  AppsPermissionsUsersListData,
  AppsPermissionsUsersListError,
  AppsPermissionsUsersListResponse,
  AppsPermissionsUsersRequestData,
  AppsPermissionsUsersRequestError,
  AppsPermissionsUsersRequestResponse,
  AppsUninstallData,
  AppsUninstallError,
  AppsUninstallResponse,
  AuthRevokeData,
  AuthRevokeError,
  AuthRevokeResponse,
  AuthTestData,
  AuthTestError,
  AuthTestResponse,
  BotsInfoData,
  BotsInfoError,
  BotsInfoResponse,
  CallsAddData,
  CallsAddError,
  CallsAddResponse,
  CallsEndData,
  CallsEndError,
  CallsEndResponse,
  CallsInfoData,
  CallsInfoError,
  CallsInfoResponse,
  CallsParticipantsAddData,
  CallsParticipantsAddError,
  CallsParticipantsAddResponse,
  CallsParticipantsRemoveData,
  CallsParticipantsRemoveError,
  CallsParticipantsRemoveResponse,
  CallsUpdateData,
  CallsUpdateError,
  CallsUpdateResponse,
  ChatDeleteData,
  ChatDeleteError,
  ChatDeleteResponse,
  ChatDeleteScheduledMessageData,
  ChatDeleteScheduledMessageError,
  ChatDeleteScheduledMessageResponse,
  ChatGetPermalinkData,
  ChatGetPermalinkError,
  ChatGetPermalinkResponse,
  ChatMeMessageData,
  ChatMeMessageError,
  ChatMeMessageResponse,
  ChatPostEphemeralData,
  ChatPostEphemeralError,
  ChatPostEphemeralResponse,
  ChatPostMessageData,
  ChatPostMessageError,
  ChatPostMessageResponse,
  ChatScheduleMessageData,
  ChatScheduleMessageError,
  ChatScheduleMessageResponse,
  ChatScheduledMessagesListData,
  ChatScheduledMessagesListError,
  ChatScheduledMessagesListResponse,
  ChatUnfurlData,
  ChatUnfurlError,
  ChatUnfurlResponse,
  ChatUpdateData,
  ChatUpdateError,
  ChatUpdateResponse,
  ConversationsArchiveData,
  ConversationsArchiveError,
  ConversationsArchiveResponse,
  ConversationsCloseData,
  ConversationsCloseError,
  ConversationsCloseResponse,
  ConversationsCreateData,
  ConversationsCreateError,
  ConversationsCreateResponse,
  ConversationsHistoryData,
  ConversationsHistoryError,
  ConversationsHistoryResponse,
  ConversationsInfoData,
  ConversationsInfoError,
  ConversationsInfoResponse,
  ConversationsInviteData,
  ConversationsInviteError,
  ConversationsInviteResponse,
  ConversationsJoinData,
  ConversationsJoinError,
  ConversationsJoinResponse,
  ConversationsKickData,
  ConversationsKickError,
  ConversationsKickResponse,
  ConversationsLeaveData,
  ConversationsLeaveError,
  ConversationsLeaveResponse,
  ConversationsListData,
  ConversationsListError,
  ConversationsListResponse,
  ConversationsMarkData,
  ConversationsMarkError,
  ConversationsMarkResponse,
  ConversationsMembersData,
  ConversationsMembersError,
  ConversationsMembersResponse,
  ConversationsOpenData,
  ConversationsOpenError,
  ConversationsOpenResponse,
  ConversationsRenameData,
  ConversationsRenameError,
  ConversationsRenameResponse,
  ConversationsRepliesData,
  ConversationsRepliesError,
  ConversationsRepliesResponse,
  ConversationsSetPurposeData,
  ConversationsSetPurposeError,
  ConversationsSetPurposeResponse,
  ConversationsSetTopicData,
  ConversationsSetTopicError,
  ConversationsSetTopicResponse,
  ConversationsUnarchiveData,
  ConversationsUnarchiveError,
  ConversationsUnarchiveResponse,
  DialogOpenData,
  DialogOpenError,
  DialogOpenResponse,
  DndEndDndData,
  DndEndDndError,
  DndEndDndResponse,
  DndEndSnoozeData,
  DndEndSnoozeError,
  DndEndSnoozeResponse,
  DndInfoData,
  DndInfoError,
  DndInfoResponse,
  DndSetSnoozeData,
  DndSetSnoozeError,
  DndSetSnoozeResponse,
  DndTeamInfoData,
  DndTeamInfoError,
  DndTeamInfoResponse,
  EmojiListData,
  EmojiListError,
  EmojiListResponse,
  FilesCommentsDeleteData,
  FilesCommentsDeleteError,
  FilesCommentsDeleteResponse,
  FilesDeleteData,
  FilesDeleteError,
  FilesDeleteResponse,
  FilesInfoData,
  FilesInfoError,
  FilesInfoResponse,
  FilesListData,
  FilesListError,
  FilesListResponse,
  FilesRemoteAddData,
  FilesRemoteAddError,
  FilesRemoteAddResponse,
  FilesRemoteInfoData,
  FilesRemoteInfoError,
  FilesRemoteInfoResponse,
  FilesRemoteListData,
  FilesRemoteListError,
  FilesRemoteListResponse,
  FilesRemoteRemoveData,
  FilesRemoteRemoveError,
  FilesRemoteRemoveResponse,
  FilesRemoteShareData,
  FilesRemoteShareError,
  FilesRemoteShareResponse,
  FilesRemoteUpdateData,
  FilesRemoteUpdateError,
  FilesRemoteUpdateResponse,
  FilesRevokePublicUrlData,
  FilesRevokePublicUrlError,
  FilesRevokePublicUrlResponse,
  FilesSharedPublicUrlData,
  FilesSharedPublicUrlError,
  FilesSharedPublicUrlResponse,
  FilesUploadData,
  FilesUploadError,
  FilesUploadResponse,
  MigrationExchangeData,
  MigrationExchangeError,
  MigrationExchangeResponse,
  OauthAccessData,
  OauthAccessError,
  OauthAccessResponse,
  OauthTokenData,
  OauthTokenError,
  OauthTokenResponse,
  OauthV2AccessData,
  OauthV2AccessError,
  OauthV2AccessResponse,
  PinsAddData,
  PinsAddError,
  PinsAddResponse,
  PinsListData,
  PinsListError,
  PinsListResponse,
  PinsRemoveData,
  PinsRemoveError,
  PinsRemoveResponse,
  ReactionsAddData,
  ReactionsAddError,
  ReactionsAddResponse,
  ReactionsGetData,
  ReactionsGetError,
  ReactionsGetResponse,
  ReactionsListData,
  ReactionsListError,
  ReactionsListResponse,
  ReactionsRemoveData,
  ReactionsRemoveError,
  ReactionsRemoveResponse,
  RemindersAddData,
  RemindersAddError,
  RemindersAddResponse,
  RemindersCompleteData,
  RemindersCompleteError,
  RemindersCompleteResponse,
  RemindersDeleteData,
  RemindersDeleteError,
  RemindersDeleteResponse,
  RemindersInfoData,
  RemindersInfoError,
  RemindersInfoResponse,
  RemindersListData,
  RemindersListError,
  RemindersListResponse,
  RtmConnectData,
  RtmConnectError,
  RtmConnectResponse,
  SearchMessagesData,
  SearchMessagesError,
  SearchMessagesResponse,
  StarsAddData,
  StarsAddError,
  StarsAddResponse,
  StarsListData,
  StarsListError,
  StarsListResponse,
  StarsRemoveData,
  StarsRemoveError,
  StarsRemoveResponse,
  TeamAccessLogsData,
  TeamAccessLogsError,
  TeamAccessLogsResponse,
  TeamBillableInfoData,
  TeamBillableInfoError,
  TeamBillableInfoResponse,
  TeamInfoData,
  TeamInfoError,
  TeamInfoResponse,
  TeamIntegrationLogsData,
  TeamIntegrationLogsError,
  TeamIntegrationLogsResponse,
  TeamProfileGetData,
  TeamProfileGetError,
  TeamProfileGetResponse,
  UsergroupsCreateData,
  UsergroupsCreateError,
  UsergroupsCreateResponse,
  UsergroupsDisableData,
  UsergroupsDisableError,
  UsergroupsDisableResponse,
  UsergroupsEnableData,
  UsergroupsEnableError,
  UsergroupsEnableResponse,
  UsergroupsListData,
  UsergroupsListError,
  UsergroupsListResponse,
  UsergroupsUpdateData,
  UsergroupsUpdateError,
  UsergroupsUpdateResponse,
  UsergroupsUsersListData,
  UsergroupsUsersListError,
  UsergroupsUsersListResponse,
  UsergroupsUsersUpdateData,
  UsergroupsUsersUpdateError,
  UsergroupsUsersUpdateResponse,
  UsersConversationsData,
  UsersConversationsError,
  UsersConversationsResponse,
  UsersDeletePhotoData,
  UsersDeletePhotoError,
  UsersDeletePhotoResponse,
  UsersGetPresenceData,
  UsersGetPresenceError,
  UsersGetPresenceResponse,
  UsersIdentityData,
  UsersIdentityError,
  UsersIdentityResponse,
  UsersInfoData,
  UsersInfoError,
  UsersInfoResponse,
  UsersListData,
  UsersListError,
  UsersListResponse,
  UsersLookupByEmailData,
  UsersLookupByEmailError,
  UsersLookupByEmailResponse,
  UsersProfileGetData,
  UsersProfileGetError,
  UsersProfileGetResponse,
  UsersProfileSetData,
  UsersProfileSetError,
  UsersProfileSetResponse,
  UsersSetActiveData,
  UsersSetActiveError,
  UsersSetActiveResponse,
  UsersSetPhotoData,
  UsersSetPhotoError,
  UsersSetPhotoResponse,
  UsersSetPresenceData,
  UsersSetPresenceError,
  UsersSetPresenceResponse,
  ViewsOpenData,
  ViewsOpenError,
  ViewsOpenResponse,
  ViewsPublishData,
  ViewsPublishError,
  ViewsPublishResponse,
  ViewsPushData,
  ViewsPushError,
  ViewsPushResponse,
  ViewsUpdateData,
  ViewsUpdateError,
  ViewsUpdateResponse,
  WorkflowsStepCompletedData,
  WorkflowsStepCompletedError,
  WorkflowsStepCompletedResponse,
  WorkflowsStepFailedData,
  WorkflowsStepFailedError,
  WorkflowsStepFailedResponse,
  WorkflowsUpdateStepData,
  WorkflowsUpdateStepError,
  WorkflowsUpdateStepResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Approve an app for installation on a workspace.
 */
export const adminAppsApprove = <ThrowOnError extends boolean = false>(
  options: Options<AdminAppsApproveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminAppsApproveResponse, AdminAppsApproveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.apps.approve',
  });
};

/**
 * List approved apps for an org or workspace.
 */
export const adminAppsApprovedList = <ThrowOnError extends boolean = false>(
  options: Options<AdminAppsApprovedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminAppsApprovedListResponse, AdminAppsApprovedListError, ThrowOnError>({
    ...options,
    url: '/admin.apps.approved.list',
  });
};

/**
 * List app requests for a team/workspace.
 */
export const adminAppsRequestsList = <ThrowOnError extends boolean = false>(
  options: Options<AdminAppsRequestsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminAppsRequestsListResponse, AdminAppsRequestsListError, ThrowOnError>({
    ...options,
    url: '/admin.apps.requests.list',
  });
};

/**
 * Restrict an app for installation on a workspace.
 */
export const adminAppsRestrict = <ThrowOnError extends boolean = false>(
  options: Options<AdminAppsRestrictData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminAppsRestrictResponse, AdminAppsRestrictError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.apps.restrict',
  });
};

/**
 * List restricted apps for an org or workspace.
 */
export const adminAppsRestrictedList = <ThrowOnError extends boolean = false>(
  options: Options<AdminAppsRestrictedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminAppsRestrictedListResponse, AdminAppsRestrictedListError, ThrowOnError>({
    ...options,
    url: '/admin.apps.restricted.list',
  });
};

/**
 * Archive a public or private channel.
 */
export const adminConversationsArchive = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsArchiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsArchiveResponse,
    AdminConversationsArchiveError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.archive',
  });
};

/**
 * Convert a public channel to a private channel.
 */
export const adminConversationsConvertToPrivate = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsConvertToPrivateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsConvertToPrivateResponse,
    AdminConversationsConvertToPrivateError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.convertToPrivate',
  });
};

/**
 * Create a public or private channel-based conversation.
 */
export const adminConversationsCreate = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsCreateResponse,
    AdminConversationsCreateError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.create',
  });
};

/**
 * Delete a public or private channel.
 */
export const adminConversationsDelete = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsDeleteResponse,
    AdminConversationsDeleteError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.delete',
  });
};

/**
 * Disconnect a connected channel from one or more workspaces.
 */
export const adminConversationsDisconnectShared = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsDisconnectSharedData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsDisconnectSharedResponse,
    AdminConversationsDisconnectSharedError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.disconnectShared',
  });
};

/**
 * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
 */
export const adminConversationsEkmListOriginalConnectedChannelInfo = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsEkmListOriginalConnectedChannelInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminConversationsEkmListOriginalConnectedChannelInfoResponse,
    AdminConversationsEkmListOriginalConnectedChannelInfoError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.conversations.ekm.listOriginalConnectedChannelInfo',
  });
};

/**
 * Get conversation preferences for a public or private channel.
 */
export const adminConversationsGetConversationPrefs = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsGetConversationPrefsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminConversationsGetConversationPrefsResponse,
    AdminConversationsGetConversationPrefsError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.conversations.getConversationPrefs',
  });
};

/**
 * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
 */
export const adminConversationsGetTeams = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsGetTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminConversationsGetTeamsResponse,
    AdminConversationsGetTeamsError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.conversations.getTeams',
  });
};

/**
 * Invite a user to a public or private channel.
 */
export const adminConversationsInvite = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsInviteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsInviteResponse,
    AdminConversationsInviteError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.invite',
  });
};

/**
 * Rename a public or private channel.
 */
export const adminConversationsRename = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsRenameData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsRenameResponse,
    AdminConversationsRenameError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.rename',
  });
};

/**
 * Add an allowlist of IDP groups for accessing a channel
 */
export const adminConversationsRestrictAccessAddGroup = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsRestrictAccessAddGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsRestrictAccessAddGroupResponse,
    AdminConversationsRestrictAccessAddGroupError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.restrictAccess.addGroup',
  });
};

/**
 * List all IDP Groups linked to a channel
 */
export const adminConversationsRestrictAccessListGroups = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsRestrictAccessListGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminConversationsRestrictAccessListGroupsResponse,
    AdminConversationsRestrictAccessListGroupsError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.conversations.restrictAccess.listGroups',
  });
};

/**
 * Remove a linked IDP group linked from a private channel
 */
export const adminConversationsRestrictAccessRemoveGroup = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsRestrictAccessRemoveGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsRestrictAccessRemoveGroupResponse,
    AdminConversationsRestrictAccessRemoveGroupError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.restrictAccess.removeGroup',
  });
};

/**
 * Search for public or private channels in an Enterprise organization.
 */
export const adminConversationsSearch = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsSearchData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminConversationsSearchResponse, AdminConversationsSearchError, ThrowOnError>(
    {
      ...options,
      url: '/admin.conversations.search',
    },
  );
};

/**
 * Set the posting permissions for a public or private channel.
 */
export const adminConversationsSetConversationPrefs = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsSetConversationPrefsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsSetConversationPrefsResponse,
    AdminConversationsSetConversationPrefsError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.setConversationPrefs',
  });
};

/**
 * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
 */
export const adminConversationsSetTeams = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsSetTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsSetTeamsResponse,
    AdminConversationsSetTeamsError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.setTeams',
  });
};

/**
 * Unarchive a public or private channel.
 */
export const adminConversationsUnarchive = <ThrowOnError extends boolean = false>(
  options: Options<AdminConversationsUnarchiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminConversationsUnarchiveResponse,
    AdminConversationsUnarchiveError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.conversations.unarchive',
  });
};

/**
 * Add an emoji.
 */
export const adminEmojiAdd = <ThrowOnError extends boolean = false>(
  options: Options<AdminEmojiAddData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminEmojiAddResponse, AdminEmojiAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.emoji.add',
  });
};

/**
 * Add an emoji alias.
 */
export const adminEmojiAddAlias = <ThrowOnError extends boolean = false>(
  options: Options<AdminEmojiAddAliasData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminEmojiAddAliasResponse, AdminEmojiAddAliasError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.emoji.addAlias',
  });
};

/**
 * List emoji for an Enterprise Grid organization.
 */
export const adminEmojiList = <ThrowOnError extends boolean = false>(
  options: Options<AdminEmojiListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminEmojiListResponse, AdminEmojiListError, ThrowOnError>({
    ...options,
    url: '/admin.emoji.list',
  });
};

/**
 * Remove an emoji across an Enterprise Grid organization
 */
export const adminEmojiRemove = <ThrowOnError extends boolean = false>(
  options: Options<AdminEmojiRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminEmojiRemoveResponse, AdminEmojiRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.emoji.remove',
  });
};

/**
 * Rename an emoji.
 */
export const adminEmojiRename = <ThrowOnError extends boolean = false>(
  options: Options<AdminEmojiRenameData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminEmojiRenameResponse, AdminEmojiRenameError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.emoji.rename',
  });
};

/**
 * Approve a workspace invite request.
 */
export const adminInviteRequestsApprove = <ThrowOnError extends boolean = false>(
  options: Options<AdminInviteRequestsApproveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminInviteRequestsApproveResponse,
    AdminInviteRequestsApproveError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.inviteRequests.approve',
  });
};

/**
 * List all approved workspace invite requests.
 */
export const adminInviteRequestsApprovedList = <ThrowOnError extends boolean = false>(
  options: Options<AdminInviteRequestsApprovedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminInviteRequestsApprovedListResponse,
    AdminInviteRequestsApprovedListError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.inviteRequests.approved.list',
  });
};

/**
 * List all denied workspace invite requests.
 */
export const adminInviteRequestsDeniedList = <ThrowOnError extends boolean = false>(
  options: Options<AdminInviteRequestsDeniedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminInviteRequestsDeniedListResponse,
    AdminInviteRequestsDeniedListError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.inviteRequests.denied.list',
  });
};

/**
 * Deny a workspace invite request.
 */
export const adminInviteRequestsDeny = <ThrowOnError extends boolean = false>(
  options: Options<AdminInviteRequestsDenyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminInviteRequestsDenyResponse, AdminInviteRequestsDenyError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.inviteRequests.deny',
  });
};

/**
 * List all pending workspace invite requests.
 */
export const adminInviteRequestsList = <ThrowOnError extends boolean = false>(
  options: Options<AdminInviteRequestsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminInviteRequestsListResponse, AdminInviteRequestsListError, ThrowOnError>({
    ...options,
    url: '/admin.inviteRequests.list',
  });
};

/**
 * List all of the admins on a given workspace.
 */
export const adminTeamsAdminsList = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsAdminsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminTeamsAdminsListResponse, AdminTeamsAdminsListError, ThrowOnError>({
    ...options,
    url: '/admin.teams.admins.list',
  });
};

/**
 * Create an Enterprise team.
 */
export const adminTeamsCreate = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminTeamsCreateResponse, AdminTeamsCreateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.create',
  });
};

/**
 * List all teams on an Enterprise organization
 */
export const adminTeamsList = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminTeamsListResponse, AdminTeamsListError, ThrowOnError>({
    ...options,
    url: '/admin.teams.list',
  });
};

/**
 * List all of the owners on a given workspace.
 */
export const adminTeamsOwnersList = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsOwnersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminTeamsOwnersListResponse, AdminTeamsOwnersListError, ThrowOnError>({
    ...options,
    url: '/admin.teams.owners.list',
  });
};

/**
 * Fetch information about settings in a workspace
 */
export const adminTeamsSettingsInfo = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminTeamsSettingsInfoResponse, AdminTeamsSettingsInfoError, ThrowOnError>({
    ...options,
    url: '/admin.teams.settings.info',
  });
};

/**
 * Set the default channels of a workspace.
 */
export const adminTeamsSettingsSetDefaultChannels = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsSetDefaultChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminTeamsSettingsSetDefaultChannelsResponse,
    AdminTeamsSettingsSetDefaultChannelsError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.settings.setDefaultChannels',
  });
};

/**
 * Set the description of a given workspace.
 */
export const adminTeamsSettingsSetDescription = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsSetDescriptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminTeamsSettingsSetDescriptionResponse,
    AdminTeamsSettingsSetDescriptionError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.settings.setDescription',
  });
};

/**
 * An API method that allows admins to set the discoverability of a given workspace
 */
export const adminTeamsSettingsSetDiscoverability = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsSetDiscoverabilityData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminTeamsSettingsSetDiscoverabilityResponse,
    AdminTeamsSettingsSetDiscoverabilityError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.settings.setDiscoverability',
  });
};

/**
 * Sets the icon of a workspace.
 */
export const adminTeamsSettingsSetIcon = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsSetIconData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminTeamsSettingsSetIconResponse,
    AdminTeamsSettingsSetIconError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.settings.setIcon',
  });
};

/**
 * Set the name of a given workspace.
 */
export const adminTeamsSettingsSetName = <ThrowOnError extends boolean = false>(
  options: Options<AdminTeamsSettingsSetNameData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminTeamsSettingsSetNameResponse,
    AdminTeamsSettingsSetNameError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.teams.settings.setName',
  });
};

/**
 * Add one or more default channels to an IDP group.
 */
export const adminUsergroupsAddChannels = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsergroupsAddChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminUsergroupsAddChannelsResponse,
    AdminUsergroupsAddChannelsError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.usergroups.addChannels',
  });
};

/**
 * Associate one or more default workspaces with an organization-wide IDP group.
 */
export const adminUsergroupsAddTeams = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsergroupsAddTeamsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsergroupsAddTeamsResponse, AdminUsergroupsAddTeamsError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.usergroups.addTeams',
  });
};

/**
 * List the channels linked to an org-level IDP group (user group).
 */
export const adminUsergroupsListChannels = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsergroupsListChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AdminUsergroupsListChannelsResponse,
    AdminUsergroupsListChannelsError,
    ThrowOnError
  >({
    ...options,
    url: '/admin.usergroups.listChannels',
  });
};

/**
 * Remove one or more default channels from an org-level IDP group (user group).
 */
export const adminUsergroupsRemoveChannels = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsergroupsRemoveChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminUsergroupsRemoveChannelsResponse,
    AdminUsergroupsRemoveChannelsError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.usergroups.removeChannels',
  });
};

/**
 * Add an Enterprise user to a workspace.
 */
export const adminUsersAssign = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersAssignData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersAssignResponse, AdminUsersAssignError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.assign',
  });
};

/**
 * Invite a user to a workspace.
 */
export const adminUsersInvite = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersInviteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersInviteResponse, AdminUsersInviteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.invite',
  });
};

/**
 * List users on a workspace
 */
export const adminUsersList = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AdminUsersListResponse, AdminUsersListError, ThrowOnError>({
    ...options,
    url: '/admin.users.list',
  });
};

/**
 * Remove a user from a workspace.
 */
export const adminUsersRemove = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersRemoveResponse, AdminUsersRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.remove',
  });
};

/**
 * Invalidate a single session for a user by session_id
 */
export const adminUsersSessionInvalidate = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSessionInvalidateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AdminUsersSessionInvalidateResponse,
    AdminUsersSessionInvalidateError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.session.invalidate',
  });
};

/**
 * Wipes all valid sessions on all devices for a given user
 */
export const adminUsersSessionReset = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSessionResetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersSessionResetResponse, AdminUsersSessionResetError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.session.reset',
  });
};

/**
 * Set an existing guest, regular user, or owner to be an admin user.
 */
export const adminUsersSetAdmin = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSetAdminData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersSetAdminResponse, AdminUsersSetAdminError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.setAdmin',
  });
};

/**
 * Set an expiration for a guest user
 */
export const adminUsersSetExpiration = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSetExpirationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersSetExpirationResponse, AdminUsersSetExpirationError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.setExpiration',
  });
};

/**
 * Set an existing guest, regular user, or admin user to be a workspace owner.
 */
export const adminUsersSetOwner = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSetOwnerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersSetOwnerResponse, AdminUsersSetOwnerError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.setOwner',
  });
};

/**
 * Set an existing guest user, admin user, or owner to be a regular user.
 */
export const adminUsersSetRegular = <ThrowOnError extends boolean = false>(
  options: Options<AdminUsersSetRegularData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUsersSetRegularResponse, AdminUsersSetRegularError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/admin.users.setRegular',
  });
};

/**
 * Checks API calling code.
 */
export const apiTest = <ThrowOnError extends boolean = false>(options?: Options<ApiTestData, ThrowOnError>) => {
  return (options?.client ?? client).get<ApiTestResponse, ApiTestError, ThrowOnError>({
    ...options,
    url: '/api.test',
  });
};

/**
 * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
 */
export const appsEventAuthorizationsList = <ThrowOnError extends boolean = false>(
  options: Options<AppsEventAuthorizationsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AppsEventAuthorizationsListResponse,
    AppsEventAuthorizationsListError,
    ThrowOnError
  >({
    ...options,
    url: '/apps.event.authorizations.list',
  });
};

/**
 * Returns list of permissions this app has on a team.
 */
export const appsPermissionsInfo = <ThrowOnError extends boolean = false>(
  options?: Options<AppsPermissionsInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AppsPermissionsInfoResponse, AppsPermissionsInfoError, ThrowOnError>({
    ...options,
    url: '/apps.permissions.info',
  });
};

/**
 * Allows an app to request additional scopes
 */
export const appsPermissionsRequest = <ThrowOnError extends boolean = false>(
  options: Options<AppsPermissionsRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AppsPermissionsRequestResponse, AppsPermissionsRequestError, ThrowOnError>({
    ...options,
    url: '/apps.permissions.request',
  });
};

/**
 * Returns list of resource grants this app has on a team.
 */
export const appsPermissionsResourcesList = <ThrowOnError extends boolean = false>(
  options: Options<AppsPermissionsResourcesListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AppsPermissionsResourcesListResponse,
    AppsPermissionsResourcesListError,
    ThrowOnError
  >({
    ...options,
    url: '/apps.permissions.resources.list',
  });
};

/**
 * Returns list of scopes this app has on a team.
 */
export const appsPermissionsScopesList = <ThrowOnError extends boolean = false>(
  options: Options<AppsPermissionsScopesListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AppsPermissionsScopesListResponse,
    AppsPermissionsScopesListError,
    ThrowOnError
  >({
    ...options,
    url: '/apps.permissions.scopes.list',
  });
};

/**
 * Returns list of user grants and corresponding scopes this app has on a team.
 */
export const appsPermissionsUsersList = <ThrowOnError extends boolean = false>(
  options: Options<AppsPermissionsUsersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AppsPermissionsUsersListResponse, AppsPermissionsUsersListError, ThrowOnError>(
    {
      ...options,
      url: '/apps.permissions.users.list',
    },
  );
};

/**
 * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
 */
export const appsPermissionsUsersRequest = <ThrowOnError extends boolean = false>(
  options: Options<AppsPermissionsUsersRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AppsPermissionsUsersRequestResponse,
    AppsPermissionsUsersRequestError,
    ThrowOnError
  >({
    ...options,
    url: '/apps.permissions.users.request',
  });
};

/**
 * Uninstalls your app from a workspace.
 */
export const appsUninstall = <ThrowOnError extends boolean = false>(
  options?: Options<AppsUninstallData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<AppsUninstallResponse, AppsUninstallError, ThrowOnError>({
    ...options,
    url: '/apps.uninstall',
  });
};

/**
 * Revokes a token.
 */
export const authRevoke = <ThrowOnError extends boolean = false>(options: Options<AuthRevokeData, ThrowOnError>) => {
  return (options?.client ?? client).get<AuthRevokeResponse, AuthRevokeError, ThrowOnError>({
    ...options,
    url: '/auth.revoke',
  });
};

/**
 * Checks authentication & identity.
 */
export const authTest = <ThrowOnError extends boolean = false>(options: Options<AuthTestData, ThrowOnError>) => {
  return (options?.client ?? client).get<AuthTestResponse, AuthTestError, ThrowOnError>({
    ...options,
    url: '/auth.test',
  });
};

/**
 * Gets information about a bot user.
 */
export const botsInfo = <ThrowOnError extends boolean = false>(options: Options<BotsInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<BotsInfoResponse, BotsInfoError, ThrowOnError>({
    ...options,
    url: '/bots.info',
  });
};

/**
 * Registers a new Call.
 */
export const callsAdd = <ThrowOnError extends boolean = false>(options: Options<CallsAddData, ThrowOnError>) => {
  return (options?.client ?? client).post<CallsAddResponse, CallsAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/calls.add',
  });
};

/**
 * Ends a Call.
 */
export const callsEnd = <ThrowOnError extends boolean = false>(options: Options<CallsEndData, ThrowOnError>) => {
  return (options?.client ?? client).post<CallsEndResponse, CallsEndError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/calls.end',
  });
};

/**
 * Returns information about a Call.
 */
export const callsInfo = <ThrowOnError extends boolean = false>(options: Options<CallsInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<CallsInfoResponse, CallsInfoError, ThrowOnError>({
    ...options,
    url: '/calls.info',
  });
};

/**
 * Registers new participants added to a Call.
 */
export const callsParticipantsAdd = <ThrowOnError extends boolean = false>(
  options: Options<CallsParticipantsAddData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CallsParticipantsAddResponse, CallsParticipantsAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/calls.participants.add',
  });
};

/**
 * Registers participants removed from a Call.
 */
export const callsParticipantsRemove = <ThrowOnError extends boolean = false>(
  options: Options<CallsParticipantsRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CallsParticipantsRemoveResponse, CallsParticipantsRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/calls.participants.remove',
  });
};

/**
 * Updates information about a Call.
 */
export const callsUpdate = <ThrowOnError extends boolean = false>(options: Options<CallsUpdateData, ThrowOnError>) => {
  return (options?.client ?? client).post<CallsUpdateResponse, CallsUpdateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/calls.update',
  });
};

/**
 * Deletes a message.
 */
export const chatDelete = <ThrowOnError extends boolean = false>(options?: Options<ChatDeleteData, ThrowOnError>) => {
  return (options?.client ?? client).post<ChatDeleteResponse, ChatDeleteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.delete',
  });
};

/**
 * Deletes a pending scheduled message from the queue.
 */
export const chatDeleteScheduledMessage = <ThrowOnError extends boolean = false>(
  options: Options<ChatDeleteScheduledMessageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ChatDeleteScheduledMessageResponse,
    ChatDeleteScheduledMessageError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.deleteScheduledMessage',
  });
};

/**
 * Retrieve a permalink URL for a specific extant message
 */
export const chatGetPermalink = <ThrowOnError extends boolean = false>(
  options: Options<ChatGetPermalinkData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ChatGetPermalinkResponse, ChatGetPermalinkError, ThrowOnError>({
    ...options,
    url: '/chat.getPermalink',
  });
};

/**
 * Share a me message into a channel.
 */
export const chatMeMessage = <ThrowOnError extends boolean = false>(
  options?: Options<ChatMeMessageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ChatMeMessageResponse, ChatMeMessageError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.meMessage',
  });
};

/**
 * Sends an ephemeral message to a user in a channel.
 */
export const chatPostEphemeral = <ThrowOnError extends boolean = false>(
  options: Options<ChatPostEphemeralData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ChatPostEphemeralResponse, ChatPostEphemeralError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.postEphemeral',
  });
};

/**
 * Sends a message to a channel.
 */
export const chatPostMessage = <ThrowOnError extends boolean = false>(
  options: Options<ChatPostMessageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ChatPostMessageResponse, ChatPostMessageError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.postMessage',
  });
};

/**
 * Schedules a message to be sent to a channel.
 */
export const chatScheduleMessage = <ThrowOnError extends boolean = false>(
  options?: Options<ChatScheduleMessageData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ChatScheduleMessageResponse, ChatScheduleMessageError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.scheduleMessage',
  });
};

/**
 * Returns a list of scheduled messages.
 */
export const chatScheduledMessagesList = <ThrowOnError extends boolean = false>(
  options?: Options<ChatScheduledMessagesListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ChatScheduledMessagesListResponse,
    ChatScheduledMessagesListError,
    ThrowOnError
  >({
    ...options,
    url: '/chat.scheduledMessages.list',
  });
};

/**
 * Provide custom unfurl behavior for user-posted URLs
 */
export const chatUnfurl = <ThrowOnError extends boolean = false>(options: Options<ChatUnfurlData, ThrowOnError>) => {
  return (options?.client ?? client).post<ChatUnfurlResponse, ChatUnfurlError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.unfurl',
  });
};

/**
 * Updates a message.
 */
export const chatUpdate = <ThrowOnError extends boolean = false>(options: Options<ChatUpdateData, ThrowOnError>) => {
  return (options?.client ?? client).post<ChatUpdateResponse, ChatUpdateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/chat.update',
  });
};

/**
 * Archives a conversation.
 */
export const conversationsArchive = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsArchiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsArchiveResponse, ConversationsArchiveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.archive',
  });
};

/**
 * Closes a direct message or multi-person direct message.
 */
export const conversationsClose = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsCloseData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsCloseResponse, ConversationsCloseError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.close',
  });
};

/**
 * Initiates a public or private channel-based conversation
 */
export const conversationsCreate = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsCreateResponse, ConversationsCreateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.create',
  });
};

/**
 * Fetches a conversation's history of messages and events.
 */
export const conversationsHistory = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ConversationsHistoryResponse, ConversationsHistoryError, ThrowOnError>({
    ...options,
    url: '/conversations.history',
  });
};

/**
 * Retrieve information about a conversation.
 */
export const conversationsInfo = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ConversationsInfoResponse, ConversationsInfoError, ThrowOnError>({
    ...options,
    url: '/conversations.info',
  });
};

/**
 * Invites users to a channel.
 */
export const conversationsInvite = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsInviteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsInviteResponse, ConversationsInviteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.invite',
  });
};

/**
 * Joins an existing conversation.
 */
export const conversationsJoin = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsJoinData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsJoinResponse, ConversationsJoinError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.join',
  });
};

/**
 * Removes a user from a conversation.
 */
export const conversationsKick = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsKickData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsKickResponse, ConversationsKickError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.kick',
  });
};

/**
 * Leaves a conversation.
 */
export const conversationsLeave = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsLeaveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsLeaveResponse, ConversationsLeaveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.leave',
  });
};

/**
 * Lists all channels in a Slack team.
 */
export const conversationsList = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ConversationsListResponse, ConversationsListError, ThrowOnError>({
    ...options,
    url: '/conversations.list',
  });
};

/**
 * Sets the read cursor in a channel.
 */
export const conversationsMark = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsMarkData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsMarkResponse, ConversationsMarkError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.mark',
  });
};

/**
 * Retrieve members of a conversation.
 */
export const conversationsMembers = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsMembersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ConversationsMembersResponse, ConversationsMembersError, ThrowOnError>({
    ...options,
    url: '/conversations.members',
  });
};

/**
 * Opens or resumes a direct message or multi-person direct message.
 */
export const conversationsOpen = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsOpenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsOpenResponse, ConversationsOpenError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.open',
  });
};

/**
 * Renames a conversation.
 */
export const conversationsRename = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsRenameData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsRenameResponse, ConversationsRenameError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.rename',
  });
};

/**
 * Retrieve a thread of messages posted to a conversation
 */
export const conversationsReplies = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsRepliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ConversationsRepliesResponse, ConversationsRepliesError, ThrowOnError>({
    ...options,
    url: '/conversations.replies',
  });
};

/**
 * Sets the purpose for a conversation.
 */
export const conversationsSetPurpose = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsSetPurposeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsSetPurposeResponse, ConversationsSetPurposeError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.setPurpose',
  });
};

/**
 * Sets the topic for a conversation.
 */
export const conversationsSetTopic = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsSetTopicData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsSetTopicResponse, ConversationsSetTopicError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.setTopic',
  });
};

/**
 * Reverses conversation archival.
 */
export const conversationsUnarchive = <ThrowOnError extends boolean = false>(
  options?: Options<ConversationsUnarchiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ConversationsUnarchiveResponse, ConversationsUnarchiveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/conversations.unarchive',
  });
};

/**
 * Open a dialog with a user
 */
export const dialogOpen = <ThrowOnError extends boolean = false>(options: Options<DialogOpenData, ThrowOnError>) => {
  return (options?.client ?? client).get<DialogOpenResponse, DialogOpenError, ThrowOnError>({
    ...options,
    url: '/dialog.open',
  });
};

/**
 * Ends the current user's Do Not Disturb session immediately.
 */
export const dndEndDnd = <ThrowOnError extends boolean = false>(options: Options<DndEndDndData, ThrowOnError>) => {
  return (options?.client ?? client).post<DndEndDndResponse, DndEndDndError, ThrowOnError>({
    ...options,
    url: '/dnd.endDnd',
  });
};

/**
 * Ends the current user's snooze mode immediately.
 */
export const dndEndSnooze = <ThrowOnError extends boolean = false>(
  options: Options<DndEndSnoozeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DndEndSnoozeResponse, DndEndSnoozeError, ThrowOnError>({
    ...options,
    url: '/dnd.endSnooze',
  });
};

/**
 * Retrieves a user's current Do Not Disturb status.
 */
export const dndInfo = <ThrowOnError extends boolean = false>(options?: Options<DndInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<DndInfoResponse, DndInfoError, ThrowOnError>({
    ...options,
    url: '/dnd.info',
  });
};

/**
 * Turns on Do Not Disturb mode for the current user, or changes its duration.
 */
export const dndSetSnooze = <ThrowOnError extends boolean = false>(
  options: Options<DndSetSnoozeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<DndSetSnoozeResponse, DndSetSnoozeError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/dnd.setSnooze',
  });
};

/**
 * Retrieves the Do Not Disturb status for up to 50 users on a team.
 */
export const dndTeamInfo = <ThrowOnError extends boolean = false>(options?: Options<DndTeamInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<DndTeamInfoResponse, DndTeamInfoError, ThrowOnError>({
    ...options,
    url: '/dnd.teamInfo',
  });
};

/**
 * Lists custom emoji for a team.
 */
export const emojiList = <ThrowOnError extends boolean = false>(options: Options<EmojiListData, ThrowOnError>) => {
  return (options?.client ?? client).get<EmojiListResponse, EmojiListError, ThrowOnError>({
    ...options,
    url: '/emoji.list',
  });
};

/**
 * Deletes an existing comment on a file.
 */
export const filesCommentsDelete = <ThrowOnError extends boolean = false>(
  options?: Options<FilesCommentsDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesCommentsDeleteResponse, FilesCommentsDeleteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.comments.delete',
  });
};

/**
 * Deletes a file.
 */
export const filesDelete = <ThrowOnError extends boolean = false>(options?: Options<FilesDeleteData, ThrowOnError>) => {
  return (options?.client ?? client).post<FilesDeleteResponse, FilesDeleteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.delete',
  });
};

/**
 * Gets information about a file.
 */
export const filesInfo = <ThrowOnError extends boolean = false>(options?: Options<FilesInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<FilesInfoResponse, FilesInfoError, ThrowOnError>({
    ...options,
    url: '/files.info',
  });
};

/**
 * List for a team, in a channel, or from a user with applied filters.
 */
export const filesList = <ThrowOnError extends boolean = false>(options?: Options<FilesListData, ThrowOnError>) => {
  return (options?.client ?? client).get<FilesListResponse, FilesListError, ThrowOnError>({
    ...options,
    url: '/files.list',
  });
};

/**
 * Adds a file from a remote service
 */
export const filesRemoteAdd = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteAddData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesRemoteAddResponse, FilesRemoteAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.remote.add',
  });
};

/**
 * Retrieve information about a remote file added to Slack
 */
export const filesRemoteInfo = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<FilesRemoteInfoResponse, FilesRemoteInfoError, ThrowOnError>({
    ...options,
    url: '/files.remote.info',
  });
};

/**
 * Retrieve information about a remote file added to Slack
 */
export const filesRemoteList = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<FilesRemoteListResponse, FilesRemoteListError, ThrowOnError>({
    ...options,
    url: '/files.remote.list',
  });
};

/**
 * Remove a remote file.
 */
export const filesRemoteRemove = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesRemoteRemoveResponse, FilesRemoteRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.remote.remove',
  });
};

/**
 * Share a remote file into a channel.
 */
export const filesRemoteShare = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteShareData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<FilesRemoteShareResponse, FilesRemoteShareError, ThrowOnError>({
    ...options,
    url: '/files.remote.share',
  });
};

/**
 * Updates an existing remote file.
 */
export const filesRemoteUpdate = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRemoteUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesRemoteUpdateResponse, FilesRemoteUpdateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.remote.update',
  });
};

/**
 * Revokes public/external sharing access for a file
 */
export const filesRevokePublicUrl = <ThrowOnError extends boolean = false>(
  options?: Options<FilesRevokePublicUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesRevokePublicUrlResponse, FilesRevokePublicUrlError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.revokePublicURL',
  });
};

/**
 * Enables a file for public/external sharing.
 */
export const filesSharedPublicUrl = <ThrowOnError extends boolean = false>(
  options?: Options<FilesSharedPublicUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FilesSharedPublicUrlResponse, FilesSharedPublicUrlError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.sharedPublicURL',
  });
};

/**
 * Uploads or creates a file.
 */
export const filesUpload = <ThrowOnError extends boolean = false>(options?: Options<FilesUploadData, ThrowOnError>) => {
  return (options?.client ?? client).post<FilesUploadResponse, FilesUploadError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/files.upload',
  });
};

/**
 * For Enterprise Grid workspaces, map local user IDs to global user IDs
 */
export const migrationExchange = <ThrowOnError extends boolean = false>(
  options: Options<MigrationExchangeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<MigrationExchangeResponse, MigrationExchangeError, ThrowOnError>({
    ...options,
    url: '/migration.exchange',
  });
};

/**
 * Exchanges a temporary OAuth verifier code for an access token.
 */
export const oauthAccess = <ThrowOnError extends boolean = false>(options?: Options<OauthAccessData, ThrowOnError>) => {
  return (options?.client ?? client).get<OauthAccessResponse, OauthAccessError, ThrowOnError>({
    ...options,
    url: '/oauth.access',
  });
};

/**
 * Exchanges a temporary OAuth verifier code for a workspace token.
 */
export const oauthToken = <ThrowOnError extends boolean = false>(options?: Options<OauthTokenData, ThrowOnError>) => {
  return (options?.client ?? client).get<OauthTokenResponse, OauthTokenError, ThrowOnError>({
    ...options,
    url: '/oauth.token',
  });
};

/**
 * Exchanges a temporary OAuth verifier code for an access token.
 */
export const oauthV2Access = <ThrowOnError extends boolean = false>(
  options: Options<OauthV2AccessData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<OauthV2AccessResponse, OauthV2AccessError, ThrowOnError>({
    ...options,
    url: '/oauth.v2.access',
  });
};

/**
 * Pins an item to a channel.
 */
export const pinsAdd = <ThrowOnError extends boolean = false>(options: Options<PinsAddData, ThrowOnError>) => {
  return (options?.client ?? client).post<PinsAddResponse, PinsAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/pins.add',
  });
};

/**
 * Lists items pinned to a channel.
 */
export const pinsList = <ThrowOnError extends boolean = false>(options: Options<PinsListData, ThrowOnError>) => {
  return (options?.client ?? client).get<PinsListResponse, PinsListError, ThrowOnError>({
    ...options,
    url: '/pins.list',
  });
};

/**
 * Un-pins an item from a channel.
 */
export const pinsRemove = <ThrowOnError extends boolean = false>(options: Options<PinsRemoveData, ThrowOnError>) => {
  return (options?.client ?? client).post<PinsRemoveResponse, PinsRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/pins.remove',
  });
};

/**
 * Adds a reaction to an item.
 */
export const reactionsAdd = <ThrowOnError extends boolean = false>(
  options: Options<ReactionsAddData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ReactionsAddResponse, ReactionsAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/reactions.add',
  });
};

/**
 * Gets reactions for an item.
 */
export const reactionsGet = <ThrowOnError extends boolean = false>(
  options: Options<ReactionsGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ReactionsGetResponse, ReactionsGetError, ThrowOnError>({
    ...options,
    url: '/reactions.get',
  });
};

/**
 * Lists reactions made by a user.
 */
export const reactionsList = <ThrowOnError extends boolean = false>(
  options: Options<ReactionsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ReactionsListResponse, ReactionsListError, ThrowOnError>({
    ...options,
    url: '/reactions.list',
  });
};

/**
 * Removes a reaction from an item.
 */
export const reactionsRemove = <ThrowOnError extends boolean = false>(
  options: Options<ReactionsRemoveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<ReactionsRemoveResponse, ReactionsRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/reactions.remove',
  });
};

/**
 * Creates a reminder.
 */
export const remindersAdd = <ThrowOnError extends boolean = false>(
  options: Options<RemindersAddData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RemindersAddResponse, RemindersAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/reminders.add',
  });
};

/**
 * Marks a reminder as complete.
 */
export const remindersComplete = <ThrowOnError extends boolean = false>(
  options?: Options<RemindersCompleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RemindersCompleteResponse, RemindersCompleteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/reminders.complete',
  });
};

/**
 * Deletes a reminder.
 */
export const remindersDelete = <ThrowOnError extends boolean = false>(
  options?: Options<RemindersDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RemindersDeleteResponse, RemindersDeleteError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/reminders.delete',
  });
};

/**
 * Gets information about a reminder.
 */
export const remindersInfo = <ThrowOnError extends boolean = false>(
  options?: Options<RemindersInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<RemindersInfoResponse, RemindersInfoError, ThrowOnError>({
    ...options,
    url: '/reminders.info',
  });
};

/**
 * Lists all reminders created by or for a given user.
 */
export const remindersList = <ThrowOnError extends boolean = false>(
  options?: Options<RemindersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<RemindersListResponse, RemindersListError, ThrowOnError>({
    ...options,
    url: '/reminders.list',
  });
};

/**
 * Starts a Real Time Messaging session.
 */
export const rtmConnect = <ThrowOnError extends boolean = false>(options: Options<RtmConnectData, ThrowOnError>) => {
  return (options?.client ?? client).get<RtmConnectResponse, RtmConnectError, ThrowOnError>({
    ...options,
    url: '/rtm.connect',
  });
};

/**
 * Searches for messages matching a query.
 */
export const searchMessages = <ThrowOnError extends boolean = false>(
  options: Options<SearchMessagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchMessagesResponse, SearchMessagesError, ThrowOnError>({
    ...options,
    url: '/search.messages',
  });
};

/**
 * Adds a star to an item.
 */
export const starsAdd = <ThrowOnError extends boolean = false>(options: Options<StarsAddData, ThrowOnError>) => {
  return (options?.client ?? client).post<StarsAddResponse, StarsAddError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/stars.add',
  });
};

/**
 * Lists stars for a user.
 */
export const starsList = <ThrowOnError extends boolean = false>(options?: Options<StarsListData, ThrowOnError>) => {
  return (options?.client ?? client).get<StarsListResponse, StarsListError, ThrowOnError>({
    ...options,
    url: '/stars.list',
  });
};

/**
 * Removes a star from an item.
 */
export const starsRemove = <ThrowOnError extends boolean = false>(options: Options<StarsRemoveData, ThrowOnError>) => {
  return (options?.client ?? client).post<StarsRemoveResponse, StarsRemoveError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/stars.remove',
  });
};

/**
 * Gets the access logs for the current team.
 */
export const teamAccessLogs = <ThrowOnError extends boolean = false>(
  options: Options<TeamAccessLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<TeamAccessLogsResponse, TeamAccessLogsError, ThrowOnError>({
    ...options,
    url: '/team.accessLogs',
  });
};

/**
 * Gets billable users information for the current team.
 */
export const teamBillableInfo = <ThrowOnError extends boolean = false>(
  options: Options<TeamBillableInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<TeamBillableInfoResponse, TeamBillableInfoError, ThrowOnError>({
    ...options,
    url: '/team.billableInfo',
  });
};

/**
 * Gets information about the current team.
 */
export const teamInfo = <ThrowOnError extends boolean = false>(options: Options<TeamInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<TeamInfoResponse, TeamInfoError, ThrowOnError>({
    ...options,
    url: '/team.info',
  });
};

/**
 * Gets the integration logs for the current team.
 */
export const teamIntegrationLogs = <ThrowOnError extends boolean = false>(
  options: Options<TeamIntegrationLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<TeamIntegrationLogsResponse, TeamIntegrationLogsError, ThrowOnError>({
    ...options,
    url: '/team.integrationLogs',
  });
};

/**
 * Retrieve a team's profile.
 */
export const teamProfileGet = <ThrowOnError extends boolean = false>(
  options: Options<TeamProfileGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<TeamProfileGetResponse, TeamProfileGetError, ThrowOnError>({
    ...options,
    url: '/team.profile.get',
  });
};

/**
 * Create a User Group
 */
export const usergroupsCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsergroupsCreateResponse, UsergroupsCreateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/usergroups.create',
  });
};

/**
 * Disable an existing User Group
 */
export const usergroupsDisable = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsDisableData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsergroupsDisableResponse, UsergroupsDisableError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/usergroups.disable',
  });
};

/**
 * Enable a User Group
 */
export const usergroupsEnable = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsEnableData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsergroupsEnableResponse, UsergroupsEnableError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/usergroups.enable',
  });
};

/**
 * List all User Groups for a team
 */
export const usergroupsList = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsergroupsListResponse, UsergroupsListError, ThrowOnError>({
    ...options,
    url: '/usergroups.list',
  });
};

/**
 * Update an existing User Group
 */
export const usergroupsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsergroupsUpdateResponse, UsergroupsUpdateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/usergroups.update',
  });
};

/**
 * List all users in a User Group
 */
export const usergroupsUsersList = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsUsersListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsergroupsUsersListResponse, UsergroupsUsersListError, ThrowOnError>({
    ...options,
    url: '/usergroups.users.list',
  });
};

/**
 * Update the list of users for a User Group
 */
export const usergroupsUsersUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsergroupsUsersUpdateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsergroupsUsersUpdateResponse, UsergroupsUsersUpdateError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/usergroups.users.update',
  });
};

/**
 * List conversations the calling user may access.
 */
export const usersConversations = <ThrowOnError extends boolean = false>(
  options?: Options<UsersConversationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsersConversationsResponse, UsersConversationsError, ThrowOnError>({
    ...options,
    url: '/users.conversations',
  });
};

/**
 * Delete the user profile photo
 */
export const usersDeletePhoto = <ThrowOnError extends boolean = false>(
  options: Options<UsersDeletePhotoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsersDeletePhotoResponse, UsersDeletePhotoError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/users.deletePhoto',
  });
};

/**
 * Gets user presence information.
 */
export const usersGetPresence = <ThrowOnError extends boolean = false>(
  options: Options<UsersGetPresenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsersGetPresenceResponse, UsersGetPresenceError, ThrowOnError>({
    ...options,
    url: '/users.getPresence',
  });
};

/**
 * Get a user's identity.
 */
export const usersIdentity = <ThrowOnError extends boolean = false>(
  options?: Options<UsersIdentityData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsersIdentityResponse, UsersIdentityError, ThrowOnError>({
    ...options,
    url: '/users.identity',
  });
};

/**
 * Gets information about a user.
 */
export const usersInfo = <ThrowOnError extends boolean = false>(options: Options<UsersInfoData, ThrowOnError>) => {
  return (options?.client ?? client).get<UsersInfoResponse, UsersInfoError, ThrowOnError>({
    ...options,
    url: '/users.info',
  });
};

/**
 * Lists all users in a Slack team.
 */
export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
  return (options?.client ?? client).get<UsersListResponse, UsersListError, ThrowOnError>({
    ...options,
    url: '/users.list',
  });
};

/**
 * Find a user with an email address.
 */
export const usersLookupByEmail = <ThrowOnError extends boolean = false>(
  options: Options<UsersLookupByEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsersLookupByEmailResponse, UsersLookupByEmailError, ThrowOnError>({
    ...options,
    url: '/users.lookupByEmail',
  });
};

/**
 * Retrieves a user's profile information.
 */
export const usersProfileGet = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<UsersProfileGetResponse, UsersProfileGetError, ThrowOnError>({
    ...options,
    url: '/users.profile.get',
  });
};

/**
 * Set the profile information for a user.
 */
export const usersProfileSet = <ThrowOnError extends boolean = false>(
  options: Options<UsersProfileSetData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsersProfileSetResponse, UsersProfileSetError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/users.profile.set',
  });
};

/**
 * Marked a user as active. Deprecated and non-functional.
 */
export const usersSetActive = <ThrowOnError extends boolean = false>(
  options: Options<UsersSetActiveData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsersSetActiveResponse, UsersSetActiveError, ThrowOnError>({
    ...options,
    url: '/users.setActive',
  });
};

/**
 * Set the user profile photo
 */
export const usersSetPhoto = <ThrowOnError extends boolean = false>(
  options: Options<UsersSetPhotoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsersSetPhotoResponse, UsersSetPhotoError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/users.setPhoto',
  });
};

/**
 * Manually sets user presence.
 */
export const usersSetPresence = <ThrowOnError extends boolean = false>(
  options: Options<UsersSetPresenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UsersSetPresenceResponse, UsersSetPresenceError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers,
    },
    url: '/users.setPresence',
  });
};

/**
 * Open a view for a user.
 */
export const viewsOpen = <ThrowOnError extends boolean = false>(options: Options<ViewsOpenData, ThrowOnError>) => {
  return (options?.client ?? client).get<ViewsOpenResponse, ViewsOpenError, ThrowOnError>({
    ...options,
    url: '/views.open',
  });
};

/**
 * Publish a static view for a User.
 */
export const viewsPublish = <ThrowOnError extends boolean = false>(
  options: Options<ViewsPublishData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<ViewsPublishResponse, ViewsPublishError, ThrowOnError>({
    ...options,
    url: '/views.publish',
  });
};

/**
 * Push a view onto the stack of a root view.
 */
export const viewsPush = <ThrowOnError extends boolean = false>(options: Options<ViewsPushData, ThrowOnError>) => {
  return (options?.client ?? client).get<ViewsPushResponse, ViewsPushError, ThrowOnError>({
    ...options,
    url: '/views.push',
  });
};

/**
 * Update an existing view.
 */
export const viewsUpdate = <ThrowOnError extends boolean = false>(options: Options<ViewsUpdateData, ThrowOnError>) => {
  return (options?.client ?? client).get<ViewsUpdateResponse, ViewsUpdateError, ThrowOnError>({
    ...options,
    url: '/views.update',
  });
};

/**
 * Indicate that an app's step in a workflow completed execution.
 */
export const workflowsStepCompleted = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowsStepCompletedData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<WorkflowsStepCompletedResponse, WorkflowsStepCompletedError, ThrowOnError>({
    ...options,
    url: '/workflows.stepCompleted',
  });
};

/**
 * Indicate that an app's step in a workflow failed to execute.
 */
export const workflowsStepFailed = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowsStepFailedData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<WorkflowsStepFailedResponse, WorkflowsStepFailedError, ThrowOnError>({
    ...options,
    url: '/workflows.stepFailed',
  });
};

/**
 * Update the configuration for a workflow extension step.
 */
export const workflowsUpdateStep = <ThrowOnError extends boolean = false>(
  options: Options<WorkflowsUpdateStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<WorkflowsUpdateStepResponse, WorkflowsUpdateStepError, ThrowOnError>({
    ...options,
    url: '/workflows.updateStep',
  });
};
