// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer, formDataBodySerializer } from '@hey-api/client-fetch';
import type {
    GetAccountData, 
    GetAccountError, 
    GetAccountResponse, 
    PostAccountLinksData, 
    PostAccountLinksError, 
    PostAccountLinksResponse, 
    PostAccountSessionsData, 
    PostAccountSessionsError, 
    PostAccountSessionsResponse, 
    GetAccountsData, 
    GetAccountsError, 
    GetAccountsResponse, 
    PostAccountsData, 
    PostAccountsError, 
    PostAccountsResponse, 
    DeleteAccountsAccountData, 
    DeleteAccountsAccountError, 
    DeleteAccountsAccountResponse, 
    GetAccountsAccountData, 
    GetAccountsAccountError, 
    GetAccountsAccountResponse, 
    PostAccountsAccountData, 
    PostAccountsAccountError, 
    PostAccountsAccountResponse, 
    PostAccountsAccountBankAccountsData, 
    PostAccountsAccountBankAccountsError, 
    PostAccountsAccountBankAccountsResponse, 
    DeleteAccountsAccountBankAccountsIdData, 
    DeleteAccountsAccountBankAccountsIdError, 
    DeleteAccountsAccountBankAccountsIdResponse, 
    GetAccountsAccountBankAccountsIdData, 
    GetAccountsAccountBankAccountsIdError, 
    GetAccountsAccountBankAccountsIdResponse, 
    PostAccountsAccountBankAccountsIdData, 
    PostAccountsAccountBankAccountsIdError, 
    PostAccountsAccountBankAccountsIdResponse, 
    GetAccountsAccountCapabilitiesData, 
    GetAccountsAccountCapabilitiesError, 
    GetAccountsAccountCapabilitiesResponse, 
    GetAccountsAccountCapabilitiesCapabilityData, 
    GetAccountsAccountCapabilitiesCapabilityError, 
    GetAccountsAccountCapabilitiesCapabilityResponse, 
    PostAccountsAccountCapabilitiesCapabilityData, 
    PostAccountsAccountCapabilitiesCapabilityError, 
    PostAccountsAccountCapabilitiesCapabilityResponse, 
    GetAccountsAccountExternalAccountsData, 
    GetAccountsAccountExternalAccountsError, 
    GetAccountsAccountExternalAccountsResponse, 
    PostAccountsAccountExternalAccountsData, 
    PostAccountsAccountExternalAccountsError, 
    PostAccountsAccountExternalAccountsResponse, 
    DeleteAccountsAccountExternalAccountsIdData, 
    DeleteAccountsAccountExternalAccountsIdError, 
    DeleteAccountsAccountExternalAccountsIdResponse, 
    GetAccountsAccountExternalAccountsIdData, 
    GetAccountsAccountExternalAccountsIdError, 
    GetAccountsAccountExternalAccountsIdResponse, 
    PostAccountsAccountExternalAccountsIdData, 
    PostAccountsAccountExternalAccountsIdError, 
    PostAccountsAccountExternalAccountsIdResponse, 
    PostAccountsAccountLoginLinksData, 
    PostAccountsAccountLoginLinksError, 
    PostAccountsAccountLoginLinksResponse, 
    GetAccountsAccountPeopleData, 
    GetAccountsAccountPeopleError, 
    GetAccountsAccountPeopleResponse, 
    PostAccountsAccountPeopleData, 
    PostAccountsAccountPeopleError, 
    PostAccountsAccountPeopleResponse, 
    DeleteAccountsAccountPeoplePersonData, 
    DeleteAccountsAccountPeoplePersonError, 
    DeleteAccountsAccountPeoplePersonResponse, 
    GetAccountsAccountPeoplePersonData, 
    GetAccountsAccountPeoplePersonError, 
    GetAccountsAccountPeoplePersonResponse, 
    PostAccountsAccountPeoplePersonData, 
    PostAccountsAccountPeoplePersonError, 
    PostAccountsAccountPeoplePersonResponse, 
    GetAccountsAccountPersonsData, 
    GetAccountsAccountPersonsError, 
    GetAccountsAccountPersonsResponse, 
    PostAccountsAccountPersonsData, 
    PostAccountsAccountPersonsError, 
    PostAccountsAccountPersonsResponse, 
    DeleteAccountsAccountPersonsPersonData, 
    DeleteAccountsAccountPersonsPersonError, 
    DeleteAccountsAccountPersonsPersonResponse, 
    GetAccountsAccountPersonsPersonData, 
    GetAccountsAccountPersonsPersonError, 
    GetAccountsAccountPersonsPersonResponse, 
    PostAccountsAccountPersonsPersonData, 
    PostAccountsAccountPersonsPersonError,
    PostAccountsAccountPersonsPersonResponse,
    PostAccountsAccountRejectData, 
    PostAccountsAccountRejectError, 
    PostAccountsAccountRejectResponse, 
    GetApplePayDomainsData, 
    GetApplePayDomainsError, 
    GetApplePayDomainsResponse, 
    PostApplePayDomainsData, 
    PostApplePayDomainsError, 
    PostApplePayDomainsResponse, 
    DeleteApplePayDomainsDomainData, 
    DeleteApplePayDomainsDomainError, 
    DeleteApplePayDomainsDomainResponse, 
    GetApplePayDomainsDomainData, 
    GetApplePayDomainsDomainError, 
    GetApplePayDomainsDomainResponse, 
    GetApplicationFeesData, 
    GetApplicationFeesError, 
    GetApplicationFeesResponse, 
    GetApplicationFeesFeeRefundsIdData, 
    GetApplicationFeesFeeRefundsIdError, 
    GetApplicationFeesFeeRefundsIdResponse, 
    PostApplicationFeesFeeRefundsIdData, 
    PostApplicationFeesFeeRefundsIdError, 
    PostApplicationFeesFeeRefundsIdResponse, 
    GetApplicationFeesIdData, 
    GetApplicationFeesIdError, 
    GetApplicationFeesIdResponse, 
    PostApplicationFeesIdRefundData, 
    PostApplicationFeesIdRefundError, 
    PostApplicationFeesIdRefundResponse, 
    GetApplicationFeesIdRefundsData, 
    GetApplicationFeesIdRefundsError, 
    GetApplicationFeesIdRefundsResponse, 
    PostApplicationFeesIdRefundsData, 
    PostApplicationFeesIdRefundsError, PostApplicationFeesIdRefundsResponse, GetAppsSecretsData, GetAppsSecretsError, GetAppsSecretsResponse, PostAppsSecretsData, PostAppsSecretsError, PostAppsSecretsResponse, PostAppsSecretsDeleteData, PostAppsSecretsDeleteError, PostAppsSecretsDeleteResponse, GetAppsSecretsFindData, GetAppsSecretsFindError, GetAppsSecretsFindResponse, GetBalanceData, GetBalanceError, GetBalanceResponse, GetBalanceHistoryData, GetBalanceHistoryError, GetBalanceHistoryResponse, GetBalanceHistoryIdData, GetBalanceHistoryIdError, GetBalanceHistoryIdResponse, GetBalanceTransactionsData, GetBalanceTransactionsError, GetBalanceTransactionsResponse, GetBalanceTransactionsIdData, GetBalanceTransactionsIdError, GetBalanceTransactionsIdResponse, PostBillingMeterEventAdjustmentsData, PostBillingMeterEventAdjustmentsError, PostBillingMeterEventAdjustmentsResponse, PostBillingMeterEventsData, PostBillingMeterEventsError, PostBillingMeterEventsResponse, GetBillingMetersData, GetBillingMetersError, GetBillingMetersResponse, PostBillingMetersData, PostBillingMetersError, PostBillingMetersResponse, GetBillingMetersIdData, GetBillingMetersIdError, GetBillingMetersIdResponse, PostBillingMetersIdData, PostBillingMetersIdError, PostBillingMetersIdResponse, PostBillingMetersIdDeactivateData, PostBillingMetersIdDeactivateError, PostBillingMetersIdDeactivateResponse, GetBillingMetersIdEventSummariesData, GetBillingMetersIdEventSummariesError, GetBillingMetersIdEventSummariesResponse, PostBillingMetersIdReactivateData, PostBillingMetersIdReactivateError, PostBillingMetersIdReactivateResponse, GetBillingPortalConfigurationsData, GetBillingPortalConfigurationsError, GetBillingPortalConfigurationsResponse, PostBillingPortalConfigurationsData, PostBillingPortalConfigurationsError, PostBillingPortalConfigurationsResponse, GetBillingPortalConfigurationsConfigurationData, GetBillingPortalConfigurationsConfigurationError, GetBillingPortalConfigurationsConfigurationResponse, PostBillingPortalConfigurationsConfigurationData, PostBillingPortalConfigurationsConfigurationError, PostBillingPortalConfigurationsConfigurationResponse, PostBillingPortalSessionsData, PostBillingPortalSessionsError, PostBillingPortalSessionsResponse, GetChargesData, GetChargesError, GetChargesResponse, PostChargesData, PostChargesError, PostChargesResponse, GetChargesSearchData, GetChargesSearchError, GetChargesSearchResponse, GetChargesChargeData, GetChargesChargeError, GetChargesChargeResponse, PostChargesChargeData, PostChargesChargeError, PostChargesChargeResponse, PostChargesChargeCaptureData, PostChargesChargeCaptureError, PostChargesChargeCaptureResponse, GetChargesChargeDisputeData, GetChargesChargeDisputeError, GetChargesChargeDisputeResponse, PostChargesChargeDisputeData, PostChargesChargeDisputeError, PostChargesChargeDisputeResponse, PostChargesChargeDisputeCloseData, PostChargesChargeDisputeCloseError, PostChargesChargeDisputeCloseResponse, PostChargesChargeRefundData, PostChargesChargeRefundError, PostChargesChargeRefundResponse, GetChargesChargeRefundsData, GetChargesChargeRefundsError, GetChargesChargeRefundsResponse, PostChargesChargeRefundsData, PostChargesChargeRefundsError, PostChargesChargeRefundsResponse, GetChargesChargeRefundsRefundData, GetChargesChargeRefundsRefundError, GetChargesChargeRefundsRefundResponse, PostChargesChargeRefundsRefundData, PostChargesChargeRefundsRefundError, PostChargesChargeRefundsRefundResponse, GetCheckoutSessionsData, GetCheckoutSessionsError, GetCheckoutSessionsResponse, PostCheckoutSessionsData, PostCheckoutSessionsError, PostCheckoutSessionsResponse, GetCheckoutSessionsSessionData, GetCheckoutSessionsSessionError, GetCheckoutSessionsSessionResponse, PostCheckoutSessionsSessionExpireData, PostCheckoutSessionsSessionExpireError, PostCheckoutSessionsSessionExpireResponse, GetCheckoutSessionsSessionLineItemsData, GetCheckoutSessionsSessionLineItemsError, GetCheckoutSessionsSessionLineItemsResponse, GetClimateOrdersData, GetClimateOrdersError, GetClimateOrdersResponse, PostClimateOrdersData, PostClimateOrdersError, PostClimateOrdersResponse, GetClimateOrdersOrderData, GetClimateOrdersOrderError, GetClimateOrdersOrderResponse, PostClimateOrdersOrderData, PostClimateOrdersOrderError, PostClimateOrdersOrderResponse, PostClimateOrdersOrderCancelData, PostClimateOrdersOrderCancelError, PostClimateOrdersOrderCancelResponse, GetClimateProductsData, GetClimateProductsError, GetClimateProductsResponse, GetClimateProductsProductData, GetClimateProductsProductError, GetClimateProductsProductResponse, GetClimateSuppliersData, GetClimateSuppliersError, GetClimateSuppliersResponse, GetClimateSuppliersSupplierData, GetClimateSuppliersSupplierError, GetClimateSuppliersSupplierResponse, GetConfirmationTokensConfirmationTokenData, GetConfirmationTokensConfirmationTokenError, GetConfirmationTokensConfirmationTokenResponse, GetCountrySpecsData, GetCountrySpecsError, GetCountrySpecsResponse, GetCountrySpecsCountryData, GetCountrySpecsCountryError, GetCountrySpecsCountryResponse, GetCouponsData, GetCouponsError, GetCouponsResponse, PostCouponsData, PostCouponsError, PostCouponsResponse, DeleteCouponsCouponData, DeleteCouponsCouponError, DeleteCouponsCouponResponse, GetCouponsCouponData, GetCouponsCouponError, GetCouponsCouponResponse, PostCouponsCouponData, PostCouponsCouponError, PostCouponsCouponResponse, GetCreditNotesData, GetCreditNotesError, GetCreditNotesResponse, PostCreditNotesData, PostCreditNotesError, PostCreditNotesResponse, GetCreditNotesPreviewData, GetCreditNotesPreviewError, GetCreditNotesPreviewResponse, GetCreditNotesPreviewLinesData, GetCreditNotesPreviewLinesError, GetCreditNotesPreviewLinesResponse, GetCreditNotesCreditNoteLinesData, GetCreditNotesCreditNoteLinesError, GetCreditNotesCreditNoteLinesResponse, GetCreditNotesIdData, GetCreditNotesIdError, GetCreditNotesIdResponse, PostCreditNotesIdData, PostCreditNotesIdError, PostCreditNotesIdResponse, PostCreditNotesIdVoidData, PostCreditNotesIdVoidError, PostCreditNotesIdVoidResponse, PostCustomerSessionsData, PostCustomerSessionsError, PostCustomerSessionsResponse, GetCustomersData, GetCustomersError, GetCustomersResponse, PostCustomersData, PostCustomersError, PostCustomersResponse, GetCustomersSearchData, GetCustomersSearchError, GetCustomersSearchResponse, DeleteCustomersCustomerData, DeleteCustomersCustomerError, DeleteCustomersCustomerResponse, GetCustomersCustomerData, GetCustomersCustomerError, GetCustomersCustomerResponse, PostCustomersCustomerData, PostCustomersCustomerError, PostCustomersCustomerResponse, GetCustomersCustomerBalanceTransactionsData, GetCustomersCustomerBalanceTransactionsError, GetCustomersCustomerBalanceTransactionsResponse, PostCustomersCustomerBalanceTransactionsData, PostCustomersCustomerBalanceTransactionsError, PostCustomersCustomerBalanceTransactionsResponse, GetCustomersCustomerBalanceTransactionsTransactionData, GetCustomersCustomerBalanceTransactionsTransactionError, GetCustomersCustomerBalanceTransactionsTransactionResponse, PostCustomersCustomerBalanceTransactionsTransactionData, PostCustomersCustomerBalanceTransactionsTransactionError, PostCustomersCustomerBalanceTransactionsTransactionResponse, GetCustomersCustomerBankAccountsData, GetCustomersCustomerBankAccountsError, GetCustomersCustomerBankAccountsResponse, PostCustomersCustomerBankAccountsData, PostCustomersCustomerBankAccountsError, PostCustomersCustomerBankAccountsResponse, DeleteCustomersCustomerBankAccountsIdData, DeleteCustomersCustomerBankAccountsIdError, DeleteCustomersCustomerBankAccountsIdResponse, GetCustomersCustomerBankAccountsIdData, GetCustomersCustomerBankAccountsIdError, GetCustomersCustomerBankAccountsIdResponse, PostCustomersCustomerBankAccountsIdData, PostCustomersCustomerBankAccountsIdError, PostCustomersCustomerBankAccountsIdResponse, PostCustomersCustomerBankAccountsIdVerifyData, PostCustomersCustomerBankAccountsIdVerifyError, PostCustomersCustomerBankAccountsIdVerifyResponse, GetCustomersCustomerCardsData, GetCustomersCustomerCardsError, GetCustomersCustomerCardsResponse, PostCustomersCustomerCardsData, PostCustomersCustomerCardsError, PostCustomersCustomerCardsResponse, DeleteCustomersCustomerCardsIdData, DeleteCustomersCustomerCardsIdError, DeleteCustomersCustomerCardsIdResponse, GetCustomersCustomerCardsIdData, GetCustomersCustomerCardsIdError, GetCustomersCustomerCardsIdResponse, PostCustomersCustomerCardsIdData, PostCustomersCustomerCardsIdError, PostCustomersCustomerCardsIdResponse, GetCustomersCustomerCashBalanceData, GetCustomersCustomerCashBalanceError, GetCustomersCustomerCashBalanceResponse, PostCustomersCustomerCashBalanceData, PostCustomersCustomerCashBalanceError, PostCustomersCustomerCashBalanceResponse, GetCustomersCustomerCashBalanceTransactionsData, GetCustomersCustomerCashBalanceTransactionsError, GetCustomersCustomerCashBalanceTransactionsResponse, GetCustomersCustomerCashBalanceTransactionsTransactionData, GetCustomersCustomerCashBalanceTransactionsTransactionError, GetCustomersCustomerCashBalanceTransactionsTransactionResponse, DeleteCustomersCustomerDiscountData, DeleteCustomersCustomerDiscountError, DeleteCustomersCustomerDiscountResponse, GetCustomersCustomerDiscountData, GetCustomersCustomerDiscountError, GetCustomersCustomerDiscountResponse, PostCustomersCustomerFundingInstructionsData, PostCustomersCustomerFundingInstructionsError, PostCustomersCustomerFundingInstructionsResponse, GetCustomersCustomerPaymentMethodsData, GetCustomersCustomerPaymentMethodsError, GetCustomersCustomerPaymentMethodsResponse, GetCustomersCustomerPaymentMethodsPaymentMethodData, GetCustomersCustomerPaymentMethodsPaymentMethodError, GetCustomersCustomerPaymentMethodsPaymentMethodResponse, GetCustomersCustomerSourcesData, GetCustomersCustomerSourcesError, GetCustomersCustomerSourcesResponse, PostCustomersCustomerSourcesData, PostCustomersCustomerSourcesError, PostCustomersCustomerSourcesResponse, DeleteCustomersCustomerSourcesIdData, DeleteCustomersCustomerSourcesIdError, DeleteCustomersCustomerSourcesIdResponse, GetCustomersCustomerSourcesIdData, GetCustomersCustomerSourcesIdError, GetCustomersCustomerSourcesIdResponse, PostCustomersCustomerSourcesIdData, PostCustomersCustomerSourcesIdError, PostCustomersCustomerSourcesIdResponse, PostCustomersCustomerSourcesIdVerifyData, PostCustomersCustomerSourcesIdVerifyError, PostCustomersCustomerSourcesIdVerifyResponse, GetCustomersCustomerSubscriptionsData, GetCustomersCustomerSubscriptionsError, GetCustomersCustomerSubscriptionsResponse, PostCustomersCustomerSubscriptionsData, PostCustomersCustomerSubscriptionsError, PostCustomersCustomerSubscriptionsResponse, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdData, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdError, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, GetCustomersCustomerSubscriptionsSubscriptionExposedIdData, GetCustomersCustomerSubscriptionsSubscriptionExposedIdError, GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, PostCustomersCustomerSubscriptionsSubscriptionExposedIdData, PostCustomersCustomerSubscriptionsSubscriptionExposedIdError, PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountData, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountError, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse, GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountData, GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountError, GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse, GetCustomersCustomerTaxIdsData, GetCustomersCustomerTaxIdsError, GetCustomersCustomerTaxIdsResponse, PostCustomersCustomerTaxIdsData, PostCustomersCustomerTaxIdsError, PostCustomersCustomerTaxIdsResponse, DeleteCustomersCustomerTaxIdsIdData, DeleteCustomersCustomerTaxIdsIdError, DeleteCustomersCustomerTaxIdsIdResponse, GetCustomersCustomerTaxIdsIdData, GetCustomersCustomerTaxIdsIdError, GetCustomersCustomerTaxIdsIdResponse, GetDisputesData, GetDisputesError, GetDisputesResponse, GetDisputesDisputeData, GetDisputesDisputeError, GetDisputesDisputeResponse, PostDisputesDisputeData, PostDisputesDisputeError, PostDisputesDisputeResponse, PostDisputesDisputeCloseData, PostDisputesDisputeCloseError, PostDisputesDisputeCloseResponse, GetEntitlementsActiveEntitlementsData, GetEntitlementsActiveEntitlementsError, GetEntitlementsActiveEntitlementsResponse, GetEntitlementsActiveEntitlementsIdData, GetEntitlementsActiveEntitlementsIdError, GetEntitlementsActiveEntitlementsIdResponse, GetEntitlementsFeaturesData, GetEntitlementsFeaturesError, GetEntitlementsFeaturesResponse, PostEntitlementsFeaturesData, PostEntitlementsFeaturesError, PostEntitlementsFeaturesResponse, GetEntitlementsFeaturesIdData, GetEntitlementsFeaturesIdError, GetEntitlementsFeaturesIdResponse, PostEntitlementsFeaturesIdData, PostEntitlementsFeaturesIdError, PostEntitlementsFeaturesIdResponse, PostEphemeralKeysData, PostEphemeralKeysError, PostEphemeralKeysResponse, DeleteEphemeralKeysKeyData, DeleteEphemeralKeysKeyError, DeleteEphemeralKeysKeyResponse, GetEventsData, GetEventsError, GetEventsResponse, GetEventsIdData, GetEventsIdError, GetEventsIdResponse, GetExchangeRatesData, GetExchangeRatesError, GetExchangeRatesResponse, GetExchangeRatesRateIdData, GetExchangeRatesRateIdError, GetExchangeRatesRateIdResponse, GetFileLinksData, GetFileLinksError, GetFileLinksResponse, PostFileLinksData, PostFileLinksError, PostFileLinksResponse, GetFileLinksLinkData, GetFileLinksLinkError, GetFileLinksLinkResponse, PostFileLinksLinkData, PostFileLinksLinkError, PostFileLinksLinkResponse, GetFilesData, GetFilesError, GetFilesResponse, PostFilesData, PostFilesError, PostFilesResponse, GetFilesFileData, GetFilesFileError, GetFilesFileResponse, GetFinancialConnectionsAccountsData, GetFinancialConnectionsAccountsError, GetFinancialConnectionsAccountsResponse, GetFinancialConnectionsAccountsAccountData, GetFinancialConnectionsAccountsAccountError, GetFinancialConnectionsAccountsAccountResponse, PostFinancialConnectionsAccountsAccountDisconnectData, PostFinancialConnectionsAccountsAccountDisconnectError, PostFinancialConnectionsAccountsAccountDisconnectResponse, GetFinancialConnectionsAccountsAccountOwnersData, GetFinancialConnectionsAccountsAccountOwnersError, GetFinancialConnectionsAccountsAccountOwnersResponse, PostFinancialConnectionsAccountsAccountRefreshData, PostFinancialConnectionsAccountsAccountRefreshError, PostFinancialConnectionsAccountsAccountRefreshResponse, PostFinancialConnectionsAccountsAccountSubscribeData, PostFinancialConnectionsAccountsAccountSubscribeError, PostFinancialConnectionsAccountsAccountSubscribeResponse, PostFinancialConnectionsAccountsAccountUnsubscribeData, PostFinancialConnectionsAccountsAccountUnsubscribeError, PostFinancialConnectionsAccountsAccountUnsubscribeResponse, PostFinancialConnectionsSessionsData, PostFinancialConnectionsSessionsError, PostFinancialConnectionsSessionsResponse, GetFinancialConnectionsSessionsSessionData, GetFinancialConnectionsSessionsSessionError, GetFinancialConnectionsSessionsSessionResponse, GetFinancialConnectionsTransactionsData, GetFinancialConnectionsTransactionsError, GetFinancialConnectionsTransactionsResponse, GetFinancialConnectionsTransactionsTransactionData, GetFinancialConnectionsTransactionsTransactionError, GetFinancialConnectionsTransactionsTransactionResponse, GetForwardingRequestsData, GetForwardingRequestsError, GetForwardingRequestsResponse, PostForwardingRequestsData, PostForwardingRequestsError, PostForwardingRequestsResponse, GetForwardingRequestsIdData, GetForwardingRequestsIdError, GetForwardingRequestsIdResponse, GetIdentityVerificationReportsData, GetIdentityVerificationReportsError, GetIdentityVerificationReportsResponse, GetIdentityVerificationReportsReportData, GetIdentityVerificationReportsReportError, GetIdentityVerificationReportsReportResponse, GetIdentityVerificationSessionsData, GetIdentityVerificationSessionsError, GetIdentityVerificationSessionsResponse, PostIdentityVerificationSessionsData, PostIdentityVerificationSessionsError, PostIdentityVerificationSessionsResponse, GetIdentityVerificationSessionsSessionData, GetIdentityVerificationSessionsSessionError, GetIdentityVerificationSessionsSessionResponse, PostIdentityVerificationSessionsSessionData, PostIdentityVerificationSessionsSessionError, PostIdentityVerificationSessionsSessionResponse, PostIdentityVerificationSessionsSessionCancelData, PostIdentityVerificationSessionsSessionCancelError, PostIdentityVerificationSessionsSessionCancelResponse, PostIdentityVerificationSessionsSessionRedactData, PostIdentityVerificationSessionsSessionRedactError, PostIdentityVerificationSessionsSessionRedactResponse, GetInvoiceitemsData, GetInvoiceitemsError, GetInvoiceitemsResponse, PostInvoiceitemsData, PostInvoiceitemsError, PostInvoiceitemsResponse, DeleteInvoiceitemsInvoiceitemData, DeleteInvoiceitemsInvoiceitemError, DeleteInvoiceitemsInvoiceitemResponse, GetInvoiceitemsInvoiceitemData, GetInvoiceitemsInvoiceitemError, GetInvoiceitemsInvoiceitemResponse, PostInvoiceitemsInvoiceitemData, PostInvoiceitemsInvoiceitemError, PostInvoiceitemsInvoiceitemResponse, GetInvoicesData, GetInvoicesError, GetInvoicesResponse, PostInvoicesData, PostInvoicesError, PostInvoicesResponse, PostInvoicesCreatePreviewData, PostInvoicesCreatePreviewError, PostInvoicesCreatePreviewResponse, GetInvoicesSearchData, GetInvoicesSearchError, GetInvoicesSearchResponse, GetInvoicesUpcomingData, GetInvoicesUpcomingError, GetInvoicesUpcomingResponse, GetInvoicesUpcomingLinesData, GetInvoicesUpcomingLinesError, GetInvoicesUpcomingLinesResponse, DeleteInvoicesInvoiceData, DeleteInvoicesInvoiceError, DeleteInvoicesInvoiceResponse, GetInvoicesInvoiceData, GetInvoicesInvoiceError, GetInvoicesInvoiceResponse, PostInvoicesInvoiceData, PostInvoicesInvoiceError, PostInvoicesInvoiceResponse, PostInvoicesInvoiceFinalizeData, PostInvoicesInvoiceFinalizeError, PostInvoicesInvoiceFinalizeResponse, GetInvoicesInvoiceLinesData, GetInvoicesInvoiceLinesError, GetInvoicesInvoiceLinesResponse, PostInvoicesInvoiceLinesLineItemIdData, PostInvoicesInvoiceLinesLineItemIdError, PostInvoicesInvoiceLinesLineItemIdResponse, PostInvoicesInvoiceMarkUncollectibleData, PostInvoicesInvoiceMarkUncollectibleError, PostInvoicesInvoiceMarkUncollectibleResponse, PostInvoicesInvoicePayData, PostInvoicesInvoicePayError, PostInvoicesInvoicePayResponse, PostInvoicesInvoiceSendData, PostInvoicesInvoiceSendError, PostInvoicesInvoiceSendResponse, PostInvoicesInvoiceVoidData, PostInvoicesInvoiceVoidError, PostInvoicesInvoiceVoidResponse, GetIssuingAuthorizationsData, GetIssuingAuthorizationsError, GetIssuingAuthorizationsResponse, GetIssuingAuthorizationsAuthorizationData, GetIssuingAuthorizationsAuthorizationError, GetIssuingAuthorizationsAuthorizationResponse, PostIssuingAuthorizationsAuthorizationData, PostIssuingAuthorizationsAuthorizationError, PostIssuingAuthorizationsAuthorizationResponse, PostIssuingAuthorizationsAuthorizationApproveData, PostIssuingAuthorizationsAuthorizationApproveError, PostIssuingAuthorizationsAuthorizationApproveResponse, PostIssuingAuthorizationsAuthorizationDeclineData, PostIssuingAuthorizationsAuthorizationDeclineError, PostIssuingAuthorizationsAuthorizationDeclineResponse, GetIssuingCardholdersData, GetIssuingCardholdersError, GetIssuingCardholdersResponse, PostIssuingCardholdersData, PostIssuingCardholdersError, PostIssuingCardholdersResponse, GetIssuingCardholdersCardholderData, GetIssuingCardholdersCardholderError, GetIssuingCardholdersCardholderResponse, PostIssuingCardholdersCardholderData, PostIssuingCardholdersCardholderError, PostIssuingCardholdersCardholderResponse, GetIssuingCardsData, GetIssuingCardsError, GetIssuingCardsResponse, PostIssuingCardsData, PostIssuingCardsError, PostIssuingCardsResponse, GetIssuingCardsCardData, GetIssuingCardsCardError, GetIssuingCardsCardResponse, PostIssuingCardsCardData, PostIssuingCardsCardError, PostIssuingCardsCardResponse, GetIssuingDisputesData, GetIssuingDisputesError, GetIssuingDisputesResponse, PostIssuingDisputesData, PostIssuingDisputesError, PostIssuingDisputesResponse, GetIssuingDisputesDisputeData, GetIssuingDisputesDisputeError, GetIssuingDisputesDisputeResponse, PostIssuingDisputesDisputeData, PostIssuingDisputesDisputeError, PostIssuingDisputesDisputeResponse, PostIssuingDisputesDisputeSubmitData, PostIssuingDisputesDisputeSubmitError, PostIssuingDisputesDisputeSubmitResponse, GetIssuingPersonalizationDesignsData, GetIssuingPersonalizationDesignsError, GetIssuingPersonalizationDesignsResponse, PostIssuingPersonalizationDesignsData, PostIssuingPersonalizationDesignsError, PostIssuingPersonalizationDesignsResponse, GetIssuingPersonalizationDesignsPersonalizationDesignData, GetIssuingPersonalizationDesignsPersonalizationDesignError, GetIssuingPersonalizationDesignsPersonalizationDesignResponse, PostIssuingPersonalizationDesignsPersonalizationDesignData, PostIssuingPersonalizationDesignsPersonalizationDesignError, PostIssuingPersonalizationDesignsPersonalizationDesignResponse, GetIssuingPhysicalBundlesData, GetIssuingPhysicalBundlesError, GetIssuingPhysicalBundlesResponse, GetIssuingPhysicalBundlesPhysicalBundleData, GetIssuingPhysicalBundlesPhysicalBundleError, GetIssuingPhysicalBundlesPhysicalBundleResponse, GetIssuingSettlementsSettlementData, GetIssuingSettlementsSettlementError, GetIssuingSettlementsSettlementResponse, PostIssuingSettlementsSettlementData, PostIssuingSettlementsSettlementError, PostIssuingSettlementsSettlementResponse, GetIssuingTokensData, GetIssuingTokensError, GetIssuingTokensResponse, GetIssuingTokensTokenData, GetIssuingTokensTokenError, GetIssuingTokensTokenResponse, PostIssuingTokensTokenData, PostIssuingTokensTokenError, PostIssuingTokensTokenResponse, GetIssuingTransactionsData, GetIssuingTransactionsError, GetIssuingTransactionsResponse, GetIssuingTransactionsTransactionData, GetIssuingTransactionsTransactionError, GetIssuingTransactionsTransactionResponse, PostIssuingTransactionsTransactionData, PostIssuingTransactionsTransactionError, PostIssuingTransactionsTransactionResponse, PostLinkAccountSessionsData, PostLinkAccountSessionsError, PostLinkAccountSessionsResponse, GetLinkAccountSessionsSessionData, GetLinkAccountSessionsSessionError, GetLinkAccountSessionsSessionResponse, GetLinkedAccountsData, GetLinkedAccountsError, GetLinkedAccountsResponse, GetLinkedAccountsAccountData, GetLinkedAccountsAccountError, GetLinkedAccountsAccountResponse, PostLinkedAccountsAccountDisconnectData, PostLinkedAccountsAccountDisconnectError, PostLinkedAccountsAccountDisconnectResponse, GetLinkedAccountsAccountOwnersData, GetLinkedAccountsAccountOwnersError, GetLinkedAccountsAccountOwnersResponse, PostLinkedAccountsAccountRefreshData, PostLinkedAccountsAccountRefreshError, PostLinkedAccountsAccountRefreshResponse, GetMandatesMandateData, GetMandatesMandateError, GetMandatesMandateResponse, GetPaymentIntentsData, GetPaymentIntentsError, GetPaymentIntentsResponse, PostPaymentIntentsData, PostPaymentIntentsError, PostPaymentIntentsResponse, GetPaymentIntentsSearchData, GetPaymentIntentsSearchError, GetPaymentIntentsSearchResponse, GetPaymentIntentsIntentData, GetPaymentIntentsIntentError, GetPaymentIntentsIntentResponse, PostPaymentIntentsIntentData, PostPaymentIntentsIntentError, PostPaymentIntentsIntentResponse, PostPaymentIntentsIntentApplyCustomerBalanceData, PostPaymentIntentsIntentApplyCustomerBalanceError, PostPaymentIntentsIntentApplyCustomerBalanceResponse, PostPaymentIntentsIntentCancelData, PostPaymentIntentsIntentCancelError, PostPaymentIntentsIntentCancelResponse, PostPaymentIntentsIntentCaptureData, PostPaymentIntentsIntentCaptureError, PostPaymentIntentsIntentCaptureResponse, PostPaymentIntentsIntentConfirmData, PostPaymentIntentsIntentConfirmError, PostPaymentIntentsIntentConfirmResponse, PostPaymentIntentsIntentIncrementAuthorizationData, PostPaymentIntentsIntentIncrementAuthorizationError, PostPaymentIntentsIntentIncrementAuthorizationResponse, PostPaymentIntentsIntentVerifyMicrodepositsData, PostPaymentIntentsIntentVerifyMicrodepositsError, PostPaymentIntentsIntentVerifyMicrodepositsResponse, GetPaymentLinksData, GetPaymentLinksError, GetPaymentLinksResponse, PostPaymentLinksData, PostPaymentLinksError, PostPaymentLinksResponse, GetPaymentLinksPaymentLinkData, GetPaymentLinksPaymentLinkError, GetPaymentLinksPaymentLinkResponse, PostPaymentLinksPaymentLinkData, PostPaymentLinksPaymentLinkError, PostPaymentLinksPaymentLinkResponse, GetPaymentLinksPaymentLinkLineItemsData, GetPaymentLinksPaymentLinkLineItemsError, GetPaymentLinksPaymentLinkLineItemsResponse, GetPaymentMethodConfigurationsData, GetPaymentMethodConfigurationsError, GetPaymentMethodConfigurationsResponse, PostPaymentMethodConfigurationsData, PostPaymentMethodConfigurationsError, PostPaymentMethodConfigurationsResponse, GetPaymentMethodConfigurationsConfigurationData, GetPaymentMethodConfigurationsConfigurationError, GetPaymentMethodConfigurationsConfigurationResponse, PostPaymentMethodConfigurationsConfigurationData, PostPaymentMethodConfigurationsConfigurationError, PostPaymentMethodConfigurationsConfigurationResponse, GetPaymentMethodDomainsData, GetPaymentMethodDomainsError, GetPaymentMethodDomainsResponse, PostPaymentMethodDomainsData, PostPaymentMethodDomainsError, PostPaymentMethodDomainsResponse, GetPaymentMethodDomainsPaymentMethodDomainData, GetPaymentMethodDomainsPaymentMethodDomainError, GetPaymentMethodDomainsPaymentMethodDomainResponse, PostPaymentMethodDomainsPaymentMethodDomainData, PostPaymentMethodDomainsPaymentMethodDomainError, PostPaymentMethodDomainsPaymentMethodDomainResponse, PostPaymentMethodDomainsPaymentMethodDomainValidateData, PostPaymentMethodDomainsPaymentMethodDomainValidateError, PostPaymentMethodDomainsPaymentMethodDomainValidateResponse, GetPaymentMethodsData, GetPaymentMethodsError, GetPaymentMethodsResponse, PostPaymentMethodsData, PostPaymentMethodsError, PostPaymentMethodsResponse, GetPaymentMethodsPaymentMethodData, GetPaymentMethodsPaymentMethodError, GetPaymentMethodsPaymentMethodResponse, PostPaymentMethodsPaymentMethodData, PostPaymentMethodsPaymentMethodError, PostPaymentMethodsPaymentMethodResponse, PostPaymentMethodsPaymentMethodAttachData, PostPaymentMethodsPaymentMethodAttachError, PostPaymentMethodsPaymentMethodAttachResponse, PostPaymentMethodsPaymentMethodDetachData, PostPaymentMethodsPaymentMethodDetachError, PostPaymentMethodsPaymentMethodDetachResponse, GetPayoutsData, GetPayoutsError, GetPayoutsResponse, PostPayoutsData, PostPayoutsError, PostPayoutsResponse, GetPayoutsPayoutData, GetPayoutsPayoutError, GetPayoutsPayoutResponse, PostPayoutsPayoutData, PostPayoutsPayoutError, PostPayoutsPayoutResponse, PostPayoutsPayoutCancelData, PostPayoutsPayoutCancelError, PostPayoutsPayoutCancelResponse, PostPayoutsPayoutReverseData, PostPayoutsPayoutReverseError, PostPayoutsPayoutReverseResponse, GetPlansData, GetPlansError, GetPlansResponse, PostPlansData, PostPlansError, PostPlansResponse, DeletePlansPlanData, DeletePlansPlanError, DeletePlansPlanResponse, GetPlansPlanData, GetPlansPlanError, GetPlansPlanResponse, PostPlansPlanData, PostPlansPlanError, PostPlansPlanResponse, GetPricesData, GetPricesError, GetPricesResponse, PostPricesData, PostPricesError, PostPricesResponse, GetPricesSearchData, GetPricesSearchError, GetPricesSearchResponse, GetPricesPriceData, GetPricesPriceError, GetPricesPriceResponse, PostPricesPriceData, PostPricesPriceError, PostPricesPriceResponse, GetProductsData, GetProductsError, GetProductsResponse, PostProductsData, PostProductsError, PostProductsResponse, GetProductsSearchData, GetProductsSearchError, GetProductsSearchResponse, DeleteProductsIdData, DeleteProductsIdError, DeleteProductsIdResponse, GetProductsIdData, GetProductsIdError, GetProductsIdResponse, PostProductsIdData, PostProductsIdError, PostProductsIdResponse, GetProductsProductFeaturesData, GetProductsProductFeaturesError, GetProductsProductFeaturesResponse, PostProductsProductFeaturesData, PostProductsProductFeaturesError, PostProductsProductFeaturesResponse, DeleteProductsProductFeaturesIdData, DeleteProductsProductFeaturesIdError, DeleteProductsProductFeaturesIdResponse, GetProductsProductFeaturesIdData, GetProductsProductFeaturesIdError, GetProductsProductFeaturesIdResponse, GetPromotionCodesData, GetPromotionCodesError, GetPromotionCodesResponse, PostPromotionCodesData, PostPromotionCodesError, PostPromotionCodesResponse, GetPromotionCodesPromotionCodeData, GetPromotionCodesPromotionCodeError, GetPromotionCodesPromotionCodeResponse, PostPromotionCodesPromotionCodeData, PostPromotionCodesPromotionCodeError, PostPromotionCodesPromotionCodeResponse, GetQuotesData, GetQuotesError, GetQuotesResponse, PostQuotesData, PostQuotesError, PostQuotesResponse, GetQuotesQuoteData, GetQuotesQuoteError, GetQuotesQuoteResponse, PostQuotesQuoteData, PostQuotesQuoteError, PostQuotesQuoteResponse, PostQuotesQuoteAcceptData, PostQuotesQuoteAcceptError, PostQuotesQuoteAcceptResponse, PostQuotesQuoteCancelData, PostQuotesQuoteCancelError, PostQuotesQuoteCancelResponse, GetQuotesQuoteComputedUpfrontLineItemsData, GetQuotesQuoteComputedUpfrontLineItemsError, GetQuotesQuoteComputedUpfrontLineItemsResponse, PostQuotesQuoteFinalizeData, PostQuotesQuoteFinalizeError, PostQuotesQuoteFinalizeResponse, GetQuotesQuoteLineItemsData, GetQuotesQuoteLineItemsError, GetQuotesQuoteLineItemsResponse, GetQuotesQuotePdfData, GetQuotesQuotePdfError, GetQuotesQuotePdfResponse, GetRadarEarlyFraudWarningsData, GetRadarEarlyFraudWarningsError, GetRadarEarlyFraudWarningsResponse, GetRadarEarlyFraudWarningsEarlyFraudWarningData, GetRadarEarlyFraudWarningsEarlyFraudWarningError, GetRadarEarlyFraudWarningsEarlyFraudWarningResponse, GetRadarValueListItemsData, GetRadarValueListItemsError, GetRadarValueListItemsResponse, PostRadarValueListItemsData, PostRadarValueListItemsError, PostRadarValueListItemsResponse, DeleteRadarValueListItemsItemData, DeleteRadarValueListItemsItemError, DeleteRadarValueListItemsItemResponse, GetRadarValueListItemsItemData, GetRadarValueListItemsItemError, GetRadarValueListItemsItemResponse, GetRadarValueListsData, GetRadarValueListsError, GetRadarValueListsResponse, PostRadarValueListsData, PostRadarValueListsError, PostRadarValueListsResponse, DeleteRadarValueListsValueListData, DeleteRadarValueListsValueListError, DeleteRadarValueListsValueListResponse, GetRadarValueListsValueListData, GetRadarValueListsValueListError, GetRadarValueListsValueListResponse, PostRadarValueListsValueListData, PostRadarValueListsValueListError, PostRadarValueListsValueListResponse, GetRefundsData, GetRefundsError, GetRefundsResponse, PostRefundsData, PostRefundsError, PostRefundsResponse, GetRefundsRefundData, GetRefundsRefundError, GetRefundsRefundResponse, PostRefundsRefundData, PostRefundsRefundError, PostRefundsRefundResponse, PostRefundsRefundCancelData, PostRefundsRefundCancelError, PostRefundsRefundCancelResponse, GetReportingReportRunsData, GetReportingReportRunsError, GetReportingReportRunsResponse, PostReportingReportRunsData, PostReportingReportRunsError, PostReportingReportRunsResponse, GetReportingReportRunsReportRunData, GetReportingReportRunsReportRunError, GetReportingReportRunsReportRunResponse, GetReportingReportTypesData, GetReportingReportTypesError, GetReportingReportTypesResponse, GetReportingReportTypesReportTypeData, GetReportingReportTypesReportTypeError, GetReportingReportTypesReportTypeResponse, GetReviewsData, GetReviewsError, GetReviewsResponse, GetReviewsReviewData, GetReviewsReviewError, GetReviewsReviewResponse, PostReviewsReviewApproveData, PostReviewsReviewApproveError, PostReviewsReviewApproveResponse, GetSetupAttemptsData, GetSetupAttemptsError, GetSetupAttemptsResponse, GetSetupIntentsData, GetSetupIntentsError, GetSetupIntentsResponse, PostSetupIntentsData, PostSetupIntentsError, PostSetupIntentsResponse, GetSetupIntentsIntentData, GetSetupIntentsIntentError, GetSetupIntentsIntentResponse, PostSetupIntentsIntentData, PostSetupIntentsIntentError, PostSetupIntentsIntentResponse, PostSetupIntentsIntentCancelData, PostSetupIntentsIntentCancelError, PostSetupIntentsIntentCancelResponse, PostSetupIntentsIntentConfirmData, PostSetupIntentsIntentConfirmError, PostSetupIntentsIntentConfirmResponse, PostSetupIntentsIntentVerifyMicrodepositsData, PostSetupIntentsIntentVerifyMicrodepositsError, PostSetupIntentsIntentVerifyMicrodepositsResponse, GetShippingRatesData, GetShippingRatesError, GetShippingRatesResponse, PostShippingRatesData, PostShippingRatesError, PostShippingRatesResponse, GetShippingRatesShippingRateTokenData, GetShippingRatesShippingRateTokenError, GetShippingRatesShippingRateTokenResponse, PostShippingRatesShippingRateTokenData, PostShippingRatesShippingRateTokenError, PostShippingRatesShippingRateTokenResponse, GetSigmaScheduledQueryRunsData, GetSigmaScheduledQueryRunsError, GetSigmaScheduledQueryRunsResponse, GetSigmaScheduledQueryRunsScheduledQueryRunData, GetSigmaScheduledQueryRunsScheduledQueryRunError, GetSigmaScheduledQueryRunsScheduledQueryRunResponse, PostSourcesData, PostSourcesError, PostSourcesResponse, GetSourcesSourceData, GetSourcesSourceError, GetSourcesSourceResponse, PostSourcesSourceData, PostSourcesSourceError, PostSourcesSourceResponse, GetSourcesSourceMandateNotificationsMandateNotificationData, GetSourcesSourceMandateNotificationsMandateNotificationError, GetSourcesSourceMandateNotificationsMandateNotificationResponse, GetSourcesSourceSourceTransactionsData, GetSourcesSourceSourceTransactionsError, GetSourcesSourceSourceTransactionsResponse, GetSourcesSourceSourceTransactionsSourceTransactionData, GetSourcesSourceSourceTransactionsSourceTransactionError, GetSourcesSourceSourceTransactionsSourceTransactionResponse, PostSourcesSourceVerifyData, PostSourcesSourceVerifyError, PostSourcesSourceVerifyResponse, GetSubscriptionItemsData, GetSubscriptionItemsError, GetSubscriptionItemsResponse, PostSubscriptionItemsData, PostSubscriptionItemsError, PostSubscriptionItemsResponse, DeleteSubscriptionItemsItemData, DeleteSubscriptionItemsItemError, DeleteSubscriptionItemsItemResponse, GetSubscriptionItemsItemData, GetSubscriptionItemsItemError, GetSubscriptionItemsItemResponse, PostSubscriptionItemsItemData, PostSubscriptionItemsItemError, PostSubscriptionItemsItemResponse, GetSubscriptionItemsSubscriptionItemUsageRecordSummariesData, GetSubscriptionItemsSubscriptionItemUsageRecordSummariesError, GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponse, PostSubscriptionItemsSubscriptionItemUsageRecordsData, PostSubscriptionItemsSubscriptionItemUsageRecordsError, PostSubscriptionItemsSubscriptionItemUsageRecordsResponse, GetSubscriptionSchedulesData, GetSubscriptionSchedulesError, GetSubscriptionSchedulesResponse, PostSubscriptionSchedulesData, PostSubscriptionSchedulesError, PostSubscriptionSchedulesResponse, GetSubscriptionSchedulesScheduleData, GetSubscriptionSchedulesScheduleError, GetSubscriptionSchedulesScheduleResponse, PostSubscriptionSchedulesScheduleData, PostSubscriptionSchedulesScheduleError, PostSubscriptionSchedulesScheduleResponse, PostSubscriptionSchedulesScheduleCancelData, PostSubscriptionSchedulesScheduleCancelError, PostSubscriptionSchedulesScheduleCancelResponse, PostSubscriptionSchedulesScheduleReleaseData, PostSubscriptionSchedulesScheduleReleaseError, PostSubscriptionSchedulesScheduleReleaseResponse, GetSubscriptionsData, GetSubscriptionsError, GetSubscriptionsResponse, PostSubscriptionsData, PostSubscriptionsError, PostSubscriptionsResponse, GetSubscriptionsSearchData, GetSubscriptionsSearchError, GetSubscriptionsSearchResponse, DeleteSubscriptionsSubscriptionExposedIdData, DeleteSubscriptionsSubscriptionExposedIdError, DeleteSubscriptionsSubscriptionExposedIdResponse, GetSubscriptionsSubscriptionExposedIdData, GetSubscriptionsSubscriptionExposedIdError, GetSubscriptionsSubscriptionExposedIdResponse, PostSubscriptionsSubscriptionExposedIdData, PostSubscriptionsSubscriptionExposedIdError, PostSubscriptionsSubscriptionExposedIdResponse, DeleteSubscriptionsSubscriptionExposedIdDiscountData, DeleteSubscriptionsSubscriptionExposedIdDiscountError, DeleteSubscriptionsSubscriptionExposedIdDiscountResponse, PostSubscriptionsSubscriptionResumeData, PostSubscriptionsSubscriptionResumeError, PostSubscriptionsSubscriptionResumeResponse, PostTaxCalculationsData, PostTaxCalculationsError, PostTaxCalculationsResponse, GetTaxCalculationsCalculationLineItemsData, GetTaxCalculationsCalculationLineItemsError, GetTaxCalculationsCalculationLineItemsResponse, GetTaxRegistrationsData, GetTaxRegistrationsError, GetTaxRegistrationsResponse, PostTaxRegistrationsData, PostTaxRegistrationsError, PostTaxRegistrationsResponse, GetTaxRegistrationsIdData, GetTaxRegistrationsIdError, GetTaxRegistrationsIdResponse, PostTaxRegistrationsIdData, PostTaxRegistrationsIdError, PostTaxRegistrationsIdResponse, GetTaxSettingsData, GetTaxSettingsError, GetTaxSettingsResponse, PostTaxSettingsData, PostTaxSettingsError, PostTaxSettingsResponse, PostTaxTransactionsCreateFromCalculationData, PostTaxTransactionsCreateFromCalculationError, PostTaxTransactionsCreateFromCalculationResponse, PostTaxTransactionsCreateReversalData, PostTaxTransactionsCreateReversalError, PostTaxTransactionsCreateReversalResponse, GetTaxTransactionsTransactionData, GetTaxTransactionsTransactionError, GetTaxTransactionsTransactionResponse, GetTaxTransactionsTransactionLineItemsData, GetTaxTransactionsTransactionLineItemsError, GetTaxTransactionsTransactionLineItemsResponse, GetTaxCodesData, GetTaxCodesError, GetTaxCodesResponse, GetTaxCodesIdData, GetTaxCodesIdError, GetTaxCodesIdResponse, GetTaxIdsData, GetTaxIdsError, GetTaxIdsResponse, PostTaxIdsData, PostTaxIdsError, PostTaxIdsResponse, DeleteTaxIdsIdData, DeleteTaxIdsIdError, DeleteTaxIdsIdResponse, GetTaxIdsIdData, GetTaxIdsIdError, GetTaxIdsIdResponse, GetTaxRatesData, GetTaxRatesError, GetTaxRatesResponse, PostTaxRatesData, PostTaxRatesError, PostTaxRatesResponse, GetTaxRatesTaxRateData, GetTaxRatesTaxRateError, GetTaxRatesTaxRateResponse, PostTaxRatesTaxRateData, PostTaxRatesTaxRateError, PostTaxRatesTaxRateResponse, GetTerminalConfigurationsData, GetTerminalConfigurationsError, GetTerminalConfigurationsResponse, PostTerminalConfigurationsData, PostTerminalConfigurationsError, PostTerminalConfigurationsResponse, DeleteTerminalConfigurationsConfigurationData, DeleteTerminalConfigurationsConfigurationError, DeleteTerminalConfigurationsConfigurationResponse, GetTerminalConfigurationsConfigurationData, GetTerminalConfigurationsConfigurationError, GetTerminalConfigurationsConfigurationResponse, PostTerminalConfigurationsConfigurationData, PostTerminalConfigurationsConfigurationError, PostTerminalConfigurationsConfigurationResponse, PostTerminalConnectionTokensData, PostTerminalConnectionTokensError, PostTerminalConnectionTokensResponse, GetTerminalLocationsData, GetTerminalLocationsError, GetTerminalLocationsResponse, PostTerminalLocationsData, PostTerminalLocationsError, PostTerminalLocationsResponse, DeleteTerminalLocationsLocationData, DeleteTerminalLocationsLocationError, DeleteTerminalLocationsLocationResponse, GetTerminalLocationsLocationData, GetTerminalLocationsLocationError, GetTerminalLocationsLocationResponse, PostTerminalLocationsLocationData, PostTerminalLocationsLocationError, PostTerminalLocationsLocationResponse, GetTerminalReadersData, GetTerminalReadersError, GetTerminalReadersResponse, PostTerminalReadersData, PostTerminalReadersError, PostTerminalReadersResponse, DeleteTerminalReadersReaderData, DeleteTerminalReadersReaderError, DeleteTerminalReadersReaderResponse, GetTerminalReadersReaderData, GetTerminalReadersReaderError, GetTerminalReadersReaderResponse, PostTerminalReadersReaderData, PostTerminalReadersReaderError, PostTerminalReadersReaderResponse, PostTerminalReadersReaderCancelActionData, PostTerminalReadersReaderCancelActionError, PostTerminalReadersReaderCancelActionResponse, PostTerminalReadersReaderProcessPaymentIntentData, PostTerminalReadersReaderProcessPaymentIntentError, PostTerminalReadersReaderProcessPaymentIntentResponse, PostTerminalReadersReaderProcessSetupIntentData, PostTerminalReadersReaderProcessSetupIntentError, PostTerminalReadersReaderProcessSetupIntentResponse, PostTerminalReadersReaderRefundPaymentData, PostTerminalReadersReaderRefundPaymentError, PostTerminalReadersReaderRefundPaymentResponse, PostTerminalReadersReaderSetReaderDisplayData, PostTerminalReadersReaderSetReaderDisplayError, PostTerminalReadersReaderSetReaderDisplayResponse, PostTestHelpersConfirmationTokensData, PostTestHelpersConfirmationTokensError, PostTestHelpersConfirmationTokensResponse, PostTestHelpersCustomersCustomerFundCashBalanceData, PostTestHelpersCustomersCustomerFundCashBalanceError, PostTestHelpersCustomersCustomerFundCashBalanceResponse, PostTestHelpersIssuingAuthorizationsData, PostTestHelpersIssuingAuthorizationsError, PostTestHelpersIssuingAuthorizationsResponse, PostTestHelpersIssuingAuthorizationsAuthorizationCaptureData, PostTestHelpersIssuingAuthorizationsAuthorizationCaptureError, PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponse, PostTestHelpersIssuingAuthorizationsAuthorizationExpireData, PostTestHelpersIssuingAuthorizationsAuthorizationExpireError, PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponse, PostTestHelpersIssuingAuthorizationsAuthorizationIncrementData, PostTestHelpersIssuingAuthorizationsAuthorizationIncrementError, PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse, PostTestHelpersIssuingAuthorizationsAuthorizationReverseData, PostTestHelpersIssuingAuthorizationsAuthorizationReverseError, PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponse, PostTestHelpersIssuingCardsCardShippingDeliverData, PostTestHelpersIssuingCardsCardShippingDeliverError, PostTestHelpersIssuingCardsCardShippingDeliverResponse, PostTestHelpersIssuingCardsCardShippingFailData, PostTestHelpersIssuingCardsCardShippingFailError, PostTestHelpersIssuingCardsCardShippingFailResponse, PostTestHelpersIssuingCardsCardShippingReturnData, PostTestHelpersIssuingCardsCardShippingReturnError, PostTestHelpersIssuingCardsCardShippingReturnResponse, PostTestHelpersIssuingCardsCardShippingShipData, PostTestHelpersIssuingCardsCardShippingShipError, PostTestHelpersIssuingCardsCardShippingShipResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateData, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateError, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateData, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateError, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectData, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectError, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponse, PostTestHelpersIssuingTransactionsCreateForceCaptureData, PostTestHelpersIssuingTransactionsCreateForceCaptureError, PostTestHelpersIssuingTransactionsCreateForceCaptureResponse, PostTestHelpersIssuingTransactionsCreateUnlinkedRefundData, PostTestHelpersIssuingTransactionsCreateUnlinkedRefundError, PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponse, PostTestHelpersIssuingTransactionsTransactionRefundData, PostTestHelpersIssuingTransactionsTransactionRefundError, PostTestHelpersIssuingTransactionsTransactionRefundResponse, PostTestHelpersRefundsRefundExpireData, PostTestHelpersRefundsRefundExpireError, PostTestHelpersRefundsRefundExpireResponse, PostTestHelpersTerminalReadersReaderPresentPaymentMethodData, PostTestHelpersTerminalReadersReaderPresentPaymentMethodError, PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponse, GetTestHelpersTestClocksData, GetTestHelpersTestClocksError, GetTestHelpersTestClocksResponse, PostTestHelpersTestClocksData, PostTestHelpersTestClocksError, PostTestHelpersTestClocksResponse, DeleteTestHelpersTestClocksTestClockData, DeleteTestHelpersTestClocksTestClockError, DeleteTestHelpersTestClocksTestClockResponse, GetTestHelpersTestClocksTestClockData, GetTestHelpersTestClocksTestClockError, GetTestHelpersTestClocksTestClockResponse, PostTestHelpersTestClocksTestClockAdvanceData, PostTestHelpersTestClocksTestClockAdvanceError, PostTestHelpersTestClocksTestClockAdvanceResponse, PostTestHelpersTreasuryInboundTransfersIdFailData, PostTestHelpersTreasuryInboundTransfersIdFailError, PostTestHelpersTreasuryInboundTransfersIdFailResponse, PostTestHelpersTreasuryInboundTransfersIdReturnData, PostTestHelpersTreasuryInboundTransfersIdReturnError, PostTestHelpersTreasuryInboundTransfersIdReturnResponse, PostTestHelpersTreasuryInboundTransfersIdSucceedData, PostTestHelpersTreasuryInboundTransfersIdSucceedError, PostTestHelpersTreasuryInboundTransfersIdSucceedResponse, PostTestHelpersTreasuryOutboundPaymentsIdData, PostTestHelpersTreasuryOutboundPaymentsIdError, PostTestHelpersTreasuryOutboundPaymentsIdResponse, PostTestHelpersTreasuryOutboundPaymentsIdFailData, PostTestHelpersTreasuryOutboundPaymentsIdFailError, PostTestHelpersTreasuryOutboundPaymentsIdFailResponse, PostTestHelpersTreasuryOutboundPaymentsIdPostData, PostTestHelpersTreasuryOutboundPaymentsIdPostError, PostTestHelpersTreasuryOutboundPaymentsIdPostResponse, PostTestHelpersTreasuryOutboundPaymentsIdReturnData, PostTestHelpersTreasuryOutboundPaymentsIdReturnError, PostTestHelpersTreasuryOutboundPaymentsIdReturnResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferData, PostTestHelpersTreasuryOutboundTransfersOutboundTransferError, PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailData, PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailError, PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostData, PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostError, PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnData, PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnError, PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponse, PostTestHelpersTreasuryReceivedCreditsData, PostTestHelpersTreasuryReceivedCreditsError, PostTestHelpersTreasuryReceivedCreditsResponse, PostTestHelpersTreasuryReceivedDebitsData, PostTestHelpersTreasuryReceivedDebitsError, PostTestHelpersTreasuryReceivedDebitsResponse, PostTokensData, PostTokensError, PostTokensResponse, GetTokensTokenData, GetTokensTokenError, GetTokensTokenResponse, GetTopupsData, GetTopupsError, GetTopupsResponse, PostTopupsData, PostTopupsError, PostTopupsResponse, GetTopupsTopupData, GetTopupsTopupError, GetTopupsTopupResponse, PostTopupsTopupData, PostTopupsTopupError, PostTopupsTopupResponse, PostTopupsTopupCancelData, PostTopupsTopupCancelError, PostTopupsTopupCancelResponse, GetTransfersData, GetTransfersError, GetTransfersResponse, PostTransfersData, PostTransfersError, PostTransfersResponse, GetTransfersIdReversalsData, GetTransfersIdReversalsError, GetTransfersIdReversalsResponse, PostTransfersIdReversalsData, PostTransfersIdReversalsError, PostTransfersIdReversalsResponse, GetTransfersTransferData, GetTransfersTransferError, GetTransfersTransferResponse, PostTransfersTransferData, PostTransfersTransferError, PostTransfersTransferResponse, GetTransfersTransferReversalsIdData, GetTransfersTransferReversalsIdError, GetTransfersTransferReversalsIdResponse, PostTransfersTransferReversalsIdData, PostTransfersTransferReversalsIdError, PostTransfersTransferReversalsIdResponse, GetTreasuryCreditReversalsData, GetTreasuryCreditReversalsError, GetTreasuryCreditReversalsResponse, PostTreasuryCreditReversalsData, PostTreasuryCreditReversalsError, PostTreasuryCreditReversalsResponse, GetTreasuryCreditReversalsCreditReversalData, GetTreasuryCreditReversalsCreditReversalError, GetTreasuryCreditReversalsCreditReversalResponse, GetTreasuryDebitReversalsData, GetTreasuryDebitReversalsError, GetTreasuryDebitReversalsResponse, PostTreasuryDebitReversalsData, PostTreasuryDebitReversalsError, PostTreasuryDebitReversalsResponse, GetTreasuryDebitReversalsDebitReversalData, GetTreasuryDebitReversalsDebitReversalError, GetTreasuryDebitReversalsDebitReversalResponse, GetTreasuryFinancialAccountsData, GetTreasuryFinancialAccountsError, GetTreasuryFinancialAccountsResponse, PostTreasuryFinancialAccountsData, PostTreasuryFinancialAccountsError, PostTreasuryFinancialAccountsResponse, GetTreasuryFinancialAccountsFinancialAccountData, GetTreasuryFinancialAccountsFinancialAccountError, GetTreasuryFinancialAccountsFinancialAccountResponse, PostTreasuryFinancialAccountsFinancialAccountData, PostTreasuryFinancialAccountsFinancialAccountError, PostTreasuryFinancialAccountsFinancialAccountResponse, GetTreasuryFinancialAccountsFinancialAccountFeaturesData, GetTreasuryFinancialAccountsFinancialAccountFeaturesError, GetTreasuryFinancialAccountsFinancialAccountFeaturesResponse, PostTreasuryFinancialAccountsFinancialAccountFeaturesData, PostTreasuryFinancialAccountsFinancialAccountFeaturesError, PostTreasuryFinancialAccountsFinancialAccountFeaturesResponse, GetTreasuryInboundTransfersData, GetTreasuryInboundTransfersError, GetTreasuryInboundTransfersResponse, PostTreasuryInboundTransfersData, PostTreasuryInboundTransfersError, PostTreasuryInboundTransfersResponse, GetTreasuryInboundTransfersIdData, GetTreasuryInboundTransfersIdError, GetTreasuryInboundTransfersIdResponse, PostTreasuryInboundTransfersInboundTransferCancelData, PostTreasuryInboundTransfersInboundTransferCancelError, PostTreasuryInboundTransfersInboundTransferCancelResponse, GetTreasuryOutboundPaymentsData, GetTreasuryOutboundPaymentsError, GetTreasuryOutboundPaymentsResponse, PostTreasuryOutboundPaymentsData, PostTreasuryOutboundPaymentsError, PostTreasuryOutboundPaymentsResponse, GetTreasuryOutboundPaymentsIdData, GetTreasuryOutboundPaymentsIdError, GetTreasuryOutboundPaymentsIdResponse, PostTreasuryOutboundPaymentsIdCancelData, PostTreasuryOutboundPaymentsIdCancelError, PostTreasuryOutboundPaymentsIdCancelResponse, GetTreasuryOutboundTransfersData, GetTreasuryOutboundTransfersError, GetTreasuryOutboundTransfersResponse, PostTreasuryOutboundTransfersData, PostTreasuryOutboundTransfersError, PostTreasuryOutboundTransfersResponse, GetTreasuryOutboundTransfersOutboundTransferData, GetTreasuryOutboundTransfersOutboundTransferError, GetTreasuryOutboundTransfersOutboundTransferResponse, PostTreasuryOutboundTransfersOutboundTransferCancelData, PostTreasuryOutboundTransfersOutboundTransferCancelError, PostTreasuryOutboundTransfersOutboundTransferCancelResponse, GetTreasuryReceivedCreditsData, GetTreasuryReceivedCreditsError, GetTreasuryReceivedCreditsResponse, GetTreasuryReceivedCreditsIdData, GetTreasuryReceivedCreditsIdError, GetTreasuryReceivedCreditsIdResponse, GetTreasuryReceivedDebitsData, GetTreasuryReceivedDebitsError, GetTreasuryReceivedDebitsResponse, GetTreasuryReceivedDebitsIdData, GetTreasuryReceivedDebitsIdError, GetTreasuryReceivedDebitsIdResponse, GetTreasuryTransactionEntriesData, GetTreasuryTransactionEntriesError, GetTreasuryTransactionEntriesResponse, GetTreasuryTransactionEntriesIdData, GetTreasuryTransactionEntriesIdError, GetTreasuryTransactionEntriesIdResponse, GetTreasuryTransactionsData, GetTreasuryTransactionsError, GetTreasuryTransactionsResponse, GetTreasuryTransactionsIdData, GetTreasuryTransactionsIdError, GetTreasuryTransactionsIdResponse, GetWebhookEndpointsData, GetWebhookEndpointsError, GetWebhookEndpointsResponse, PostWebhookEndpointsData, PostWebhookEndpointsError, PostWebhookEndpointsResponse, DeleteWebhookEndpointsWebhookEndpointData, DeleteWebhookEndpointsWebhookEndpointError, DeleteWebhookEndpointsWebhookEndpointResponse, GetWebhookEndpointsWebhookEndpointData, GetWebhookEndpointsWebhookEndpointError, GetWebhookEndpointsWebhookEndpointResponse, PostWebhookEndpointsWebhookEndpointData, PostWebhookEndpointsWebhookEndpointError, PostWebhookEndpointsWebhookEndpointResponse 
} from './types.gen';

export const client = createClient(createConfig());

/**
 * <p>Retrieves the details of an account.</p>
 */
export const getAccount = <ThrowOnError extends boolean = false>(options?: Options<GetAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountResponse, GetAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/account'
    });
};

/**
 * <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
 */
export const postAccountLinks = <ThrowOnError extends boolean = false>(options: Options<PostAccountLinksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountLinksResponse, PostAccountLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/account_links'
    });
};

/**
 * <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
 */
export const postAccountSessions = <ThrowOnError extends boolean = false>(options: Options<PostAccountSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountSessionsResponse, PostAccountSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/account_sessions'
    });
};

/**
 * <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
 */
export const getAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsResponse, GetAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts'
    });
};

/**
 * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
 * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
 *
 * <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
 * creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
 * You can prefill any information on the account.</p>
 */
export const postAccounts = <ThrowOnError extends boolean = false>(options?: Options<PostAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsResponse, PostAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts'
    });
};

/**
 * <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
 *
 * <p>Test-mode accounts can be deleted at any time.</p>
 *
 * <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balanace_object">balances</a> are zero.</p>
 *
 * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
 */
export const deleteAccountsAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsAccountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountsAccountResponse, DeleteAccountsAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}'
    });
};

/**
 * <p>Retrieves the details of an account.</p>
 */
export const getAccountsAccount = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountResponse, GetAccountsAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}'
    });
};

/**
 * <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
 * left unchanged.</p>
 *
 * <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
 * is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
 *
 * <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
 * is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
 * an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
 * after which some properties can no longer be updated.</p>
 *
 * <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
 * <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
 */
export const postAccountsAccount = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountResponse, PostAccountsAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}'
    });
};

/**
 * <p>Create an external account for a given account.</p>
 */
export const postAccountsAccountBankAccounts = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountBankAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountBankAccountsResponse, PostAccountsAccountBankAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/bank_accounts'
    });
};

/**
 * <p>Delete a specified external account for a given account.</p>
 */
export const deleteAccountsAccountBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsAccountBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountsAccountBankAccountsIdResponse, DeleteAccountsAccountBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/bank_accounts/{id}'
    });
};

/**
 * <p>Retrieve a specified external account for a given account.</p>
 */
export const getAccountsAccountBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountBankAccountsIdResponse, GetAccountsAccountBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/bank_accounts/{id}'
    });
};

/**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
 * a connected account and optionally sets it as the default for its currency. Other bank account
 * details are not editable by design.</p>
 *
 * <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
 *
 * <p>You can re-enable a disabled bank account by performing an update call without providing any
 * arguments or changes.</p>
 */
export const postAccountsAccountBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountBankAccountsIdResponse, PostAccountsAccountBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/bank_accounts/{id}'
    });
};

/**
 * <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
 */
export const getAccountsAccountCapabilities = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountCapabilitiesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountCapabilitiesResponse, GetAccountsAccountCapabilitiesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/capabilities'
    });
};

/**
 * <p>Retrieves information about the specified Account Capability.</p>
 */
export const getAccountsAccountCapabilitiesCapability = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountCapabilitiesCapabilityData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountCapabilitiesCapabilityResponse, GetAccountsAccountCapabilitiesCapabilityError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/capabilities/{capability}'
    });
};

/**
 * <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
 */
export const postAccountsAccountCapabilitiesCapability = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountCapabilitiesCapabilityData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountCapabilitiesCapabilityResponse, PostAccountsAccountCapabilitiesCapabilityError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/capabilities/{capability}'
    });
};

/**
 * <p>List external accounts for an account.</p>
 */
export const getAccountsAccountExternalAccounts = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountExternalAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountExternalAccountsResponse, GetAccountsAccountExternalAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/external_accounts'
    });
};

/**
 * <p>Create an external account for a given account.</p>
 */
export const postAccountsAccountExternalAccounts = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountExternalAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountExternalAccountsResponse, PostAccountsAccountExternalAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/external_accounts'
    });
};

/**
 * <p>Delete a specified external account for a given account.</p>
 */
export const deleteAccountsAccountExternalAccountsId = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsAccountExternalAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountsAccountExternalAccountsIdResponse, DeleteAccountsAccountExternalAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/external_accounts/{id}'
    });
};

/**
 * <p>Retrieve a specified external account for a given account.</p>
 */
export const getAccountsAccountExternalAccountsId = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountExternalAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountExternalAccountsIdResponse, GetAccountsAccountExternalAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/external_accounts/{id}'
    });
};

/**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
 * a connected account and optionally sets it as the default for its currency. Other bank account
 * details are not editable by design.</p>
 *
 * <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
 *
 * <p>You can re-enable a disabled bank account by performing an update call without providing any
 * arguments or changes.</p>
 */
export const postAccountsAccountExternalAccountsId = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountExternalAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountExternalAccountsIdResponse, PostAccountsAccountExternalAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/external_accounts/{id}'
    });
};

/**
 * <p>Creates a single-use login link for a connected account to access the Express Dashboard.</p>
 *
 * <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
 */
export const postAccountsAccountLoginLinks = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountLoginLinksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountLoginLinksResponse, PostAccountsAccountLoginLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/login_links'
    });
};

/**
 * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
 */
export const getAccountsAccountPeople = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountPeopleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountPeopleResponse, GetAccountsAccountPeopleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/people'
    });
};

/**
 * <p>Creates a new person.</p>
 */
export const postAccountsAccountPeople = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountPeopleData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountPeopleResponse, PostAccountsAccountPeopleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/people'
    });
};

/**
 * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
 */
export const deleteAccountsAccountPeoplePerson = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsAccountPeoplePersonData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountsAccountPeoplePersonResponse, DeleteAccountsAccountPeoplePersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/people/{person}'
    });
};

/**
 * <p>Retrieves an existing person.</p>
 */
export const getAccountsAccountPeoplePerson = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountPeoplePersonData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountPeoplePersonResponse, GetAccountsAccountPeoplePersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/people/{person}'
    });
};

/**
 * <p>Updates an existing person.</p>
 */
export const postAccountsAccountPeoplePerson = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountPeoplePersonData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountPeoplePersonResponse, PostAccountsAccountPeoplePersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/people/{person}'
    });
};

/**
 * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
 */
export const getAccountsAccountPersons = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountPersonsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountPersonsResponse, GetAccountsAccountPersonsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/persons'
    });
};

/**
 * <p>Creates a new person.</p>
 */
export const postAccountsAccountPersons = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountPersonsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountPersonsResponse, PostAccountsAccountPersonsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/persons'
    });
};

/**
 * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
 */
export const deleteAccountsAccountPersonsPerson = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountsAccountPersonsPersonData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAccountsAccountPersonsPersonResponse, DeleteAccountsAccountPersonsPersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/persons/{person}'
    });
};

/**
 * <p>Retrieves an existing person.</p>
 */
export const getAccountsAccountPersonsPerson = <ThrowOnError extends boolean = false>(options: Options<GetAccountsAccountPersonsPersonData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsAccountPersonsPersonResponse, GetAccountsAccountPersonsPersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/persons/{person}'
    });
};

/**
 * <p>Updates an existing person.</p>
 */
export const postAccountsAccountPersonsPerson = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountPersonsPersonData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountPersonsPersonResponse, PostAccountsAccountPersonsPersonError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/persons/{person}'
    });
};

/**
 * <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
 *
 * <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
 */
export const postAccountsAccountReject = <ThrowOnError extends boolean = false>(options: Options<PostAccountsAccountRejectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAccountsAccountRejectResponse, PostAccountsAccountRejectError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/accounts/{account}/reject'
    });
};

/**
 * <p>List apple pay domains.</p>
 */
export const getApplePayDomains = <ThrowOnError extends boolean = false>(options?: Options<GetApplePayDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplePayDomainsResponse, GetApplePayDomainsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apple_pay/domains'
    });
};

/**
 * <p>Create an apple pay domain.</p>
 */
export const postApplePayDomains = <ThrowOnError extends boolean = false>(options: Options<PostApplePayDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApplePayDomainsResponse, PostApplePayDomainsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apple_pay/domains'
    });
};

/**
 * <p>Delete an apple pay domain.</p>
 */
export const deleteApplePayDomainsDomain = <ThrowOnError extends boolean = false>(options: Options<DeleteApplePayDomainsDomainData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApplePayDomainsDomainResponse, DeleteApplePayDomainsDomainError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apple_pay/domains/{domain}'
    });
};

/**
 * <p>Retrieve an apple pay domain.</p>
 */
export const getApplePayDomainsDomain = <ThrowOnError extends boolean = false>(options: Options<GetApplePayDomainsDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplePayDomainsDomainResponse, GetApplePayDomainsDomainError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apple_pay/domains/{domain}'
    });
};

/**
 * <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
 */
export const getApplicationFees = <ThrowOnError extends boolean = false>(options?: Options<GetApplicationFeesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplicationFeesResponse, GetApplicationFeesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees'
    });
};

/**
 * <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
 */
export const getApplicationFeesFeeRefundsId = <ThrowOnError extends boolean = false>(options: Options<GetApplicationFeesFeeRefundsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplicationFeesFeeRefundsIdResponse, GetApplicationFeesFeeRefundsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{fee}/refunds/{id}'
    });
};

/**
 * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 *
 * <p>This request only accepts metadata as an argument.</p>
 */
export const postApplicationFeesFeeRefundsId = <ThrowOnError extends boolean = false>(options: Options<PostApplicationFeesFeeRefundsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApplicationFeesFeeRefundsIdResponse, PostApplicationFeesFeeRefundsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{fee}/refunds/{id}'
    });
};

/**
 * <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
 */
export const getApplicationFeesId = <ThrowOnError extends boolean = false>(options: Options<GetApplicationFeesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplicationFeesIdResponse, GetApplicationFeesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{id}'
    });
};

export const postApplicationFeesIdRefund = <ThrowOnError extends boolean = false>(options: Options<PostApplicationFeesIdRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApplicationFeesIdRefundResponse, PostApplicationFeesIdRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{id}/refund'
    });
};

/**
 * <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
 */
export const getApplicationFeesIdRefunds = <ThrowOnError extends boolean = false>(options: Options<GetApplicationFeesIdRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApplicationFeesIdRefundsResponse, GetApplicationFeesIdRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{id}/refunds'
    });
};

/**
 * <p>Refunds an application fee that has previously been collected but not yet refunded.
 * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
 *
 * <p>You can optionally refund only part of an application fee.
 * You can do so multiple times, until the entire fee has been refunded.</p>
 *
 * <p>Once entirely refunded, an application fee can’t be refunded again.
 * This method will raise an error when called on an already-refunded application fee,
 * or when trying to refund more money than is left on an application fee.</p>
 */
export const postApplicationFeesIdRefunds = <ThrowOnError extends boolean = false>(options: Options<PostApplicationFeesIdRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApplicationFeesIdRefundsResponse, PostApplicationFeesIdRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/application_fees/{id}/refunds'
    });
};

/**
 * <p>List all secrets stored on the given scope.</p>
 */
export const getAppsSecrets = <ThrowOnError extends boolean = false>(options: Options<GetAppsSecretsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppsSecretsResponse, GetAppsSecretsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apps/secrets'
    });
};

/**
 * <p>Create or replace a secret in the secret store.</p>
 */
export const postAppsSecrets = <ThrowOnError extends boolean = false>(options: Options<PostAppsSecretsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAppsSecretsResponse, PostAppsSecretsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apps/secrets'
    });
};

/**
 * <p>Deletes a secret from the secret store by name and scope.</p>
 */
export const postAppsSecretsDelete = <ThrowOnError extends boolean = false>(options: Options<PostAppsSecretsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAppsSecretsDeleteResponse, PostAppsSecretsDeleteError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apps/secrets/delete'
    });
};

/**
 * <p>Finds a secret in the secret store by name and scope.</p>
 */
export const getAppsSecretsFind = <ThrowOnError extends boolean = false>(options: Options<GetAppsSecretsFindData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppsSecretsFindResponse, GetAppsSecretsFindError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/apps/secrets/find'
    });
};

/**
 * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
 * For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
 */
export const getBalance = <ThrowOnError extends boolean = false>(options?: Options<GetBalanceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBalanceResponse, GetBalanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/balance'
    });
};

/**
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
 *
 * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
 */
export const getBalanceHistory = <ThrowOnError extends boolean = false>(options?: Options<GetBalanceHistoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBalanceHistoryResponse, GetBalanceHistoryError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/balance/history'
    });
};

/**
 * <p>Retrieves the balance transaction with the given ID.</p>
 *
 * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
 */
export const getBalanceHistoryId = <ThrowOnError extends boolean = false>(options: Options<GetBalanceHistoryIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBalanceHistoryIdResponse, GetBalanceHistoryIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/balance/history/{id}'
    });
};

/**
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
 *
 * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
 */
export const getBalanceTransactions = <ThrowOnError extends boolean = false>(options?: Options<GetBalanceTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBalanceTransactionsResponse, GetBalanceTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/balance_transactions'
    });
};

/**
 * <p>Retrieves the balance transaction with the given ID.</p>
 *
 * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
 */
export const getBalanceTransactionsId = <ThrowOnError extends boolean = false>(options: Options<GetBalanceTransactionsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBalanceTransactionsIdResponse, GetBalanceTransactionsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/balance_transactions/{id}'
    });
};

/**
 * <p>Creates a billing meter event adjustment</p>
 */
export const postBillingMeterEventAdjustments = <ThrowOnError extends boolean = false>(options: Options<PostBillingMeterEventAdjustmentsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMeterEventAdjustmentsResponse, PostBillingMeterEventAdjustmentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meter_event_adjustments'
    });
};

/**
 * <p>Creates a billing meter event</p>
 */
export const postBillingMeterEvents = <ThrowOnError extends boolean = false>(options: Options<PostBillingMeterEventsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMeterEventsResponse, PostBillingMeterEventsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meter_events'
    });
};

/**
 * <p>Retrieve a list of billing meters.</p>
 */
export const getBillingMeters = <ThrowOnError extends boolean = false>(options?: Options<GetBillingMetersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBillingMetersResponse, GetBillingMetersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters'
    });
};

/**
 * <p>Creates a billing meter</p>
 */
export const postBillingMeters = <ThrowOnError extends boolean = false>(options: Options<PostBillingMetersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMetersResponse, PostBillingMetersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters'
    });
};

/**
 * <p>Retrieves a billing meter given an ID</p>
 */
export const getBillingMetersId = <ThrowOnError extends boolean = false>(options: Options<GetBillingMetersIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBillingMetersIdResponse, GetBillingMetersIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters/{id}'
    });
};

/**
 * <p>Updates a billing meter</p>
 */
export const postBillingMetersId = <ThrowOnError extends boolean = false>(options: Options<PostBillingMetersIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMetersIdResponse, PostBillingMetersIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters/{id}'
    });
};

/**
 * <p>Deactivates a billing meter</p>
 */
export const postBillingMetersIdDeactivate = <ThrowOnError extends boolean = false>(options: Options<PostBillingMetersIdDeactivateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMetersIdDeactivateResponse, PostBillingMetersIdDeactivateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters/{id}/deactivate'
    });
};

/**
 * <p>Retrieve a list of billing meter event summaries.</p>
 */
export const getBillingMetersIdEventSummaries = <ThrowOnError extends boolean = false>(options: Options<GetBillingMetersIdEventSummariesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBillingMetersIdEventSummariesResponse, GetBillingMetersIdEventSummariesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters/{id}/event_summaries'
    });
};

/**
 * <p>Reactivates a billing meter</p>
 */
export const postBillingMetersIdReactivate = <ThrowOnError extends boolean = false>(options: Options<PostBillingMetersIdReactivateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingMetersIdReactivateResponse, PostBillingMetersIdReactivateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing/meters/{id}/reactivate'
    });
};

/**
 * <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
 */
export const getBillingPortalConfigurations = <ThrowOnError extends boolean = false>(options?: Options<GetBillingPortalConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBillingPortalConfigurationsResponse, GetBillingPortalConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing_portal/configurations'
    });
};

/**
 * <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
 */
export const postBillingPortalConfigurations = <ThrowOnError extends boolean = false>(options: Options<PostBillingPortalConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingPortalConfigurationsResponse, PostBillingPortalConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing_portal/configurations'
    });
};

/**
 * <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
 */
export const getBillingPortalConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetBillingPortalConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBillingPortalConfigurationsConfigurationResponse, GetBillingPortalConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing_portal/configurations/{configuration}'
    });
};

/**
 * <p>Updates a configuration that describes the functionality of the customer portal.</p>
 */
export const postBillingPortalConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<PostBillingPortalConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingPortalConfigurationsConfigurationResponse, PostBillingPortalConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing_portal/configurations/{configuration}'
    });
};

/**
 * <p>Creates a session of the customer portal.</p>
 */
export const postBillingPortalSessions = <ThrowOnError extends boolean = false>(options: Options<PostBillingPortalSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostBillingPortalSessionsResponse, PostBillingPortalSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/billing_portal/sessions'
    });
};

/**
 * <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
 */
export const getCharges = <ThrowOnError extends boolean = false>(options?: Options<GetChargesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesResponse, GetChargesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges'
    });
};

/**
 * <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
 * to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
 * object used to request payment.</p>
 */
export const postCharges = <ThrowOnError extends boolean = false>(options?: Options<PostChargesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesResponse, PostChargesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges'
    });
};

/**
 * <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getChargesSearch = <ThrowOnError extends boolean = false>(options: Options<GetChargesSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesSearchResponse, GetChargesSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/search'
    });
};

/**
 * <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
 */
export const getChargesCharge = <ThrowOnError extends boolean = false>(options: Options<GetChargesChargeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesChargeResponse, GetChargesChargeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}'
    });
};

/**
 * <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postChargesCharge = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeResponse, PostChargesChargeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}'
    });
};

/**
 * <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
 *
 * <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
 *
 * <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
 */
export const postChargesChargeCapture = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeCaptureData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeCaptureResponse, PostChargesChargeCaptureError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/capture'
    });
};

/**
 * <p>Retrieve a dispute for a specified charge.</p>
 */
export const getChargesChargeDispute = <ThrowOnError extends boolean = false>(options: Options<GetChargesChargeDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesChargeDisputeResponse, GetChargesChargeDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/dispute'
    });
};

export const postChargesChargeDispute = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeDisputeResponse, PostChargesChargeDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/dispute'
    });
};

export const postChargesChargeDisputeClose = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeDisputeCloseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeDisputeCloseResponse, PostChargesChargeDisputeCloseError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/dispute/close'
    });
};

/**
 * <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
 *
 * <p>This action refunds a previously created charge that’s not refunded yet.
 * Funds are refunded to the credit or debit card that’s originally charged.</p>
 *
 * <p>You can optionally refund only part of a charge.
 * You can repeat this until the entire charge is refunded.</p>
 *
 * <p>After you entirely refund a charge, you can’t refund it again.
 * This method raises an error when it’s called on an already-refunded charge,
 * or when you attempt to refund more money than is left on a charge.</p>
 */
export const postChargesChargeRefund = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeRefundResponse, PostChargesChargeRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/refund'
    });
};

/**
 * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
 */
export const getChargesChargeRefunds = <ThrowOnError extends boolean = false>(options: Options<GetChargesChargeRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesChargeRefundsResponse, GetChargesChargeRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/refunds'
    });
};

/**
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
 *
 * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
 * Funds will be refunded to the credit or debit card that was originally charged.</p>
 *
 * <p>You can optionally refund only part of a charge.
 * You can do so multiple times, until the entire charge has been refunded.</p>
 *
 * <p>Once entirely refunded, a charge can’t be refunded again.
 * This method will raise an error when called on an already-refunded charge,
 * or when trying to refund more money than is left on a charge.</p>
 */
export const postChargesChargeRefunds = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeRefundsResponse, PostChargesChargeRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/refunds'
    });
};

/**
 * <p>Retrieves the details of an existing refund.</p>
 */
export const getChargesChargeRefundsRefund = <ThrowOnError extends boolean = false>(options: Options<GetChargesChargeRefundsRefundData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetChargesChargeRefundsRefundResponse, GetChargesChargeRefundsRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/refunds/{refund}'
    });
};

/**
 * <p>Update a specified refund.</p>
 */
export const postChargesChargeRefundsRefund = <ThrowOnError extends boolean = false>(options: Options<PostChargesChargeRefundsRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostChargesChargeRefundsRefundResponse, PostChargesChargeRefundsRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/charges/{charge}/refunds/{refund}'
    });
};

/**
 * <p>Returns a list of Checkout Sessions.</p>
 */
export const getCheckoutSessions = <ThrowOnError extends boolean = false>(options?: Options<GetCheckoutSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCheckoutSessionsResponse, GetCheckoutSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/checkout/sessions'
    });
};

/**
 * <p>Creates a Session object.</p>
 */
export const postCheckoutSessions = <ThrowOnError extends boolean = false>(options?: Options<PostCheckoutSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCheckoutSessionsResponse, PostCheckoutSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/checkout/sessions'
    });
};

/**
 * <p>Retrieves a Session object.</p>
 */
export const getCheckoutSessionsSession = <ThrowOnError extends boolean = false>(options: Options<GetCheckoutSessionsSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCheckoutSessionsSessionResponse, GetCheckoutSessionsSessionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/checkout/sessions/{session}'
    });
};

/**
 * <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
 *
 * <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
 */
export const postCheckoutSessionsSessionExpire = <ThrowOnError extends boolean = false>(options: Options<PostCheckoutSessionsSessionExpireData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCheckoutSessionsSessionExpireResponse, PostCheckoutSessionsSessionExpireError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/checkout/sessions/{session}/expire'
    });
};

/**
 * <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getCheckoutSessionsSessionLineItems = <ThrowOnError extends boolean = false>(options: Options<GetCheckoutSessionsSessionLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCheckoutSessionsSessionLineItemsResponse, GetCheckoutSessionsSessionLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/checkout/sessions/{session}/line_items'
    });
};

/**
 * <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
 * most recently created orders appearing first.</p>
 */
export const getClimateOrders = <ThrowOnError extends boolean = false>(options?: Options<GetClimateOrdersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateOrdersResponse, GetClimateOrdersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/orders'
    });
};

/**
 * <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
 * after creation and payment will be deducted your Stripe balance.</p>
 */
export const postClimateOrders = <ThrowOnError extends boolean = false>(options: Options<PostClimateOrdersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostClimateOrdersResponse, PostClimateOrdersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/orders'
    });
};

/**
 * <p>Retrieves the details of a Climate order object with the given ID.</p>
 */
export const getClimateOrdersOrder = <ThrowOnError extends boolean = false>(options: Options<GetClimateOrdersOrderData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateOrdersOrderResponse, GetClimateOrdersOrderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/orders/{order}'
    });
};

/**
 * <p>Updates the specified order by setting the values of the parameters passed.</p>
 */
export const postClimateOrdersOrder = <ThrowOnError extends boolean = false>(options: Options<PostClimateOrdersOrderData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostClimateOrdersOrderResponse, PostClimateOrdersOrderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/orders/{order}'
    });
};

/**
 * <p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
 * reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
 * might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
 * provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
 */
export const postClimateOrdersOrderCancel = <ThrowOnError extends boolean = false>(options: Options<PostClimateOrdersOrderCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostClimateOrdersOrderCancelResponse, PostClimateOrdersOrderCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/orders/{order}/cancel'
    });
};

/**
 * <p>Lists all available Climate product objects.</p>
 */
export const getClimateProducts = <ThrowOnError extends boolean = false>(options?: Options<GetClimateProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateProductsResponse, GetClimateProductsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/products'
    });
};

/**
 * <p>Retrieves the details of a Climate product with the given ID.</p>
 */
export const getClimateProductsProduct = <ThrowOnError extends boolean = false>(options: Options<GetClimateProductsProductData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateProductsProductResponse, GetClimateProductsProductError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/products/{product}'
    });
};

/**
 * <p>Lists all available Climate supplier objects.</p>
 */
export const getClimateSuppliers = <ThrowOnError extends boolean = false>(options?: Options<GetClimateSuppliersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateSuppliersResponse, GetClimateSuppliersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/suppliers'
    });
};

/**
 * <p>Retrieves a Climate supplier object.</p>
 */
export const getClimateSuppliersSupplier = <ThrowOnError extends boolean = false>(options: Options<GetClimateSuppliersSupplierData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClimateSuppliersSupplierResponse, GetClimateSuppliersSupplierError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/climate/suppliers/{supplier}'
    });
};

/**
 * <p>Retrieves an existing ConfirmationToken object</p>
 */
export const getConfirmationTokensConfirmationToken = <ThrowOnError extends boolean = false>(options: Options<GetConfirmationTokensConfirmationTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetConfirmationTokensConfirmationTokenResponse, GetConfirmationTokensConfirmationTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/confirmation_tokens/{confirmation_token}'
    });
};

/**
 * <p>Lists all Country Spec objects available in the API.</p>
 */
export const getCountrySpecs = <ThrowOnError extends boolean = false>(options?: Options<GetCountrySpecsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCountrySpecsResponse, GetCountrySpecsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/country_specs'
    });
};

/**
 * <p>Returns a Country Spec for a given Country code.</p>
 */
export const getCountrySpecsCountry = <ThrowOnError extends boolean = false>(options: Options<GetCountrySpecsCountryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCountrySpecsCountryResponse, GetCountrySpecsCountryError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/country_specs/{country}'
    });
};

/**
 * <p>Returns a list of your coupons.</p>
 */
export const getCoupons = <ThrowOnError extends boolean = false>(options?: Options<GetCouponsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCouponsResponse, GetCouponsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/coupons'
    });
};

/**
 * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
 *
 * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
 */
export const postCoupons = <ThrowOnError extends boolean = false>(options?: Options<PostCouponsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCouponsResponse, PostCouponsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/coupons'
    });
};

/**
 * <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
 */
export const deleteCouponsCoupon = <ThrowOnError extends boolean = false>(options: Options<DeleteCouponsCouponData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCouponsCouponResponse, DeleteCouponsCouponError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/coupons/{coupon}'
    });
};

/**
 * <p>Retrieves the coupon with the given ID.</p>
 */
export const getCouponsCoupon = <ThrowOnError extends boolean = false>(options: Options<GetCouponsCouponData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCouponsCouponResponse, GetCouponsCouponError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/coupons/{coupon}'
    });
};

/**
 * <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
 */
export const postCouponsCoupon = <ThrowOnError extends boolean = false>(options: Options<PostCouponsCouponData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCouponsCouponResponse, PostCouponsCouponError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/coupons/{coupon}'
    });
};

/**
 * <p>Returns a list of credit notes.</p>
 */
export const getCreditNotes = <ThrowOnError extends boolean = false>(options?: Options<GetCreditNotesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCreditNotesResponse, GetCreditNotesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes'
    });
};

/**
 * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
 * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
 * in any combination of the following:</p>
 *
 * <ul>
 * <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
 * <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
 * <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
 * </ul>
 *
 * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
 *
 * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
 * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
 */
export const postCreditNotes = <ThrowOnError extends boolean = false>(options: Options<PostCreditNotesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCreditNotesResponse, PostCreditNotesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes'
    });
};

/**
 * <p>Get a preview of a credit note without creating it.</p>
 */
export const getCreditNotesPreview = <ThrowOnError extends boolean = false>(options: Options<GetCreditNotesPreviewData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCreditNotesPreviewResponse, GetCreditNotesPreviewError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/preview'
    });
};

/**
 * <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
 */
export const getCreditNotesPreviewLines = <ThrowOnError extends boolean = false>(options: Options<GetCreditNotesPreviewLinesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCreditNotesPreviewLinesResponse, GetCreditNotesPreviewLinesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/preview/lines'
    });
};

/**
 * <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getCreditNotesCreditNoteLines = <ThrowOnError extends boolean = false>(options: Options<GetCreditNotesCreditNoteLinesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCreditNotesCreditNoteLinesResponse, GetCreditNotesCreditNoteLinesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/{credit_note}/lines'
    });
};

/**
 * <p>Retrieves the credit note object with the given identifier.</p>
 */
export const getCreditNotesId = <ThrowOnError extends boolean = false>(options: Options<GetCreditNotesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCreditNotesIdResponse, GetCreditNotesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/{id}'
    });
};

/**
 * <p>Updates an existing credit note.</p>
 */
export const postCreditNotesId = <ThrowOnError extends boolean = false>(options: Options<PostCreditNotesIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCreditNotesIdResponse, PostCreditNotesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/{id}'
    });
};

/**
 * <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
 */
export const postCreditNotesIdVoid = <ThrowOnError extends boolean = false>(options: Options<PostCreditNotesIdVoidData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCreditNotesIdVoidResponse, PostCreditNotesIdVoidError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/credit_notes/{id}/void'
    });
};

/**
 * <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
 */
export const postCustomerSessions = <ThrowOnError extends boolean = false>(options: Options<PostCustomerSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomerSessionsResponse, PostCustomerSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customer_sessions'
    });
};

/**
 * <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
 */
export const getCustomers = <ThrowOnError extends boolean = false>(options?: Options<GetCustomersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersResponse, GetCustomersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers'
    });
};

/**
 * <p>Creates a new customer object.</p>
 */
export const postCustomers = <ThrowOnError extends boolean = false>(options?: Options<PostCustomersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersResponse, PostCustomersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers'
    });
};

/**
 * <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getCustomersSearch = <ThrowOnError extends boolean = false>(options: Options<GetCustomersSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersSearchResponse, GetCustomersSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/search'
    });
};

/**
 * <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
 */
export const deleteCustomersCustomer = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerResponse, DeleteCustomersCustomerError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}'
    });
};

/**
 * <p>Retrieves a Customer object.</p>
 */
export const getCustomersCustomer = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerResponse, GetCustomersCustomerError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}'
    });
};

/**
 * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
 *
 * <p>This request accepts mostly the same arguments as the customer creation call.</p>
 */
export const postCustomersCustomer = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerResponse, PostCustomersCustomerError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}'
    });
};

/**
 * <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
 */
export const getCustomersCustomerBalanceTransactions = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerBalanceTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerBalanceTransactionsResponse, GetCustomersCustomerBalanceTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/balance_transactions'
    });
};

/**
 * <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
 */
export const postCustomersCustomerBalanceTransactions = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerBalanceTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerBalanceTransactionsResponse, PostCustomersCustomerBalanceTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/balance_transactions'
    });
};

/**
 * <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
 */
export const getCustomersCustomerBalanceTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerBalanceTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerBalanceTransactionsTransactionResponse, GetCustomersCustomerBalanceTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/balance_transactions/{transaction}'
    });
};

/**
 * <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
 */
export const postCustomersCustomerBalanceTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerBalanceTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerBalanceTransactionsTransactionResponse, PostCustomersCustomerBalanceTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/balance_transactions/{transaction}'
    });
};

/**
 * @deprecated
 * <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
 */
export const getCustomersCustomerBankAccounts = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerBankAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerBankAccountsResponse, GetCustomersCustomerBankAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts'
    });
};

/**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
 */
export const postCustomersCustomerBankAccounts = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerBankAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerBankAccountsResponse, PostCustomersCustomerBankAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts'
    });
};

/**
 * <p>Delete a specified source for a given customer.</p>
 */
export const deleteCustomersCustomerBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerBankAccountsIdResponse, DeleteCustomersCustomerBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts/{id}'
    });
};

/**
 * @deprecated
 * <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
 */
export const getCustomersCustomerBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerBankAccountsIdResponse, GetCustomersCustomerBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts/{id}'
    });
};

/**
 * <p>Update a specified source for a given customer.</p>
 */
export const postCustomersCustomerBankAccountsId = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerBankAccountsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerBankAccountsIdResponse, PostCustomersCustomerBankAccountsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts/{id}'
    });
};

/**
 * <p>Verify a specified bank account for a given customer.</p>
 */
export const postCustomersCustomerBankAccountsIdVerify = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerBankAccountsIdVerifyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerBankAccountsIdVerifyResponse, PostCustomersCustomerBankAccountsIdVerifyError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/bank_accounts/{id}/verify'
    });
};

/**
 * @deprecated
 * <p>You can see a list of the cards belonging to a customer.
 * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
 * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
 */
export const getCustomersCustomerCards = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerCardsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerCardsResponse, GetCustomersCustomerCardsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cards'
    });
};

/**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
 */
export const postCustomersCustomerCards = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerCardsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerCardsResponse, PostCustomersCustomerCardsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cards'
    });
};

/**
 * <p>Delete a specified source for a given customer.</p>
 */
export const deleteCustomersCustomerCardsId = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerCardsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerCardsIdResponse, DeleteCustomersCustomerCardsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cards/{id}'
    });
};

/**
 * @deprecated
 * <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
 */
export const getCustomersCustomerCardsId = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerCardsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerCardsIdResponse, GetCustomersCustomerCardsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cards/{id}'
    });
};

/**
 * <p>Update a specified source for a given customer.</p>
 */
export const postCustomersCustomerCardsId = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerCardsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerCardsIdResponse, PostCustomersCustomerCardsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cards/{id}'
    });
};

/**
 * <p>Retrieves a customer’s cash balance.</p>
 */
export const getCustomersCustomerCashBalance = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerCashBalanceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerCashBalanceResponse, GetCustomersCustomerCashBalanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cash_balance'
    });
};

/**
 * <p>Changes the settings on a customer’s cash balance.</p>
 */
export const postCustomersCustomerCashBalance = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerCashBalanceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerCashBalanceResponse, PostCustomersCustomerCashBalanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cash_balance'
    });
};

/**
 * <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
 */
export const getCustomersCustomerCashBalanceTransactions = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerCashBalanceTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerCashBalanceTransactionsResponse, GetCustomersCustomerCashBalanceTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cash_balance_transactions'
    });
};

/**
 * <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
 */
export const getCustomersCustomerCashBalanceTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerCashBalanceTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerCashBalanceTransactionsTransactionResponse, GetCustomersCustomerCashBalanceTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/cash_balance_transactions/{transaction}'
    });
};

/**
 * <p>Removes the currently applied discount on a customer.</p>
 */
export const deleteCustomersCustomerDiscount = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerDiscountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerDiscountResponse, DeleteCustomersCustomerDiscountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/discount'
    });
};

export const getCustomersCustomerDiscount = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerDiscountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerDiscountResponse, GetCustomersCustomerDiscountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/discount'
    });
};

/**
 * <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
 * funding instructions will be created. If funding instructions have already been created for a given customer, the same
 * funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
 */
export const postCustomersCustomerFundingInstructions = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerFundingInstructionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerFundingInstructionsResponse, PostCustomersCustomerFundingInstructionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/funding_instructions'
    });
};

/**
 * <p>Returns a list of PaymentMethods for a given Customer</p>
 */
export const getCustomersCustomerPaymentMethods = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerPaymentMethodsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerPaymentMethodsResponse, GetCustomersCustomerPaymentMethodsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/payment_methods'
    });
};

/**
 * <p>Retrieves a PaymentMethod object for a given Customer.</p>
 */
export const getCustomersCustomerPaymentMethodsPaymentMethod = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerPaymentMethodsPaymentMethodData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerPaymentMethodsPaymentMethodResponse, GetCustomersCustomerPaymentMethodsPaymentMethodError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/payment_methods/{payment_method}'
    });
};

/**
 * <p>List sources for a specified customer.</p>
 */
export const getCustomersCustomerSources = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerSourcesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerSourcesResponse, GetCustomersCustomerSourcesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources'
    });
};

/**
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
 */
export const postCustomersCustomerSources = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerSourcesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerSourcesResponse, PostCustomersCustomerSourcesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources'
    });
};

/**
 * <p>Delete a specified source for a given customer.</p>
 */
export const deleteCustomersCustomerSourcesId = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerSourcesIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerSourcesIdResponse, DeleteCustomersCustomerSourcesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources/{id}'
    });
};

/**
 * <p>Retrieve a specified source for a given customer.</p>
 */
export const getCustomersCustomerSourcesId = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerSourcesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerSourcesIdResponse, GetCustomersCustomerSourcesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources/{id}'
    });
};

/**
 * <p>Update a specified source for a given customer.</p>
 */
export const postCustomersCustomerSourcesId = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerSourcesIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerSourcesIdResponse, PostCustomersCustomerSourcesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources/{id}'
    });
};

/**
 * <p>Verify a specified bank account for a given customer.</p>
 */
export const postCustomersCustomerSourcesIdVerify = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerSourcesIdVerifyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerSourcesIdVerifyResponse, PostCustomersCustomerSourcesIdVerifyError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/sources/{id}/verify'
    });
};

/**
 * <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
 */
export const getCustomersCustomerSubscriptions = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerSubscriptionsResponse, GetCustomersCustomerSubscriptionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions'
    });
};

/**
 * <p>Creates a new subscription on an existing customer.</p>
 */
export const postCustomersCustomerSubscriptions = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerSubscriptionsResponse, PostCustomersCustomerSubscriptionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions'
    });
};

/**
 * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
 *
 * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
 *
 * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
 */
export const deleteCustomersCustomerSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Retrieves the subscription with the given ID.</p>
 */
export const getCustomersCustomerSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, GetCustomersCustomerSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
 */
export const postCustomersCustomerSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerSubscriptionsSubscriptionExposedIdResponse, PostCustomersCustomerSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Removes the currently applied discount on a customer.</p>
 */
export const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse, DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount'
    });
};

export const getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponse, GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount'
    });
};

/**
 * <p>Returns a list of tax IDs for a customer.</p>
 */
export const getCustomersCustomerTaxIds = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerTaxIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerTaxIdsResponse, GetCustomersCustomerTaxIdsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/tax_ids'
    });
};

/**
 * <p>Creates a new <code>tax_id</code> object for a customer.</p>
 */
export const postCustomersCustomerTaxIds = <ThrowOnError extends boolean = false>(options: Options<PostCustomersCustomerTaxIdsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCustomersCustomerTaxIdsResponse, PostCustomersCustomerTaxIdsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/tax_ids'
    });
};

/**
 * <p>Deletes an existing <code>tax_id</code> object.</p>
 */
export const deleteCustomersCustomerTaxIdsId = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomersCustomerTaxIdsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustomersCustomerTaxIdsIdResponse, DeleteCustomersCustomerTaxIdsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/tax_ids/{id}'
    });
};

/**
 * <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
 */
export const getCustomersCustomerTaxIdsId = <ThrowOnError extends boolean = false>(options: Options<GetCustomersCustomerTaxIdsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustomersCustomerTaxIdsIdResponse, GetCustomersCustomerTaxIdsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/customers/{customer}/tax_ids/{id}'
    });
};

/**
 * <p>Returns a list of your disputes.</p>
 */
export const getDisputes = <ThrowOnError extends boolean = false>(options?: Options<GetDisputesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDisputesResponse, GetDisputesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/disputes'
    });
};

/**
 * <p>Retrieves the dispute with the given ID.</p>
 */
export const getDisputesDispute = <ThrowOnError extends boolean = false>(options: Options<GetDisputesDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDisputesDisputeResponse, GetDisputesDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/disputes/{dispute}'
    });
};

/**
 * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
 *
 * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
 */
export const postDisputesDispute = <ThrowOnError extends boolean = false>(options: Options<PostDisputesDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDisputesDisputeResponse, PostDisputesDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/disputes/{dispute}'
    });
};

/**
 * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
 *
 * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
 */
export const postDisputesDisputeClose = <ThrowOnError extends boolean = false>(options: Options<PostDisputesDisputeCloseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDisputesDisputeCloseResponse, PostDisputesDisputeCloseError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/disputes/{dispute}/close'
    });
};

/**
 * <p>Retrieve a list of active entitlements for a customer</p>
 */
export const getEntitlementsActiveEntitlements = <ThrowOnError extends boolean = false>(options: Options<GetEntitlementsActiveEntitlementsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEntitlementsActiveEntitlementsResponse, GetEntitlementsActiveEntitlementsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/active_entitlements'
    });
};

/**
 * <p>Retrieve an active entitlement</p>
 */
export const getEntitlementsActiveEntitlementsId = <ThrowOnError extends boolean = false>(options: Options<GetEntitlementsActiveEntitlementsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEntitlementsActiveEntitlementsIdResponse, GetEntitlementsActiveEntitlementsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/active_entitlements/{id}'
    });
};

/**
 * <p>Retrieve a list of features</p>
 */
export const getEntitlementsFeatures = <ThrowOnError extends boolean = false>(options?: Options<GetEntitlementsFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEntitlementsFeaturesResponse, GetEntitlementsFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/features'
    });
};

/**
 * <p>Creates a feature</p>
 */
export const postEntitlementsFeatures = <ThrowOnError extends boolean = false>(options: Options<PostEntitlementsFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostEntitlementsFeaturesResponse, PostEntitlementsFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/features'
    });
};

/**
 * <p>Retrieves a feature</p>
 */
export const getEntitlementsFeaturesId = <ThrowOnError extends boolean = false>(options: Options<GetEntitlementsFeaturesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEntitlementsFeaturesIdResponse, GetEntitlementsFeaturesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/features/{id}'
    });
};

/**
 * <p>Update a feature’s metadata or permanently deactivate it.</p>
 */
export const postEntitlementsFeaturesId = <ThrowOnError extends boolean = false>(options: Options<PostEntitlementsFeaturesIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostEntitlementsFeaturesIdResponse, PostEntitlementsFeaturesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/entitlements/features/{id}'
    });
};

/**
 * <p>Creates a short-lived API key for a given resource.</p>
 */
export const postEphemeralKeys = <ThrowOnError extends boolean = false>(options?: Options<PostEphemeralKeysData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostEphemeralKeysResponse, PostEphemeralKeysError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/ephemeral_keys'
    });
};

/**
 * <p>Invalidates a short-lived API key for a given resource.</p>
 */
export const deleteEphemeralKeysKey = <ThrowOnError extends boolean = false>(options: Options<DeleteEphemeralKeysKeyData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteEphemeralKeysKeyResponse, DeleteEphemeralKeysKeyError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/ephemeral_keys/{key}'
    });
};

/**
 * <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
 */
export const getEvents = <ThrowOnError extends boolean = false>(options?: Options<GetEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsResponse, GetEventsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/events'
    });
};

/**
 * <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
 */
export const getEventsId = <ThrowOnError extends boolean = false>(options: Options<GetEventsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsIdResponse, GetEventsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/events/{id}'
    });
};

/**
 * <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
 */
export const getExchangeRates = <ThrowOnError extends boolean = false>(options?: Options<GetExchangeRatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetExchangeRatesResponse, GetExchangeRatesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/exchange_rates'
    });
};

/**
 * <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
 */
export const getExchangeRatesRateId = <ThrowOnError extends boolean = false>(options: Options<GetExchangeRatesRateIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetExchangeRatesRateIdResponse, GetExchangeRatesRateIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/exchange_rates/{rate_id}'
    });
};

/**
 * <p>Returns a list of file links.</p>
 */
export const getFileLinks = <ThrowOnError extends boolean = false>(options?: Options<GetFileLinksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileLinksResponse, GetFileLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/file_links'
    });
};

/**
 * <p>Creates a new file link object.</p>
 */
export const postFileLinks = <ThrowOnError extends boolean = false>(options: Options<PostFileLinksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFileLinksResponse, PostFileLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/file_links'
    });
};

/**
 * <p>Retrieves the file link with the given ID.</p>
 */
export const getFileLinksLink = <ThrowOnError extends boolean = false>(options: Options<GetFileLinksLinkData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFileLinksLinkResponse, GetFileLinksLinkError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/file_links/{link}'
    });
};

/**
 * <p>Updates an existing file link object. Expired links can no longer be updated.</p>
 */
export const postFileLinksLink = <ThrowOnError extends boolean = false>(options: Options<PostFileLinksLinkData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFileLinksLinkResponse, PostFileLinksLinkError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/file_links/{link}'
    });
};

/**
 * <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
 */
export const getFiles = <ThrowOnError extends boolean = false>(options?: Options<GetFilesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFilesResponse, GetFilesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/files'
    });
};

/**
 * <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
 *
 * <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
 */
export const postFiles = <ThrowOnError extends boolean = false>(options: Options<PostFilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFilesResponse, PostFilesError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/v1/files'
    });
};

/**
 * <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
 */
export const getFilesFile = <ThrowOnError extends boolean = false>(options: Options<GetFilesFileData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFilesFileResponse, GetFilesFileError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/files/{file}'
    });
};

/**
 * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
 */
export const getFinancialConnectionsAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetFinancialConnectionsAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsAccountsResponse, GetFinancialConnectionsAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts'
    });
};

/**
 * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
 */
export const getFinancialConnectionsAccountsAccount = <ThrowOnError extends boolean = false>(options: Options<GetFinancialConnectionsAccountsAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsAccountsAccountResponse, GetFinancialConnectionsAccountsAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}'
    });
};

/**
 * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
 */
export const postFinancialConnectionsAccountsAccountDisconnect = <ThrowOnError extends boolean = false>(options: Options<PostFinancialConnectionsAccountsAccountDisconnectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFinancialConnectionsAccountsAccountDisconnectResponse, PostFinancialConnectionsAccountsAccountDisconnectError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}/disconnect'
    });
};

/**
 * <p>Lists all owners for a given <code>Account</code></p>
 */
export const getFinancialConnectionsAccountsAccountOwners = <ThrowOnError extends boolean = false>(options: Options<GetFinancialConnectionsAccountsAccountOwnersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsAccountsAccountOwnersResponse, GetFinancialConnectionsAccountsAccountOwnersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}/owners'
    });
};

/**
 * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
 */
export const postFinancialConnectionsAccountsAccountRefresh = <ThrowOnError extends boolean = false>(options: Options<PostFinancialConnectionsAccountsAccountRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFinancialConnectionsAccountsAccountRefreshResponse, PostFinancialConnectionsAccountsAccountRefreshError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}/refresh'
    });
};

/**
 * <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
 */
export const postFinancialConnectionsAccountsAccountSubscribe = <ThrowOnError extends boolean = false>(options: Options<PostFinancialConnectionsAccountsAccountSubscribeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFinancialConnectionsAccountsAccountSubscribeResponse, PostFinancialConnectionsAccountsAccountSubscribeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}/subscribe'
    });
};

/**
 * <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
 */
export const postFinancialConnectionsAccountsAccountUnsubscribe = <ThrowOnError extends boolean = false>(options: Options<PostFinancialConnectionsAccountsAccountUnsubscribeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFinancialConnectionsAccountsAccountUnsubscribeResponse, PostFinancialConnectionsAccountsAccountUnsubscribeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/accounts/{account}/unsubscribe'
    });
};

/**
 * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
 */
export const postFinancialConnectionsSessions = <ThrowOnError extends boolean = false>(options: Options<PostFinancialConnectionsSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFinancialConnectionsSessionsResponse, PostFinancialConnectionsSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/sessions'
    });
};

/**
 * <p>Retrieves the details of a Financial Connections <code>Session</code></p>
 */
export const getFinancialConnectionsSessionsSession = <ThrowOnError extends boolean = false>(options: Options<GetFinancialConnectionsSessionsSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsSessionsSessionResponse, GetFinancialConnectionsSessionsSessionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/sessions/{session}'
    });
};

/**
 * <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
 */
export const getFinancialConnectionsTransactions = <ThrowOnError extends boolean = false>(options: Options<GetFinancialConnectionsTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsTransactionsResponse, GetFinancialConnectionsTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/transactions'
    });
};

/**
 * <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
 */
export const getFinancialConnectionsTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<GetFinancialConnectionsTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFinancialConnectionsTransactionsTransactionResponse, GetFinancialConnectionsTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/financial_connections/transactions/{transaction}'
    });
};

/**
 * <p>Lists all ForwardingRequest objects.</p>
 */
export const getForwardingRequests = <ThrowOnError extends boolean = false>(options?: Options<GetForwardingRequestsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForwardingRequestsResponse, GetForwardingRequestsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/forwarding/requests'
    });
};

/**
 * <p>Creates a ForwardingRequest object.</p>
 */
export const postForwardingRequests = <ThrowOnError extends boolean = false>(options: Options<PostForwardingRequestsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostForwardingRequestsResponse, PostForwardingRequestsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/forwarding/requests'
    });
};

/**
 * <p>Retrieves a ForwardingRequest object.</p>
 */
export const getForwardingRequestsId = <ThrowOnError extends boolean = false>(options: Options<GetForwardingRequestsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetForwardingRequestsIdResponse, GetForwardingRequestsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/forwarding/requests/{id}'
    });
};

/**
 * <p>List all verification reports.</p>
 */
export const getIdentityVerificationReports = <ThrowOnError extends boolean = false>(options?: Options<GetIdentityVerificationReportsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIdentityVerificationReportsResponse, GetIdentityVerificationReportsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_reports'
    });
};

/**
 * <p>Retrieves an existing VerificationReport</p>
 */
export const getIdentityVerificationReportsReport = <ThrowOnError extends boolean = false>(options: Options<GetIdentityVerificationReportsReportData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIdentityVerificationReportsReportResponse, GetIdentityVerificationReportsReportError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_reports/{report}'
    });
};

/**
 * <p>Returns a list of VerificationSessions</p>
 */
export const getIdentityVerificationSessions = <ThrowOnError extends boolean = false>(options?: Options<GetIdentityVerificationSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIdentityVerificationSessionsResponse, GetIdentityVerificationSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions'
    });
};

/**
 * <p>Creates a VerificationSession object.</p>
 *
 * <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
 *
 * <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
 *
 * <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
 */
export const postIdentityVerificationSessions = <ThrowOnError extends boolean = false>(options?: Options<PostIdentityVerificationSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIdentityVerificationSessionsResponse, PostIdentityVerificationSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions'
    });
};

/**
 * <p>Retrieves the details of a VerificationSession that was previously created.</p>
 *
 * <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
 * <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
 */
export const getIdentityVerificationSessionsSession = <ThrowOnError extends boolean = false>(options: Options<GetIdentityVerificationSessionsSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIdentityVerificationSessionsSessionResponse, GetIdentityVerificationSessionsSessionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions/{session}'
    });
};

/**
 * <p>Updates a VerificationSession object.</p>
 *
 * <p>When the session status is <code>requires_input</code>, you can use this method to update the
 * verification check and options.</p>
 */
export const postIdentityVerificationSessionsSession = <ThrowOnError extends boolean = false>(options: Options<PostIdentityVerificationSessionsSessionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIdentityVerificationSessionsSessionResponse, PostIdentityVerificationSessionsSessionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions/{session}'
    });
};

/**
 * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
 *
 * <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
 */
export const postIdentityVerificationSessionsSessionCancel = <ThrowOnError extends boolean = false>(options: Options<PostIdentityVerificationSessionsSessionCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIdentityVerificationSessionsSessionCancelResponse, PostIdentityVerificationSessionsSessionCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions/{session}/cancel'
    });
};

/**
 * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
 * the VerificationSession and all objects related to it, including VerificationReports, Events,
 * request logs, etc.</p>
 *
 * <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
 * <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
 * state will automatically cancel it.</p>
 *
 * <p>The redaction process may take up to four days. When the redaction process is in progress, the
 * VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
 * finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
 * will be emitted.</p>
 *
 * <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
 * fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
 * placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
 * used for any purpose.</p>
 *
 * <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
 */
export const postIdentityVerificationSessionsSessionRedact = <ThrowOnError extends boolean = false>(options: Options<PostIdentityVerificationSessionsSessionRedactData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIdentityVerificationSessionsSessionRedactResponse, PostIdentityVerificationSessionsSessionRedactError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/identity/verification_sessions/{session}/redact'
    });
};

/**
 * <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
 */
export const getInvoiceitems = <ThrowOnError extends boolean = false>(options?: Options<GetInvoiceitemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoiceitemsResponse, GetInvoiceitemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoiceitems'
    });
};

/**
 * <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
 */
export const postInvoiceitems = <ThrowOnError extends boolean = false>(options: Options<PostInvoiceitemsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoiceitemsResponse, PostInvoiceitemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoiceitems'
    });
};

/**
 * <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
 */
export const deleteInvoiceitemsInvoiceitem = <ThrowOnError extends boolean = false>(options: Options<DeleteInvoiceitemsInvoiceitemData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteInvoiceitemsInvoiceitemResponse, DeleteInvoiceitemsInvoiceitemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoiceitems/{invoiceitem}'
    });
};

/**
 * <p>Retrieves the invoice item with the given ID.</p>
 */
export const getInvoiceitemsInvoiceitem = <ThrowOnError extends boolean = false>(options: Options<GetInvoiceitemsInvoiceitemData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoiceitemsInvoiceitemResponse, GetInvoiceitemsInvoiceitemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoiceitems/{invoiceitem}'
    });
};

/**
 * <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
 */
export const postInvoiceitemsInvoiceitem = <ThrowOnError extends boolean = false>(options: Options<PostInvoiceitemsInvoiceitemData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoiceitemsInvoiceitemResponse, PostInvoiceitemsInvoiceitemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoiceitems/{invoiceitem}'
    });
};

/**
 * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
 */
export const getInvoices = <ThrowOnError extends boolean = false>(options?: Options<GetInvoicesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesResponse, GetInvoicesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices'
    });
};

/**
 * <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
 */
export const postInvoices = <ThrowOnError extends boolean = false>(options?: Options<PostInvoicesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesResponse, PostInvoicesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices'
    });
};

/**
 * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
 *
 * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
 *
 * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
 *
 * <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
 */
export const postInvoicesCreatePreview = <ThrowOnError extends boolean = false>(options?: Options<PostInvoicesCreatePreviewData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesCreatePreviewResponse, PostInvoicesCreatePreviewError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/create_preview'
    });
};

/**
 * <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getInvoicesSearch = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesSearchResponse, GetInvoicesSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/search'
    });
};

/**
 * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
 *
 * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
 *
 * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
 *
 * <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
 */
export const getInvoicesUpcoming = <ThrowOnError extends boolean = false>(options?: Options<GetInvoicesUpcomingData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesUpcomingResponse, GetInvoicesUpcomingError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/upcoming'
    });
};

/**
 * <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getInvoicesUpcomingLines = <ThrowOnError extends boolean = false>(options?: Options<GetInvoicesUpcomingLinesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesUpcomingLinesResponse, GetInvoicesUpcomingLinesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/upcoming/lines'
    });
};

/**
 * <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
 */
export const deleteInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<DeleteInvoicesInvoiceData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteInvoicesInvoiceResponse, DeleteInvoicesInvoiceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}'
    });
};

/**
 * <p>Retrieves the invoice with the given ID.</p>
 */
export const getInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesInvoiceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesInvoiceResponse, GetInvoicesInvoiceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}'
    });
};

/**
 * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
 * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
 *
 * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
 * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
 * <code>auto_advance=false</code>.</p>
 */
export const postInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceResponse, PostInvoicesInvoiceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}'
    });
};

/**
 * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
 */
export const postInvoicesInvoiceFinalize = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceFinalizeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceFinalizeResponse, PostInvoicesInvoiceFinalizeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/finalize'
    });
};

/**
 * <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getInvoicesInvoiceLines = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesInvoiceLinesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetInvoicesInvoiceLinesResponse, GetInvoicesInvoiceLinesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/lines'
    });
};

/**
 * <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
 * so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
 * item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
 * Updating an invoice’s line item is only possible before the invoice is finalized.</p>
 */
export const postInvoicesInvoiceLinesLineItemId = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceLinesLineItemIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceLinesLineItemIdResponse, PostInvoicesInvoiceLinesLineItemIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/lines/{line_item_id}'
    });
};

/**
 * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
 */
export const postInvoicesInvoiceMarkUncollectible = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceMarkUncollectibleData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceMarkUncollectibleResponse, PostInvoicesInvoiceMarkUncollectibleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/mark_uncollectible'
    });
};

/**
 * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
 */
export const postInvoicesInvoicePay = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoicePayData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoicePayResponse, PostInvoicesInvoicePayError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/pay'
    });
};

/**
 * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
 *
 * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
 */
export const postInvoicesInvoiceSend = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceSendData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceSendResponse, PostInvoicesInvoiceSendError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/send'
    });
};

/**
 * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
 *
 * <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
 */
export const postInvoicesInvoiceVoid = <ThrowOnError extends boolean = false>(options: Options<PostInvoicesInvoiceVoidData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostInvoicesInvoiceVoidResponse, PostInvoicesInvoiceVoidError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/invoices/{invoice}/void'
    });
};

/**
 * <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingAuthorizations = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingAuthorizationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingAuthorizationsResponse, GetIssuingAuthorizationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/authorizations'
    });
};

/**
 * <p>Retrieves an Issuing <code>Authorization</code> object.</p>
 */
export const getIssuingAuthorizationsAuthorization = <ThrowOnError extends boolean = false>(options: Options<GetIssuingAuthorizationsAuthorizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingAuthorizationsAuthorizationResponse, GetIssuingAuthorizationsAuthorizationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/authorizations/{authorization}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postIssuingAuthorizationsAuthorization = <ThrowOnError extends boolean = false>(options: Options<PostIssuingAuthorizationsAuthorizationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingAuthorizationsAuthorizationResponse, PostIssuingAuthorizationsAuthorizationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/authorizations/{authorization}'
    });
};

/**
 * @deprecated
 * <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.
 * This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
 */
export const postIssuingAuthorizationsAuthorizationApprove = <ThrowOnError extends boolean = false>(options: Options<PostIssuingAuthorizationsAuthorizationApproveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingAuthorizationsAuthorizationApproveResponse, PostIssuingAuthorizationsAuthorizationApproveError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/authorizations/{authorization}/approve'
    });
};

/**
 * @deprecated
 * <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
 * This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
 */
export const postIssuingAuthorizationsAuthorizationDecline = <ThrowOnError extends boolean = false>(options: Options<PostIssuingAuthorizationsAuthorizationDeclineData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingAuthorizationsAuthorizationDeclineResponse, PostIssuingAuthorizationsAuthorizationDeclineError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/authorizations/{authorization}/decline'
    });
};

/**
 * <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingCardholders = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingCardholdersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingCardholdersResponse, GetIssuingCardholdersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cardholders'
    });
};

/**
 * <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
 */
export const postIssuingCardholders = <ThrowOnError extends boolean = false>(options: Options<PostIssuingCardholdersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingCardholdersResponse, PostIssuingCardholdersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cardholders'
    });
};

/**
 * <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
 */
export const getIssuingCardholdersCardholder = <ThrowOnError extends boolean = false>(options: Options<GetIssuingCardholdersCardholderData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingCardholdersCardholderResponse, GetIssuingCardholdersCardholderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cardholders/{cardholder}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postIssuingCardholdersCardholder = <ThrowOnError extends boolean = false>(options: Options<PostIssuingCardholdersCardholderData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingCardholdersCardholderResponse, PostIssuingCardholdersCardholderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cardholders/{cardholder}'
    });
};

/**
 * <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingCards = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingCardsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingCardsResponse, GetIssuingCardsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cards'
    });
};

/**
 * <p>Creates an Issuing <code>Card</code> object.</p>
 */
export const postIssuingCards = <ThrowOnError extends boolean = false>(options: Options<PostIssuingCardsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingCardsResponse, PostIssuingCardsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cards'
    });
};

/**
 * <p>Retrieves an Issuing <code>Card</code> object.</p>
 */
export const getIssuingCardsCard = <ThrowOnError extends boolean = false>(options: Options<GetIssuingCardsCardData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingCardsCardResponse, GetIssuingCardsCardError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cards/{card}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postIssuingCardsCard = <ThrowOnError extends boolean = false>(options: Options<PostIssuingCardsCardData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingCardsCardResponse, PostIssuingCardsCardError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/cards/{card}'
    });
};

/**
 * <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingDisputes = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingDisputesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingDisputesResponse, GetIssuingDisputesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/disputes'
    });
};

/**
 * <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
 */
export const postIssuingDisputes = <ThrowOnError extends boolean = false>(options?: Options<PostIssuingDisputesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingDisputesResponse, PostIssuingDisputesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/disputes'
    });
};

/**
 * <p>Retrieves an Issuing <code>Dispute</code> object.</p>
 */
export const getIssuingDisputesDispute = <ThrowOnError extends boolean = false>(options: Options<GetIssuingDisputesDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingDisputesDisputeResponse, GetIssuingDisputesDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/disputes/{dispute}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
 */
export const postIssuingDisputesDispute = <ThrowOnError extends boolean = false>(options: Options<PostIssuingDisputesDisputeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingDisputesDisputeResponse, PostIssuingDisputesDisputeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/disputes/{dispute}'
    });
};

/**
 * <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
 */
export const postIssuingDisputesDisputeSubmit = <ThrowOnError extends boolean = false>(options: Options<PostIssuingDisputesDisputeSubmitData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingDisputesDisputeSubmitResponse, PostIssuingDisputesDisputeSubmitError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/disputes/{dispute}/submit'
    });
};

/**
 * <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingPersonalizationDesigns = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingPersonalizationDesignsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingPersonalizationDesignsResponse, GetIssuingPersonalizationDesignsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/personalization_designs'
    });
};

/**
 * <p>Creates a personalization design object.</p>
 */
export const postIssuingPersonalizationDesigns = <ThrowOnError extends boolean = false>(options: Options<PostIssuingPersonalizationDesignsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingPersonalizationDesignsResponse, PostIssuingPersonalizationDesignsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/personalization_designs'
    });
};

/**
 * <p>Retrieves a personalization design object.</p>
 */
export const getIssuingPersonalizationDesignsPersonalizationDesign = <ThrowOnError extends boolean = false>(options: Options<GetIssuingPersonalizationDesignsPersonalizationDesignData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingPersonalizationDesignsPersonalizationDesignResponse, GetIssuingPersonalizationDesignsPersonalizationDesignError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/personalization_designs/{personalization_design}'
    });
};

/**
 * <p>Updates a card personalization object.</p>
 */
export const postIssuingPersonalizationDesignsPersonalizationDesign = <ThrowOnError extends boolean = false>(options: Options<PostIssuingPersonalizationDesignsPersonalizationDesignData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingPersonalizationDesignsPersonalizationDesignResponse, PostIssuingPersonalizationDesignsPersonalizationDesignError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/personalization_designs/{personalization_design}'
    });
};

/**
 * <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingPhysicalBundles = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingPhysicalBundlesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingPhysicalBundlesResponse, GetIssuingPhysicalBundlesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/physical_bundles'
    });
};

/**
 * <p>Retrieves a physical bundle object.</p>
 */
export const getIssuingPhysicalBundlesPhysicalBundle = <ThrowOnError extends boolean = false>(options: Options<GetIssuingPhysicalBundlesPhysicalBundleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingPhysicalBundlesPhysicalBundleResponse, GetIssuingPhysicalBundlesPhysicalBundleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/physical_bundles/{physical_bundle}'
    });
};

/**
 * <p>Retrieves an Issuing <code>Settlement</code> object.</p>
 */
export const getIssuingSettlementsSettlement = <ThrowOnError extends boolean = false>(options: Options<GetIssuingSettlementsSettlementData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingSettlementsSettlementResponse, GetIssuingSettlementsSettlementError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/settlements/{settlement}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postIssuingSettlementsSettlement = <ThrowOnError extends boolean = false>(options: Options<PostIssuingSettlementsSettlementData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingSettlementsSettlementResponse, PostIssuingSettlementsSettlementError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/settlements/{settlement}'
    });
};

/**
 * <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
 */
export const getIssuingTokens = <ThrowOnError extends boolean = false>(options: Options<GetIssuingTokensData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingTokensResponse, GetIssuingTokensError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/tokens'
    });
};

/**
 * <p>Retrieves an Issuing <code>Token</code> object.</p>
 */
export const getIssuingTokensToken = <ThrowOnError extends boolean = false>(options: Options<GetIssuingTokensTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingTokensTokenResponse, GetIssuingTokensTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/tokens/{token}'
    });
};

/**
 * <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
 */
export const postIssuingTokensToken = <ThrowOnError extends boolean = false>(options: Options<PostIssuingTokensTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingTokensTokenResponse, PostIssuingTokensTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/tokens/{token}'
    });
};

/**
 * <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getIssuingTransactions = <ThrowOnError extends boolean = false>(options?: Options<GetIssuingTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingTransactionsResponse, GetIssuingTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/transactions'
    });
};

/**
 * <p>Retrieves an Issuing <code>Transaction</code> object.</p>
 */
export const getIssuingTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<GetIssuingTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIssuingTransactionsTransactionResponse, GetIssuingTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/transactions/{transaction}'
    });
};

/**
 * <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postIssuingTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<PostIssuingTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostIssuingTransactionsTransactionResponse, PostIssuingTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/issuing/transactions/{transaction}'
    });
};

/**
 * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
 */
export const postLinkAccountSessions = <ThrowOnError extends boolean = false>(options: Options<PostLinkAccountSessionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinkAccountSessionsResponse, PostLinkAccountSessionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/link_account_sessions'
    });
};

/**
 * <p>Retrieves the details of a Financial Connections <code>Session</code></p>
 */
export const getLinkAccountSessionsSession = <ThrowOnError extends boolean = false>(options: Options<GetLinkAccountSessionsSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkAccountSessionsSessionResponse, GetLinkAccountSessionsSessionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/link_account_sessions/{session}'
    });
};

/**
 * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
 */
export const getLinkedAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetLinkedAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkedAccountsResponse, GetLinkedAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/linked_accounts'
    });
};

/**
 * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
 */
export const getLinkedAccountsAccount = <ThrowOnError extends boolean = false>(options: Options<GetLinkedAccountsAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkedAccountsAccountResponse, GetLinkedAccountsAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/linked_accounts/{account}'
    });
};

/**
 * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
 */
export const postLinkedAccountsAccountDisconnect = <ThrowOnError extends boolean = false>(options: Options<PostLinkedAccountsAccountDisconnectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinkedAccountsAccountDisconnectResponse, PostLinkedAccountsAccountDisconnectError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/linked_accounts/{account}/disconnect'
    });
};

/**
 * <p>Lists all owners for a given <code>Account</code></p>
 */
export const getLinkedAccountsAccountOwners = <ThrowOnError extends boolean = false>(options: Options<GetLinkedAccountsAccountOwnersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkedAccountsAccountOwnersResponse, GetLinkedAccountsAccountOwnersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/linked_accounts/{account}/owners'
    });
};

/**
 * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
 */
export const postLinkedAccountsAccountRefresh = <ThrowOnError extends boolean = false>(options: Options<PostLinkedAccountsAccountRefreshData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinkedAccountsAccountRefreshResponse, PostLinkedAccountsAccountRefreshError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/linked_accounts/{account}/refresh'
    });
};

/**
 * <p>Retrieves a Mandate object.</p>
 */
export const getMandatesMandate = <ThrowOnError extends boolean = false>(options: Options<GetMandatesMandateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMandatesMandateResponse, GetMandatesMandateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/mandates/{mandate}'
    });
};

/**
 * <p>Returns a list of PaymentIntents.</p>
 */
export const getPaymentIntents = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentIntentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentIntentsResponse, GetPaymentIntentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents'
    });
};

/**
 * <p>Creates a PaymentIntent object.</p>
 *
 * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
 * to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
 * with the Payment Intents API</a>.</p>
 *
 * <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
 * and confirming the PaymentIntent in the same call. You can use any parameters
 * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
 * <code>confirm=true</code>.</p>
 */
export const postPaymentIntents = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsResponse, PostPaymentIntentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents'
    });
};

/**
 * <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getPaymentIntentsSearch = <ThrowOnError extends boolean = false>(options: Options<GetPaymentIntentsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentIntentsSearchResponse, GetPaymentIntentsSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/search'
    });
};

/**
 * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
 *
 * <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
 *
 * <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
 */
export const getPaymentIntentsIntent = <ThrowOnError extends boolean = false>(options: Options<GetPaymentIntentsIntentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentIntentsIntentResponse, GetPaymentIntentsIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}'
    });
};

/**
 * <p>Updates properties on a PaymentIntent object without confirming.</p>
 *
 * <p>Depending on which properties you update, you might need to confirm the
 * PaymentIntent again. For example, updating the <code>payment_method</code>
 * always requires you to confirm the PaymentIntent again. If you prefer to
 * update and confirm at the same time, we recommend updating properties through
 * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
 */
export const postPaymentIntentsIntent = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentResponse, PostPaymentIntentsIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}'
    });
};

/**
 * <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
 */
export const postPaymentIntentsIntentApplyCustomerBalance = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentApplyCustomerBalanceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentApplyCustomerBalanceResponse, PostPaymentIntentsIntentApplyCustomerBalanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/apply_customer_balance'
    });
};

/**
 * <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
 *
 * <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
 *
 * <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
 */
export const postPaymentIntentsIntentCancel = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentCancelResponse, PostPaymentIntentsIntentCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/cancel'
    });
};

/**
 * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
 *
 * <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
 *
 * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
 */
export const postPaymentIntentsIntentCapture = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentCaptureData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentCaptureResponse, PostPaymentIntentsIntentCaptureError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/capture'
    });
};

/**
 * <p>Confirm that your customer intends to pay with current or provided
 * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
 * a payment.
 * If the selected payment method requires additional authentication steps, the
 * PaymentIntent will transition to the <code>requires_action</code> status and
 * suggest additional actions via <code>next_action</code>. If payment fails,
 * the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
 * <code>canceled</code> status if the confirmation limit is reached. If
 * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
 * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
 * If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
 * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
 * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
 * After <code>next_action</code>s are handled by the client, no additional
 * confirmation is required to complete the payment.
 * If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
 * initiated using a secret key.
 * If any actions are required for the payment, the PaymentIntent will
 * return to the <code>requires_confirmation</code> state
 * after those actions are completed. Your server needs to then
 * explicitly re-confirm the PaymentIntent to initiate the next payment
 * attempt.</p>
 */
export const postPaymentIntentsIntentConfirm = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentConfirmData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentConfirmResponse, PostPaymentIntentsIntentConfirmError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/confirm'
    });
};

/**
 * <p>Perform an incremental authorization on an eligible
 * <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
 * PaymentIntent’s status must be <code>requires_capture</code> and
 * <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
 * must be <code>true</code>.</p>
 *
 * <p>Incremental authorizations attempt to increase the authorized amount on
 * your customer’s card to the new, higher <code>amount</code> provided. Similar to the
 * initial authorization, incremental authorizations can be declined. A
 * single PaymentIntent can call this endpoint multiple times to further
 * increase the authorized amount.</p>
 *
 * <p>If the incremental authorization succeeds, the PaymentIntent object
 * returns with the updated
 * <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
 * If the incremental authorization fails, a
 * <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
 * fields on the PaymentIntent or Charge update. The PaymentIntent
 * object remains capturable for the previously authorized amount.</p>
 *
 * <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
 * After it’s captured, a PaymentIntent can no longer be incremented.</p>
 *
 * <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
 */
export const postPaymentIntentsIntentIncrementAuthorization = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentIncrementAuthorizationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentIncrementAuthorizationResponse, PostPaymentIntentsIntentIncrementAuthorizationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/increment_authorization'
    });
};

/**
 * <p>Verifies microdeposits on a PaymentIntent object.</p>
 */
export const postPaymentIntentsIntentVerifyMicrodeposits = <ThrowOnError extends boolean = false>(options: Options<PostPaymentIntentsIntentVerifyMicrodepositsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentIntentsIntentVerifyMicrodepositsResponse, PostPaymentIntentsIntentVerifyMicrodepositsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_intents/{intent}/verify_microdeposits'
    });
};

/**
 * <p>Returns a list of your payment links.</p>
 */
export const getPaymentLinks = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentLinksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentLinksResponse, GetPaymentLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_links'
    });
};

/**
 * <p>Creates a payment link.</p>
 */
export const postPaymentLinks = <ThrowOnError extends boolean = false>(options: Options<PostPaymentLinksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentLinksResponse, PostPaymentLinksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_links'
    });
};

/**
 * <p>Retrieve a payment link.</p>
 */
export const getPaymentLinksPaymentLink = <ThrowOnError extends boolean = false>(options: Options<GetPaymentLinksPaymentLinkData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentLinksPaymentLinkResponse, GetPaymentLinksPaymentLinkError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_links/{payment_link}'
    });
};

/**
 * <p>Updates a payment link.</p>
 */
export const postPaymentLinksPaymentLink = <ThrowOnError extends boolean = false>(options: Options<PostPaymentLinksPaymentLinkData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentLinksPaymentLinkResponse, PostPaymentLinksPaymentLinkError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_links/{payment_link}'
    });
};

/**
 * <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getPaymentLinksPaymentLinkLineItems = <ThrowOnError extends boolean = false>(options: Options<GetPaymentLinksPaymentLinkLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentLinksPaymentLinkLineItemsResponse, GetPaymentLinksPaymentLinkLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_links/{payment_link}/line_items'
    });
};

/**
 * <p>List payment method configurations</p>
 */
export const getPaymentMethodConfigurations = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentMethodConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodConfigurationsResponse, GetPaymentMethodConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_configurations'
    });
};

/**
 * <p>Creates a payment method configuration</p>
 */
export const postPaymentMethodConfigurations = <ThrowOnError extends boolean = false>(options?: Options<PostPaymentMethodConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodConfigurationsResponse, PostPaymentMethodConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_configurations'
    });
};

/**
 * <p>Retrieve payment method configuration</p>
 */
export const getPaymentMethodConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetPaymentMethodConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodConfigurationsConfigurationResponse, GetPaymentMethodConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_configurations/{configuration}'
    });
};

/**
 * <p>Update payment method configuration</p>
 */
export const postPaymentMethodConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodConfigurationsConfigurationResponse, PostPaymentMethodConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_configurations/{configuration}'
    });
};

/**
 * <p>Lists the details of existing payment method domains.</p>
 */
export const getPaymentMethodDomains = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentMethodDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodDomainsResponse, GetPaymentMethodDomainsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_domains'
    });
};

/**
 * <p>Creates a payment method domain.</p>
 */
export const postPaymentMethodDomains = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodDomainsResponse, PostPaymentMethodDomainsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_domains'
    });
};

/**
 * <p>Retrieves the details of an existing payment method domain.</p>
 */
export const getPaymentMethodDomainsPaymentMethodDomain = <ThrowOnError extends boolean = false>(options: Options<GetPaymentMethodDomainsPaymentMethodDomainData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodDomainsPaymentMethodDomainResponse, GetPaymentMethodDomainsPaymentMethodDomainError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_domains/{payment_method_domain}'
    });
};

/**
 * <p>Updates an existing payment method domain.</p>
 */
export const postPaymentMethodDomainsPaymentMethodDomain = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodDomainsPaymentMethodDomainData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodDomainsPaymentMethodDomainResponse, PostPaymentMethodDomainsPaymentMethodDomainError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_domains/{payment_method_domain}'
    });
};

/**
 * <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
 * The payment method doesn’t appear in Elements for this domain until it is active.</p>
 *
 * <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
 *
 * <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
 */
export const postPaymentMethodDomainsPaymentMethodDomainValidate = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodDomainsPaymentMethodDomainValidateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodDomainsPaymentMethodDomainValidateResponse, PostPaymentMethodDomainsPaymentMethodDomainValidateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_method_domains/{payment_method_domain}/validate'
    });
};

/**
 * <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
 */
export const getPaymentMethods = <ThrowOnError extends boolean = false>(options?: Options<GetPaymentMethodsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodsResponse, GetPaymentMethodsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods'
    });
};

/**
 * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
 *
 * <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
 */
export const postPaymentMethods = <ThrowOnError extends boolean = false>(options?: Options<PostPaymentMethodsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodsResponse, PostPaymentMethodsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods'
    });
};

/**
 * <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
 */
export const getPaymentMethodsPaymentMethod = <ThrowOnError extends boolean = false>(options: Options<GetPaymentMethodsPaymentMethodData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPaymentMethodsPaymentMethodResponse, GetPaymentMethodsPaymentMethodError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods/{payment_method}'
    });
};

/**
 * <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
 */
export const postPaymentMethodsPaymentMethod = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodsPaymentMethodData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodsPaymentMethodResponse, PostPaymentMethodsPaymentMethodError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods/{payment_method}'
    });
};

/**
 * <p>Attaches a PaymentMethod object to a Customer.</p>
 *
 * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
 * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
 * These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
 * endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
 * future use, which makes later declines and payment friction more likely.
 * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
 * future payments.</p>
 *
 * <p>To use this PaymentMethod as the default for invoice or subscription payments,
 * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
 * on the Customer to the PaymentMethod’s ID.</p>
 */
export const postPaymentMethodsPaymentMethodAttach = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodsPaymentMethodAttachData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodsPaymentMethodAttachResponse, PostPaymentMethodsPaymentMethodAttachError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods/{payment_method}/attach'
    });
};

/**
 * <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
 */
export const postPaymentMethodsPaymentMethodDetach = <ThrowOnError extends boolean = false>(options: Options<PostPaymentMethodsPaymentMethodDetachData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPaymentMethodsPaymentMethodDetachResponse, PostPaymentMethodsPaymentMethodDetachError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payment_methods/{payment_method}/detach'
    });
};

/**
 * <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
 */
export const getPayouts = <ThrowOnError extends boolean = false>(options?: Options<GetPayoutsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPayoutsResponse, GetPayoutsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts'
    });
};

/**
 * <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
 *
 * <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
 *
 * <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
 */
export const postPayouts = <ThrowOnError extends boolean = false>(options: Options<PostPayoutsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPayoutsResponse, PostPayoutsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts'
    });
};

/**
 * <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
 */
export const getPayoutsPayout = <ThrowOnError extends boolean = false>(options: Options<GetPayoutsPayoutData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPayoutsPayoutResponse, GetPayoutsPayoutError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts/{payout}'
    });
};

/**
 * <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
 */
export const postPayoutsPayout = <ThrowOnError extends boolean = false>(options: Options<PostPayoutsPayoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPayoutsPayoutResponse, PostPayoutsPayoutError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts/{payout}'
    });
};

/**
 * <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
 */
export const postPayoutsPayoutCancel = <ThrowOnError extends boolean = false>(options: Options<PostPayoutsPayoutCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPayoutsPayoutCancelResponse, PostPayoutsPayoutCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts/{payout}/cancel'
    });
};

/**
 * <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
 *
 * <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
 */
export const postPayoutsPayoutReverse = <ThrowOnError extends boolean = false>(options: Options<PostPayoutsPayoutReverseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPayoutsPayoutReverseResponse, PostPayoutsPayoutReverseError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/payouts/{payout}/reverse'
    });
};

/**
 * <p>Returns a list of your plans.</p>
 */
export const getPlans = <ThrowOnError extends boolean = false>(options?: Options<GetPlansData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlansResponse, GetPlansError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/plans'
    });
};

/**
 * <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
 */
export const postPlans = <ThrowOnError extends boolean = false>(options: Options<PostPlansData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPlansResponse, PostPlansError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/plans'
    });
};

/**
 * <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
 */
export const deletePlansPlan = <ThrowOnError extends boolean = false>(options: Options<DeletePlansPlanData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeletePlansPlanResponse, DeletePlansPlanError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/plans/{plan}'
    });
};

/**
 * <p>Retrieves the plan with the given ID.</p>
 */
export const getPlansPlan = <ThrowOnError extends boolean = false>(options: Options<GetPlansPlanData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPlansPlanResponse, GetPlansPlanError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/plans/{plan}'
    });
};

/**
 * <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
 */
export const postPlansPlan = <ThrowOnError extends boolean = false>(options: Options<PostPlansPlanData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPlansPlanResponse, PostPlansPlanError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/plans/{plan}'
    });
};

/**
 * <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
 */
export const getPrices = <ThrowOnError extends boolean = false>(options?: Options<GetPricesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPricesResponse, GetPricesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/prices'
    });
};

/**
 * <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
 */
export const postPrices = <ThrowOnError extends boolean = false>(options: Options<PostPricesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPricesResponse, PostPricesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/prices'
    });
};

/**
 * <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getPricesSearch = <ThrowOnError extends boolean = false>(options: Options<GetPricesSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPricesSearchResponse, GetPricesSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/prices/search'
    });
};

/**
 * <p>Retrieves the price with the given ID.</p>
 */
export const getPricesPrice = <ThrowOnError extends boolean = false>(options: Options<GetPricesPriceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPricesPriceResponse, GetPricesPriceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/prices/{price}'
    });
};

/**
 * <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
 */
export const postPricesPrice = <ThrowOnError extends boolean = false>(options: Options<PostPricesPriceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPricesPriceResponse, PostPricesPriceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/prices/{price}'
    });
};

/**
 * <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
 */
export const getProducts = <ThrowOnError extends boolean = false>(options?: Options<GetProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsResponse, GetProductsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products'
    });
};

/**
 * <p>Creates a new product object.</p>
 */
export const postProducts = <ThrowOnError extends boolean = false>(options: Options<PostProductsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProductsResponse, PostProductsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products'
    });
};

/**
 * <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getProductsSearch = <ThrowOnError extends boolean = false>(options: Options<GetProductsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsSearchResponse, GetProductsSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/search'
    });
};

/**
 * <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
 */
export const deleteProductsId = <ThrowOnError extends boolean = false>(options: Options<DeleteProductsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProductsIdResponse, DeleteProductsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{id}'
    });
};

/**
 * <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
 */
export const getProductsId = <ThrowOnError extends boolean = false>(options: Options<GetProductsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsIdResponse, GetProductsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{id}'
    });
};

/**
 * <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postProductsId = <ThrowOnError extends boolean = false>(options: Options<PostProductsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProductsIdResponse, PostProductsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{id}'
    });
};

/**
 * <p>Retrieve a list of features for a product</p>
 */
export const getProductsProductFeatures = <ThrowOnError extends boolean = false>(options: Options<GetProductsProductFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsProductFeaturesResponse, GetProductsProductFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{product}/features'
    });
};

/**
 * <p>Creates a product_feature, which represents a feature attachment to a product</p>
 */
export const postProductsProductFeatures = <ThrowOnError extends boolean = false>(options: Options<PostProductsProductFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProductsProductFeaturesResponse, PostProductsProductFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{product}/features'
    });
};

/**
 * <p>Deletes the feature attachment to a product</p>
 */
export const deleteProductsProductFeaturesId = <ThrowOnError extends boolean = false>(options: Options<DeleteProductsProductFeaturesIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProductsProductFeaturesIdResponse, DeleteProductsProductFeaturesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{product}/features/{id}'
    });
};

/**
 * <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
 */
export const getProductsProductFeaturesId = <ThrowOnError extends boolean = false>(options: Options<GetProductsProductFeaturesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductsProductFeaturesIdResponse, GetProductsProductFeaturesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/products/{product}/features/{id}'
    });
};

/**
 * <p>Returns a list of your promotion codes.</p>
 */
export const getPromotionCodes = <ThrowOnError extends boolean = false>(options?: Options<GetPromotionCodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPromotionCodesResponse, GetPromotionCodesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/promotion_codes'
    });
};

/**
 * <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
 */
export const postPromotionCodes = <ThrowOnError extends boolean = false>(options: Options<PostPromotionCodesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPromotionCodesResponse, PostPromotionCodesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/promotion_codes'
    });
};

/**
 * <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
 */
export const getPromotionCodesPromotionCode = <ThrowOnError extends boolean = false>(options: Options<GetPromotionCodesPromotionCodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPromotionCodesPromotionCodeResponse, GetPromotionCodesPromotionCodeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/promotion_codes/{promotion_code}'
    });
};

/**
 * <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
 */
export const postPromotionCodesPromotionCode = <ThrowOnError extends boolean = false>(options: Options<PostPromotionCodesPromotionCodeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostPromotionCodesPromotionCodeResponse, PostPromotionCodesPromotionCodeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/promotion_codes/{promotion_code}'
    });
};

/**
 * <p>Returns a list of your quotes.</p>
 */
export const getQuotes = <ThrowOnError extends boolean = false>(options?: Options<GetQuotesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuotesResponse, GetQuotesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes'
    });
};

/**
 * <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
 */
export const postQuotes = <ThrowOnError extends boolean = false>(options?: Options<PostQuotesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQuotesResponse, PostQuotesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes'
    });
};

/**
 * <p>Retrieves the quote with the given ID.</p>
 */
export const getQuotesQuote = <ThrowOnError extends boolean = false>(options: Options<GetQuotesQuoteData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuotesQuoteResponse, GetQuotesQuoteError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}'
    });
};

/**
 * <p>A quote models prices and services for a customer.</p>
 */
export const postQuotesQuote = <ThrowOnError extends boolean = false>(options: Options<PostQuotesQuoteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQuotesQuoteResponse, PostQuotesQuoteError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}'
    });
};

/**
 * <p>Accepts the specified quote.</p>
 */
export const postQuotesQuoteAccept = <ThrowOnError extends boolean = false>(options: Options<PostQuotesQuoteAcceptData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQuotesQuoteAcceptResponse, PostQuotesQuoteAcceptError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/accept'
    });
};

/**
 * <p>Cancels the quote.</p>
 */
export const postQuotesQuoteCancel = <ThrowOnError extends boolean = false>(options: Options<PostQuotesQuoteCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQuotesQuoteCancelResponse, PostQuotesQuoteCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/cancel'
    });
};

/**
 * <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
 */
export const getQuotesQuoteComputedUpfrontLineItems = <ThrowOnError extends boolean = false>(options: Options<GetQuotesQuoteComputedUpfrontLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuotesQuoteComputedUpfrontLineItemsResponse, GetQuotesQuoteComputedUpfrontLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/computed_upfront_line_items'
    });
};

/**
 * <p>Finalizes the quote.</p>
 */
export const postQuotesQuoteFinalize = <ThrowOnError extends boolean = false>(options: Options<PostQuotesQuoteFinalizeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostQuotesQuoteFinalizeResponse, PostQuotesQuoteFinalizeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/finalize'
    });
};

/**
 * <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export const getQuotesQuoteLineItems = <ThrowOnError extends boolean = false>(options: Options<GetQuotesQuoteLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuotesQuoteLineItemsResponse, GetQuotesQuoteLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/line_items'
    });
};

/**
 * <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
 */
export const getQuotesQuotePdf = <ThrowOnError extends boolean = false>(options: Options<GetQuotesQuotePdfData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetQuotesQuotePdfResponse, GetQuotesQuotePdfError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/quotes/{quote}/pdf'
    });
};

/**
 * <p>Returns a list of early fraud warnings.</p>
 */
export const getRadarEarlyFraudWarnings = <ThrowOnError extends boolean = false>(options?: Options<GetRadarEarlyFraudWarningsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarEarlyFraudWarningsResponse, GetRadarEarlyFraudWarningsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/early_fraud_warnings'
    });
};

/**
 * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
 *
 * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
 */
export const getRadarEarlyFraudWarningsEarlyFraudWarning = <ThrowOnError extends boolean = false>(options: Options<GetRadarEarlyFraudWarningsEarlyFraudWarningData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarEarlyFraudWarningsEarlyFraudWarningResponse, GetRadarEarlyFraudWarningsEarlyFraudWarningError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/early_fraud_warnings/{early_fraud_warning}'
    });
};

/**
 * <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getRadarValueListItems = <ThrowOnError extends boolean = false>(options: Options<GetRadarValueListItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarValueListItemsResponse, GetRadarValueListItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_list_items'
    });
};

/**
 * <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
 */
export const postRadarValueListItems = <ThrowOnError extends boolean = false>(options: Options<PostRadarValueListItemsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRadarValueListItemsResponse, PostRadarValueListItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_list_items'
    });
};

/**
 * <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
 */
export const deleteRadarValueListItemsItem = <ThrowOnError extends boolean = false>(options: Options<DeleteRadarValueListItemsItemData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteRadarValueListItemsItemResponse, DeleteRadarValueListItemsItemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_list_items/{item}'
    });
};

/**
 * <p>Retrieves a <code>ValueListItem</code> object.</p>
 */
export const getRadarValueListItemsItem = <ThrowOnError extends boolean = false>(options: Options<GetRadarValueListItemsItemData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarValueListItemsItemResponse, GetRadarValueListItemsItemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_list_items/{item}'
    });
};

/**
 * <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getRadarValueLists = <ThrowOnError extends boolean = false>(options?: Options<GetRadarValueListsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarValueListsResponse, GetRadarValueListsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_lists'
    });
};

/**
 * <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
 */
export const postRadarValueLists = <ThrowOnError extends boolean = false>(options: Options<PostRadarValueListsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRadarValueListsResponse, PostRadarValueListsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_lists'
    });
};

/**
 * <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
 */
export const deleteRadarValueListsValueList = <ThrowOnError extends boolean = false>(options: Options<DeleteRadarValueListsValueListData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteRadarValueListsValueListResponse, DeleteRadarValueListsValueListError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_lists/{value_list}'
    });
};

/**
 * <p>Retrieves a <code>ValueList</code> object.</p>
 */
export const getRadarValueListsValueList = <ThrowOnError extends boolean = false>(options: Options<GetRadarValueListsValueListData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRadarValueListsValueListResponse, GetRadarValueListsValueListError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_lists/{value_list}'
    });
};

/**
 * <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
 */
export const postRadarValueListsValueList = <ThrowOnError extends boolean = false>(options: Options<PostRadarValueListsValueListData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRadarValueListsValueListResponse, PostRadarValueListsValueListError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/radar/value_lists/{value_list}'
    });
};

/**
 * <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
 */
export const getRefunds = <ThrowOnError extends boolean = false>(options?: Options<GetRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRefundsResponse, GetRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/refunds'
    });
};

/**
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
 *
 * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
 * Funds will be refunded to the credit or debit card that was originally charged.</p>
 *
 * <p>You can optionally refund only part of a charge.
 * You can do so multiple times, until the entire charge has been refunded.</p>
 *
 * <p>Once entirely refunded, a charge can’t be refunded again.
 * This method will raise an error when called on an already-refunded charge,
 * or when trying to refund more money than is left on a charge.</p>
 */
export const postRefunds = <ThrowOnError extends boolean = false>(options?: Options<PostRefundsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRefundsResponse, PostRefundsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/refunds'
    });
};

/**
 * <p>Retrieves the details of an existing refund.</p>
 */
export const getRefundsRefund = <ThrowOnError extends boolean = false>(options: Options<GetRefundsRefundData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRefundsRefundResponse, GetRefundsRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/refunds/{refund}'
    });
};

/**
 * <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
 *
 * <p>This request only accepts <code>metadata</code> as an argument.</p>
 */
export const postRefundsRefund = <ThrowOnError extends boolean = false>(options: Options<PostRefundsRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRefundsRefundResponse, PostRefundsRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/refunds/{refund}'
    });
};

/**
 * <p>Cancels a refund with a status of <code>requires_action</code>.</p>
 *
 * <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
 */
export const postRefundsRefundCancel = <ThrowOnError extends boolean = false>(options: Options<PostRefundsRefundCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostRefundsRefundCancelResponse, PostRefundsRefundCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/refunds/{refund}/cancel'
    });
};

/**
 * <p>Returns a list of Report Runs, with the most recent appearing first.</p>
 */
export const getReportingReportRuns = <ThrowOnError extends boolean = false>(options?: Options<GetReportingReportRunsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportingReportRunsResponse, GetReportingReportRunsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reporting/report_runs'
    });
};

/**
 * <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
 */
export const postReportingReportRuns = <ThrowOnError extends boolean = false>(options: Options<PostReportingReportRunsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostReportingReportRunsResponse, PostReportingReportRunsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reporting/report_runs'
    });
};

/**
 * <p>Retrieves the details of an existing Report Run.</p>
 */
export const getReportingReportRunsReportRun = <ThrowOnError extends boolean = false>(options: Options<GetReportingReportRunsReportRunData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportingReportRunsReportRunResponse, GetReportingReportRunsReportRunError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reporting/report_runs/{report_run}'
    });
};

/**
 * <p>Returns a full list of Report Types.</p>
 */
export const getReportingReportTypes = <ThrowOnError extends boolean = false>(options?: Options<GetReportingReportTypesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportingReportTypesResponse, GetReportingReportTypesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reporting/report_types'
    });
};

/**
 * <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
 */
export const getReportingReportTypesReportType = <ThrowOnError extends boolean = false>(options: Options<GetReportingReportTypesReportTypeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReportingReportTypesReportTypeResponse, GetReportingReportTypesReportTypeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reporting/report_types/{report_type}'
    });
};

/**
 * <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export const getReviews = <ThrowOnError extends boolean = false>(options?: Options<GetReviewsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReviewsResponse, GetReviewsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reviews'
    });
};

/**
 * <p>Retrieves a <code>Review</code> object.</p>
 */
export const getReviewsReview = <ThrowOnError extends boolean = false>(options: Options<GetReviewsReviewData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetReviewsReviewResponse, GetReviewsReviewError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reviews/{review}'
    });
};

/**
 * <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
 */
export const postReviewsReviewApprove = <ThrowOnError extends boolean = false>(options: Options<PostReviewsReviewApproveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostReviewsReviewApproveResponse, PostReviewsReviewApproveError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/reviews/{review}/approve'
    });
};

/**
 * <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
 */
export const getSetupAttempts = <ThrowOnError extends boolean = false>(options: Options<GetSetupAttemptsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSetupAttemptsResponse, GetSetupAttemptsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_attempts'
    });
};

/**
 * <p>Returns a list of SetupIntents.</p>
 */
export const getSetupIntents = <ThrowOnError extends boolean = false>(options?: Options<GetSetupIntentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSetupIntentsResponse, GetSetupIntentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents'
    });
};

/**
 * <p>Creates a SetupIntent object.</p>
 *
 * <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
 * it to collect any required permissions to charge the payment method later.</p>
 */
export const postSetupIntents = <ThrowOnError extends boolean = false>(options?: Options<PostSetupIntentsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSetupIntentsResponse, PostSetupIntentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents'
    });
};

/**
 * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
 *
 * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
 *
 * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
 */
export const getSetupIntentsIntent = <ThrowOnError extends boolean = false>(options: Options<GetSetupIntentsIntentData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSetupIntentsIntentResponse, GetSetupIntentsIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents/{intent}'
    });
};

/**
 * <p>Updates a SetupIntent object.</p>
 */
export const postSetupIntentsIntent = <ThrowOnError extends boolean = false>(options: Options<PostSetupIntentsIntentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSetupIntentsIntentResponse, PostSetupIntentsIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents/{intent}'
    });
};

/**
 * <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
 *
 * <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
 */
export const postSetupIntentsIntentCancel = <ThrowOnError extends boolean = false>(options: Options<PostSetupIntentsIntentCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSetupIntentsIntentCancelResponse, PostSetupIntentsIntentCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents/{intent}/cancel'
    });
};

/**
 * <p>Confirm that your customer intends to set up the current or
 * provided payment method. For example, you would confirm a SetupIntent
 * when a customer hits the “Save” button on a payment method management
 * page on your website.</p>
 *
 * <p>If the selected payment method does not require any additional
 * steps from the customer, the SetupIntent will transition to the
 * <code>succeeded</code> status.</p>
 *
 * <p>Otherwise, it will transition to the <code>requires_action</code> status and
 * suggest additional actions via <code>next_action</code>. If setup fails,
 * the SetupIntent will transition to the
 * <code>requires_payment_method</code> status or the <code>canceled</code> status if the
 * confirmation limit is reached.</p>
 */
export const postSetupIntentsIntentConfirm = <ThrowOnError extends boolean = false>(options: Options<PostSetupIntentsIntentConfirmData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSetupIntentsIntentConfirmResponse, PostSetupIntentsIntentConfirmError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents/{intent}/confirm'
    });
};

/**
 * <p>Verifies microdeposits on a SetupIntent object.</p>
 */
export const postSetupIntentsIntentVerifyMicrodeposits = <ThrowOnError extends boolean = false>(options: Options<PostSetupIntentsIntentVerifyMicrodepositsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSetupIntentsIntentVerifyMicrodepositsResponse, PostSetupIntentsIntentVerifyMicrodepositsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/setup_intents/{intent}/verify_microdeposits'
    });
};

/**
 * <p>Returns a list of your shipping rates.</p>
 */
export const getShippingRates = <ThrowOnError extends boolean = false>(options?: Options<GetShippingRatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetShippingRatesResponse, GetShippingRatesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/shipping_rates'
    });
};

/**
 * <p>Creates a new shipping rate object.</p>
 */
export const postShippingRates = <ThrowOnError extends boolean = false>(options: Options<PostShippingRatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostShippingRatesResponse, PostShippingRatesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/shipping_rates'
    });
};

/**
 * <p>Returns the shipping rate object with the given ID.</p>
 */
export const getShippingRatesShippingRateToken = <ThrowOnError extends boolean = false>(options: Options<GetShippingRatesShippingRateTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetShippingRatesShippingRateTokenResponse, GetShippingRatesShippingRateTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/shipping_rates/{shipping_rate_token}'
    });
};

/**
 * <p>Updates an existing shipping rate object.</p>
 */
export const postShippingRatesShippingRateToken = <ThrowOnError extends boolean = false>(options: Options<PostShippingRatesShippingRateTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostShippingRatesShippingRateTokenResponse, PostShippingRatesShippingRateTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/shipping_rates/{shipping_rate_token}'
    });
};

/**
 * <p>Returns a list of scheduled query runs.</p>
 */
export const getSigmaScheduledQueryRuns = <ThrowOnError extends boolean = false>(options?: Options<GetSigmaScheduledQueryRunsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSigmaScheduledQueryRunsResponse, GetSigmaScheduledQueryRunsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sigma/scheduled_query_runs'
    });
};

/**
 * <p>Retrieves the details of an scheduled query run.</p>
 */
export const getSigmaScheduledQueryRunsScheduledQueryRun = <ThrowOnError extends boolean = false>(options: Options<GetSigmaScheduledQueryRunsScheduledQueryRunData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSigmaScheduledQueryRunsScheduledQueryRunResponse, GetSigmaScheduledQueryRunsScheduledQueryRunError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sigma/scheduled_query_runs/{scheduled_query_run}'
    });
};

/**
 * <p>Creates a new source object.</p>
 */
export const postSources = <ThrowOnError extends boolean = false>(options?: Options<PostSourcesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSourcesResponse, PostSourcesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources'
    });
};

/**
 * <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
 */
export const getSourcesSource = <ThrowOnError extends boolean = false>(options: Options<GetSourcesSourceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesSourceResponse, GetSourcesSourceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}'
    });
};

/**
 * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 *
 * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
 */
export const postSourcesSource = <ThrowOnError extends boolean = false>(options: Options<PostSourcesSourceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSourcesSourceResponse, PostSourcesSourceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}'
    });
};

/**
 * <p>Retrieves a new Source MandateNotification.</p>
 */
export const getSourcesSourceMandateNotificationsMandateNotification = <ThrowOnError extends boolean = false>(options: Options<GetSourcesSourceMandateNotificationsMandateNotificationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesSourceMandateNotificationsMandateNotificationResponse, GetSourcesSourceMandateNotificationsMandateNotificationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}/mandate_notifications/{mandate_notification}'
    });
};

/**
 * <p>List source transactions for a given source.</p>
 */
export const getSourcesSourceSourceTransactions = <ThrowOnError extends boolean = false>(options: Options<GetSourcesSourceSourceTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesSourceSourceTransactionsResponse, GetSourcesSourceSourceTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}/source_transactions'
    });
};

/**
 * <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
 */
export const getSourcesSourceSourceTransactionsSourceTransaction = <ThrowOnError extends boolean = false>(options: Options<GetSourcesSourceSourceTransactionsSourceTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSourcesSourceSourceTransactionsSourceTransactionResponse, GetSourcesSourceSourceTransactionsSourceTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}/source_transactions/{source_transaction}'
    });
};

/**
 * <p>Verify a given source.</p>
 */
export const postSourcesSourceVerify = <ThrowOnError extends boolean = false>(options: Options<PostSourcesSourceVerifyData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSourcesSourceVerifyResponse, PostSourcesSourceVerifyError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/sources/{source}/verify'
    });
};

/**
 * <p>Returns a list of your subscription items for a given subscription.</p>
 */
export const getSubscriptionItems = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionItemsResponse, GetSubscriptionItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items'
    });
};

/**
 * <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
 */
export const postSubscriptionItems = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionItemsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionItemsResponse, PostSubscriptionItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items'
    });
};

/**
 * <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
 */
export const deleteSubscriptionItemsItem = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriptionItemsItemData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubscriptionItemsItemResponse, DeleteSubscriptionItemsItemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items/{item}'
    });
};

/**
 * <p>Retrieves the subscription item with the given ID.</p>
 */
export const getSubscriptionItemsItem = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionItemsItemData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionItemsItemResponse, GetSubscriptionItemsItemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items/{item}'
    });
};

/**
 * <p>Updates the plan or quantity of an item on a current subscription.</p>
 */
export const postSubscriptionItemsItem = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionItemsItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionItemsItemResponse, PostSubscriptionItemsItemError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items/{item}'
    });
};

/**
 * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
 *
 * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
 */
export const getSubscriptionItemsSubscriptionItemUsageRecordSummaries = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionItemsSubscriptionItemUsageRecordSummariesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionItemsSubscriptionItemUsageRecordSummariesResponse, GetSubscriptionItemsSubscriptionItemUsageRecordSummariesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items/{subscription_item}/usage_record_summaries'
    });
};

/**
 * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
 *
 * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
 *
 * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
 *
 * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
 */
export const postSubscriptionItemsSubscriptionItemUsageRecords = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionItemsSubscriptionItemUsageRecordsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionItemsSubscriptionItemUsageRecordsResponse, PostSubscriptionItemsSubscriptionItemUsageRecordsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_items/{subscription_item}/usage_records'
    });
};

/**
 * <p>Retrieves the list of your subscription schedules.</p>
 */
export const getSubscriptionSchedules = <ThrowOnError extends boolean = false>(options?: Options<GetSubscriptionSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionSchedulesResponse, GetSubscriptionSchedulesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules'
    });
};

/**
 * <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
 */
export const postSubscriptionSchedules = <ThrowOnError extends boolean = false>(options?: Options<PostSubscriptionSchedulesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionSchedulesResponse, PostSubscriptionSchedulesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules'
    });
};

/**
 * <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
 */
export const getSubscriptionSchedulesSchedule = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionSchedulesScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionSchedulesScheduleResponse, GetSubscriptionSchedulesScheduleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules/{schedule}'
    });
};

/**
 * <p>Updates an existing subscription schedule.</p>
 */
export const postSubscriptionSchedulesSchedule = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionSchedulesScheduleData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionSchedulesScheduleResponse, PostSubscriptionSchedulesScheduleError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules/{schedule}'
    });
};

/**
 * <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
 */
export const postSubscriptionSchedulesScheduleCancel = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionSchedulesScheduleCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionSchedulesScheduleCancelResponse, PostSubscriptionSchedulesScheduleCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules/{schedule}/cancel'
    });
};

/**
 * <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
 */
export const postSubscriptionSchedulesScheduleRelease = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionSchedulesScheduleReleaseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionSchedulesScheduleReleaseResponse, PostSubscriptionSchedulesScheduleReleaseError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscription_schedules/{schedule}/release'
    });
};

/**
 * <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
 */
export const getSubscriptions = <ThrowOnError extends boolean = false>(options?: Options<GetSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionsResponse, GetSubscriptionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions'
    });
};

/**
 * <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
 *
 * <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
 * The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
 *
 * <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
 * Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
 */
export const postSubscriptions = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionsResponse, PostSubscriptionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions'
    });
};

/**
 * <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export const getSubscriptionsSearch = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionsSearchResponse, GetSubscriptionsSearchError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/search'
    });
};

/**
 * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
 *
 * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
 *
 * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
 */
export const deleteSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubscriptionsSubscriptionExposedIdResponse, DeleteSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Retrieves the subscription with the given ID.</p>
 */
export const getSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<GetSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSubscriptionsSubscriptionExposedIdResponse, GetSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Updates an existing subscription to match the specified parameters.
 * When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
 * To preview how the proration is calculated, use the <a href="/docs/api/invoices/upcoming">upcoming invoice</a> endpoint.</p>
 *
 * <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
 *
 * <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
 *
 * <ul>
 * <li>The billing interval is changed (for example, from monthly to yearly).</li>
 * <li>The subscription moves from free to paid, or paid to free.</li>
 * <li>A trial starts or ends.</li>
 * </ul>
 *
 * <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.</p>
 *
 * <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
 *
 * <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
 *
 * <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
 */
export const postSubscriptionsSubscriptionExposedId = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionsSubscriptionExposedIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionsSubscriptionExposedIdResponse, PostSubscriptionsSubscriptionExposedIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/{subscription_exposed_id}'
    });
};

/**
 * <p>Removes the currently applied discount on a subscription.</p>
 */
export const deleteSubscriptionsSubscriptionExposedIdDiscount = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriptionsSubscriptionExposedIdDiscountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteSubscriptionsSubscriptionExposedIdDiscountResponse, DeleteSubscriptionsSubscriptionExposedIdDiscountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/{subscription_exposed_id}/discount'
    });
};

/**
 * <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
 */
export const postSubscriptionsSubscriptionResume = <ThrowOnError extends boolean = false>(options: Options<PostSubscriptionsSubscriptionResumeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostSubscriptionsSubscriptionResumeResponse, PostSubscriptionsSubscriptionResumeError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/subscriptions/{subscription}/resume'
    });
};

/**
 * <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
 */
export const postTaxCalculations = <ThrowOnError extends boolean = false>(options: Options<PostTaxCalculationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxCalculationsResponse, PostTaxCalculationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/calculations'
    });
};

/**
 * <p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>
 */
export const getTaxCalculationsCalculationLineItems = <ThrowOnError extends boolean = false>(options: Options<GetTaxCalculationsCalculationLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxCalculationsCalculationLineItemsResponse, GetTaxCalculationsCalculationLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/calculations/{calculation}/line_items'
    });
};

/**
 * <p>Returns a list of Tax <code>Registration</code> objects.</p>
 */
export const getTaxRegistrations = <ThrowOnError extends boolean = false>(options?: Options<GetTaxRegistrationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxRegistrationsResponse, GetTaxRegistrationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/registrations'
    });
};

/**
 * <p>Creates a new Tax <code>Registration</code> object.</p>
 */
export const postTaxRegistrations = <ThrowOnError extends boolean = false>(options: Options<PostTaxRegistrationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxRegistrationsResponse, PostTaxRegistrationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/registrations'
    });
};

/**
 * <p>Returns a Tax <code>Registration</code> object.</p>
 */
export const getTaxRegistrationsId = <ThrowOnError extends boolean = false>(options: Options<GetTaxRegistrationsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxRegistrationsIdResponse, GetTaxRegistrationsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/registrations/{id}'
    });
};

/**
 * <p>Updates an existing Tax <code>Registration</code> object.</p>
 *
 * <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
 */
export const postTaxRegistrationsId = <ThrowOnError extends boolean = false>(options: Options<PostTaxRegistrationsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxRegistrationsIdResponse, PostTaxRegistrationsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/registrations/{id}'
    });
};

/**
 * <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
 */
export const getTaxSettings = <ThrowOnError extends boolean = false>(options?: Options<GetTaxSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxSettingsResponse, GetTaxSettingsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/settings'
    });
};

/**
 * <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
 */
export const postTaxSettings = <ThrowOnError extends boolean = false>(options?: Options<PostTaxSettingsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxSettingsResponse, PostTaxSettingsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/settings'
    });
};

/**
 * <p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.</p>
 */
export const postTaxTransactionsCreateFromCalculation = <ThrowOnError extends boolean = false>(options: Options<PostTaxTransactionsCreateFromCalculationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxTransactionsCreateFromCalculationResponse, PostTaxTransactionsCreateFromCalculationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/transactions/create_from_calculation'
    });
};

/**
 * <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
 */
export const postTaxTransactionsCreateReversal = <ThrowOnError extends boolean = false>(options: Options<PostTaxTransactionsCreateReversalData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxTransactionsCreateReversalResponse, PostTaxTransactionsCreateReversalError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/transactions/create_reversal'
    });
};

/**
 * <p>Retrieves a Tax <code>Transaction</code> object.</p>
 */
export const getTaxTransactionsTransaction = <ThrowOnError extends boolean = false>(options: Options<GetTaxTransactionsTransactionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxTransactionsTransactionResponse, GetTaxTransactionsTransactionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/transactions/{transaction}'
    });
};

/**
 * <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
 */
export const getTaxTransactionsTransactionLineItems = <ThrowOnError extends boolean = false>(options: Options<GetTaxTransactionsTransactionLineItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxTransactionsTransactionLineItemsResponse, GetTaxTransactionsTransactionLineItemsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax/transactions/{transaction}/line_items'
    });
};

/**
 * <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
 */
export const getTaxCodes = <ThrowOnError extends boolean = false>(options?: Options<GetTaxCodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxCodesResponse, GetTaxCodesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_codes'
    });
};

/**
 * <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
 */
export const getTaxCodesId = <ThrowOnError extends boolean = false>(options: Options<GetTaxCodesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxCodesIdResponse, GetTaxCodesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_codes/{id}'
    });
};

/**
 * <p>Returns a list of tax IDs.</p>
 */
export const getTaxIds = <ThrowOnError extends boolean = false>(options?: Options<GetTaxIdsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxIdsResponse, GetTaxIdsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_ids'
    });
};

/**
 * <p>Creates a new account or customer <code>tax_id</code> object.</p>
 */
export const postTaxIds = <ThrowOnError extends boolean = false>(options: Options<PostTaxIdsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxIdsResponse, PostTaxIdsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_ids'
    });
};

/**
 * <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
 */
export const deleteTaxIdsId = <ThrowOnError extends boolean = false>(options: Options<DeleteTaxIdsIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTaxIdsIdResponse, DeleteTaxIdsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_ids/{id}'
    });
};

/**
 * <p>Retrieves an account or customer <code>tax_id</code> object.</p>
 */
export const getTaxIdsId = <ThrowOnError extends boolean = false>(options: Options<GetTaxIdsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxIdsIdResponse, GetTaxIdsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_ids/{id}'
    });
};

/**
 * <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
 */
export const getTaxRates = <ThrowOnError extends boolean = false>(options?: Options<GetTaxRatesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxRatesResponse, GetTaxRatesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_rates'
    });
};

/**
 * <p>Creates a new tax rate.</p>
 */
export const postTaxRates = <ThrowOnError extends boolean = false>(options: Options<PostTaxRatesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxRatesResponse, PostTaxRatesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_rates'
    });
};

/**
 * <p>Retrieves a tax rate with the given ID</p>
 */
export const getTaxRatesTaxRate = <ThrowOnError extends boolean = false>(options: Options<GetTaxRatesTaxRateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaxRatesTaxRateResponse, GetTaxRatesTaxRateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_rates/{tax_rate}'
    });
};

/**
 * <p>Updates an existing tax rate.</p>
 */
export const postTaxRatesTaxRate = <ThrowOnError extends boolean = false>(options: Options<PostTaxRatesTaxRateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTaxRatesTaxRateResponse, PostTaxRatesTaxRateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tax_rates/{tax_rate}'
    });
};

/**
 * <p>Returns a list of <code>Configuration</code> objects.</p>
 */
export const getTerminalConfigurations = <ThrowOnError extends boolean = false>(options?: Options<GetTerminalConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalConfigurationsResponse, GetTerminalConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/configurations'
    });
};

/**
 * <p>Creates a new <code>Configuration</code> object.</p>
 */
export const postTerminalConfigurations = <ThrowOnError extends boolean = false>(options?: Options<PostTerminalConfigurationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalConfigurationsResponse, PostTerminalConfigurationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/configurations'
    });
};

/**
 * <p>Deletes a <code>Configuration</code> object.</p>
 */
export const deleteTerminalConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<DeleteTerminalConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTerminalConfigurationsConfigurationResponse, DeleteTerminalConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/configurations/{configuration}'
    });
};

/**
 * <p>Retrieves a <code>Configuration</code> object.</p>
 */
export const getTerminalConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<GetTerminalConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalConfigurationsConfigurationResponse, GetTerminalConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/configurations/{configuration}'
    });
};

/**
 * <p>Updates a new <code>Configuration</code> object.</p>
 */
export const postTerminalConfigurationsConfiguration = <ThrowOnError extends boolean = false>(options: Options<PostTerminalConfigurationsConfigurationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalConfigurationsConfigurationResponse, PostTerminalConfigurationsConfigurationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/configurations/{configuration}'
    });
};

/**
 * <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
 */
export const postTerminalConnectionTokens = <ThrowOnError extends boolean = false>(options?: Options<PostTerminalConnectionTokensData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalConnectionTokensResponse, PostTerminalConnectionTokensError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/connection_tokens'
    });
};

/**
 * <p>Returns a list of <code>Location</code> objects.</p>
 */
export const getTerminalLocations = <ThrowOnError extends boolean = false>(options?: Options<GetTerminalLocationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalLocationsResponse, GetTerminalLocationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/locations'
    });
};

/**
 * <p>Creates a new <code>Location</code> object.
 * For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
 */
export const postTerminalLocations = <ThrowOnError extends boolean = false>(options: Options<PostTerminalLocationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalLocationsResponse, PostTerminalLocationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/locations'
    });
};

/**
 * <p>Deletes a <code>Location</code> object.</p>
 */
export const deleteTerminalLocationsLocation = <ThrowOnError extends boolean = false>(options: Options<DeleteTerminalLocationsLocationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTerminalLocationsLocationResponse, DeleteTerminalLocationsLocationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/locations/{location}'
    });
};

/**
 * <p>Retrieves a <code>Location</code> object.</p>
 */
export const getTerminalLocationsLocation = <ThrowOnError extends boolean = false>(options: Options<GetTerminalLocationsLocationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalLocationsLocationResponse, GetTerminalLocationsLocationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/locations/{location}'
    });
};

/**
 * <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postTerminalLocationsLocation = <ThrowOnError extends boolean = false>(options: Options<PostTerminalLocationsLocationData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalLocationsLocationResponse, PostTerminalLocationsLocationError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/locations/{location}'
    });
};

/**
 * <p>Returns a list of <code>Reader</code> objects.</p>
 */
export const getTerminalReaders = <ThrowOnError extends boolean = false>(options?: Options<GetTerminalReadersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalReadersResponse, GetTerminalReadersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers'
    });
};

/**
 * <p>Creates a new <code>Reader</code> object.</p>
 */
export const postTerminalReaders = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersResponse, PostTerminalReadersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers'
    });
};

/**
 * <p>Deletes a <code>Reader</code> object.</p>
 */
export const deleteTerminalReadersReader = <ThrowOnError extends boolean = false>(options: Options<DeleteTerminalReadersReaderData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTerminalReadersReaderResponse, DeleteTerminalReadersReaderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}'
    });
};

/**
 * <p>Retrieves a <code>Reader</code> object.</p>
 */
export const getTerminalReadersReader = <ThrowOnError extends boolean = false>(options: Options<GetTerminalReadersReaderData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTerminalReadersReaderResponse, GetTerminalReadersReaderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}'
    });
};

/**
 * <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 */
export const postTerminalReadersReader = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderResponse, PostTerminalReadersReaderError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}'
    });
};

/**
 * <p>Cancels the current reader action.</p>
 */
export const postTerminalReadersReaderCancelAction = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderCancelActionData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderCancelActionResponse, PostTerminalReadersReaderCancelActionError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}/cancel_action'
    });
};

/**
 * <p>Initiates a payment flow on a Reader.</p>
 */
export const postTerminalReadersReaderProcessPaymentIntent = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderProcessPaymentIntentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderProcessPaymentIntentResponse, PostTerminalReadersReaderProcessPaymentIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}/process_payment_intent'
    });
};

/**
 * <p>Initiates a setup intent flow on a Reader.</p>
 */
export const postTerminalReadersReaderProcessSetupIntent = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderProcessSetupIntentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderProcessSetupIntentResponse, PostTerminalReadersReaderProcessSetupIntentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}/process_setup_intent'
    });
};

/**
 * <p>Initiates a refund on a Reader</p>
 */
export const postTerminalReadersReaderRefundPayment = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderRefundPaymentData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderRefundPaymentResponse, PostTerminalReadersReaderRefundPaymentError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}/refund_payment'
    });
};

/**
 * <p>Sets reader display to show cart details.</p>
 */
export const postTerminalReadersReaderSetReaderDisplay = <ThrowOnError extends boolean = false>(options: Options<PostTerminalReadersReaderSetReaderDisplayData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTerminalReadersReaderSetReaderDisplayResponse, PostTerminalReadersReaderSetReaderDisplayError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/terminal/readers/{reader}/set_reader_display'
    });
};

/**
 * <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
 */
export const postTestHelpersConfirmationTokens = <ThrowOnError extends boolean = false>(options?: Options<PostTestHelpersConfirmationTokensData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersConfirmationTokensResponse, PostTestHelpersConfirmationTokensError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/confirmation_tokens'
    });
};

/**
 * <p>Create an incoming testmode bank transfer</p>
 */
export const postTestHelpersCustomersCustomerFundCashBalance = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersCustomersCustomerFundCashBalanceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersCustomersCustomerFundCashBalanceResponse, PostTestHelpersCustomersCustomerFundCashBalanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/customers/{customer}/fund_cash_balance'
    });
};

/**
 * <p>Create a test-mode authorization.</p>
 */
export const postTestHelpersIssuingAuthorizations = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingAuthorizationsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingAuthorizationsResponse, PostTestHelpersIssuingAuthorizationsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/authorizations'
    });
};

/**
 * <p>Capture a test-mode authorization.</p>
 */
export const postTestHelpersIssuingAuthorizationsAuthorizationCapture = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingAuthorizationsAuthorizationCaptureData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingAuthorizationsAuthorizationCaptureResponse, PostTestHelpersIssuingAuthorizationsAuthorizationCaptureError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/authorizations/{authorization}/capture'
    });
};

/**
 * <p>Expire a test-mode Authorization.</p>
 */
export const postTestHelpersIssuingAuthorizationsAuthorizationExpire = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingAuthorizationsAuthorizationExpireData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingAuthorizationsAuthorizationExpireResponse, PostTestHelpersIssuingAuthorizationsAuthorizationExpireError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/authorizations/{authorization}/expire'
    });
};

/**
 * <p>Increment a test-mode Authorization.</p>
 */
export const postTestHelpersIssuingAuthorizationsAuthorizationIncrement = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingAuthorizationsAuthorizationIncrementData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse, PostTestHelpersIssuingAuthorizationsAuthorizationIncrementError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/authorizations/{authorization}/increment'
    });
};

/**
 * <p>Reverse a test-mode Authorization.</p>
 */
export const postTestHelpersIssuingAuthorizationsAuthorizationReverse = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingAuthorizationsAuthorizationReverseData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingAuthorizationsAuthorizationReverseResponse, PostTestHelpersIssuingAuthorizationsAuthorizationReverseError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/authorizations/{authorization}/reverse'
    });
};

/**
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
 */
export const postTestHelpersIssuingCardsCardShippingDeliver = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingCardsCardShippingDeliverData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingCardsCardShippingDeliverResponse, PostTestHelpersIssuingCardsCardShippingDeliverError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/cards/{card}/shipping/deliver'
    });
};

/**
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
 */
export const postTestHelpersIssuingCardsCardShippingFail = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingCardsCardShippingFailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingCardsCardShippingFailResponse, PostTestHelpersIssuingCardsCardShippingFailError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/cards/{card}/shipping/fail'
    });
};

/**
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
 */
export const postTestHelpersIssuingCardsCardShippingReturn = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingCardsCardShippingReturnData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingCardsCardShippingReturnResponse, PostTestHelpersIssuingCardsCardShippingReturnError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/cards/{card}/shipping/return'
    });
};

/**
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
 */
export const postTestHelpersIssuingCardsCardShippingShip = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingCardsCardShippingShipData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingCardsCardShippingShipResponse, PostTestHelpersIssuingCardsCardShippingShipError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/cards/{card}/shipping/ship'
    });
};

/**
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
 */
export const postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate'
    });
};

/**
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
 */
export const postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivateError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate'
    });
};

/**
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
 */
export const postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectResponse, PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignRejectError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject'
    });
};

/**
 * <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
 */
export const postTestHelpersIssuingTransactionsCreateForceCapture = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingTransactionsCreateForceCaptureData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingTransactionsCreateForceCaptureResponse, PostTestHelpersIssuingTransactionsCreateForceCaptureError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/transactions/create_force_capture'
    });
};

/**
 * <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
 */
export const postTestHelpersIssuingTransactionsCreateUnlinkedRefund = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingTransactionsCreateUnlinkedRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingTransactionsCreateUnlinkedRefundResponse, PostTestHelpersIssuingTransactionsCreateUnlinkedRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/transactions/create_unlinked_refund'
    });
};

/**
 * <p>Refund a test-mode Transaction.</p>
 */
export const postTestHelpersIssuingTransactionsTransactionRefund = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersIssuingTransactionsTransactionRefundData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersIssuingTransactionsTransactionRefundResponse, PostTestHelpersIssuingTransactionsTransactionRefundError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/issuing/transactions/{transaction}/refund'
    });
};

/**
 * <p>Expire a refund with a status of <code>requires_action</code>.</p>
 */
export const postTestHelpersRefundsRefundExpire = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersRefundsRefundExpireData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersRefundsRefundExpireResponse, PostTestHelpersRefundsRefundExpireError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/refunds/{refund}/expire'
    });
};

/**
 * <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
 */
export const postTestHelpersTerminalReadersReaderPresentPaymentMethod = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTerminalReadersReaderPresentPaymentMethodData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTerminalReadersReaderPresentPaymentMethodResponse, PostTestHelpersTerminalReadersReaderPresentPaymentMethodError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/terminal/readers/{reader}/present_payment_method'
    });
};

/**
 * <p>Returns a list of your test clocks.</p>
 */
export const getTestHelpersTestClocks = <ThrowOnError extends boolean = false>(options?: Options<GetTestHelpersTestClocksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestHelpersTestClocksResponse, GetTestHelpersTestClocksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/test_clocks'
    });
};

/**
 * <p>Creates a new test clock that can be attached to new customers and quotes.</p>
 */
export const postTestHelpersTestClocks = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTestClocksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTestClocksResponse, PostTestHelpersTestClocksError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/test_clocks'
    });
};

/**
 * <p>Deletes a test clock.</p>
 */
export const deleteTestHelpersTestClocksTestClock = <ThrowOnError extends boolean = false>(options: Options<DeleteTestHelpersTestClocksTestClockData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTestHelpersTestClocksTestClockResponse, DeleteTestHelpersTestClocksTestClockError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/test_clocks/{test_clock}'
    });
};

/**
 * <p>Retrieves a test clock.</p>
 */
export const getTestHelpersTestClocksTestClock = <ThrowOnError extends boolean = false>(options: Options<GetTestHelpersTestClocksTestClockData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestHelpersTestClocksTestClockResponse, GetTestHelpersTestClocksTestClockError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/test_clocks/{test_clock}'
    });
};

/**
 * <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
 */
export const postTestHelpersTestClocksTestClockAdvance = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTestClocksTestClockAdvanceData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTestClocksTestClockAdvanceResponse, PostTestHelpersTestClocksTestClockAdvanceError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/test_clocks/{test_clock}/advance'
    });
};

/**
 * <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryInboundTransfersIdFail = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryInboundTransfersIdFailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryInboundTransfersIdFailResponse, PostTestHelpersTreasuryInboundTransfersIdFailError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/inbound_transfers/{id}/fail'
    });
};

/**
 * <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
 */
export const postTestHelpersTreasuryInboundTransfersIdReturn = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryInboundTransfersIdReturnData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryInboundTransfersIdReturnResponse, PostTestHelpersTreasuryInboundTransfersIdReturnError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/inbound_transfers/{id}/return'
    });
};

/**
 * <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryInboundTransfersIdSucceed = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryInboundTransfersIdSucceedData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryInboundTransfersIdSucceedResponse, PostTestHelpersTreasuryInboundTransfersIdSucceedError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/inbound_transfers/{id}/succeed'
    });
};

/**
 * <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
 */
export const postTestHelpersTreasuryOutboundPaymentsId = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundPaymentsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundPaymentsIdResponse, PostTestHelpersTreasuryOutboundPaymentsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_payments/{id}'
    });
};

/**
 * <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundPaymentsIdFail = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundPaymentsIdFailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundPaymentsIdFailResponse, PostTestHelpersTreasuryOutboundPaymentsIdFailError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_payments/{id}/fail'
    });
};

/**
 * <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundPaymentsIdPost = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundPaymentsIdPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundPaymentsIdPostResponse, PostTestHelpersTreasuryOutboundPaymentsIdPostError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_payments/{id}/post'
    });
};

/**
 * <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundPaymentsIdReturn = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundPaymentsIdReturnData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundPaymentsIdReturnResponse, PostTestHelpersTreasuryOutboundPaymentsIdReturnError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_payments/{id}/return'
    });
};

/**
 * <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
 */
export const postTestHelpersTreasuryOutboundTransfersOutboundTransfer = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundTransfersOutboundTransferData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundTransfersOutboundTransferResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}'
    });
};

/**
 * <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundTransfersOutboundTransferFail = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail'
    });
};

/**
 * <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundTransfersOutboundTransferPost = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post'
    });
};

/**
 * <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
 */
export const postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponse, PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return'
    });
};

/**
 * <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
 */
export const postTestHelpersTreasuryReceivedCredits = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryReceivedCreditsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryReceivedCreditsResponse, PostTestHelpersTreasuryReceivedCreditsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/received_credits'
    });
};

/**
 * <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
 */
export const postTestHelpersTreasuryReceivedDebits = <ThrowOnError extends boolean = false>(options: Options<PostTestHelpersTreasuryReceivedDebitsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTestHelpersTreasuryReceivedDebitsResponse, PostTestHelpersTreasuryReceivedDebitsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/test_helpers/treasury/received_debits'
    });
};

/**
 * <p>Creates a single-use token that represents a bank account’s details.
 * You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
 */
export const postTokens = <ThrowOnError extends boolean = false>(options?: Options<PostTokensData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTokensResponse, PostTokensError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tokens'
    });
};

/**
 * <p>Retrieves the token with the given ID.</p>
 */
export const getTokensToken = <ThrowOnError extends boolean = false>(options: Options<GetTokensTokenData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTokensTokenResponse, GetTokensTokenError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/tokens/{token}'
    });
};

/**
 * <p>Returns a list of top-ups.</p>
 */
export const getTopups = <ThrowOnError extends boolean = false>(options?: Options<GetTopupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTopupsResponse, GetTopupsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/topups'
    });
};

/**
 * <p>Top up the balance of an account</p>
 */
export const postTopups = <ThrowOnError extends boolean = false>(options: Options<PostTopupsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTopupsResponse, PostTopupsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/topups'
    });
};

/**
 * <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
 */
export const getTopupsTopup = <ThrowOnError extends boolean = false>(options: Options<GetTopupsTopupData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTopupsTopupResponse, GetTopupsTopupError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/topups/{topup}'
    });
};

/**
 * <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
 */
export const postTopupsTopup = <ThrowOnError extends boolean = false>(options: Options<PostTopupsTopupData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTopupsTopupResponse, PostTopupsTopupError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/topups/{topup}'
    });
};

/**
 * <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
 */
export const postTopupsTopupCancel = <ThrowOnError extends boolean = false>(options: Options<PostTopupsTopupCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTopupsTopupCancelResponse, PostTopupsTopupCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/topups/{topup}/cancel'
    });
};

/**
 * <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
 */
export const getTransfers = <ThrowOnError extends boolean = false>(options?: Options<GetTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTransfersResponse, GetTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers'
    });
};

/**
 * <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
 */
export const postTransfers = <ThrowOnError extends boolean = false>(options: Options<PostTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTransfersResponse, PostTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers'
    });
};

/**
 * <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
 */
export const getTransfersIdReversals = <ThrowOnError extends boolean = false>(options: Options<GetTransfersIdReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTransfersIdReversalsResponse, GetTransfersIdReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{id}/reversals'
    });
};

/**
 * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
 *
 * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
 *
 * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
 */
export const postTransfersIdReversals = <ThrowOnError extends boolean = false>(options: Options<PostTransfersIdReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTransfersIdReversalsResponse, PostTransfersIdReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{id}/reversals'
    });
};

/**
 * <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
 */
export const getTransfersTransfer = <ThrowOnError extends boolean = false>(options: Options<GetTransfersTransferData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTransfersTransferResponse, GetTransfersTransferError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{transfer}'
    });
};

/**
 * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 *
 * <p>This request accepts only metadata as an argument.</p>
 */
export const postTransfersTransfer = <ThrowOnError extends boolean = false>(options: Options<PostTransfersTransferData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTransfersTransferResponse, PostTransfersTransferError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{transfer}'
    });
};

/**
 * <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
 */
export const getTransfersTransferReversalsId = <ThrowOnError extends boolean = false>(options: Options<GetTransfersTransferReversalsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTransfersTransferReversalsIdResponse, GetTransfersTransferReversalsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{transfer}/reversals/{id}'
    });
};

/**
 * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
 *
 * <p>This request only accepts metadata and description as arguments.</p>
 */
export const postTransfersTransferReversalsId = <ThrowOnError extends boolean = false>(options: Options<PostTransfersTransferReversalsIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTransfersTransferReversalsIdResponse, PostTransfersTransferReversalsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/transfers/{transfer}/reversals/{id}'
    });
};

/**
 * <p>Returns a list of CreditReversals.</p>
 */
export const getTreasuryCreditReversals = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryCreditReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryCreditReversalsResponse, GetTreasuryCreditReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/credit_reversals'
    });
};

/**
 * <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
 */
export const postTreasuryCreditReversals = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryCreditReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryCreditReversalsResponse, PostTreasuryCreditReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/credit_reversals'
    });
};

/**
 * <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
 */
export const getTreasuryCreditReversalsCreditReversal = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryCreditReversalsCreditReversalData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryCreditReversalsCreditReversalResponse, GetTreasuryCreditReversalsCreditReversalError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/credit_reversals/{credit_reversal}'
    });
};

/**
 * <p>Returns a list of DebitReversals.</p>
 */
export const getTreasuryDebitReversals = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryDebitReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryDebitReversalsResponse, GetTreasuryDebitReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/debit_reversals'
    });
};

/**
 * <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
 */
export const postTreasuryDebitReversals = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryDebitReversalsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryDebitReversalsResponse, PostTreasuryDebitReversalsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/debit_reversals'
    });
};

/**
 * <p>Retrieves a DebitReversal object.</p>
 */
export const getTreasuryDebitReversalsDebitReversal = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryDebitReversalsDebitReversalData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryDebitReversalsDebitReversalResponse, GetTreasuryDebitReversalsDebitReversalError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/debit_reversals/{debit_reversal}'
    });
};

/**
 * <p>Returns a list of FinancialAccounts.</p>
 */
export const getTreasuryFinancialAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetTreasuryFinancialAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryFinancialAccountsResponse, GetTreasuryFinancialAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts'
    });
};

/**
 * <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
 */
export const postTreasuryFinancialAccounts = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryFinancialAccountsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryFinancialAccountsResponse, PostTreasuryFinancialAccountsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts'
    });
};

/**
 * <p>Retrieves the details of a FinancialAccount.</p>
 */
export const getTreasuryFinancialAccountsFinancialAccount = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryFinancialAccountsFinancialAccountData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryFinancialAccountsFinancialAccountResponse, GetTreasuryFinancialAccountsFinancialAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts/{financial_account}'
    });
};

/**
 * <p>Updates the details of a FinancialAccount.</p>
 */
export const postTreasuryFinancialAccountsFinancialAccount = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryFinancialAccountsFinancialAccountData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryFinancialAccountsFinancialAccountResponse, PostTreasuryFinancialAccountsFinancialAccountError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts/{financial_account}'
    });
};

/**
 * <p>Retrieves Features information associated with the FinancialAccount.</p>
 */
export const getTreasuryFinancialAccountsFinancialAccountFeatures = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryFinancialAccountsFinancialAccountFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryFinancialAccountsFinancialAccountFeaturesResponse, GetTreasuryFinancialAccountsFinancialAccountFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts/{financial_account}/features'
    });
};

/**
 * <p>Updates the Features associated with a FinancialAccount.</p>
 */
export const postTreasuryFinancialAccountsFinancialAccountFeatures = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryFinancialAccountsFinancialAccountFeaturesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryFinancialAccountsFinancialAccountFeaturesResponse, PostTreasuryFinancialAccountsFinancialAccountFeaturesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/financial_accounts/{financial_account}/features'
    });
};

/**
 * <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
 */
export const getTreasuryInboundTransfers = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryInboundTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryInboundTransfersResponse, GetTreasuryInboundTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/inbound_transfers'
    });
};

/**
 * <p>Creates an InboundTransfer.</p>
 */
export const postTreasuryInboundTransfers = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryInboundTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryInboundTransfersResponse, PostTreasuryInboundTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/inbound_transfers'
    });
};

/**
 * <p>Retrieves the details of an existing InboundTransfer.</p>
 */
export const getTreasuryInboundTransfersId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryInboundTransfersIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryInboundTransfersIdResponse, GetTreasuryInboundTransfersIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/inbound_transfers/{id}'
    });
};

/**
 * <p>Cancels an InboundTransfer.</p>
 */
export const postTreasuryInboundTransfersInboundTransferCancel = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryInboundTransfersInboundTransferCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryInboundTransfersInboundTransferCancelResponse, PostTreasuryInboundTransfersInboundTransferCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/inbound_transfers/{inbound_transfer}/cancel'
    });
};

/**
 * <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
 */
export const getTreasuryOutboundPayments = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryOutboundPaymentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryOutboundPaymentsResponse, GetTreasuryOutboundPaymentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_payments'
    });
};

/**
 * <p>Creates an OutboundPayment.</p>
 */
export const postTreasuryOutboundPayments = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryOutboundPaymentsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryOutboundPaymentsResponse, PostTreasuryOutboundPaymentsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_payments'
    });
};

/**
 * <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
 */
export const getTreasuryOutboundPaymentsId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryOutboundPaymentsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryOutboundPaymentsIdResponse, GetTreasuryOutboundPaymentsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_payments/{id}'
    });
};

/**
 * <p>Cancel an OutboundPayment.</p>
 */
export const postTreasuryOutboundPaymentsIdCancel = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryOutboundPaymentsIdCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryOutboundPaymentsIdCancelResponse, PostTreasuryOutboundPaymentsIdCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_payments/{id}/cancel'
    });
};

/**
 * <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
 */
export const getTreasuryOutboundTransfers = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryOutboundTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryOutboundTransfersResponse, GetTreasuryOutboundTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_transfers'
    });
};

/**
 * <p>Creates an OutboundTransfer.</p>
 */
export const postTreasuryOutboundTransfers = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryOutboundTransfersData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryOutboundTransfersResponse, PostTreasuryOutboundTransfersError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_transfers'
    });
};

/**
 * <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
 */
export const getTreasuryOutboundTransfersOutboundTransfer = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryOutboundTransfersOutboundTransferData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryOutboundTransfersOutboundTransferResponse, GetTreasuryOutboundTransfersOutboundTransferError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_transfers/{outbound_transfer}'
    });
};

/**
 * <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
 */
export const postTreasuryOutboundTransfersOutboundTransferCancel = <ThrowOnError extends boolean = false>(options: Options<PostTreasuryOutboundTransfersOutboundTransferCancelData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostTreasuryOutboundTransfersOutboundTransferCancelResponse, PostTreasuryOutboundTransfersOutboundTransferCancelError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/outbound_transfers/{outbound_transfer}/cancel'
    });
};

/**
 * <p>Returns a list of ReceivedCredits.</p>
 */
export const getTreasuryReceivedCredits = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryReceivedCreditsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryReceivedCreditsResponse, GetTreasuryReceivedCreditsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/received_credits'
    });
};

/**
 * <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
 */
export const getTreasuryReceivedCreditsId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryReceivedCreditsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryReceivedCreditsIdResponse, GetTreasuryReceivedCreditsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/received_credits/{id}'
    });
};

/**
 * <p>Returns a list of ReceivedDebits.</p>
 */
export const getTreasuryReceivedDebits = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryReceivedDebitsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryReceivedDebitsResponse, GetTreasuryReceivedDebitsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/received_debits'
    });
};

/**
 * <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
 */
export const getTreasuryReceivedDebitsId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryReceivedDebitsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryReceivedDebitsIdResponse, GetTreasuryReceivedDebitsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/received_debits/{id}'
    });
};

/**
 * <p>Retrieves a list of TransactionEntry objects.</p>
 */
export const getTreasuryTransactionEntries = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryTransactionEntriesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryTransactionEntriesResponse, GetTreasuryTransactionEntriesError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/transaction_entries'
    });
};

/**
 * <p>Retrieves a TransactionEntry object.</p>
 */
export const getTreasuryTransactionEntriesId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryTransactionEntriesIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryTransactionEntriesIdResponse, GetTreasuryTransactionEntriesIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/transaction_entries/{id}'
    });
};

/**
 * <p>Retrieves a list of Transaction objects.</p>
 */
export const getTreasuryTransactions = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryTransactionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryTransactionsResponse, GetTreasuryTransactionsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/transactions'
    });
};

/**
 * <p>Retrieves the details of an existing Transaction.</p>
 */
export const getTreasuryTransactionsId = <ThrowOnError extends boolean = false>(options: Options<GetTreasuryTransactionsIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTreasuryTransactionsIdResponse, GetTreasuryTransactionsIdError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/treasury/transactions/{id}'
    });
};

/**
 * <p>Returns a list of your webhook endpoints.</p>
 */
export const getWebhookEndpoints = <ThrowOnError extends boolean = false>(options?: Options<GetWebhookEndpointsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWebhookEndpointsResponse, GetWebhookEndpointsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/webhook_endpoints'
    });
};

/**
 * <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
 */
export const postWebhookEndpoints = <ThrowOnError extends boolean = false>(options: Options<PostWebhookEndpointsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostWebhookEndpointsResponse, PostWebhookEndpointsError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/webhook_endpoints'
    });
};

/**
 * <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
 */
export const deleteWebhookEndpointsWebhookEndpoint = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookEndpointsWebhookEndpointData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteWebhookEndpointsWebhookEndpointResponse, DeleteWebhookEndpointsWebhookEndpointError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/webhook_endpoints/{webhook_endpoint}'
    });
};

/**
 * <p>Retrieves the webhook endpoint with the given ID.</p>
 */
export const getWebhookEndpointsWebhookEndpoint = <ThrowOnError extends boolean = false>(options: Options<GetWebhookEndpointsWebhookEndpointData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWebhookEndpointsWebhookEndpointResponse, GetWebhookEndpointsWebhookEndpointError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/webhook_endpoints/{webhook_endpoint}'
    });
};

/**
 * <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
 */
export const postWebhookEndpointsWebhookEndpoint = <ThrowOnError extends boolean = false>(options: Options<PostWebhookEndpointsWebhookEndpointData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostWebhookEndpointsWebhookEndpointResponse, PostWebhookEndpointsWebhookEndpointError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/v1/webhook_endpoints/{webhook_endpoint}'
    });
};