// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { CreateAnswerData, CreateAnswerError, CreateAnswerResponse2, CreateTranscriptionData, CreateTranscriptionError, CreateTranscriptionResponse2, CreateTranslationData, CreateTranslationError, CreateTranslationResponse2, CreateChatCompletionData, CreateChatCompletionError, CreateChatCompletionResponse2, CreateClassificationData, CreateClassificationError, CreateClassificationResponse2, CreateCompletionData, CreateCompletionError, CreateCompletionResponse2, CreateEditData, CreateEditError, CreateEditResponse2, CreateEmbeddingData, CreateEmbeddingError, CreateEmbeddingResponse2, ListEnginesError, ListEnginesResponse2, RetrieveEngineData, RetrieveEngineError, RetrieveEngineResponse, CreateSearchData, CreateSearchError, CreateSearchResponse2, ListFilesError, ListFilesResponse2, CreateFileData, CreateFileError, CreateFileResponse, DeleteFileData, DeleteFileError, DeleteFileResponse2, RetrieveFileData, RetrieveFileError, RetrieveFileResponse, DownloadFileData, DownloadFileError, DownloadFileResponse, ListFineTunesError, ListFineTunesResponse2, CreateFineTuneData, CreateFineTuneError, CreateFineTuneResponse, RetrieveFineTuneData, RetrieveFineTuneError, RetrieveFineTuneResponse, CancelFineTuneData, CancelFineTuneError, CancelFineTuneResponse, ListFineTuneEventsData, ListFineTuneEventsError, ListFineTuneEventsResponse2, CreateImageEditData, CreateImageEditError, CreateImageEditResponse, CreateImageData, CreateImageError, CreateImageResponse, CreateImageVariationData, CreateImageVariationError, CreateImageVariationResponse, ListModelsError, ListModelsResponse2, DeleteModelData, DeleteModelError, DeleteModelResponse2, RetrieveModelData, RetrieveModelError, RetrieveModelResponse, CreateModerationData, CreateModerationError, CreateModerationResponse2 } from './types.gen';

export const client = createClient(createConfig());

/**
 * @deprecated
 * Answers the specified question using the provided documents and examples.
 *
 * The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
 *
 */
export const createAnswer = <ThrowOnError extends boolean = false>(options: Options<CreateAnswerData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAnswerResponse2, CreateAnswerError, ThrowOnError>({
    ...options,
    url: '/answers'
}); };

/**
 * Transcribes audio into the input language.
 */
export const createTranscription = <ThrowOnError extends boolean = false>(options: Options<CreateTranscriptionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateTranscriptionResponse2, CreateTranscriptionError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/audio/transcriptions'
}); };

/**
 * Translates audio into into English.
 */
export const createTranslation = <ThrowOnError extends boolean = false>(options: Options<CreateTranslationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateTranslationResponse2, CreateTranslationError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/audio/translations'
}); };

/**
 * Creates a completion for the chat message
 */
export const createChatCompletion = <ThrowOnError extends boolean = false>(options: Options<CreateChatCompletionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateChatCompletionResponse2, CreateChatCompletionError, ThrowOnError>({
    ...options,
    url: '/chat/completions'
}); };

/**
 * @deprecated
 * Classifies the specified `query` using provided examples.
 *
 * The endpoint first [searches](/docs/api-reference/searches) over the labeled examples
 * to select the ones most relevant for the particular query. Then, the relevant examples
 * are combined with the query to construct a prompt to produce the final label via the
 * [completions](/docs/api-reference/completions) endpoint.
 *
 * Labeled examples can be provided via an uploaded `file`, or explicitly listed in the
 * request using the `examples` parameter for quick tests and small scale use cases.
 *
 */
export const createClassification = <ThrowOnError extends boolean = false>(options: Options<CreateClassificationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateClassificationResponse2, CreateClassificationError, ThrowOnError>({
    ...options,
    url: '/classifications'
}); };

/**
 * Creates a completion for the provided prompt and parameters
 */
export const createCompletion = <ThrowOnError extends boolean = false>(options: Options<CreateCompletionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateCompletionResponse2, CreateCompletionError, ThrowOnError>({
    ...options,
    url: '/completions'
}); };

/**
 * Creates a new edit for the provided input, instruction, and parameters.
 */
export const createEdit = <ThrowOnError extends boolean = false>(options: Options<CreateEditData, ThrowOnError>) => { return (options?.client ?? client).post<CreateEditResponse2, CreateEditError, ThrowOnError>({
    ...options,
    url: '/edits'
}); };

/**
 * Creates an embedding vector representing the input text.
 */
export const createEmbedding = <ThrowOnError extends boolean = false>(options: Options<CreateEmbeddingData, ThrowOnError>) => { return (options?.client ?? client).post<CreateEmbeddingResponse2, CreateEmbeddingError, ThrowOnError>({
    ...options,
    url: '/embeddings'
}); };

/**
 * @deprecated
 * Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
 */
export const listEngines = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListEnginesResponse2, ListEnginesError, ThrowOnError>({
    ...options,
    url: '/engines'
}); };

/**
 * @deprecated
 * Retrieves a model instance, providing basic information about it such as the owner and availability.
 */
export const retrieveEngine = <ThrowOnError extends boolean = false>(options: Options<RetrieveEngineData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveEngineResponse, RetrieveEngineError, ThrowOnError>({
    ...options,
    url: '/engines/{engine_id}'
}); };

/**
 * @deprecated
 * The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.
 *
 * To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.
 *
 * The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
 *
 */
export const createSearch = <ThrowOnError extends boolean = false>(options: Options<CreateSearchData, ThrowOnError>) => { return (options?.client ?? client).post<CreateSearchResponse2, CreateSearchError, ThrowOnError>({
    ...options,
    url: '/engines/{engine_id}/search'
}); };

/**
 * Returns a list of files that belong to the user's organization.
 */
export const listFiles = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListFilesResponse2, ListFilesError, ThrowOnError>({
    ...options,
    url: '/files'
}); };

/**
 * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
 *
 */
export const createFile = <ThrowOnError extends boolean = false>(options: Options<CreateFileData, ThrowOnError>) => { return (options?.client ?? client).post<CreateFileResponse, CreateFileError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/files'
}); };

/**
 * Delete a file.
 */
export const deleteFile = <ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteFileResponse2, DeleteFileError, ThrowOnError>({
    ...options,
    url: '/files/{file_id}'
}); };

/**
 * Returns information about a specific file.
 */
export const retrieveFile = <ThrowOnError extends boolean = false>(options: Options<RetrieveFileData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveFileResponse, RetrieveFileError, ThrowOnError>({
    ...options,
    url: '/files/{file_id}'
}); };

/**
 * Returns the contents of the specified file
 */
export const downloadFile = <ThrowOnError extends boolean = false>(options: Options<DownloadFileData, ThrowOnError>) => { return (options?.client ?? client).get<DownloadFileResponse, DownloadFileError, ThrowOnError>({
    ...options,
    url: '/files/{file_id}/content'
}); };

/**
 * List your organization's fine-tuning jobs
 *
 */
export const listFineTunes = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListFineTunesResponse2, ListFineTunesError, ThrowOnError>({
    ...options,
    url: '/fine-tunes'
}); };

/**
 * Creates a job that fine-tunes a specified model from a given dataset.
 *
 * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
 *
 * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
 *
 */
export const createFineTune = <ThrowOnError extends boolean = false>(options: Options<CreateFineTuneData, ThrowOnError>) => { return (options?.client ?? client).post<CreateFineTuneResponse, CreateFineTuneError, ThrowOnError>({
    ...options,
    url: '/fine-tunes'
}); };

/**
 * Gets info about the fine-tune job.
 *
 * [Learn more about Fine-tuning](/docs/guides/fine-tuning)
 *
 */
export const retrieveFineTune = <ThrowOnError extends boolean = false>(options: Options<RetrieveFineTuneData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveFineTuneResponse, RetrieveFineTuneError, ThrowOnError>({
    ...options,
    url: '/fine-tunes/{fine_tune_id}'
}); };

/**
 * Immediately cancel a fine-tune job.
 *
 */
export const cancelFineTune = <ThrowOnError extends boolean = false>(options: Options<CancelFineTuneData, ThrowOnError>) => { return (options?.client ?? client).post<CancelFineTuneResponse, CancelFineTuneError, ThrowOnError>({
    ...options,
    url: '/fine-tunes/{fine_tune_id}/cancel'
}); };

/**
 * Get fine-grained status updates for a fine-tune job.
 *
 */
export const listFineTuneEvents = <ThrowOnError extends boolean = false>(options: Options<ListFineTuneEventsData, ThrowOnError>) => { return (options?.client ?? client).get<ListFineTuneEventsResponse2, ListFineTuneEventsError, ThrowOnError>({
    ...options,
    url: '/fine-tunes/{fine_tune_id}/events'
}); };

/**
 * Creates an edited or extended image given an original image and a prompt.
 */
export const createImageEdit = <ThrowOnError extends boolean = false>(options: Options<CreateImageEditData, ThrowOnError>) => { return (options?.client ?? client).post<CreateImageEditResponse, CreateImageEditError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/images/edits'
}); };

/**
 * Creates an image given a prompt.
 */
export const createImage = <ThrowOnError extends boolean = false>(options: Options<CreateImageData, ThrowOnError>) => { return (options?.client ?? client).post<CreateImageResponse, CreateImageError, ThrowOnError>({
    ...options,
    url: '/images/generations'
}); };

/**
 * Creates a variation of a given image.
 */
export const createImageVariation = <ThrowOnError extends boolean = false>(options: Options<CreateImageVariationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateImageVariationResponse, CreateImageVariationError, ThrowOnError>({
    ...options,
    ...formDataBodySerializer,
    headers: {
        'Content-Type': null,
        ...options?.headers
    },
    url: '/images/variations'
}); };

/**
 * Lists the currently available models, and provides basic information about each one such as the owner and availability.
 */
export const listModels = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListModelsResponse2, ListModelsError, ThrowOnError>({
    ...options,
    url: '/models'
}); };

/**
 * Delete a fine-tuned model. You must have the Owner role in your organization.
 */
export const deleteModel = <ThrowOnError extends boolean = false>(options: Options<DeleteModelData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteModelResponse2, DeleteModelError, ThrowOnError>({
    ...options,
    url: '/models/{model}'
}); };

/**
 * Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
 */
export const retrieveModel = <ThrowOnError extends boolean = false>(options: Options<RetrieveModelData, ThrowOnError>) => { return (options?.client ?? client).get<RetrieveModelResponse, RetrieveModelError, ThrowOnError>({
    ...options,
    url: '/models/{model}'
}); };

/**
 * Classifies if text violates OpenAI's Content Policy
 */
export const createModeration = <ThrowOnError extends boolean = false>(options: Options<CreateModerationData, ThrowOnError>) => { return (options?.client ?? client).post<CreateModerationResponse2, CreateModerationError, ThrowOnError>({
    ...options,
    url: '/moderations'
}); };