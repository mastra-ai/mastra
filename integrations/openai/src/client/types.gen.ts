// This file is auto-generated by @hey-api/openapi-ts

export type ChatCompletionRequestMessage = {
    /**
     * The contents of the message
     */
    content: string;
    /**
     * The name of the user in a multi-user chat
     */
    name?: string;
    /**
     * The role of the author of this message.
     */
    role: 'system' | 'user' | 'assistant';
};

/**
 * The role of the author of this message.
 */
export type role = 'system' | 'user' | 'assistant';

export type ChatCompletionResponseMessage = {
    /**
     * The contents of the message
     */
    content: string;
    /**
     * The role of the author of this message.
     */
    role: 'system' | 'user' | 'assistant';
};

export type CreateAnswerRequest = {
    /**
     * List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
     *
     * You should specify either `documents` or a `file`, but not both.
     *
     */
    documents?: Array<(string)> | null;
    /**
     * List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
     */
    examples: Array<[
        string,
        string
    ]>;
    /**
     * A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
     */
    examples_context: string;
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     */
    expand?: Array<unknown> | null;
    /**
     * The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     *
     * You should specify either `documents` or a `file`, but not both.
     *
     */
    file?: (string) | null;
    logit_bias?: Record<string, string>;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     *
     * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
     *
     * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
     *
     */
    logprobs?: (number) | null;
    /**
     * The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     */
    max_rerank?: (number) | null;
    /**
     * The maximum number of tokens allowed for the generated answer
     */
    max_tokens?: (number) | null;
    /**
     * ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     */
    model: string;
    /**
     * How many answers to generate for each question.
     */
    n?: (number) | null;
    /**
     * Question to get answered.
     */
    question: string;
    return_metadata?: boolean;
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     */
    return_prompt?: (boolean) | null;
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     */
    search_model?: (string) | null;
    /**
     * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
     *
     */
    stop?: ((string | Array<(string)>) | null);
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    temperature?: (number) | null;
    user?: string ;
};

export type CreateAnswerResponse = {
    answers?: Array<(string)>;
    completion?: string;
    model?: string;
    object?: string;
    search_model?: string;
    selected_documents?: Array<{
        document?: number;
        text?: string;
    }>;
};

export type CreateChatCompletionRequest = {
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     *
     */
    frequency_penalty?: (number) | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     */
    logit_bias?: {
        [key: string]: unknown;
    } | null;
    /**
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
     *
     */
    max_tokens?: number;
    /**
     * The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction).
     */
    messages: Array<ChatCompletionRequestMessage>;
    /**
     * ID of the model to use. Currently, only `gpt-3.5-turbo` and `gpt-3.5-turbo-0301` are supported.
     */
    model: string;
    /**
     * How many chat completion choices to generate for each input message.
     */
    n?: (number) | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     *
     */
    presence_penalty?: (number) | null;
    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     */
    stop?: ((string) | null | Array<(string)>);
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     *
     */
    stream?: (boolean) | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     */
    temperature?: (number) | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     */
    top_p?: (number) | null;
    user?: string;
};

export type CreateChatCompletionResponse = {
    choices: Array<{
        finish_reason?: string;
        index?: number;
        message?: ChatCompletionResponseMessage;
    }>;
    created: number;
    id: string;
    model: string;
    object: string;
    usage?: {
        completion_tokens: number;
        prompt_tokens: number;
        total_tokens: number;
    };
};

export type CreateClassificationRequest = {
    /**
     * A list of examples with labels, in the following format:
     *
     * `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
     *
     * All the label strings will be normalized to be capitalized.
     *
     * You should specify either `examples` or `file`, but not both.
     *
     */
    examples?: Array<[
        string,
        string
    ]> | null;
    expand?: boolean;
    /**
     * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     *
     * You should specify either `examples` or `file`, but not both.
     *
     */
    file?: (string) | null;
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     */
    labels?: Array<(string)> | null;
    logit_bias?: Record<string, string>;
    logprobs?: (number) | null;
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     */
    max_examples?: (number) | null;
    model: string;
    /**
     * Query to be classified.
     */
    query: string;
    return_metadata?: boolean;
    return_prompt?: boolean
    search_model?: string;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    temperature?: (number) | null;
    user?: string;
};

export type CreateClassificationResponse = {
    completion?: string;
    label?: string;
    model?: string;
    object?: string;
    search_model?: string;
    selected_examples?: Array<{
        document?: number;
        label?: string;
        text?: string;
    }>;
};

export type CreateCompletionRequest = {
    /**
     * Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
     *
     * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
     *
     * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     */
    best_of?: (number) | null;
    /**
     * Echo back the prompt in addition to the completion
     *
     */
    echo?: (boolean) | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     *
     */
    frequency_penalty?: (number) | null;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
     *
     */
    logit_bias?: {
        [key: string]: unknown;
    } | null;
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     *
     * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
     *
     */
    logprobs?: (number) | null;
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the completion.
     *
     * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
     *
     */
    max_tokens?: (number) | null;
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     */
    model: string;
    /**
     * How many completions to generate for each prompt.
     *
     * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     *
     */
    n?: (number) | null;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     *
     */
    presence_penalty?: (number) | null;
    /**
     * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
     *
     * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
     *
     */
    prompt?: ((string | Array<(string)> | Array<(number)> | Array<Array<(number)>>) | null);
    /**
     * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
     *
     */
    stop?: ((string) | null | Array<(string)>);
    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     *
     */
    stream?: (boolean) | null;
    /**
     * The suffix that comes after a completion of inserted text.
     */
    suffix?: (string) | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     */
    temperature?: (number) | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     */
    top_p?: (number) | null;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     */
    user?: string;
};

export type CreateCompletionResponse = {
    choices: Array<{
        finish_reason?: string;
        index?: number;
        logprobs?: {
            text_offset?: Array<(number)>;
            token_logprobs?: Array<(number)>;
            tokens?: Array<(string)>;
            top_logprobs?: Array<{
                [key: string]: unknown;
            }>;
        } | null;
        text?: string;
    }>;
    created: number;
    id: string;
    model: string;
    object: string;
    usage?: {
        completion_tokens: number;
        prompt_tokens: number;
        total_tokens: number;
    };
};

export type CreateEditRequest = {
    /**
     * The input text to use as a starting point for the edit.
     */
    input?: (string) | null;
    /**
     * The instruction that tells the model how to edit the prompt.
     */
    instruction: string;
    /**
     * ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
     */
    model: string;
    /**
     * How many edits to generate for the input and instruction.
     */
    n?: (number) | null;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     */
    temperature?: (number) | null;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     */
    top_p?: (number) | null;
};

export type CreateEditResponse = {
    choices: Array<{
        finish_reason?: string;
        index?: number;
        logprobs?: {
            text_offset?: Array<(number)>;
            token_logprobs?: Array<(number)>;
            tokens?: Array<(string)>;
            top_logprobs?: Array<{
                [key: string]: unknown;
            }>;
        } | null;
        text?: string;
    }>;
    created: number;
    object: string;
    usage: {
        completion_tokens: number;
        prompt_tokens: number;
        total_tokens: number;
    };
};

export type CreateEmbeddingRequest = {
    /**
     * Input text to get embeddings for, encoded as a string or array of tokens. To get embeddings for multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed 8192 tokens in length.
     *
     */
    input: (string | Array<(string)> | Array<(number)> | Array<Array<(number)>>);
    model: string;
    user?: string;
};

export type CreateEmbeddingResponse = {
    data: Array<{
        embedding: Array<(number)>;
        index: number;
        object: string;
    }>;
    model: string;
    object: string;
    usage: {
        prompt_tokens: number;
        total_tokens: number;
    };
};

export type CreateFileRequest = {
    /**
     * Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.
     *
     * If the `purpose` is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
     *
     */
    file: (Blob | File);
    /**
     * The intended purpose of the uploaded documents.
     *
     * Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
     *
     */
    purpose: string;
};

export type CreateFineTuneRequest = {
    /**
     * The batch size to use for training. The batch size is the number of
     * training examples used to train a single forward and backward pass.
     *
     * By default, the batch size will be dynamically configured to be
     * ~0.2% of the number of examples in the training set, capped at 256 -
     * in general, we've found that larger batch sizes tend to work better
     * for larger datasets.
     *
     */
    batch_size?: (number) | null;
    /**
     * If this is provided, we calculate F-beta scores at the specified
     * beta values. The F-beta score is a generalization of F-1 score.
     * This is only used for binary classification.
     *
     * With a beta of 1 (i.e. the F-1 score), precision and recall are
     * given the same weight. A larger beta score puts more weight on
     * recall and less on precision. A smaller beta score puts more weight
     * on precision and less on recall.
     *
     */
    classification_betas?: Array<(number)> | null;
    /**
     * The number of classes in a classification task.
     *
     * This parameter is required for multiclass classification.
     *
     */
    classification_n_classes?: (number) | null;
    /**
     * The positive class in binary classification.
     *
     * This parameter is needed to generate precision, recall, and F1
     * metrics when doing binary classification.
     *
     */
    classification_positive_class?: (string) | null;
    /**
     * If set, we calculate classification-specific metrics such as accuracy
     * and F-1 score using the validation set at the end of every epoch.
     * These metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
     *
     * In order to compute classification metrics, you must provide a
     * `validation_file`. Additionally, you must
     * specify `classification_n_classes` for multiclass classification or
     * `classification_positive_class` for binary classification.
     *
     */
    compute_classification_metrics?: (boolean) | null;
    /**
     * The learning rate multiplier to use for training.
     * The fine-tuning learning rate is the original learning rate used for
     * pretraining multiplied by this value.
     *
     * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
     * depending on final `batch_size` (larger learning rates tend to
     * perform better with larger batch sizes). We recommend experimenting
     * with values in the range 0.02 to 0.2 to see what produces the best
     * results.
     *
     */
    learning_rate_multiplier?: (number) | null;
    /**
     * The name of the base model to fine-tune. You can select one of "ada",
     * "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.
     * To learn more about these models, see the
     * [Models](https://platform.openai.com/docs/models) documentation.
     *
     */
    model?: (string) | null;
    /**
     * The number of epochs to train the model for. An epoch refers to one
     * full cycle through the training dataset.
     *
     */
    n_epochs?: (number) | null;
    /**
     * The weight to use for loss on the prompt tokens. This controls how
     * much the model tries to learn to generate the prompt (as compared
     * to the completion which always has a weight of 1.0), and can add
     * a stabilizing effect to training when completions are short.
     *
     * If prompts are extremely long (relative to completions), it may make
     * sense to reduce this weight so as to avoid over-prioritizing
     * learning the prompt.
     *
     */
    prompt_loss_weight?: (number) | null;
    /**
     * A string of up to 40 characters that will be added to your fine-tuned model name.
     *
     * For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
     *
     */
    suffix?: (string) | null;
    /**
     * The ID of an uploaded file that contains training data.
     *
     * See [upload file](/docs/api-reference/files/upload) for how to upload a file.
     *
     * Your dataset must be formatted as a JSONL file, where each training
     * example is a JSON object with the keys "prompt" and "completion".
     * Additionally, you must upload your file with the purpose `fine-tune`.
     *
     * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
     *
     */
    training_file: string;
    /**
     * The ID of an uploaded file that contains validation data.
     *
     * If you provide this file, the data is used to generate validation
     * metrics periodically during fine-tuning. These metrics can be viewed in
     * the [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).
     * Your train and validation data should be mutually exclusive.
     *
     * Your dataset must be formatted as a JSONL file, where each validation
     * example is a JSON object with the keys "prompt" and "completion".
     * Additionally, you must upload your file with the purpose `fine-tune`.
     *
     * See the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.
     *
     */
    validation_file?: (string) | null;
};

export type CreateImageEditRequest = {
    /**
     * The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
     */
    image: (Blob | File);
    /**
     * An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
     */
    mask?: (Blob | File);
    n?: string;
    /**
     * A text description of the desired image(s). The maximum length is 1000 characters.
     */
    prompt: string;
    response_format?: string
    size?: string;
    user?: string;
};

export type CreateImageRequest = {
    /**
     * The number of images to generate. Must be between 1 and 10.
     */
    n?: (number) | null;
    /**
     * A text description of the desired image(s). The maximum length is 1000 characters.
     */
    prompt: string;
    /**
     * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
     */
    response_format?: ('url' | 'b64_json') | null;
    /**
     * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
     */
    size?: ('256x256' | '512x512' | '1024x1024') | null;
    user?: string;
};

/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`.
 */
export type response_format = 'url' | 'b64_json';

/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export type size = '256x256' | '512x512' | '1024x1024';

export type CreateImageVariationRequest = {
    /**
     * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
     */
    image: (Blob | File);
    n?: string;
    response_format?: string;
    size?: string;
    user?: string
};

export type CreateModerationRequest = {
    /**
     * The input text to classify
     */
    input: (string | Array<(string)>);
    /**
     * Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
     *
     * The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
     *
     */
    model?: string;
};

export type CreateModerationResponse = {
    id: string;
    model: string;
    results: Array<{
        categories: {
            hate: boolean;
            'hate/threatening': boolean;
            'self-harm': boolean;
            sexual: boolean;
            'sexual/minors': boolean;
            violence: boolean;
            'violence/graphic': boolean;
        };
        category_scores: {
            hate: number;
            'hate/threatening': number;
            'self-harm': number;
            sexual: number;
            'sexual/minors': number;
            violence: number;
            'violence/graphic': number;
        };
        flagged: boolean;
    }>;
};

export type CreateSearchRequest = {
    /**
     * Up to 200 documents to search over, provided as a list of strings.
     *
     * The maximum document length (in tokens) is 2034 minus the number of tokens in the query.
     *
     * You should specify either `documents` or a `file`, but not both.
     *
     */
    documents?: Array<(string)> | null;
    /**
     * The ID of an uploaded file that contains documents to search over.
     *
     * You should specify either `documents` or a `file`, but not both.
     *
     */
    file?: (string) | null;
    /**
     * The maximum number of documents to be re-ranked and returned by search.
     *
     * This flag only takes effect when `file` is set.
     *
     */
    max_rerank?: (number) | null;
    /**
     * Query to search against the documents.
     */
    query: string;
    /**
     * A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a "metadata" field.
     *
     * This flag only takes effect when `file` is set.
     *
     */
    return_metadata?: (boolean) | null;
    user?: string;
};

export type CreateSearchResponse = {
    data?: Array<{
        document?: number;
        object?: string;
        score?: number;
    }>;
    model?: string;
    object?: string;
};

export type CreateTranscriptionRequest = {
    /**
     * The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
     *
     */
    file: (Blob | File);
    /**
     * The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
     *
     */
    language?: string;
    /**
     * ID of the model to use. Only `whisper-1` is currently available.
     *
     */
    model: string;
    /**
     * An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
     *
     */
    prompt?: string;
    /**
     * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
     *
     */
    response_format?: string;
    /**
     * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
     *
     */
    temperature?: number;
};

export type CreateTranscriptionResponse = {
    text: string;
};

export type CreateTranslationRequest = {
    /**
     * The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
     *
     */
    file: (Blob | File);
    /**
     * ID of the model to use. Only `whisper-1` is currently available.
     *
     */
    model: string;
    /**
     * An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
     *
     */
    prompt?: string;
    /**
     * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
     *
     */
    response_format?: string;
    /**
     * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
     *
     */
    temperature?: number;
};

export type CreateTranslationResponse = {
    text: string;
};

export type DeleteFileResponse = {
    deleted: boolean;
    id: string;
    object: string;
};

export type DeleteModelResponse = {
    deleted: boolean;
    id: string;
    object: string;
};

export type Engine = {
    created: (number) | null;
    id: string;
    object: string;
    ready: boolean;
};

export type FineTune = {
    created_at: number;
    events?: Array<FineTuneEvent>;
    fine_tuned_model: (string) | null;
    hyperparams: {
        [key: string]: unknown;
    };
    id: string;
    model: string;
    object: string;
    organization_id: string;
    result_files: Array<OpenAIFile>;
    status: string;
    training_files: Array<OpenAIFile>;
    updated_at: number;
    validation_files: Array<OpenAIFile>;
};

export type FineTuneEvent = {
    created_at: number;
    level: string;
    message: string;
    object: string;
};

export type ImagesResponse = {
    created: number;
    data: Array<{
        b64_json?: string;
        url?: string;
    }>;
};

export type ListEnginesResponse = {
    data: Array<Engine>;
    object: string;
};

export type ListFilesResponse = {
    data: Array<OpenAIFile>;
    object: string;
};

export type ListFineTuneEventsResponse = {
    data: Array<FineTuneEvent>;
    object: string;
};

export type ListFineTunesResponse = {
    data: Array<FineTune>;
    object: string;
};

export type ListModelsResponse = {
    data: Array<Model>;
    object: string;
};

export type Model = {
    created: number;
    id: string;
    object: string;
    owned_by: string;
};

export type OpenAIFile = {
    bytes: number;
    created_at: number;
    filename: string;
    id: string;
    object: string;
    purpose: string;
    status?: string;
    status_details?: {
        [key: string]: unknown;
    } | null;
};

export type CreateAnswerData = {
    body: CreateAnswerRequest;
};

export type CreateAnswerResponse2 = (CreateAnswerResponse);

export type CreateAnswerError = unknown;

export type CreateTranscriptionData = {
    body: CreateTranscriptionRequest;
};

export type CreateTranscriptionResponse2 = (CreateTranscriptionResponse);

export type CreateTranscriptionError = unknown;

export type CreateTranslationData = {
    body: CreateTranslationRequest;
};

export type CreateTranslationResponse2 = (CreateTranslationResponse);

export type CreateTranslationError = unknown;

export type CreateChatCompletionData = {
    body: CreateChatCompletionRequest;
};

export type CreateChatCompletionResponse2 = (CreateChatCompletionResponse);

export type CreateChatCompletionError = unknown;

export type CreateClassificationData = {
    body: CreateClassificationRequest;
};

export type CreateClassificationResponse2 = (CreateClassificationResponse);

export type CreateClassificationError = unknown;

export type CreateCompletionData = {
    body: CreateCompletionRequest;
};

export type CreateCompletionResponse2 = (CreateCompletionResponse);

export type CreateCompletionError = unknown;

export type CreateEditData = {
    body: CreateEditRequest;
};

export type CreateEditResponse2 = (CreateEditResponse);

export type CreateEditError = unknown;

export type CreateEmbeddingData = {
    body: CreateEmbeddingRequest;
};

export type CreateEmbeddingResponse2 = (CreateEmbeddingResponse);

export type CreateEmbeddingError = unknown;

export type ListEnginesResponse2 = (ListEnginesResponse);

export type ListEnginesError = unknown;

export type RetrieveEngineData = {
    path: {
        /**
         * The ID of the engine to use for this request
         *
         */
        engine_id: string;
    };
};

export type RetrieveEngineResponse = (Engine);

export type RetrieveEngineError = unknown;

export type CreateSearchData = {
    body: CreateSearchRequest;
    path: {
        /**
         * The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`.
         */
        engine_id: string;
    };
};

export type CreateSearchResponse2 = (CreateSearchResponse);

export type CreateSearchError = unknown;

export type ListFilesResponse2 = (ListFilesResponse);

export type ListFilesError = unknown;

export type CreateFileData = {
    body: CreateFileRequest;
};

export type CreateFileResponse = (OpenAIFile);

export type CreateFileError = unknown;

export type DeleteFileData = {
    path: {
        /**
         * The ID of the file to use for this request
         */
        file_id: string;
    };
};

export type DeleteFileResponse2 = (DeleteFileResponse);

export type DeleteFileError = unknown;

export type RetrieveFileData = {
    path: {
        /**
         * The ID of the file to use for this request
         */
        file_id: string;
    };
};

export type RetrieveFileResponse = (OpenAIFile);

export type RetrieveFileError = unknown;

export type DownloadFileData = {
    path: {
        /**
         * The ID of the file to use for this request
         */
        file_id: string;
    };
};

export type DownloadFileResponse = (string);

export type DownloadFileError = unknown;

export type ListFineTunesResponse2 = (ListFineTunesResponse);

export type ListFineTunesError = unknown;

export type CreateFineTuneData = {
    body: CreateFineTuneRequest;
};

export type CreateFineTuneResponse = (FineTune);

export type CreateFineTuneError = unknown;

export type RetrieveFineTuneData = {
    path: {
        /**
         * The ID of the fine-tune job
         *
         */
        fine_tune_id: string;
    };
};

export type RetrieveFineTuneResponse = (FineTune);

export type RetrieveFineTuneError = unknown;

export type CancelFineTuneData = {
    path: {
        /**
         * The ID of the fine-tune job to cancel
         *
         */
        fine_tune_id: string;
    };
};

export type CancelFineTuneResponse = (FineTune);

export type CancelFineTuneError = unknown;

export type ListFineTuneEventsData = {
    path: {
        /**
         * The ID of the fine-tune job to get events for.
         *
         */
        fine_tune_id: string;
    };
    query?: {
        /**
         * Whether to stream events for the fine-tune job. If set to true,
         * events will be sent as data-only
         * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
         * as they become available. The stream will terminate with a
         * `data: [DONE]` message when the job is finished (succeeded, cancelled,
         * or failed).
         *
         * If set to false, only events generated so far will be returned.
         *
         */
        stream?: boolean;
    };
};

export type ListFineTuneEventsResponse2 = (ListFineTuneEventsResponse);

export type ListFineTuneEventsError = unknown;

export type CreateImageEditData = {
    body: CreateImageEditRequest;
};

export type CreateImageEditResponse = (ImagesResponse);

export type CreateImageEditError = unknown;

export type CreateImageData = {
    body: CreateImageRequest;
};

export type CreateImageResponse = (ImagesResponse);

export type CreateImageError = unknown;

export type CreateImageVariationData = {
    body: CreateImageVariationRequest;
};

export type CreateImageVariationResponse = (ImagesResponse);

export type CreateImageVariationError = unknown;

export type ListModelsResponse2 = (ListModelsResponse);

export type ListModelsError = unknown;

export type DeleteModelData = {
    path: {
        /**
         * The model to delete
         */
        model: string;
    };
};

export type DeleteModelResponse2 = (DeleteModelResponse);

export type DeleteModelError = unknown;

export type RetrieveModelData = {
    path: {
        /**
         * The ID of the model to use for this request
         */
        model: string;
    };
};

export type RetrieveModelResponse = (Model);

export type RetrieveModelError = unknown;

export type CreateModerationData = {
    body: CreateModerationRequest;
};

export type CreateModerationResponse2 = (CreateModerationResponse);

export type CreateModerationError = unknown;