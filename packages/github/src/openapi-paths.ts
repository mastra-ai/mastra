// @ts-nocheck
export type TPaths = {
  '/': {
    get: {
      description: "Get Hypermedia links to resources accessible in GitHub's REST API";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint';
      };
      operationId: 'meta/root';
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/root';
                };
              };
              schema: {
                $ref: '#/components/schemas/root';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'GitHub API Root';
      tags: ['meta'];
      'x-github': {
        category: 'meta';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/app': {
    get: {
      description: 'Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app\'s installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-the-authenticated-app';
      };
      operationId: 'apps/get-authenticated';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration';
                };
              };
              schema: {
                $ref: '#/components/schemas/integration';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/app-manifests/{code}/conversions': {
    post: {
      description: "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest';
      };
      operationId: 'apps/create-from-manifest';
      parameters: [
        {
          in: 'path';
          name: 'code';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-from-manifest';
                };
              };
              schema: {
                allOf: [
                  {
                    $ref: '#/components/schemas/integration';
                  },
                  {
                    additionalProperties: true;
                    properties: {
                      client_id: {
                        type: 'string';
                      };
                      client_secret: {
                        type: 'string';
                      };
                      pem: {
                        type: 'string';
                      };
                      webhook_secret: {
                        nullable: true;
                        type: 'string';
                      };
                    };
                    required: ['client_id', 'client_secret', 'webhook_secret', 'pem'];
                    type: 'object';
                  },
                ];
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a GitHub App from a manifest';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/app/hook/config': {
    get: {
      description: 'Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app';
      };
      operationId: 'apps/get-webhook-config-for-app';
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a webhook configuration for an app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
    patch: {
      description: 'Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app';
      };
      operationId: 'apps/update-webhook-config-for-app';
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content_type: 'json';
                  insecure_ssl: '0';
                  secret: '********';
                  url: 'https://example.com/webhook';
                };
              };
            };
            schema: {
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type';
                };
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl';
                };
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret';
                };
                url: {
                  $ref: '#/components/schemas/webhook-config-url';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a webhook configuration for an app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/app/hook/deliveries': {
    get: {
      description: 'Returns a list of webhook deliveries for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook';
      };
      operationId: 'apps/list-webhook-deliveries';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/cursor';
        },
        {
          in: 'query';
          name: 'redelivery';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List deliveries for an app webhook';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/app/hook/deliveries/{delivery_id}': {
    get: {
      description: 'Returns a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook';
      };
      operationId: 'apps/get-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook-delivery';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a delivery for an app webhook';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/app/hook/deliveries/{delivery_id}/attempts': {
    post: {
      description: 'Redeliver a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook';
      };
      operationId: 'apps/redeliver-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Redeliver a delivery for an app webhook';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/app/installations': {
    get: {
      description: 'You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app';
      };
      operationId: 'apps/list-installations';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          in: 'query';
          name: 'outdated';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/installation';
                };
                type: 'array';
              };
            };
          };
          description: 'The permissions the installation has are included under the `permissions` key.';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List installations for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/app/installations/{installation_id}': {
    delete: {
      description: 'Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app\'s access to your account\'s resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app';
      };
      operationId: 'apps/delete-installation';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an installation for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app';
      };
      operationId: 'apps/get-installation';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation';
                };
              };
              schema: {
                $ref: '#/components/schemas/installation';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an installation for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/app/installations/{installation_id}/access_tokens': {
    post: {
      description: "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app';
      };
      operationId: 'apps/create-installation-access-token';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  permissions: {
                    contents: 'read';
                    issues: 'write';
                  };
                  repository: 'Hello-World';
                };
              };
            };
            schema: {
              properties: {
                permissions: {
                  $ref: '#/components/schemas/app-permissions';
                };
                repositories: {
                  description: 'List of repository names that the token should have access to';
                  items: {
                    example: 'rails';
                    type: 'string';
                  };
                  type: 'array';
                };
                repository_ids: {
                  description: 'List of repository IDs that the token should have access to';
                  example: [1];
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation-token';
                };
              };
              schema: {
                $ref: '#/components/schemas/installation-token';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an installation access token for an app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/app/installations/{installation_id}/suspended': {
    delete: {
      description: 'Removes a GitHub App installation suspension.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation';
      };
      operationId: 'apps/unsuspend-installation';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unsuspend an app installation';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: "Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#suspend-an-app-installation';
      };
      operationId: 'apps/suspend-installation';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Suspend an app installation';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/applications/{client_id}/grant': {
    delete: {
      description: "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#delete-an-app-authorization';
      };
      operationId: 'apps/delete-authorization';
      parameters: [
        {
          $ref: '#/components/parameters/client-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                };
              };
            };
            schema: {
              properties: {
                access_token: {
                  description: 'The OAuth access token used to authenticate to the GitHub API.';
                  type: 'string';
                };
              };
              required: ['access_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete an app authorization';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'oauth-applications';
      };
    };
  };
  '/applications/{client_id}/token': {
    delete: {
      description: "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#delete-an-app-token';
      };
      operationId: 'apps/delete-token';
      parameters: [
        {
          $ref: '#/components/parameters/client-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                };
              };
            };
            schema: {
              properties: {
                access_token: {
                  description: 'The OAuth access token used to authenticate to the GitHub API.';
                  type: 'string';
                };
              };
              required: ['access_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete an app token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'oauth-applications';
      };
    };
    patch: {
      description: 'OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application\'s `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#reset-a-token';
      };
      operationId: 'apps/reset-token';
      parameters: [
        {
          $ref: '#/components/parameters/client-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                };
              };
            };
            schema: {
              properties: {
                access_token: {
                  description: 'The access_token of the OAuth application.';
                  type: 'string';
                };
              };
              required: ['access_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authorization-with-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/authorization';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Reset a token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'oauth-applications';
      };
    };
    post: {
      description: 'OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#check-a-token';
      };
      operationId: 'apps/check-token';
      parameters: [
        {
          $ref: '#/components/parameters/client-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                };
              };
            };
            schema: {
              properties: {
                access_token: {
                  description: 'The access_token of the OAuth application.';
                  type: 'string';
                };
              };
              required: ['access_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authorization-with-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/authorization';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Check a token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'oauth-applications';
      };
    };
  };
  '/applications/{client_id}/token/scoped': {
    post: {
      description: 'Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/apps/apps#create-a-scoped-access-token';
      };
      operationId: 'apps/scope-token';
      parameters: [
        {
          $ref: '#/components/parameters/client-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                  permissions: {
                    contents: 'read';
                    issues: 'write';
                    metadata: 'read';
                  };
                  target: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                access_token: {
                  description: 'The access token used to authenticate to the GitHub API.';
                  example: 'e72e16c7e42f292c6912e7710c838347ae178b4a';
                  type: 'string';
                };
                permissions: {
                  $ref: '#/components/schemas/app-permissions';
                };
                repositories: {
                  description: 'The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.';
                  items: {
                    example: 'rails';
                    type: 'string';
                  };
                  type: 'array';
                };
                repository_ids: {
                  description: 'The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.';
                  example: [1];
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
                target: {
                  description: 'The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.';
                  example: 'octocat';
                  type: 'string';
                };
                target_id: {
                  description: 'The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.';
                  example: 1;
                  type: 'integer';
                };
              };
              required: ['access_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/scope-token';
                };
              };
              schema: {
                $ref: '#/components/schemas/authorization';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a scoped access token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'apps';
      };
    };
  };
  '/apps/{app_slug}': {
    get: {
      description: '**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps/#get-an-app';
      };
      operationId: 'apps/get-by-slug';
      parameters: [
        {
          $ref: '#/components/parameters/app-slug';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration';
                };
              };
              schema: {
                $ref: '#/components/schemas/integration';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/codes_of_conduct': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct';
      };
      operationId: 'codes-of-conduct/get-all-codes-of-conduct';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-of-conduct-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-of-conduct';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get all codes of conduct';
      tags: ['codes-of-conduct'];
      'x-github': {
        category: 'codes-of-conduct';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/codes_of_conduct/{key}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct';
      };
      operationId: 'codes-of-conduct/get-conduct-code';
      parameters: [
        {
          in: 'path';
          name: 'key';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-of-conduct';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-of-conduct';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a code of conduct';
      tags: ['codes-of-conduct'];
      'x-github': {
        category: 'codes-of-conduct';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/emojis': {
    get: {
      description: 'Lists all the emojis available to use on GitHub.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/emojis#get-emojis';
      };
      operationId: 'emojis/get';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/emojis-get';
                };
              };
              schema: {
                additionalProperties: {
                  type: 'string';
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get emojis';
      tags: ['emojis'];
      'x-github': {
        category: 'emojis';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/enterprises/{enterprise}/dependabot/alerts': {
    get: {
      description: 'Lists Dependabot alerts for repositories that are owned by the specified enterprise.\nTo use this endpoint, you must be a member of the enterprise, and you must use an\naccess token with the `repo` scope or `security_events` scope.\nAlerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise';
      };
      operationId: 'dependabot/list-alerts-for-enterprise';
      parameters: [
        {
          $ref: '#/components/parameters/enterprise';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/pagination-before';
        },
        {
          $ref: '#/components/parameters/pagination-after';
        },
        {
          $ref: '#/components/parameters/pagination-first';
        },
        {
          $ref: '#/components/parameters/pagination-last';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-organization';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert-with-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'List Dependabot alerts for an enterprise';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'alerts';
      };
    };
  };
  '/enterprises/{enterprise}/secret-scanning/alerts': {
    get: {
      description: 'Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\nTo use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise';
      };
      operationId: 'secret-scanning/list-alerts-for-enterprise';
      parameters: [
        {
          $ref: '#/components/parameters/enterprise';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/pagination-before';
        },
        {
          $ref: '#/components/parameters/pagination-after';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-secret-scanning-alert-list';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-secret-scanning-alert';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List secret scanning alerts for an enterprise';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/events': {
    get: {
      description: 'We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-public-events';
      };
      operationId: 'activity/list-public-events';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List public events';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/feeds': {
    get: {
      description: 'GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#get-feeds';
      };
      operationId: 'activity/get-feeds';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/feed';
                };
              };
              schema: {
                $ref: '#/components/schemas/feed';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get feeds';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'feeds';
      };
    };
  };
  '/gists': {
    get: {
      description: "Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user';
      };
      operationId: 'gists/list';
      parameters: [
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List gists for the authenticated user';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Allows you to add a new gist with one or more files.\n\n**Note:** Don\'t name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#create-a-gist';
      };
      operationId: 'gists/create';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Creating a gist';
                value: {
                  description: 'Example of a gist';
                  files: {
                    'README.md': {
                      content: 'Hello World';
                    };
                  };
                  public: false;
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'Description of the gist';
                  example: 'Example Ruby script';
                  type: 'string';
                };
                files: {
                  additionalProperties: {
                    properties: {
                      content: {
                        description: 'Content of the file';
                        readOnly: false;
                        type: 'string';
                      };
                    };
                    required: ['content'];
                    type: 'object';
                  };
                  description: 'Names and content for the files that make up the gist';
                  example: {
                    'hello.rb': {
                      content: 'puts "Hello, World!"';
                    };
                  };
                  type: 'object';
                };
                public: {
                  oneOf: [
                    {
                      default: false;
                      description: 'Flag indicating whether the gist is public';
                      example: true;
                      type: 'boolean';
                    },
                    {
                      default: 'false';
                      enum: ['true', 'false'];
                      example: 'true';
                      type: 'string';
                    },
                  ];
                };
              };
              required: ['files'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-simple';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/gists/aa5a315d61ae9438b18d';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/public': {
    get: {
      description: 'List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-public-gists';
      };
      operationId: 'gists/list-public';
      parameters: [
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List public gists';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/starred': {
    get: {
      description: "List the authenticated user's starred gists:";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-starred-gists';
      };
      operationId: 'gists/list-starred';
      parameters: [
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List starred gists';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/{gist_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#delete-a-gist';
      };
      operationId: 'gists/delete';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist';
      };
      operationId: 'gists/get';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-simple';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden_gist';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists/#update-a-gist';
      };
      operationId: 'gists/update';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              deleteFile: {
                summary: 'Deleting a gist file';
                value: {
                  files: {
                    'hello.py': null;
                  };
                };
              };
              renameFile: {
                summary: 'Renaming a gist file';
                value: {
                  files: {
                    'hello.py': {
                      filename: 'goodbye.py';
                    };
                  };
                };
              };
              updateGist: {
                summary: 'Updating a gist';
                value: {
                  description: 'An updated gist description';
                  files: {
                    'README.md': {
                      content: 'Hello World from GitHub';
                    };
                  };
                };
              };
            };
            schema: {
              anyOf: [
                {
                  required: ['description'];
                },
                {
                  required: ['files'];
                },
              ];
              nullable: true;
              properties: {
                description: {
                  description: 'The description of the gist.';
                  example: 'Example Ruby script';
                  type: 'string';
                };
                files: {
                  additionalProperties: {
                    anyOf: [
                      {
                        required: ['content'];
                      },
                      {
                        required: ['filename'];
                      },
                      {
                        maxProperties: 0;
                        type: 'object';
                      },
                    ];
                    nullable: true;
                    properties: {
                      content: {
                        description: 'The new content of the file.';
                        type: 'string';
                      };
                      filename: {
                        description: 'The new filename for the file.';
                        nullable: true;
                        type: 'string';
                      };
                    };
                    type: 'object';
                  };
                  description: 'The gist files to be updated, renamed, or deleted. Each `key` must match the current filename\n(including extension) of the targeted gist file. For example: `hello.py`.\n\nTo delete a file, set the whole file to null. For example: `hello.py : null`.';
                  example: {
                    'hello.rb': {
                      content: 'blah';
                      filename: 'goodbye.rb';
                    };
                  };
                  type: 'object';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                deleteFile: {
                  $ref: '#/components/examples/delete-gist-file';
                };
                renameFile: {
                  $ref: '#/components/examples/rename-gist-file';
                };
                updateGist: {
                  $ref: '#/components/examples/gist';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-simple';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/{gist_id}/comments': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-gist-comments';
      };
      operationId: 'gists/list-comments';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List gist comments';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#create-a-gist-comment';
      };
      operationId: 'gists/create-comment';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Creating a comment in a gist';
                value: {
                  body: 'This is a comment to a gist';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The comment text.';
                  example: 'Body of the attachment';
                  maxLength: 65535;
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-comment';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Create a gist comment';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/gists/{gist_id}/comments/{comment_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#delete-a-gist-comment';
      };
      operationId: 'gists/delete-comment';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a gist comment';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist-comment';
      };
      operationId: 'gists/get-comment';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-comment';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden_gist';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a gist comment';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#update-a-gist-comment';
      };
      operationId: 'gists/update-comment';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Updating a comment in a gist';
                value: {
                  body: 'This is an update to a comment in a gist';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The comment text.';
                  example: 'Body of the attachment';
                  maxLength: 65535;
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-comment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Update a gist comment';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/gists/{gist_id}/commits': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-gist-commits';
      };
      operationId: 'gists/list-commits';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-commit-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-commit';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              example: '<https://api.github.com/resource?page=2>; rel="next"';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List gist commits';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/{gist_id}/forks': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-gist-forks';
      };
      operationId: 'gists/list-forks';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-fork-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List gist forks';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#fork-a-gist';
      };
      operationId: 'gists/fork';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist';
                };
              };
              schema: {
                $ref: '#/components/schemas/base-gist';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/gists/aa5a315d61ae9438b18d';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Fork a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/{gist_id}/star': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#unstar-a-gist';
      };
      operationId: 'gists/unstar';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unstar a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred';
      };
      operationId: 'gists/check-is-starred';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response if gist is starred';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                additionalProperties: false;
                properties: {};
                type: 'object';
              };
            };
          };
          description: 'Not Found if gist is not starred';
        };
      };
      summary: 'Check if a gist is starred';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#star-a-gist';
      };
      operationId: 'gists/star';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Star a gist';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gists/{gist_id}/{sha}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist-revision';
      };
      operationId: 'gists/get-revision';
      parameters: [
        {
          $ref: '#/components/parameters/gist-id';
        },
        {
          in: 'path';
          name: 'sha';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist';
                };
              };
              schema: {
                $ref: '#/components/schemas/gist-simple';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a gist revision';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gitignore/templates': {
    get: {
      description: 'List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates';
      };
      operationId: 'gitignore/get-all-templates';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['Actionscript', 'Android', 'AppceleratorTitanium', 'Autotools', 'Bancha', 'C', 'C++'];
                };
              };
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get all gitignore templates';
      tags: ['gitignore'];
      'x-github': {
        category: 'gitignore';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/gitignore/templates/{name}': {
    get: {
      description: 'The API also allows fetching the source of a single template.\nUse the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template';
      };
      operationId: 'gitignore/get-template';
      parameters: [
        {
          in: 'path';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gitignore-template';
                };
              };
              schema: {
                $ref: '#/components/schemas/gitignore-template';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get a gitignore template';
      tags: ['gitignore'];
      'x-github': {
        category: 'gitignore';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/installation/repositories': {
    get: {
      description: 'List repositories that an app installation can access.\n\nYou must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation';
      };
      operationId: 'apps/list-repos-accessible-to-installation';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated-2';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository';
                    };
                    type: 'array';
                  };
                  repository_selection: {
                    example: 'selected';
                    type: 'string';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List repositories accessible to the app installation';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
  };
  '/installation/token': {
    delete: {
      description: 'Revokes the installation token you\'re using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.\n\nYou must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token';
      };
      operationId: 'apps/revoke-installation-access-token';
      parameters: [];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Revoke an installation access token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
  };
  '/issues': {
    get: {
      description: 'List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user';
      };
      operationId: 'issues/list';
      parameters: [
        {
          description: "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.";
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'assigned';
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Indicates the state of the issues to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/labels';
        },
        {
          description: 'What to sort results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'comments'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          in: 'query';
          name: 'collab';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          in: 'query';
          name: 'orgs';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          in: 'query';
          name: 'owned';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          in: 'query';
          name: 'pulls';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List issues assigned to the authenticated user';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/licenses': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses';
      };
      operationId: 'licenses/get-all-commonly-used';
      parameters: [
        {
          in: 'query';
          name: 'featured';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/license-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get all commonly used licenses';
      tags: ['licenses'];
      'x-github': {
        category: 'licenses';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/licenses/{license}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/licenses#get-a-license';
      };
      operationId: 'licenses/get';
      parameters: [
        {
          in: 'path';
          name: 'license';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license';
                };
              };
              schema: {
                $ref: '#/components/schemas/license';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a license';
      tags: ['licenses'];
      'x-github': {
        category: 'licenses';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/markdown': {
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/markdown#render-a-markdown-document';
      };
      operationId: 'markdown/render';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Rendering markdown';
                value: {
                  text: 'Hello **world**';
                };
              };
            };
            schema: {
              properties: {
                context: {
                  description: 'The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.';
                  type: 'string';
                };
                mode: {
                  default: 'markdown';
                  description: 'The rendering mode.';
                  enum: ['markdown', 'gfm'];
                  example: 'markdown';
                  type: 'string';
                };
                text: {
                  description: 'The Markdown text to render in HTML.';
                  type: 'string';
                };
              };
              required: ['text'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'text/html': {
              examples: {
                default: {
                  summary: 'Example response';
                  value: '<p>Hello <strong>world</strong></p>';
                };
              };
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Response';
          headers: {
            'Content-Length': {
              example: '279';
              schema: {
                type: 'string';
              };
            };
            'Content-Type': {
              $ref: '#/components/headers/content-type';
            };
            'X-CommonMarker-Version': {
              $ref: '#/components/headers/x-common-marker-version';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Render a Markdown document';
      tags: ['markdown'];
      'x-github': {
        category: 'markdown';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/markdown/raw': {
    post: {
      description: 'You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode';
      };
      operationId: 'markdown/render-raw';
      parameters: [];
      requestBody: {
        content: {
          'text/plain': {
            examples: {
              default: {
                value: {
                  text: 'Hello **world**';
                };
              };
            };
            schema: {
              type: 'string';
            };
          };
          'text/x-markdown': {
            examples: {
              default: {
                summary: 'Rendering markdown';
                value: {
                  text: 'Hello **world**';
                };
              };
            };
            schema: {
              type: 'string';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'text/html': {
              examples: {
                default: {
                  summary: 'Example response';
                  value: '<p>Hello <strong>world</strong></p>';
                };
              };
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Response';
          headers: {
            'X-CommonMarker-Version': {
              $ref: '#/components/headers/x-common-marker-version';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Render a Markdown document in raw mode';
      tags: ['markdown'];
      'x-github': {
        category: 'markdown';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/marketplace_listing/accounts/{account_id}': {
    get: {
      description: "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account';
      };
      operationId: 'apps/get-subscription-plan-for-account';
      parameters: [
        {
          $ref: '#/components/parameters/account-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase';
                };
              };
              schema: {
                $ref: '#/components/schemas/marketplace-purchase';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Not Found when the account has not purchased the listing';
        };
      };
      summary: 'Get a subscription plan for an account';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/marketplace_listing/plans': {
    get: {
      description: 'Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-plans';
      };
      operationId: 'apps/list-plans';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-listing-plan-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-listing-plan';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List plans';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/marketplace_listing/plans/{plan_id}/accounts': {
    get: {
      description: "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan';
      };
      operationId: 'apps/list-accounts-for-plan';
      parameters: [
        {
          $ref: '#/components/parameters/plan-id';
        },
        {
          $ref: '#/components/parameters/sort';
        },
        {
          description: 'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-purchase';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List accounts for a plan';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/marketplace_listing/stubbed/accounts/{account_id}': {
    get: {
      description: "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed';
      };
      operationId: 'apps/get-subscription-plan-for-account-stubbed';
      parameters: [
        {
          $ref: '#/components/parameters/account-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase';
                };
              };
              schema: {
                $ref: '#/components/schemas/marketplace-purchase';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '404': {
          description: 'Not Found when the account has not purchased the listing';
        };
      };
      summary: 'Get a subscription plan for an account (stubbed)';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/marketplace_listing/stubbed/plans': {
    get: {
      description: 'Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-plans-stubbed';
      };
      operationId: 'apps/list-plans-stubbed';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-listing-plan-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-listing-plan';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
      };
      summary: 'List plans (stubbed)';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/marketplace_listing/stubbed/plans/{plan_id}/accounts': {
    get: {
      description: "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed';
      };
      operationId: 'apps/list-accounts-for-plan-stubbed';
      parameters: [
        {
          $ref: '#/components/parameters/plan-id';
        },
        {
          $ref: '#/components/parameters/sort';
        },
        {
          description: 'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-purchase';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
      };
      summary: 'List accounts for a plan (stubbed)';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/meta': {
    get: {
      description: "Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"\n\n**Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.\n\n**Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/meta#get-github-meta-information';
      };
      operationId: 'meta/get';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/api-overview';
                };
              };
              schema: {
                $ref: '#/components/schemas/api-overview';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Get GitHub meta information';
      tags: ['meta'];
      'x-github': {
        category: 'meta';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/networks/{owner}/{repo}/events': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories';
      };
      operationId: 'activity/list-public-events-for-repo-network';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repo-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List public events for a network of repositories';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/notifications': {
    get: {
      description: 'List all notifications for the current user, sorted by most recently updated.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user';
      };
      operationId: 'activity/list-notifications-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/all';
        },
        {
          $ref: '#/components/parameters/participating';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/before';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          description: 'The number of results per page (max 50).';
          in: 'query';
          name: 'per_page';
          schema: {
            default: 50;
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/thread';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List notifications for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
    put: {
      description: 'Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#mark-notifications-as-read';
      };
      operationId: 'activity/mark-notifications-as-read';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  last_read_at: '2022-06-10T00:00:00Z';
                  read: true;
                };
              };
            };
            schema: {
              properties: {
                last_read_at: {
                  description: 'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.';
                  format: 'date-time';
                  type: 'string';
                };
                read: {
                  description: 'Whether the notification has been read.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/notifications-mark-read';
                };
              };
              schema: {
                properties: {
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '205': {
          description: 'Reset Content';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Mark notifications as read';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
  };
  '/notifications/threads/{thread_id}': {
    get: {
      description: 'Gets information about a notification thread.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#get-a-thread';
      };
      operationId: 'activity/get-thread';
      parameters: [
        {
          $ref: '#/components/parameters/thread-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread';
                };
              };
              schema: {
                $ref: '#/components/schemas/thread';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get a thread';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
    patch: {
      description: 'Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#mark-a-thread-as-read';
      };
      operationId: 'activity/mark-thread-as-read';
      parameters: [
        {
          $ref: '#/components/parameters/thread-id';
        },
      ];
      responses: {
        '205': {
          description: 'Reset Content';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Mark a thread as read';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
  };
  '/notifications/threads/{thread_id}/subscription': {
    delete: {
      description: 'Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#delete-a-thread-subscription';
      };
      operationId: 'activity/delete-thread-subscription';
      parameters: [
        {
          $ref: '#/components/parameters/thread-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Delete a thread subscription';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
    get: {
      description: "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user';
      };
      operationId: 'activity/get-thread-subscription-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/thread-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-subscription';
                };
              };
              schema: {
                $ref: '#/components/schemas/thread-subscription';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get a thread subscription for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
    put: {
      description: 'If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#set-a-thread-subscription';
      };
      operationId: 'activity/set-thread-subscription';
      parameters: [
        {
          $ref: '#/components/parameters/thread-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ignored: false;
                };
              };
            };
            schema: {
              properties: {
                ignored: {
                  default: false;
                  description: 'Whether to block all notifications from a thread.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-subscription';
                };
              };
              schema: {
                $ref: '#/components/schemas/thread-subscription';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Set a thread subscription';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
  };
  '/octocat': {
    get: {
      description: 'Get the octocat as ASCII art';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/meta#get-octocat';
      };
      operationId: 'meta/get-octocat';
      parameters: [
        {
          description: "The words to show in Octocat's speech bubble";
          in: 'query';
          name: 's';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/octocat-stream': {
              examples: {
                default: {
                  $ref: '#/components/examples/octocat';
                };
              };
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get Octocat';
      tags: ['meta'];
      'x-github': {
        category: 'meta';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/organizations': {
    get: {
      description: 'Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations';
      };
      operationId: 'orgs/list';
      parameters: [
        {
          $ref: '#/components/parameters/since-org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              example: '<https://api.github.com/organizations?since=135>; rel="next"';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'List organizations';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}': {
    get: {
      description: 'To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization\'s GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see \'Response with GitHub plan information\' below."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization';
      };
      operationId: 'orgs/get';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/organization-full-default-response';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-full';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization';
      };
      operationId: 'orgs/update';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  billing_email: 'mona@github.com';
                  company: 'GitHub';
                  default_repository_permission: 'read';
                  description: 'GitHub, the company.';
                  email: 'mona@github.com';
                  location: 'San Francisco';
                  members_allowed_repository_creation_type: 'all';
                  members_can_create_repositories: true;
                  name: 'github';
                  twitter_username: 'github';
                };
              };
            };
            schema: {
              properties: {
                advanced_security_enabled_for_new_repositories: {
                  description: 'Whether GitHub Advanced Security is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                billing_email: {
                  description: 'Billing email address. This address is not publicized.';
                  type: 'string';
                };
                blog: {
                  example: '"http://github.blog"';
                  type: 'string';
                };
                company: {
                  description: 'The company name.';
                  type: 'string';
                };
                default_repository_permission: {
                  default: 'read';
                  description: 'Default permission level members have for organization repositories.';
                  enum: ['read', 'write', 'admin', 'none'];
                  type: 'string';
                };
                dependabot_alerts_enabled_for_new_repositories: {
                  description: 'Whether Dependabot alerts is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                dependabot_security_updates_enabled_for_new_repositories: {
                  description: 'Whether Dependabot security updates is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                dependency_graph_enabled_for_new_repositories: {
                  description: 'Whether dependency graph is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                description: {
                  description: 'The description of the company.';
                  type: 'string';
                };
                email: {
                  description: 'The publicly visible email address.';
                  type: 'string';
                };
                has_organization_projects: {
                  description: 'Whether an organization can use organization projects.';
                  type: 'boolean';
                };
                has_repository_projects: {
                  description: 'Whether repositories that belong to the organization can use repository projects.';
                  type: 'boolean';
                };
                location: {
                  description: 'The location.';
                  type: 'string';
                };
                members_allowed_repository_creation_type: {
                  description: 'Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.';
                  enum: ['all', 'private', 'none'];
                  type: 'string';
                };
                members_can_create_internal_repositories: {
                  description: 'Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.';
                  type: 'boolean';
                };
                members_can_create_pages: {
                  default: true;
                  description: 'Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.';
                  type: 'boolean';
                };
                members_can_create_private_pages: {
                  default: true;
                  description: 'Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.';
                  type: 'boolean';
                };
                members_can_create_private_repositories: {
                  description: 'Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.';
                  type: 'boolean';
                };
                members_can_create_public_pages: {
                  default: true;
                  description: 'Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.';
                  type: 'boolean';
                };
                members_can_create_public_repositories: {
                  description: 'Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.';
                  type: 'boolean';
                };
                members_can_create_repositories: {
                  default: true;
                  description: 'Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.';
                  type: 'boolean';
                };
                members_can_fork_private_repositories: {
                  default: false;
                  description: 'Whether organization members can fork private organization repositories.';
                  type: 'boolean';
                };
                name: {
                  description: 'The shorthand name of the company.';
                  type: 'string';
                };
                secret_scanning_enabled_for_new_repositories: {
                  description: 'Whether secret scanning is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                secret_scanning_push_protection_custom_link: {
                  description: 'If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.';
                  type: 'string';
                };
                secret_scanning_push_protection_custom_link_enabled: {
                  description: 'Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.';
                  type: 'boolean';
                };
                secret_scanning_push_protection_enabled_for_new_repositories: {
                  description: 'Whether secret scanning push protection is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.';
                  type: 'boolean';
                };
                twitter_username: {
                  description: 'The Twitter username of the company.';
                  type: 'string';
                };
                web_commit_signoff_required: {
                  default: false;
                  description: "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.";
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-full';
              };
            };
          };
          description: 'Response';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/validation-error';
                  },
                  {
                    $ref: '#/components/schemas/validation-error-simple';
                  },
                ];
              };
            };
          };
          description: 'Validation failed';
        };
      };
      summary: 'Update an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/actions/cache/usage': {
    get: {
      description: 'Gets the total GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization';
      };
      operationId: 'actions/get-actions-cache-usage-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-usage-org-enterprise';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-cache-usage-org-enterprise';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'Get GitHub Actions cache usage for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cache';
      };
    };
  };
  '/orgs/{org}/actions/cache/usage-by-repository': {
    get: {
      description: 'Lists repositories and their GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization';
      };
      operationId: 'actions/get-actions-cache-usage-by-repo-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-actions-cache-usage-by-repo';
                };
              };
              schema: {
                properties: {
                  repository_cache_usages: {
                    items: {
                      $ref: '#/components/schemas/actions-cache-usage-by-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repository_cache_usages'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repositories with GitHub Actions cache usage for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cache';
      };
    };
  };
  '/orgs/{org}/actions/oidc/customization/sub': {
    get: {
      description: 'Gets the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\nGitHub Apps must have the `organization_administration:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization';
      };
      operationId: 'oidc/get-oidc-custom-sub-template-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/oidc-custom-sub';
                };
              };
              schema: {
                $ref: '#/components/schemas/oidc-custom-sub';
              };
            };
          };
          description: 'A JSON serialized template for OIDC subject claim customization';
        };
      };
      summary: 'Get the customization template for an OIDC subject claim for an organization';
      tags: ['oidc'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        subcategory: 'oidc';
      };
    };
    put: {
      description: 'Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `write:org` scope to use this endpoint.\nGitHub Apps must have the `admin:org` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization';
      };
      operationId: 'oidc/update-oidc-custom-sub-template-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/oidc-custom-sub';
              };
            };
            schema: {
              $ref: '#/components/schemas/oidc-custom-sub';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Empty response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Set the customization template for an OIDC subject claim for an organization';
      tags: ['oidc'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        previews: [];
        subcategory: 'oidc';
      };
    };
  };
  '/orgs/{org}/actions/permissions': {
    get: {
      description: 'Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization';
      };
      operationId: 'actions/get-github-actions-permissions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-organization-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-organization-permissions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Actions permissions for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization';
      };
      operationId: 'actions/set-github-actions-permissions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allowed_actions: 'selected';
                  enabled_repositories: 'all';
                };
              };
            };
            schema: {
              properties: {
                allowed_actions: {
                  $ref: '#/components/schemas/allowed-actions';
                };
                enabled_repositories: {
                  $ref: '#/components/schemas/enabled-repositories';
                };
              };
              required: ['enabled_repositories'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set GitHub Actions permissions for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/orgs/{org}/actions/permissions/repositories': {
    get: {
      description: 'Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization';
      };
      operationId: 'actions/list-selected-repositories-enabled-github-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'number';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List selected repositories enabled for GitHub Actions in an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization';
      };
      operationId: 'actions/set-selected-repositories-enabled-github-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [32, 42];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'List of repository IDs to enable for GitHub Actions.';
                  items: {
                    description: 'Unique identifier of the repository.';
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set selected repositories enabled for GitHub Actions in an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/orgs/{org}/actions/permissions/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization';
      };
      operationId: 'actions/disable-selected-repository-github-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Disable a selected repository for GitHub Actions in an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization';
      };
      operationId: 'actions/enable-selected-repository-github-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Enable a selected repository for GitHub Actions in an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/orgs/{org}/actions/permissions/selected-actions': {
    get: {
      description: 'Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization';
      };
      operationId: 'actions/get-allowed-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/selected-actions';
                };
              };
              schema: {
                $ref: '#/components/schemas/selected-actions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get allowed actions and reusable workflows for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization';
      };
      operationId: 'actions/set-allowed-actions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              selected_actions: {
                $ref: '#/components/examples/selected-actions';
              };
            };
            schema: {
              $ref: '#/components/schemas/selected-actions';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set allowed actions and reusable workflows for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/orgs/{org}/actions/permissions/workflow': {
    get: {
      description: 'Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,\nas well as whether GitHub Actions can submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-default-workflow-permissions';
      };
      operationId: 'actions/get-github-actions-default-workflow-permissions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-default-workflow-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-get-default-workflow-permissions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get default workflow permissions for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions\ncan submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-default-workflow-permissions';
      };
      operationId: 'actions/set-github-actions-default-workflow-permissions-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-default-workflow-permissions';
              };
            };
            schema: {
              $ref: '#/components/schemas/actions-set-default-workflow-permissions';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Success response';
        };
      };
      summary: 'Set default workflow permissions for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/orgs/{org}/actions/required_workflows': {
    get: {
      description: 'List all required workflows in an organization.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-required-workflows';
      };
      operationId: 'actions/list-required-workflows';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflows-paginated';
                };
              };
              schema: {
                properties: {
                  required_workflows: {
                    items: {
                      $ref: '#/components/schemas/required-workflow';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'required_workflows'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List required workflows';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
    post: {
      description: 'Create a required workflow in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-required-workflow';
      };
      operationId: 'actions/create-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  repository_id: 53;
                  scope: 'selected';
                  selected_repository_ids: [32, 91];
                  workflow_file_path: '.github/workflows/ci.yaml';
                };
              };
            };
            schema: {
              properties: {
                repository_id: {
                  description: 'The ID of the repository that contains the workflow file.';
                  type: 'string';
                };
                scope: {
                  default: 'all';
                  description: 'Enable the required workflow for all repositories or selected repositories in the organization.';
                  enum: ['selected', 'all'];
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.';
                  items: {
                    description: 'Unique identifier of the repository.';
                    type: 'integer';
                  };
                  type: 'array';
                };
                workflow_file_path: {
                  description: 'Path of the workflow file to be configured as a required workflow.';
                  type: 'string';
                };
              };
              required: ['workflow_file_path', 'repository_id'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow';
                };
              };
              schema: {
                $ref: '#/components/schemas/required-workflow';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}': {
    delete: {
      description: 'Deletes a required workflow configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-a-required-workflow';
      };
      operationId: 'actions/delete-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
    get: {
      description: 'Get a required workflow configured in an organization.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-required-workflow';
      };
      operationId: 'actions/get-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow';
                };
              };
              schema: {
                $ref: '#/components/schemas/required-workflow';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
    patch: {
      description: 'Update a required workflow in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#update-a-required-workflow';
      };
      operationId: 'actions/update-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  repository_id: 53;
                  scope: 'selected';
                  selected_repository_ids: [32, 91];
                  workflow_file_path: '.github/workflows/ci.yaml';
                };
              };
            };
            schema: {
              properties: {
                repository_id: {
                  description: 'The ID of the repository that contains the workflow file.';
                  type: 'string';
                };
                scope: {
                  default: 'all';
                  description: 'Enable the required workflow for all repositories or selected repositories in the organization.';
                  enum: ['selected', 'all'];
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.';
                  items: {
                    description: 'Unique identifier of the repository.';
                    type: 'integer';
                  };
                  type: 'array';
                };
                workflow_file_path: {
                  description: 'Path of the workflow file to be configured as a required workflow.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow';
                };
              };
              schema: {
                $ref: '#/components/schemas/required-workflow';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories': {
    get: {
      description: 'Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows';
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows';
      };
      operationId: 'actions/list-selected-repositories-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'number';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Success';
        };
        '404': {
          description: 'Resource Not Found';
        };
      };
      summary: 'List selected repositories for a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
    put: {
      description: 'Sets the repositories for a required workflow that is required for selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow';
      };
      operationId: 'actions/set-selected-repos-to-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [32, 91];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'The IDs of the repositories for which the workflow should be required.';
                  items: {
                    description: 'Unique identifier of the repository.';
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Sets repositories for a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow';
      };
      operationId: 'actions/remove-selected-repo-from-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Success';
        };
        '404': {
          description: 'Resource Not Found';
        };
        '422': {
          description: 'Validation Error';
        };
      };
      summary: 'Remove a selected repository from required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
    put: {
      description: 'Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow';
      };
      operationId: 'actions/add-selected-repo-to-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/required-workflow-id';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Success';
        };
        '404': {
          description: 'Resource Not Found';
        };
        '422': {
          description: 'Validation Error';
        };
      };
      summary: 'Add a repository to a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/orgs/{org}/actions/runners': {
    get: {
      description: 'Lists all self-hosted runners configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization';
      };
      operationId: 'actions/list-self-hosted-runners-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-paginated';
                };
              };
              schema: {
                properties: {
                  runners: {
                    items: {
                      $ref: '#/components/schemas/runner';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'runners'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List self-hosted runners for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/downloads': {
    get: {
      description: 'Lists binaries for the runner application that you can download and run.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization';
      };
      operationId: 'actions/list-runner-applications-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-application-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/runner-application';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List runner applications for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/registration-token': {
    post: {
      description: 'Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization';
      };
      operationId: 'actions/create-registration-token-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token';
                };
              };
              schema: {
                $ref: '#/components/schemas/authentication-token';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a registration token for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/remove-token': {
    post: {
      description: 'Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization';
      };
      operationId: 'actions/create-remove-token-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/authentication-token';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a remove token for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/{runner_id}': {
    delete: {
      description: 'Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization';
      };
      operationId: 'actions/delete-self-hosted-runner-from-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a self-hosted runner from an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    get: {
      description: 'Gets a specific self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/get-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner';
                };
              };
              schema: {
                $ref: '#/components/schemas/runner';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/{runner_id}/labels': {
    delete: {
      description: 'Remove all custom labels from a self-hosted runner configured in an\norganization. Returns the remaining read-only labels from the runner.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/remove-all-custom-labels-from-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels_readonly';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Remove all custom labels from a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    get: {
      description: 'Lists all labels for a self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/list-labels-for-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List labels for a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    post: {
      description: 'Add custom labels to a self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/add-custom-labels-to-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'];
                };
              };
            };
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to add to the runner.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  minItems: 1;
                  type: 'array';
                };
              };
              required: ['labels'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Add custom labels to a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    put: {
      description: 'Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/set-custom-labels-for-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'];
                };
              };
            };
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  minItems: 0;
                  type: 'array';
                };
              };
              required: ['labels'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Set custom labels for a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/runners/{runner_id}/labels/{name}': {
    delete: {
      description: 'Remove a custom label from a self-hosted runner configured\nin an organization. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization';
      };
      operationId: 'actions/remove-custom-label-from-self-hosted-runner-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
        {
          $ref: '#/components/parameters/runner-label-name';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Remove a custom label from a self-hosted runner for an organization';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/orgs/{org}/actions/secrets': {
    get: {
      description: 'Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-organization-secrets';
      };
      operationId: 'actions/list-org-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/organization-actions-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization secrets';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/actions/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-an-organization-public-key';
      };
      operationId: 'actions/get-org-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization public key';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/actions/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-an-organization-secret';
      };
      operationId: 'actions/delete-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: 'Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-an-organization-secret';
      };
      operationId: 'actions/get-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-actions-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\nuse this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret';
      };
      operationId: 'actions/create-or-update-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                  selected_repository_ids: [1296269, 1296280];
                  visibility: 'selected';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
                visibility: {
                  description: 'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.';
                  enum: ['all', 'private', 'selected'];
                  type: 'string';
                };
              };
              required: ['visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/actions/secrets/{secret_name}/repositories': {
    get: {
      description: 'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret';
      };
      operationId: 'actions/list-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List selected repositories for an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret';
      };
      operationId: 'actions/set-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set selected repositories for an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret';
      };
      operationId: 'actions/remove-selected-repo-from-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list';
        };
        '409': {
          description: 'Conflict when visibility type not set to selected';
        };
      };
      summary: 'Remove selected repository from an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret';
      };
      operationId: 'actions/add-selected-repo-to-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list';
        };
        '409': {
          description: 'Conflict when visibility type is not set to selected';
        };
      };
      summary: 'Add selected repository to an organization secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/actions/variables': {
    get: {
      description: 'Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#list-organization-variables';
      };
      operationId: 'actions/list-org-variables';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variables-per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-variables-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  variables: {
                    items: {
                      $ref: '#/components/schemas/organization-actions-variable';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'variables'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization variables';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    post: {
      description: 'Creates an organization variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#create-an-organization-variable';
      };
      operationId: 'actions/create-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  selected_repository_ids: [1296269, 1296280];
                  value: 'octocat';
                  visibility: 'selected';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
                visibility: {
                  description: 'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.';
                  enum: ['all', 'private', 'selected'];
                  type: 'string';
                };
              };
              required: ['name', 'value', 'visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a variable';
        };
      };
      summary: 'Create an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/orgs/{org}/actions/variables/{name}': {
    delete: {
      description: 'Deletes an organization variable using the variable name.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#delete-an-organization-variable';
      };
      operationId: 'actions/delete-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    get: {
      description: 'Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#get-an-organization-variable';
      };
      operationId: 'actions/get-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-variable';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-actions-variable';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    patch: {
      description: 'Updates an organization variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#update-an-organization-variable';
      };
      operationId: 'actions/update-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  selected_repository_ids: [1296269, 1296280];
                  value: 'octocat';
                  visibility: 'selected';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
                visibility: {
                  description: 'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.';
                  enum: ['all', 'private', 'selected'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Update an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/orgs/{org}/actions/variables/{name}/repositories': {
    get: {
      description: 'Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable';
      };
      operationId: 'actions/list-selected-repos-for-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`';
        };
      };
      summary: 'List selected repositories for an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    put: {
      description: 'Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable';
      };
      operationId: 'actions/set-selected-repos-for-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'The IDs of the repositories that can access the organization variable.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`';
        };
      };
      summary: 'Set selected repositories for an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable';
      };
      operationId: 'actions/remove-selected-repo-from-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`';
        };
      };
      summary: 'Remove selected repository from an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    put: {
      description: 'Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable';
      };
      operationId: 'actions/add-selected-repo-to-org-variable';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`';
        };
      };
      summary: 'Add selected repository to an organization variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/orgs/{org}/blocks': {
    get: {
      description: 'List the users blocked by an organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization';
      };
      operationId: 'orgs/list-blocked-users';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List users blocked by an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
  };
  '/orgs/{org}/blocks/{username}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization';
      };
      operationId: 'orgs/unblock-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Unblock a user from an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization';
      };
      operationId: 'orgs/check-blocked-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'If the user is blocked';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'If the user is not blocked';
        };
      };
      summary: 'Check if a user is blocked by an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
    put: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization';
      };
      operationId: 'orgs/block-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Block a user from an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
  };
  '/orgs/{org}/code-scanning/alerts': {
    get: {
      description: 'Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nTo use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-by-organization';
      };
      operationId: 'code-scanning/list-alerts-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/tool-name';
        },
        {
          $ref: '#/components/parameters/tool-guid';
        },
        {
          $ref: '#/components/parameters/pagination-before';
        },
        {
          $ref: '#/components/parameters/pagination-after';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          description: 'If specified, only code scanning alerts with this state will be returned.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-state';
          };
        },
        {
          description: 'The property by which to sort the results.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated'];
            type: 'string';
          };
        },
        {
          description: 'If specified, only code scanning alerts with this severity will be returned.';
          in: 'query';
          name: 'severity';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-severity';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-organization-alert-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-organization-alert-items';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List code scanning alerts for an organization';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/codespaces': {
    get: {
      description: 'Lists the codespaces associated to a specified organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-in-organization';
      };
      operationId: 'codespaces/list-in-organization';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list';
                };
              };
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'codespaces'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List codespaces for the organization';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/codespaces/billing': {
    put: {
      description: 'Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#set-codespaces-billing';
      };
      operationId: 'codespaces/set-codespaces-billing';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'];
                  visibility: 'selected_members';
                };
              };
            };
            schema: {
              properties: {
                selected_usernames: {
                  description: 'The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  type: 'array';
                };
                visibility: {
                  description: 'Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.';
                  enum: ['disabled', 'selected_members', 'all_members', 'all_members_and_outside_collaborators'];
                  type: 'string';
                };
              };
              required: ['visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          description: 'Users are neither members nor collaborators of this organization.';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Manage access control for organization codespaces';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/codespaces/billing/selected_users': {
    delete: {
      description: 'Codespaces for the specified users will no longer be billed to the organization.\nTo use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users';
      };
      operationId: 'codespaces/delete-codespaces-billing-users';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'];
                };
              };
            };
            schema: {
              properties: {
                selected_usernames: {
                  description: 'The usernames of the organization members whose codespaces should not be billed to the organization.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  type: 'array';
                };
              };
              required: ['selected_usernames'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          description: 'Users are neither members nor collaborators of this organization.';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Removes users from Codespaces billing for an organization';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
    post: {
      description: 'Codespaces for the specified users will be billed to the organization.\nTo use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users';
      };
      operationId: 'codespaces/set-codespaces-billing-users';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'];
                };
              };
            };
            schema: {
              properties: {
                selected_usernames: {
                  description: 'The usernames of the organization members whose codespaces be billed to the organization.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  type: 'array';
                };
              };
              required: ['selected_usernames'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          description: 'Users are neither members nor collaborators of this organization.';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Add users to Codespaces billing for an organization';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/codespaces/secrets': {
    get: {
      description: 'Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-organization-secrets';
      };
      operationId: 'codespaces/list-org-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/codespaces-org-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization secrets';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
  };
  '/orgs/{org}/codespaces/secrets/public-key': {
    get: {
      description: 'Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key';
      };
      operationId: 'codespaces/get-org-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespaces-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization public key';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
  };
  '/orgs/{org}/codespaces/secrets/{secret_name}': {
    delete: {
      description: 'Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret';
      };
      operationId: 'codespaces/delete-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
    get: {
      description: 'Gets an organization secret without revealing its encrypted value.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-an-organization-secret';
      };
      operationId: 'codespaces/get-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespaces-org-secret';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'Get an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
    put: {
      description: 'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret';
      };
      operationId: 'codespaces/create-or-update-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                  selected_repository_ids: [1296269, 1296280];
                  visibility: 'selected';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'The ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
                visibility: {
                  description: 'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.';
                  enum: ['all', 'private', 'selected'];
                  type: 'string';
                };
              };
              required: ['visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create or update an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
  };
  '/orgs/{org}/codespaces/secrets/{secret_name}/repositories': {
    get: {
      description: 'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret';
      };
      operationId: 'codespaces/list-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List selected repositories for an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
    put: {
      description: 'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret';
      };
      operationId: 'codespaces/set-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          description: 'Conflict when visibility type not set to selected';
        };
      };
      summary: 'Set selected repositories for an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
  };
  '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret';
      };
      operationId: 'codespaces/remove-selected-repo-from-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          description: 'Conflict when visibility type not set to selected';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove selected repository from an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
    put: {
      description: 'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret';
      };
      operationId: 'codespaces/add-selected-repo-to-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          description: 'Conflict when visibility type is not set to selected';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add selected repository to an organization secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organization-secrets';
      };
    };
  };
  '/orgs/{org}/dependabot/alerts': {
    get: {
      description: 'Lists Dependabot alerts for an organization.\n\nTo use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization';
      };
      operationId: 'dependabot/list-alerts-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/pagination-before';
        },
        {
          $ref: '#/components/parameters/pagination-after';
        },
        {
          $ref: '#/components/parameters/pagination-first';
        },
        {
          $ref: '#/components/parameters/pagination-last';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-organization';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert-with-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'List Dependabot alerts for an organization';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'alerts';
      };
    };
  };
  '/orgs/{org}/dependabot/secrets': {
    get: {
      description: 'Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#list-organization-secrets';
      };
      operationId: 'dependabot/list-org-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-dependabot-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/organization-dependabot-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization secrets';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/dependabot/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key';
      };
      operationId: 'dependabot/get-org-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependabot-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization public key';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/dependabot/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#delete-an-organization-secret';
      };
      operationId: 'dependabot/delete-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: 'Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#get-an-organization-secret';
      };
      operationId: 'dependabot/get-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-dependabot-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-dependabot-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization\npermission to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret';
      };
      operationId: 'dependabot/create-or-update-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                  selected_repository_ids: ['1296269', '1296280'];
                  visibility: 'selected';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                visibility: {
                  description: 'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.';
                  enum: ['all', 'private', 'selected'];
                  type: 'string';
                };
              };
              required: ['visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/dependabot/secrets/{secret_name}/repositories': {
    get: {
      description: 'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret';
      };
      operationId: 'dependabot/list-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List selected repositories for an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret';
      };
      operationId: 'dependabot/set-selected-repos-for-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set selected repositories for an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description: 'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret';
      };
      operationId: 'dependabot/remove-selected-repo-from-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list';
        };
        '409': {
          description: 'Conflict when visibility type not set to selected';
        };
      };
      summary: 'Remove selected repository from an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#add-selected-repository-to-an-organization-secret';
      };
      operationId: 'dependabot/add-selected-repo-to-org-secret';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list';
        };
        '409': {
          description: 'Conflict when visibility type is not set to selected';
        };
      };
      summary: 'Add selected repository to an organization secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/orgs/{org}/events': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-public-organization-events';
      };
      operationId: 'activity/list-public-org-events';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                '200-response': {
                  $ref: '#/components/examples/public-org-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List public organization events';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/orgs/{org}/failed_invitations': {
    get: {
      description: 'The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations';
      };
      operationId: 'orgs/list-failed-invitations';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List failed organization invitations';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/hooks': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-webhooks';
      };
      operationId: 'orgs/list-webhooks';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/org-hook';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List organization webhooks';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
    post: {
      description: "Here's how you can create a hook that posts payloads in JSON format:";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#create-an-organization-webhook';
      };
      operationId: 'orgs/create-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true;
                  config: {
                    content_type: 'json';
                    url: 'http://example.com/webhook';
                  };
                  events: ['push', 'pull_request'];
                  name: 'web';
                };
              };
            };
            schema: {
              properties: {
                active: {
                  default: true;
                  description: 'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.';
                  type: 'boolean';
                };
                config: {
                  description: 'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).';
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type';
                    };
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl';
                    };
                    password: {
                      example: '"password"';
                      type: 'string';
                    };
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret';
                    };
                    url: {
                      $ref: '#/components/schemas/webhook-config-url';
                    };
                    username: {
                      example: '"kdaigle"';
                      type: 'string';
                    };
                  };
                  required: ['url'];
                  type: 'object';
                };
                events: {
                  default: ['push'];
                  description: 'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                name: {
                  description: 'Must be passed as "web".';
                  type: 'string';
                };
              };
              required: ['name', 'config'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-hook';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/orgs/octocat/hooks/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook';
      };
      operationId: 'orgs/delete-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
    get: {
      description: 'Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization-webhook';
      };
      operationId: 'orgs/get-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-hook';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
    patch: {
      description: 'Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization-webhook';
      };
      operationId: 'orgs/update-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true;
                  events: ['pull_request'];
                };
              };
            };
            schema: {
              properties: {
                active: {
                  default: true;
                  description: 'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.';
                  type: 'boolean';
                };
                config: {
                  description: 'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).';
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type';
                    };
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl';
                    };
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret';
                    };
                    url: {
                      $ref: '#/components/schemas/webhook-config-url';
                    };
                  };
                  required: ['url'];
                  type: 'object';
                };
                events: {
                  default: ['push'];
                  description: 'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                name: {
                  example: '"web"';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-hook';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}/config': {
    get: {
      description: 'Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."\n\nAccess tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization';
      };
      operationId: 'orgs/get-webhook-config-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a webhook configuration for an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
    patch: {
      description: 'Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."\n\nAccess tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization';
      };
      operationId: 'orgs/update-webhook-config-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Update an existing webhook';
                value: {
                  content_type: 'json';
                  insecure_ssl: '0';
                  secret: '********';
                  url: 'http://example.com/webhook';
                };
              };
            };
            schema: {
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type';
                };
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl';
                };
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret';
                };
                url: {
                  $ref: '#/components/schemas/webhook-config-url';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a webhook configuration for an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}/deliveries': {
    get: {
      description: 'Returns a list of webhook deliveries for a webhook configured in an organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook';
      };
      operationId: 'orgs/list-webhook-deliveries';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/cursor';
        },
        {
          in: 'query';
          name: 'redelivery';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List deliveries for an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}': {
    get: {
      description: 'Returns a delivery for a webhook configured in an organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook';
      };
      operationId: 'orgs/get-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook-delivery';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a webhook delivery for an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    post: {
      description: 'Redeliver a delivery for a webhook configured in an organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook';
      };
      operationId: 'orgs/redeliver-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Redeliver a delivery for an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/hooks/{hook_id}/pings': {
    post: {
      description: 'This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook';
      };
      operationId: 'orgs/ping-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Ping an organization webhook';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'webhooks';
      };
    };
  };
  '/orgs/{org}/installation': {
    get: {
      description: "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app';
      };
      operationId: 'apps/get-org-installation';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation';
                };
              };
              schema: {
                $ref: '#/components/schemas/installation';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an organization installation for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/installations': {
    get: {
      description: 'Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization';
      };
      operationId: 'orgs/list-app-installations';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation-paginated';
                };
              };
              schema: {
                properties: {
                  installations: {
                    items: {
                      $ref: '#/components/schemas/installation';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'installations'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List app installations for an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/interaction-limits': {
    delete: {
      description: 'Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization';
      };
      operationId: 'interactions/remove-restrictions-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove interaction restrictions for an organization';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
    get: {
      description: 'Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization';
      };
      operationId: 'interactions/get-restrictions-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response';
                };
              };
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response';
                  },
                  {
                    additionalProperties: false;
                    properties: {};
                    type: 'object';
                  },
                ];
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get interaction restrictions for an organization';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
    put: {
      description: 'Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization';
      };
      operationId: 'interactions/set-restrictions-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expiry: 'one_month';
                  limit: 'collaborators_only';
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/interaction-limit';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response';
                };
              };
              schema: {
                $ref: '#/components/schemas/interaction-limit-response';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set interaction restrictions for an organization';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/invitations': {
    get: {
      description: 'The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations';
      };
      operationId: 'orgs/list-pending-invitations';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          description: 'Filter invitations by their member role.';
          in: 'query';
          name: 'role';
          required: false;
          schema: {
            default: 'all';
            enum: ['all', 'admin', 'direct_member', 'billing_manager', 'hiring_manager'];
            type: 'string';
          };
        },
        {
          description: 'Filter invitations by their invitation source.';
          in: 'query';
          name: 'invitation_source';
          required: false;
          schema: {
            default: 'all';
            enum: ['all', 'member', 'scim'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List pending organization invitations';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    post: {
      description: 'Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#create-an-organization-invitation';
      };
      operationId: 'orgs/create-invitation';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  email: 'octocat@github.com';
                  role: 'direct_member';
                  team_ids: [12, 26];
                };
              };
            };
            schema: {
              properties: {
                email: {
                  description: '**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.';
                  type: 'string';
                };
                invitee_id: {
                  description: '**Required unless you provide `email`**. GitHub user ID for the person you are inviting.';
                  type: 'integer';
                };
                role: {
                  default: 'direct_member';
                  description: 'The role for the new member. \n * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.';
                  enum: ['admin', 'direct_member', 'billing_manager'];
                  type: 'string';
                };
                team_ids: {
                  description: 'Specify IDs for the teams you want to invite new members to.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation';
                };
              };
              schema: {
                $ref: '#/components/schemas/organization-invitation';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an organization invitation';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
        triggersNotification: true;
      };
    };
  };
  '/orgs/{org}/invitations/{invitation_id}': {
    delete: {
      description: 'Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation';
      };
      operationId: 'orgs/cancel-invitation';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/invitation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Cancel an organization invitation';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
        triggersNotification: true;
      };
    };
  };
  '/orgs/{org}/invitations/{invitation_id}/teams': {
    get: {
      description: 'List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams';
      };
      operationId: 'orgs/list-invitation-teams';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/invitation-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List organization invitation teams';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/issues': {
    get: {
      description: 'List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user';
      };
      operationId: 'issues/list-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.";
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'assigned';
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Indicates the state of the issues to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/labels';
        },
        {
          description: 'What to sort results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'comments'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List organization issues assigned to the authenticated user';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/members': {
    get: {
      description: 'List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-members';
      };
      operationId: 'orgs/list-members';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: 'Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.';
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'all';
            enum: ['2fa_disabled', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Filter members returned by their role.';
          in: 'query';
          name: 'role';
          required: false;
          schema: {
            default: 'all';
            enum: ['all', 'admin', 'member'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List organization members';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/members/{username}': {
    delete: {
      description: "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#remove-an-organization-member';
      };
      operationId: 'orgs/remove-member';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Remove an organization member';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    get: {
      description: 'Check if a user is, publicly or privately, a member of the organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user';
      };
      operationId: 'orgs/check-membership-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response if requester is an organization member and user is a member';
        };
        '302': {
          description: 'Response if requester is not an organization member';
          headers: {
            Location: {
              example: 'https://api.github.com/orgs/github/public_members/pezra';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          description: 'Not Found if requester is an organization member and user is not a member';
        };
      };
      summary: 'Check organization membership for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/members/{username}/codespaces': {
    get: {
      description: 'Lists the codespaces that a member of an organization has for repositories in that organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org';
      };
      operationId: 'codespaces/get-codespaces-for-user-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list';
                };
              };
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'codespaces'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List codespaces for a user in organization';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/members/{username}/codespaces/{codespace_name}': {
    delete: {
      description: "Deletes a user's codespace.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces';
      };
      operationId: 'codespaces/delete-from-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Delete a codespace from the organization';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop': {
    post: {
      description: "Stops a user's codespace.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces';
      };
      operationId: 'codespaces/stop-in-organization';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Stop a codespace for an organization user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'organizations';
      };
    };
  };
  '/orgs/{org}/memberships/{username}': {
    delete: {
      description: "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user';
      };
      operationId: 'orgs/remove-membership-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Remove organization membership for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    get: {
      description: "In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user';
      };
      operationId: 'orgs/get-membership-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-has-an-active-admin-membership-with-organization': {
                  $ref: '#/components/examples/org-membership-response-if-user-has-an-active-admin-membership-with-organization';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get organization membership for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    put: {
      description: "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user';
      };
      operationId: 'orgs/set-membership-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Set an organization membership role for a user';
                value: {
                  role: 'member';
                };
              };
            };
            schema: {
              properties: {
                role: {
                  default: 'member';
                  description: 'The role to give the user in the organization. Can be one of:  \n * `admin` - The user will become an owner of the organization.  \n * `member` - The user will become a non-owner member of the organization.';
                  enum: ['admin', 'member'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-already-had-membership-with-organization': {
                  $ref: '#/components/examples/org-membership-response-if-user-has-an-active-admin-membership-with-organization';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set organization membership for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/migrations': {
    get: {
      description: 'Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).\n\nA list of `repositories` is only returned for export migrations.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#list-organization-migrations';
      };
      operationId: 'migrations/list-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          description: 'Exclude attributes from the API response to improve performance';
          in: 'query';
          name: 'exclude';
          schema: {
            items: {
              description: 'Allowed values that can be passed to the exclude param.';
              enum: ['repositories'];
              example: 'repositories';
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/migration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization migrations';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
    post: {
      description: 'Initiates the generation of a migration archive.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#start-an-organization-migration';
      };
      operationId: 'migrations/start-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  lock_repositories: true;
                  repositories: ['github/Hello-World'];
                };
              };
            };
            schema: {
              properties: {
                exclude: {
                  description: 'Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.';
                  items: {
                    enum: ['repositories'];
                    type: 'string';
                  };
                  type: 'array';
                };
                exclude_attachments: {
                  default: false;
                  description: 'Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).';
                  example: true;
                  type: 'boolean';
                };
                exclude_git_data: {
                  default: false;
                  description: 'Indicates whether the repository git data should be excluded from the migration.';
                  type: 'boolean';
                };
                exclude_metadata: {
                  default: false;
                  description: 'Indicates whether metadata should be excluded and only git source should be included for the migration.';
                  type: 'boolean';
                };
                exclude_owner_projects: {
                  default: false;
                  description: 'Indicates whether projects owned by the organization or users should be excluded. from the migration.';
                  example: true;
                  type: 'boolean';
                };
                exclude_releases: {
                  default: false;
                  description: 'Indicates whether releases should be excluded from the migration (to reduce migration archive file size).';
                  example: true;
                  type: 'boolean';
                };
                lock_repositories: {
                  default: false;
                  description: 'Indicates whether repositories should be locked (to prevent manipulation) while migrating data.';
                  example: true;
                  type: 'boolean';
                };
                org_metadata_only: {
                  default: false;
                  description: 'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).';
                  example: true;
                  type: 'boolean';
                };
                repositories: {
                  description: 'A list of arrays indicating which repositories should be migrated.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              required: ['repositories'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/migration';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Start an organization migration';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/migrations/{migration_id}': {
    get: {
      description: "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status';
      };
      operationId: 'migrations/get-status-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          description: 'Exclude attributes from the API response to improve performance';
          in: 'query';
          name: 'exclude';
          schema: {
            items: {
              description: 'Allowed values that can be passed to the exclude param.';
              enum: ['repositories'];
              example: 'repositories';
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org';
                };
              };
              schema: {
                $ref: '#/components/schemas/migration';
              };
            };
          };
          description: "*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.";
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an organization migration status';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/migrations/{migration_id}/archive': {
    delete: {
      description: 'Deletes a previous migration archive. Migration archives are automatically deleted after seven days.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive';
      };
      operationId: 'migrations/delete-archive-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/migration-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an organization migration archive';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
    get: {
      description: 'Fetches the URL to a migration archive.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive';
      };
      operationId: 'migrations/download-archive-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/migration-id';
        },
      ];
      responses: {
        '302': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Download an organization migration archive';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock': {
    delete: {
      description: 'Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository';
      };
      operationId: 'migrations/unlock-repo-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          $ref: '#/components/parameters/repo-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unlock an organization repository';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/migrations/{migration_id}/repositories': {
    get: {
      description: 'List all the repositories for this organization migration.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration';
      };
      operationId: 'migrations/list-repos-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repositories in an organization migration';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'orgs';
      };
    };
  };
  '/orgs/{org}/outside_collaborators': {
    get: {
      description: 'List all users who are outside collaborators of an organization.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization';
      };
      operationId: 'orgs/list-outside-collaborators';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: 'Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.';
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'all';
            enum: ['2fa_disabled', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List outside collaborators for an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'outside-collaborators';
      };
    };
  };
  '/orgs/{org}/outside_collaborators/{username}': {
    delete: {
      description: "Removing a user from this list will remove them from all the organization's repositories.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization';
      };
      operationId: 'orgs/remove-outside-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-member-of-the-organization': {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/orgs#remove-outside-collaborator';
                    message: 'You cannot specify an organization member to remove as an outside collaborator.';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Unprocessable Entity if user is a member of the organization';
        };
      };
      summary: 'Remove outside collaborator from an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'outside-collaborators';
      };
    };
    put: {
      description: 'When an organization member is converted to an outside collaborator, they\'ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator';
      };
      operationId: 'orgs/convert-member-to-outside-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              '202': {
                summary: 'Status code 202, asynchronous request';
                value: {
                  async: true;
                };
              };
              '204': {
                summary: 'Status code 204, synchronous request';
                value: null;
              };
            };
            schema: {
              properties: {
                async: {
                  default: false;
                  description: 'When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                '202': {
                  value: null;
                };
              };
              schema: {
                additionalProperties: false;
                properties: {};
                type: 'object';
              };
            };
          };
          description: 'User is getting converted asynchronously';
        };
        '204': {
          description: 'User was converted';
        };
        '403': {
          description: 'Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Convert an organization member to outside collaborator';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'outside-collaborators';
      };
    };
  };
  '/orgs/{org}/packages': {
    get: {
      description: 'Lists packages in an organization readable by the user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-an-organization';
      };
      operationId: 'packages/list-packages-for-organization';
      parameters: [
        {
          description: "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.";
          in: 'query';
          name: 'package_type';
          required: true;
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/package-visibility';
        },
        {
          description: 'Page number of the results to fetch.';
          in: 'query';
          name: 'page';
          schema: {
            default: 1;
            type: 'integer';
          };
        },
        {
          description: 'The number of results per page (max 100).';
          in: 'query';
          name: 'per_page';
          schema: {
            default: 30;
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-org';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List packages for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/packages/{package_type}/{package_name}': {
    delete: {
      description: 'Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization';
      };
      operationId: 'packages/delete-package-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a package for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package in an organization.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization';
      };
      operationId: 'packages/get-package-for-organization';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-org';
                };
              };
              schema: {
                $ref: '#/components/schemas/package';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/packages/{package_type}/{package_name}/restore': {
    post: {
      description: 'Restores an entire package in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization';
      };
      operationId: 'packages/restore-package-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: 'package token';
          in: 'query';
          name: 'token';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore a package for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/packages/{package_type}/{package_name}/versions': {
    get: {
      description: 'Lists package versions for a package owned by an organization.\n\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-an-organization';
      };
      operationId: 'packages/get-all-package-versions-for-package-owned-by-org';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          description: 'The state of the package, either active or deleted.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'active';
            enum: ['active', 'deleted'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-org';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List package versions for a package owned by an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description: 'Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization';
      };
      operationId: 'packages/delete-package-version-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete package version for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package version in an organization.\n\nYou must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization';
      };
      operationId: 'packages/get-package-version-for-organization';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-org';
                };
              };
              schema: {
                $ref: '#/components/schemas/package-version';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package version for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description: 'Restores a specific package version in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization';
      };
      operationId: 'packages/restore-package-version-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore package version for an organization';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/projects': {
    get: {
      description: 'Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-organization-projects';
      };
      operationId: 'projects/list-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: 'Indicates the state of the projects to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/project';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'List organization projects';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#create-an-organization-project';
      };
      operationId: 'projects/create-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'High-level roadmap for the upcoming year.';
                  name: 'Organization Roadmap';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The description of the project.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the project.';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/project';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create an organization project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/public_members': {
    get: {
      description: 'Members of an organization can choose to have their membership publicized or not.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-public-organization-members';
      };
      operationId: 'orgs/list-public-members';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List public organization members';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/public_members/{username}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user';
      };
      operationId: 'orgs/remove-public-membership-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove public organization membership for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user';
      };
      operationId: 'orgs/check-public-membership-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response if user is a public member';
        };
        '404': {
          description: 'Not Found if user is not a public member';
        };
      };
      summary: 'Check public organization membership for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    put: {
      description: 'The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user';
      };
      operationId: 'orgs/set-public-membership-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Set public organization membership for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/repos': {
    get: {
      description: 'Lists repositories for the specified organization.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-organization-repositories';
      };
      operationId: 'repos/list-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          description: 'Specifies the types of repositories you want returned.';
          in: 'query';
          name: 'type';
          required: false;
          schema: {
            enum: ['all', 'public', 'private', 'forks', 'sources', 'member'];
            type: 'string';
          };
        },
        {
          description: 'The property to sort the results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'pushed', 'full_name'];
            type: 'string';
          };
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organization repositories';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-an-organization-repository';
      };
      operationId: 'repos/create-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository';
                  has_issues: true;
                  has_projects: true;
                  has_wiki: true;
                  homepage: 'https://github.com';
                  name: 'Hello-World';
                  private: false;
                };
              };
            };
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false;
                  description: 'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.';
                  type: 'boolean';
                };
                allow_merge_commit: {
                  default: true;
                  description: 'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.';
                  type: 'boolean';
                };
                allow_rebase_merge: {
                  default: true;
                  description: 'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.';
                  type: 'boolean';
                };
                allow_squash_merge: {
                  default: true;
                  description: 'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.';
                  type: 'boolean';
                };
                auto_init: {
                  default: false;
                  description: 'Pass `true` to create an initial commit with empty README.';
                  type: 'boolean';
                };
                delete_branch_on_merge: {
                  default: false;
                  description: 'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**';
                  type: 'boolean';
                };
                description: {
                  description: 'A short description of the repository.';
                  type: 'string';
                };
                gitignore_template: {
                  description: 'Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".';
                  type: 'string';
                };
                has_downloads: {
                  default: true;
                  description: 'Whether downloads are enabled.';
                  example: true;
                  type: 'boolean';
                };
                has_issues: {
                  default: true;
                  description: 'Either `true` to enable issues for this repository or `false` to disable them.';
                  type: 'boolean';
                };
                has_projects: {
                  default: true;
                  description: "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.";
                  type: 'boolean';
                };
                has_wiki: {
                  default: true;
                  description: 'Either `true` to enable the wiki for this repository or `false` to disable it.';
                  type: 'boolean';
                };
                homepage: {
                  description: 'A URL with more information about the repository.';
                  type: 'string';
                };
                is_template: {
                  default: false;
                  description: 'Either `true` to make this repo available as a template repository or `false` to prevent it.';
                  type: 'boolean';
                };
                license_template: {
                  description: 'Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".';
                  type: 'string';
                };
                merge_commit_message: {
                  description: "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'];
                  type: 'string';
                };
                merge_commit_title: {
                  description: "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).";
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'];
                  type: 'string';
                };
                name: {
                  description: 'The name of the repository.';
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Whether the repository is private.';
                  type: 'boolean';
                };
                squash_merge_commit_message: {
                  description: "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'];
                  type: 'string';
                };
                squash_merge_commit_title: {
                  description: "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).";
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'];
                  type: 'string';
                };
                team_id: {
                  description: 'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.';
                  type: 'integer';
                };
                use_squash_pr_title_as_default: {
                  default: false;
                  deprecated: true;
                  description: 'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.';
                  type: 'boolean';
                };
                visibility: {
                  description: 'The visibility of the repository.';
                  enum: ['public', 'private'];
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an organization repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/secret-scanning/alerts': {
    get: {
      description: 'Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\nTo use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization';
      };
      operationId: 'secret-scanning/list-alerts-for-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-before-org-repo';
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-after-org-repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-secret-scanning-alert-list';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-secret-scanning-alert';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List secret scanning alerts for an organization';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/security-managers': {
    get: {
      description: 'Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nTo use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.\n\nGitHub Apps must have the `administration` organization read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-security-manager-teams';
      };
      operationId: 'orgs/list-security-manager-teams';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List security manager teams';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'security-managers';
      };
    };
  };
  '/orgs/{org}/security-managers/teams/{team_slug}': {
    delete: {
      description: 'Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."\n\nTo use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.\n\nGitHub Apps must have the `administration` organization read-write permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#remove-a-security-manager-team';
      };
      operationId: 'orgs/remove-security-manager-team';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove a security manager team';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'security-managers';
      };
    };
    put: {
      description: 'Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."\n\nTo use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.\n\nGitHub Apps must have the `administration` organization read-write permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#add-a-security-manager-team';
      };
      operationId: 'orgs/add-security-manager-team';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '409': {
          description: 'The organization has reached the maximum number of security manager teams.';
        };
      };
      summary: 'Add a security manager team';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'security-managers';
      };
    };
  };
  '/orgs/{org}/settings/billing/actions': {
    get: {
      description: 'Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAccess tokens must have the `repo` or `admin:org` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization';
      };
      operationId: 'billing/get-github-actions-billing-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Actions billing for an organization';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/settings/billing/packages': {
    get: {
      description: 'Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `repo` or `admin:org` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization';
      };
      operationId: 'billing/get-github-packages-billing-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/packages-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Packages billing for an organization';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/settings/billing/shared-storage': {
    get: {
      description: 'Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `repo` or `admin:org` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization';
      };
      operationId: 'billing/get-shared-storage-billing-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/combined-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get shared storage billing for an organization';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams': {
    get: {
      description: 'Lists all teams in an organization that are visible to the authenticated user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-teams';
      };
      operationId: 'teams/list';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List teams';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#create-a-team';
      };
      operationId: 'teams/create';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'A great team';
                  name: 'Justice League';
                  permission: 'push';
                  privacy: 'closed';
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.';
                  type: 'string';
                };
                maintainers: {
                  description: 'List GitHub IDs for organization members who will become team maintainers.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                name: {
                  description: 'The name of the team.';
                  type: 'string';
                };
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.';
                  type: 'integer';
                };
                permission: {
                  default: 'pull';
                  description: '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.';
                  enum: ['pull', 'push'];
                  type: 'string';
                };
                privacy: {
                  description: 'The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.  \nDefault for child team: `closed`';
                  enum: ['secret', 'closed'];
                  type: 'string';
                };
                repo_names: {
                  description: 'The full name (e.g., "organization-name/repository-name") of repositories to add the team to.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a team';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}': {
    delete: {
      description: 'To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#delete-a-team';
      };
      operationId: 'teams/delete-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a team';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a team using the team\'s `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-a-team-by-name';
      };
      operationId: 'teams/get-by-name';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a team by name';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: 'To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#update-a-team';
      };
      operationId: 'teams/update-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'new team description';
                  name: 'new team name';
                  privacy: 'closed';
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the team.';
                  type: 'string';
                };
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.';
                  nullable: true;
                  type: 'integer';
                };
                permission: {
                  default: 'pull';
                  description: '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.';
                  enum: ['pull', 'push', 'admin'];
                  type: 'string';
                };
                privacy: {
                  description: 'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.';
                  enum: ['secret', 'closed'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response when the updated information already exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a team';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions': {
    get: {
      description: "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-discussions';
      };
      operationId: 'teams/list-discussions-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          description: 'Pinned discussions only filter';
          in: 'query';
          name: 'pinned';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List discussions';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussions';
      };
    };
    post: {
      description: 'Creates a new discussion post on a team\'s page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion';
      };
      operationId: 'teams/create-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Hi! This is an area for us to collaborate as a team.';
                  title: 'Our first team post';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.";
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.';
                  type: 'boolean';
                };
                title: {
                  description: "The discussion post's title.";
                  type: 'string';
                };
              };
              required: ['title', 'body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a discussion';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussions';
        triggersNotification: true;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}': {
    delete: {
      description: "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion';
      };
      operationId: 'teams/delete-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a discussion';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussions';
      };
    };
    get: {
      description: "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion';
      };
      operationId: 'teams/get-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a discussion';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussions';
      };
    };
    patch: {
      description: 'Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion';
      };
      operationId: 'teams/update-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  title: 'Welcome to our first team post';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.";
                  type: 'string';
                };
                title: {
                  description: "The discussion post's title.";
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a discussion';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussions';
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments': {
    get: {
      description: 'List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-discussion-comments';
      };
      operationId: 'teams/list-discussion-comments-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List discussion comments';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussion-comments';
      };
    };
    post: {
      description: 'Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-comment';
      };
      operationId: 'teams/create-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like apples?';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.";
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a discussion comment';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussion-comments';
        triggersNotification: true;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}': {
    delete: {
      description: 'Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-comment';
      };
      operationId: 'teams/delete-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a discussion comment';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussion-comments';
      };
    };
    get: {
      description: 'Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-comment';
      };
      operationId: 'teams/get-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a discussion comment';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussion-comments';
      };
    };
    patch: {
      description: 'Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-comment';
      };
      operationId: 'teams/update-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like pineapples?';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.";
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a discussion comment';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'discussion-comments';
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    get: {
      description: 'List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment';
      };
      operationId: 'reactions/list-for-team-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List reactions for a team discussion comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment';
      };
      operationId: 'reactions/create-for-team-discussion-comment-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response when the reaction type has already been added to this team discussion comment';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create reaction for a team discussion comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction';
      };
      operationId: 'reactions/delete-for-team-discussion-comment';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete team discussion comment reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions': {
    get: {
      description: 'List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion';
      };
      operationId: 'reactions/list-for-team-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List reactions for a team discussion';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion';
      };
      operationId: 'reactions/create-for-team-discussion-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create reaction for a team discussion';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction';
      };
      operationId: 'reactions/delete-for-team-discussion';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete team discussion reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/invitations': {
    get: {
      description: 'The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-pending-team-invitations';
      };
      operationId: 'teams/list-pending-invitations-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List pending team invitations';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/members': {
    get: {
      description: 'Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-team-members';
      };
      operationId: 'teams/list-members-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          description: 'Filters members returned by their role in the team.';
          in: 'query';
          name: 'role';
          required: false;
          schema: {
            default: 'all';
            enum: ['member', 'maintainer', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List team members';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/memberships/{username}': {
    delete: {
      description: "To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user';
      };
      operationId: 'teams/remove-membership-for-user-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          description: 'Forbidden if team synchronization is set up';
        };
      };
      summary: 'Remove team membership for a user';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    get: {
      description: "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user';
      };
      operationId: 'teams/get-membership-for-user-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-team-maintainer': {
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-membership';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          description: 'if user has no team membership';
        };
      };
      summary: 'Get team membership for a user';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    put: {
      description: 'Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nAn organization owner can add someone who is not part of the team\'s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user';
      };
      operationId: 'teams/add-or-update-membership-for-user-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Add or update team membership for an organization member';
                value: {
                  role: 'maintainer';
                };
              };
            };
            schema: {
              properties: {
                role: {
                  default: 'member';
                  description: 'The role that this user should have in the team.';
                  enum: ['member', 'maintainer'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-users-membership-with-team-is-now-pending': {
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          description: 'Forbidden if team synchronization is set up';
        };
        '422': {
          description: 'Unprocessable Entity if you attempt to add an organization to a team';
        };
      };
      summary: 'Add or update team membership for a user';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/projects': {
    get: {
      description: 'Lists the organization projects for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-team-projects';
      };
      operationId: 'teams/list-projects-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-project';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List team projects';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/projects/{project_id}': {
    delete: {
      description: 'Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team';
      };
      operationId: 'teams/remove-project-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove a project from a team';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project';
      };
      operationId: 'teams/check-permissions-for-project-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-project';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          description: 'Not Found if project is not managed by this team';
        };
      };
      summary: 'Check team permissions for a project';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions';
      };
      operationId: 'teams/add-or-update-project-permissions-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Updates the permissions for the team to write for the project';
                value: {
                  permission: 'write';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                permission: {
                  description: 'The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
                  enum: ['read', 'write', 'admin'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          content: {
            'application/json': {
              examples: {
                'response-if-the-project-is-not-owned-by-the-organization': {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions';
                    message: 'Must have admin rights to Repository.';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden if the project is not owned by the organization';
        };
      };
      summary: 'Add or update team project permissions';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/repos': {
    get: {
      description: "Lists a team's repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-team-repositories';
      };
      operationId: 'teams/list-repos-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List team repositories';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}': {
    delete: {
      description: 'If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team';
      };
      operationId: 'teams/remove-repo-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove a repository from a team';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository';
      };
      operationId: 'teams/check-permissions-for-repo-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-repository-permissions': {
                  $ref: '#/components/examples/team-repository-alternative-response-with-repository-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-repository';
              };
            };
          };
          description: 'Alternative response with repository permissions';
        };
        '204': {
          description: "Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.";
        };
        '404': {
          description: 'Not Found if team does not have permission for the repository';
        };
      };
      summary: 'Check team permissions for a repository';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'To add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions';
      };
      operationId: 'teams/add-or-update-repo-permissions-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Adding a team to an organization repository with the write role';
                value: {
                  permission: 'push';
                };
              };
            };
            schema: {
              properties: {
                permission: {
                  default: 'push';
                  description: "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.";
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Add or update team repository permissions';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/teams/{team_slug}/teams': {
    get: {
      description: 'Lists the child teams of the team specified by `{team_slug}`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-child-teams';
      };
      operationId: 'teams/list-child-in-org';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/team-slug';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-child-teams-exist': {
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'if child teams exist';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List child teams';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/orgs/{org}/{security_product}/{enablement}': {
    post: {
      description: 'Enables or disables the specified security feature for all repositories in an organization.\n\nTo use this endpoint, you must be an organization owner or be member of a team with the security manager role.\nA token with the \'write:org\' scope is also required.\n\nGitHub Apps must have the `organization_administration:write` permission to use this endpoint.\n\nFor more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#enable-or-disable-security-product-on-all-org-repos';
      };
      operationId: 'orgs/enable-or-disable-security-product-on-all-org-repos';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/security-product';
        },
        {
          $ref: '#/components/parameters/org-security-product-enablement';
        },
      ];
      responses: {
        '204': {
          description: 'Action started';
        };
        '422': {
          description: 'The action could not be taken due to an in progress enablement, or a policy is preventing enablement';
        };
      };
      summary: 'Enable or disable a security feature for an organization';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'orgs';
      };
    };
  };
  '/projects/columns/cards/{card_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project-card';
      };
      operationId: 'projects/delete-card';
      parameters: [
        {
          $ref: '#/components/parameters/card-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      type: 'string';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a project card';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#get-a-project-card';
      };
      operationId: 'projects/get-card';
      parameters: [
        {
          $ref: '#/components/parameters/card-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-card';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a project card';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#update-a-project-card';
      };
      operationId: 'projects/update-card';
      parameters: [
        {
          $ref: '#/components/parameters/card-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Change the note on the card';
                value: {
                  note: 'Add payload for delete Project column';
                };
              };
            };
            schema: {
              properties: {
                archived: {
                  description: 'Whether or not the card is archived';
                  example: false;
                  type: 'boolean';
                };
                note: {
                  description: "The project card's note";
                  example: 'Update all gems';
                  nullable: true;
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-card';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update an existing project card';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
  };
  '/projects/columns/cards/{card_id}/moves': {
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#move-a-project-card';
      };
      operationId: 'projects/move-card';
      parameters: [
        {
          $ref: '#/components/parameters/card-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Move the card to the bottom of the column';
                value: {
                  column_id: 42;
                  position: 'bottom';
                };
              };
            };
            schema: {
              properties: {
                column_id: {
                  description: 'The unique identifier of the column the card should be moved to';
                  example: 42;
                  type: 'integer';
                };
                position: {
                  description: 'The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.';
                  example: 'bottom';
                  pattern: '^(?:top|bottom|after:\\d+)$';
                  type: 'string';
                };
              };
              required: ['position'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                additionalProperties: false;
                properties: {};
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string';
                        };
                        field: {
                          type: 'string';
                        };
                        message: {
                          type: 'string';
                        };
                        resource: {
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  code: {
                    type: 'string';
                  };
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string';
                        };
                        message: {
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Move a project card';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
  };
  '/projects/columns/{column_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project-column';
      };
      operationId: 'projects/delete-column';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Delete a project column';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#get-a-project-column';
      };
      operationId: 'projects/get-column';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-column';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a project column';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#update-a-project-column';
      };
      operationId: 'projects/update-column';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Rename the project column';
                value: {
                  name: 'To Do';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'Name of the project column';
                  example: 'Remaining tasks';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-column';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Update an existing project column';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
  };
  '/projects/columns/{column_id}/cards': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-project-cards';
      };
      operationId: 'projects/list-cards';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
        {
          description: "Filters the project cards that are returned by the card's state.";
          in: 'query';
          name: 'archived_state';
          required: false;
          schema: {
            default: 'not_archived';
            enum: ['all', 'archived', 'not_archived'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/project-card';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List project cards';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#create-a-project-card';
      };
      operationId: 'projects/create-card';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Create a new card';
                value: {
                  note: 'Add payload for delete Project column';
                };
              };
            };
            schema: {
              oneOf: [
                {
                  properties: {
                    note: {
                      description: "The project card's note";
                      example: 'Update all gems';
                      nullable: true;
                      type: 'string';
                    };
                  };
                  required: ['note'];
                  type: 'object';
                },
                {
                  properties: {
                    content_id: {
                      description: 'The unique identifier of the content associated with the card';
                      example: 42;
                      type: 'integer';
                    };
                    content_type: {
                      description: 'The piece of content associated with the card';
                      example: 'PullRequest';
                      type: 'string';
                    };
                  };
                  required: ['content_id', 'content_type'];
                  type: 'object';
                },
              ];
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-card';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/validation-error';
                  },
                  {
                    $ref: '#/components/schemas/validation-error-simple';
                  },
                ];
              };
            };
          };
          description: 'Validation failed';
        };
        '503': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  code: {
                    type: 'string';
                  };
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string';
                        };
                        message: {
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a project card';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cards';
      };
    };
  };
  '/projects/columns/{column_id}/moves': {
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#move-a-project-column';
      };
      operationId: 'projects/move-column';
      parameters: [
        {
          $ref: '#/components/parameters/column-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Move the column to the end of the board';
                value: {
                  position: 'last';
                };
              };
            };
            schema: {
              properties: {
                position: {
                  description: 'The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.';
                  example: 'last';
                  pattern: '^(?:first|last|after:\\d+)$';
                  type: 'string';
                };
              };
              required: ['position'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                additionalProperties: false;
                properties: {};
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Move a project column';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
  };
  '/projects/{project_id}': {
    delete: {
      description: 'Deletes a project board. Returns a `404 Not Found` status if projects are disabled.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project';
      };
      operationId: 'projects/delete';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '204': {
          description: 'Delete Success';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      type: 'string';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Delete a project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#get-a-project';
      };
      operationId: 'projects/get';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3';
                };
              };
              schema: {
                $ref: '#/components/schemas/project';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get a project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#update-a-project';
      };
      operationId: 'projects/update';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Change the name, state, and permissions for a project';
                value: {
                  name: 'Week One Sprint';
                  organization_permission: 'write';
                  state: 'open';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'Body of the project';
                  example: 'This project represents the sprint of the first week in January';
                  nullable: true;
                  type: 'string';
                };
                name: {
                  description: 'Name of the project';
                  example: 'Week One Sprint';
                  type: 'string';
                };
                organization_permission: {
                  description: 'The baseline permission that all organization members have on this project';
                  enum: ['read', 'write', 'admin', 'none'];
                  type: 'string';
                };
                private: {
                  description: 'Whether or not this project can be seen by everyone.';
                  type: 'boolean';
                };
                state: {
                  description: "State of the project; either 'open' or 'closed'";
                  example: 'open';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3';
                };
              };
              schema: {
                $ref: '#/components/schemas/project';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  errors: {
                    items: {
                      type: 'string';
                    };
                    type: 'array';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden';
        };
        '404': {
          description: 'Not Found if the authenticated user does not have access to the project';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update a project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/projects/{project_id}/collaborators': {
    get: {
      description: 'Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-project-collaborators';
      };
      operationId: 'projects/list-collaborators';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
        {
          description: "Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.";
          in: 'query';
          name: 'affiliation';
          required: false;
          schema: {
            default: 'all';
            enum: ['outside', 'direct', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List project collaborators';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'collaborators';
      };
    };
  };
  '/projects/{project_id}/collaborators/{username}': {
    delete: {
      description: 'Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#remove-project-collaborator';
      };
      operationId: 'projects/remove-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove user as a collaborator';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'collaborators';
      };
    };
    put: {
      description: 'Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#add-project-collaborator';
      };
      operationId: 'projects/add-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Applying write permissions for the new collaborator';
                value: {
                  permission: 'write';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                permission: {
                  default: 'write';
                  description: 'The permission to grant the collaborator.';
                  enum: ['read', 'write', 'admin'];
                  example: 'write';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add project collaborator';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'collaborators';
      };
    };
  };
  '/projects/{project_id}/collaborators/{username}/permission': {
    get: {
      description: "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user';
      };
      operationId: 'projects/get-permission-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-collaborator-permission';
                };
              };
              schema: {
                $ref: '#/components/schemas/project-collaborator-permission';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get project permission for a user';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'collaborators';
      };
    };
  };
  '/projects/{project_id}/columns': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-project-columns';
      };
      operationId: 'projects/list-columns';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/project-column';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List project columns';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#create-a-project-column';
      };
      operationId: 'projects/create-column';
      parameters: [
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'Remaining tasks';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'Name of the project column';
                  example: 'Remaining tasks';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    cards_url: 'https://api.github.com/projects/columns/367/cards';
                    created_at: '2016-09-05T14:18:44Z';
                    id: 367;
                    name: 'To Do';
                    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=';
                    project_url: 'https://api.github.com/projects/120';
                    updated_at: '2016-09-05T14:22:28Z';
                    url: 'https://api.github.com/projects/columns/367';
                  };
                };
              };
              schema: {
                $ref: '#/components/schemas/project-column';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a project column';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'columns';
      };
    };
  };
  '/rate_limit': {
    get: {
      description: "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user';
      };
      operationId: 'rate-limit/get';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/rate-limit-overview';
                };
              };
              schema: {
                $ref: '#/components/schemas/rate-limit-overview';
              };
            };
          };
          description: 'Response';
          headers: {
            'X-RateLimit-Limit': {
              $ref: '#/components/headers/x-rate-limit-limit';
            };
            'X-RateLimit-Remaining': {
              $ref: '#/components/headers/x-rate-limit-remaining';
            };
            'X-RateLimit-Reset': {
              $ref: '#/components/headers/x-rate-limit-reset';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get rate limit status for the authenticated user';
      tags: ['rate-limit'];
      'x-github': {
        category: 'rate-limit';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{org}/{repo}/actions/required_workflows': {
    get: {
      description: 'Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-repository-required-workflows';
      };
      operationId: 'actions/list-repo-required-workflows';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-required-workflow-paginated';
                };
              };
              schema: {
                properties: {
                  required_workflows: {
                    items: {
                      $ref: '#/components/schemas/repo-required-workflow';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'required_workflows'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repository required workflows';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}': {
    get: {
      description: 'Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-repository-required-workflow';
      };
      operationId: 'actions/get-repo-required-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-required-workflow';
                };
              };
              schema: {
                $ref: '#/components/schemas/repo-required-workflow';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a required workflow entity for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing': {
    get: {
      description: 'Gets the number of billable minutes used by a specific required workflow during the current billing cycle.\n\nBillable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage';
      };
      operationId: 'actions/get-repo-required-workflow-usage';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow-usage';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get required workflow usage';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'required-workflows';
      };
    };
  };
  '/repos/{owner}/{repo}': {
    delete: {
      description: 'Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#delete-a-repository';
      };
      operationId: 'repos/delete';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '307': {
          $ref: '#/components/responses/temporary_redirect';
        };
        '403': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/repos#delete-a-repository';
                    message: 'Organization members cannot delete repositories.';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository';
      };
      operationId: 'repos/get';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/full-repository-default-response';
                };
              };
              schema: {
                $ref: '#/components/schemas/full-repository';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/repos/repos#update-a-repository';
      };
      operationId: 'repos/update';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository';
                  has_issues: true;
                  has_projects: true;
                  has_wiki: true;
                  homepage: 'https://github.com';
                  name: 'Hello-World';
                  private: true;
                };
              };
            };
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false;
                  description: 'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.';
                  type: 'boolean';
                };
                allow_forking: {
                  default: false;
                  description: 'Either `true` to allow private forks, or `false` to prevent private forks.';
                  type: 'boolean';
                };
                allow_merge_commit: {
                  default: true;
                  description: 'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.';
                  type: 'boolean';
                };
                allow_rebase_merge: {
                  default: true;
                  description: 'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.';
                  type: 'boolean';
                };
                allow_squash_merge: {
                  default: true;
                  description: 'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.';
                  type: 'boolean';
                };
                allow_update_branch: {
                  default: false;
                  description: 'Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.';
                  type: 'boolean';
                };
                archived: {
                  default: false;
                  description: 'Whether to archive this repository. `false` will unarchive a previously archived repository.';
                  type: 'boolean';
                };
                default_branch: {
                  description: 'Updates the default branch for this repository.';
                  type: 'string';
                };
                delete_branch_on_merge: {
                  default: false;
                  description: 'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.';
                  type: 'boolean';
                };
                description: {
                  description: 'A short description of the repository.';
                  type: 'string';
                };
                has_issues: {
                  default: true;
                  description: 'Either `true` to enable issues for this repository or `false` to disable them.';
                  type: 'boolean';
                };
                has_projects: {
                  default: true;
                  description: "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.";
                  type: 'boolean';
                };
                has_wiki: {
                  default: true;
                  description: 'Either `true` to enable the wiki for this repository or `false` to disable it.';
                  type: 'boolean';
                };
                homepage: {
                  description: 'A URL with more information about the repository.';
                  type: 'string';
                };
                is_template: {
                  default: false;
                  description: 'Either `true` to make this repo available as a template repository or `false` to prevent it.';
                  type: 'boolean';
                };
                merge_commit_message: {
                  description: "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'];
                  type: 'string';
                };
                merge_commit_title: {
                  description: "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).";
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'];
                  type: 'string';
                };
                name: {
                  description: 'The name of the repository.';
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.';
                  type: 'boolean';
                };
                security_and_analysis: {
                  description: 'Specify which security and analysis features to enable or disable for the repository.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nFor example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n`{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.\n\nYou can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.';
                  nullable: true;
                  properties: {
                    advanced_security: {
                      description: 'Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."';
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.';
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                    secret_scanning: {
                      description: 'Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."';
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.';
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                    secret_scanning_push_protection: {
                      description: 'Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."';
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.';
                          type: 'string';
                        };
                      };
                      type: 'object';
                    };
                  };
                  type: 'object';
                };
                squash_merge_commit_message: {
                  description: "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'];
                  type: 'string';
                };
                squash_merge_commit_title: {
                  description: "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).";
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'];
                  type: 'string';
                };
                use_squash_pr_title_as_default: {
                  default: false;
                  deprecated: true;
                  description: 'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.';
                  type: 'boolean';
                };
                visibility: {
                  description: 'The visibility of the repository.';
                  enum: ['public', 'private'];
                  type: 'string';
                };
                web_commit_signoff_required: {
                  default: false;
                  description: 'Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/full-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/full-repository';
              };
            };
          };
          description: 'Response';
        };
        '307': {
          $ref: '#/components/responses/temporary_redirect';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/actions/artifacts': {
    get: {
      description: 'Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository';
      };
      operationId: 'actions/list-artifacts-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          description: 'Filters artifacts by exact match on their name field.';
          in: 'query';
          name: 'name';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact-paginated';
                };
              };
              schema: {
                properties: {
                  artifacts: {
                    items: {
                      $ref: '#/components/schemas/artifact';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'artifacts'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List artifacts for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'artifacts';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}': {
    delete: {
      description: 'Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-an-artifact';
      };
      operationId: 'actions/delete-artifact';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/artifact-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an artifact';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'artifacts';
      };
    };
    get: {
      description: 'Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-an-artifact';
      };
      operationId: 'actions/get-artifact';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/artifact-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact';
                };
              };
              schema: {
                $ref: '#/components/schemas/artifact';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an artifact';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'artifacts';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}': {
    get: {
      description: 'Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#download-an-artifact';
      };
      operationId: 'actions/download-artifact';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/artifact-id';
        },
        {
          in: 'path';
          name: 'archive_format';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              $ref: '#/components/headers/location';
            };
          };
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Download an artifact';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'artifacts';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/cache/usage': {
    get: {
      description: 'Gets GitHub Actions cache usage for a repository.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository';
      };
      operationId: 'actions/get-actions-cache-usage';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-cache-usage-by-repository';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Actions cache usage for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cache';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/caches': {
    delete: {
      description: 'Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\nGitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key';
      };
      operationId: 'actions/delete-actions-cache-by-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/actions-cache-key-required';
        },
        {
          $ref: '#/components/parameters/git-ref';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-list';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-cache-list';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Delete GitHub Actions caches for a repository (using a cache key)';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cache';
      };
    };
    get: {
      description: 'Lists the GitHub Actions caches for a repository.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository';
      };
      operationId: 'actions/get-actions-cache-list';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/git-ref';
        },
        {
          $ref: '#/components/parameters/actions-cache-key';
        },
        {
          $ref: '#/components/parameters/actions-cache-list-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-list';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-cache-list';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List GitHub Actions caches for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'cache';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/caches/{cache_id}': {
    delete: {
      description: 'Deletes a GitHub Actions cache for a repository, using a cache ID.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\nGitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id';
      };
      operationId: 'actions/delete-actions-cache-by-id';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/cache-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a GitHub Actions cache for a repository (using a cache ID)';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'cache';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/jobs/{job_id}': {
    get: {
      description: 'Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run';
      };
      operationId: 'actions/get-job-for-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/job-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job';
                };
              };
              schema: {
                $ref: '#/components/schemas/job';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a job for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-jobs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs': {
    get: {
      description: 'Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\nuse this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\nhave the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run';
      };
      operationId: 'actions/download-job-logs-for-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/job-id';
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              example: 'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Download job logs for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-jobs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun': {
    post: {
      description: 'Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run';
      };
      operationId: 'actions/re-run-job-for-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/job-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null;
              };
            };
            schema: {
              nullable: true;
              properties: {
                enable_debug_logging: {
                  default: false;
                  description: 'Whether to enable debug logging for the re-run.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Re-run a job from a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/oidc/customization/sub': {
    get: {
      description: 'Gets the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository';
      };
      operationId: 'actions/get-custom-oidc-sub-claim-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/oidc-custom-sub-repo';
                };
              };
              schema: {
                $ref: '#/components/schemas/oidc-custom-sub-repo';
              };
            };
          };
          description: 'Status response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get the customization template for an OIDC subject claim for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        previews: [];
        subcategory: 'oidc';
      };
    };
    put: {
      description: 'Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository';
      };
      operationId: 'actions/set-custom-oidc-sub-claim-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  include_claim_keys: ['repo', 'context'];
                  use_default: false;
                };
              };
            };
            schema: {
              description: 'Actions OIDC subject customization for a repository';
              properties: {
                include_claim_keys: {
                  description: 'Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                use_default: {
                  description: 'Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.';
                  type: 'boolean';
                };
              };
              required: ['use_default'];
              title: 'Actions OIDC subject customization for a repository';
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Empty response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Set the customization template for an OIDC subject claim for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        previews: [];
        subcategory: 'oidc';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/permissions': {
    get: {
      description: 'Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository';
      };
      operationId: 'actions/get-github-actions-permissions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-repository-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-repository-permissions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Actions permissions for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository';
      };
      operationId: 'actions/set-github-actions-permissions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allowed_actions: 'selected';
                  enabled: true;
                };
              };
            };
            schema: {
              properties: {
                allowed_actions: {
                  $ref: '#/components/schemas/allowed-actions';
                };
                enabled: {
                  $ref: '#/components/schemas/actions-enabled';
                };
              };
              required: ['enabled'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set GitHub Actions permissions for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/permissions/access': {
    get: {
      description: 'Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the\nrepository `administration` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository';
      };
      operationId: 'actions/get-workflow-access-to-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-workflow-access-to-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-workflow-access-to-repository';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the level of access for workflows outside of the repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the\nrepository `administration` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository';
      };
      operationId: 'actions/set-workflow-access-to-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-workflow-access-to-repository';
              };
            };
            schema: {
              $ref: '#/components/schemas/actions-workflow-access-to-repository';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set the level of access for workflows outside of the repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'permissions';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/permissions/selected-actions': {
    get: {
      description: 'Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository';
      };
      operationId: 'actions/get-allowed-actions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/selected-actions';
                };
              };
              schema: {
                $ref: '#/components/schemas/selected-actions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get allowed actions and reusable workflows for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository';
      };
      operationId: 'actions/set-allowed-actions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              selected_actions: {
                $ref: '#/components/examples/selected-actions';
              };
            };
            schema: {
              $ref: '#/components/schemas/selected-actions';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Set allowed actions and reusable workflows for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/permissions/workflow': {
    get: {
      description: 'Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,\nas well as if GitHub Actions can submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository';
      };
      operationId: 'actions/get-github-actions-default-workflow-permissions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-default-workflow-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-get-default-workflow-permissions';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get default workflow permissions for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
    put: {
      description: 'Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions\ncan submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository';
      };
      operationId: 'actions/set-github-actions-default-workflow-permissions-repository';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-default-workflow-permissions';
              };
            };
            schema: {
              $ref: '#/components/schemas/actions-set-default-workflow-permissions';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Success response';
        };
        '409': {
          description: 'Conflict response when changing a setting is prevented by the owning organization';
        };
      };
      summary: 'Set default workflow permissions for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'permissions';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs': {
    get: {
      description: 'List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-required-workflow-runs';
      };
      operationId: 'actions/list-required-workflow-runs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id';
        },
        {
          $ref: '#/components/parameters/actor';
        },
        {
          $ref: '#/components/parameters/workflow-run-branch';
        },
        {
          $ref: '#/components/parameters/event';
        },
        {
          $ref: '#/components/parameters/workflow-run-status';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/created';
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests';
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id';
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'workflow_runs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List workflow runs for a required workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners': {
    get: {
      description: 'Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository';
      };
      operationId: 'actions/list-self-hosted-runners-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-paginated';
                };
              };
              schema: {
                properties: {
                  runners: {
                    items: {
                      $ref: '#/components/schemas/runner';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'runners'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List self-hosted runners for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/downloads': {
    get: {
      description: 'Lists binaries for the runner application that you can download and run.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository';
      };
      operationId: 'actions/list-runner-applications-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-application-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/runner-application';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List runner applications for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/registration-token': {
    post: {
      description: 'Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `repo` scope to use this endpoint.\n\n#### Example using registration token\n \nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository';
      };
      operationId: 'actions/create-registration-token-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token';
                };
              };
              schema: {
                $ref: '#/components/schemas/authentication-token';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a registration token for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/remove-token': {
    post: {
      description: 'Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\n#### Example using remove token\n \nTo remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n\n```\n./config.sh remove --token TOKEN\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository';
      };
      operationId: 'actions/create-remove-token-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/authentication-token';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a remove token for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/{runner_id}': {
    delete: {
      description: 'Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nYou must authenticate using an access token with the `repo`\nscope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository';
      };
      operationId: 'actions/delete-self-hosted-runner-from-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a self-hosted runner from a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    get: {
      description: 'Gets a specific self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/get-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner';
                };
              };
              schema: {
                $ref: '#/components/schemas/runner';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels': {
    delete: {
      description: 'Remove all custom labels from a self-hosted runner configured in a\nrepository. Returns the remaining read-only labels from the runner.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/remove-all-custom-labels-from-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels_readonly';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Remove all custom labels from a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    get: {
      description: 'Lists all labels for a self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/list-labels-for-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List labels for a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    post: {
      description: 'Add custom labels to a self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/add-custom-labels-to-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'];
                };
              };
            };
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to add to the runner.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  minItems: 1;
                  type: 'array';
                };
              };
              required: ['labels'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Add custom labels to a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
    put: {
      description: 'Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/set-custom-labels-for-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'];
                };
              };
            };
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.';
                  items: {
                    type: 'string';
                  };
                  maxItems: 100;
                  minItems: 0;
                  type: 'array';
                };
              };
              required: ['labels'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Set custom labels for a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}': {
    delete: {
      description: 'Remove a custom label from a self-hosted runner configured\nin a repository. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository';
      };
      operationId: 'actions/remove-custom-label-from-self-hosted-runner-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/runner-id';
        },
        {
          $ref: '#/components/parameters/runner-label-name';
        },
      ];
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Remove a custom label from a self-hosted runner for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'self-hosted-runners';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs': {
    get: {
      description: 'Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository';
      };
      operationId: 'actions/list-workflow-runs-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/actor';
        },
        {
          $ref: '#/components/parameters/workflow-run-branch';
        },
        {
          $ref: '#/components/parameters/event';
        },
        {
          $ref: '#/components/parameters/workflow-run-status';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/created';
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests';
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id';
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'workflow_runs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List workflow runs for a repository';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}': {
    delete: {
      description: 'Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\nprivate you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\nthis endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-a-workflow-run';
      };
      operationId: 'actions/delete-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
    get: {
      description: 'Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow-run';
      };
      operationId: 'actions/get-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow-run';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals': {
    get: {
      description: 'Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run';
      };
      operationId: 'actions/get-reviews-for-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment-approvals-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/environment-approvals';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the review history for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/approve': {
    post: {
      description: 'Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request';
      };
      operationId: 'actions/approve-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Approve a workflow run for a fork pull request';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts': {
    get: {
      description: 'Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts';
      };
      operationId: 'actions/list-workflow-run-artifacts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact-paginated';
                };
              };
              schema: {
                properties: {
                  artifacts: {
                    items: {
                      $ref: '#/components/schemas/artifact';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'artifacts'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List workflow run artifacts';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'artifacts';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}': {
    get: {
      description: 'Gets a specific workflow run attempt. Anyone with read access to the repository\ncan use this endpoint. If the repository is private you must use an access token\nwith the `repo` scope. GitHub Apps must have the `actions:read` permission to\nuse this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt';
      };
      operationId: 'actions/get-workflow-run-attempt';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          $ref: '#/components/parameters/attempt-number';
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow-run';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a workflow run attempt';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs': {
    get: {
      description: 'Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt';
      };
      operationId: 'actions/list-jobs-for-workflow-run-attempt';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          $ref: '#/components/parameters/attempt-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job-paginated';
                };
              };
              schema: {
                properties: {
                  jobs: {
                    items: {
                      $ref: '#/components/schemas/job';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'jobs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List jobs for a workflow run attempt';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-jobs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs': {
    get: {
      description: 'Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after\n1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs';
      };
      operationId: 'actions/download-workflow-run-attempt-logs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          $ref: '#/components/parameters/attempt-number';
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              example: 'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Download workflow run attempt logs';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel': {
    post: {
      description: 'Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#cancel-a-workflow-run';
      };
      operationId: 'actions/cancel-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
      };
      summary: 'Cancel a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs': {
    get: {
      description: 'Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run';
      };
      operationId: 'actions/list-jobs-for-workflow-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
        {
          description: 'Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.';
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'latest';
            enum: ['latest', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job-paginated';
                };
              };
              schema: {
                properties: {
                  jobs: {
                    items: {
                      $ref: '#/components/schemas/job';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'jobs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List jobs for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-jobs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/logs': {
    delete: {
      description: 'Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-workflow-run-logs';
      };
      operationId: 'actions/delete-workflow-run-logs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Delete workflow run logs';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
    get: {
      description: 'Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\nthis endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\nthe `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#download-workflow-run-logs';
      };
      operationId: 'actions/download-workflow-run-logs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              example: 'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Download workflow run logs';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments': {
    get: {
      description: 'Get all deployment environments for a workflow run that are waiting for protection rules to pass.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run';
      };
      operationId: 'actions/get-pending-deployments-for-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pending-deployment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pending-deployment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get pending deployments for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
    post: {
      description: 'Approve or reject pending deployments that are waiting on approval by a required reviewer.\n\nRequired reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run';
      };
      operationId: 'actions/review-pending-deployments-for-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  comment: 'Ship it!';
                  environment_ids: [161171787];
                  state: 'approved';
                };
              };
            };
            schema: {
              properties: {
                comment: {
                  description: 'A comment to accompany the deployment review';
                  example: 'Ship it!';
                  type: 'string';
                };
                environment_ids: {
                  description: 'The list of environment ids to approve or reject';
                  example: [161171787, 161171795];
                  items: {
                    example: 161171787;
                    type: 'integer';
                  };
                  type: 'array';
                };
                state: {
                  description: 'Whether to approve or reject deployment to the specified environments.';
                  enum: ['approved', 'rejected'];
                  example: 'approved';
                  type: 'string';
                };
              };
              required: ['environment_ids', 'state', 'comment'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Review pending deployments for a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun': {
    post: {
      description: 'Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#re-run-a-workflow';
      };
      operationId: 'actions/re-run-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null;
              };
            };
            schema: {
              nullable: true;
              properties: {
                enable_debug_logging: {
                  default: false;
                  description: 'Whether to enable debug logging for the re-run.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Re-run a workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs': {
    post: {
      description: 'Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs';
      };
      operationId: 'actions/re-run-workflow-failed-jobs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null;
              };
            };
            schema: {
              nullable: true;
              properties: {
                enable_debug_logging: {
                  default: false;
                  description: 'Whether to enable debug logging for the re-run.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Re-run failed jobs from a workflow run';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/runs/{run_id}/timing': {
    get: {
      description: 'Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-run-usage';
      };
      operationId: 'actions/get-workflow-run-usage';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/run-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow-run-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get workflow run usage';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/secrets': {
    get: {
      description: 'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-repository-secrets';
      };
      operationId: 'actions/list-repo-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/actions-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository secrets';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-repository-public-key';
      };
      operationId: 'actions/get-repo-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository public key';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-a-repository-secret';
      };
      operationId: 'actions/delete-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: 'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-repository-secret';
      };
      operationId: 'actions/get-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret';
      };
      operationId: 'actions/create-or-update-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update a repository secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/variables': {
    get: {
      description: 'Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#list-repository-variables';
      };
      operationId: 'actions/list-repo-variables';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/variables-per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variables-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  variables: {
                    items: {
                      $ref: '#/components/schemas/actions-variable';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'variables'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository variables';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    post: {
      description: 'Creates a repository variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#create-a-repository-variable';
      };
      operationId: 'actions/create-repo-variable';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  value: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
              };
              required: ['name', 'value'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a repository variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/variables/{name}': {
    delete: {
      description: 'Deletes a repository variable using the variable name.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#delete-a-repository-variable';
      };
      operationId: 'actions/delete-repo-variable';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    get: {
      description: 'Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#get-a-repository-variable';
      };
      operationId: 'actions/get-repo-variable';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variable';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-variable';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    patch: {
      description: 'Updates a repository variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#update-a-repository-variable';
      };
      operationId: 'actions/update-repo-variable';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  value: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Update a repository variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows': {
    get: {
      description: 'Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-repository-workflows';
      };
      operationId: 'actions/list-repo-workflows';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  workflows: {
                    items: {
                      $ref: '#/components/schemas/workflow';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'workflows'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository workflows';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}': {
    get: {
      description: 'Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow';
      };
      operationId: 'actions/get-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable': {
    put: {
      description: 'Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#disable-a-workflow';
      };
      operationId: 'actions/disable-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Disable a workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches': {
    post: {
      description: 'You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event';
      };
      operationId: 'actions/create-workflow-dispatch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  inputs: {
                    home: 'San Francisco, CA';
                    name: 'Mona the Octocat';
                  };
                  ref: 'topic-branch';
                };
              };
            };
            schema: {
              properties: {
                inputs: {
                  additionalProperties: {
                    type: 'string';
                  };
                  description: 'Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.';
                  maxProperties: 10;
                  type: 'object';
                };
                ref: {
                  description: 'The git reference for the workflow. The reference can be a branch or tag name.';
                  type: 'string';
                };
              };
              required: ['ref'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Create a workflow dispatch event';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable': {
    put: {
      description: 'Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#enable-a-workflow';
      };
      operationId: 'actions/enable-workflow';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Enable a workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs': {
    get: {
      description: 'List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-runs';
      };
      operationId: 'actions/list-workflow-runs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
        {
          $ref: '#/components/parameters/actor';
        },
        {
          $ref: '#/components/parameters/workflow-run-branch';
        },
        {
          $ref: '#/components/parameters/event';
        },
        {
          $ref: '#/components/parameters/workflow-run-status';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/created';
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests';
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id';
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'workflow_runs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List workflow runs for a workflow';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'workflow-runs';
      };
    };
  };
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing': {
    get: {
      description: 'Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nYou can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-usage';
      };
      operationId: 'actions/get-workflow-usage';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/workflow-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/workflow-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get workflow usage';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'workflows';
      };
    };
  };
  '/repos/{owner}/{repo}/assignees': {
    get: {
      description: 'Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-assignees';
      };
      operationId: 'issues/list-assignees';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List assignees';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'assignees';
      };
    };
  };
  '/repos/{owner}/{repo}/assignees/{assignee}': {
    get: {
      description: 'Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned';
      };
      operationId: 'issues/check-user-can-be-assigned';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'assignee';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Otherwise a `404` status code is returned.';
        };
      };
      summary: 'Check if a user can be assigned';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'assignees';
      };
    };
  };
  '/repos/{owner}/{repo}/autolinks': {
    get: {
      description: 'This returns a list of autolinks configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/repos/autolinks#list-all-autolinks-of-a-repository';
      };
      operationId: 'repos/list-autolinks';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/autolink';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List all autolinks of a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'autolinks';
      };
    };
    post: {
      description: 'Users with admin access to the repository can create an autolink.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository';
      };
      operationId: 'repos/create-autolink';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  is_alphanumeric: true;
                  key_prefix: 'TICKET-';
                  url_template: 'https://example.com/TICKET?query=<num>';
                };
              };
            };
            schema: {
              properties: {
                is_alphanumeric: {
                  default: 'true';
                  description: 'Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.';
                  type: 'boolean';
                };
                key_prefix: {
                  description: 'This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.';
                  type: 'string';
                };
                url_template: {
                  description: 'The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.';
                  type: 'string';
                };
              };
              required: ['key_prefix', 'url_template'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink';
                };
              };
              schema: {
                $ref: '#/components/schemas/autolink';
              };
            };
          };
          description: 'response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/autolinks/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an autolink reference for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'autolinks';
      };
    };
  };
  '/repos/{owner}/{repo}/autolinks/{autolink_id}': {
    delete: {
      description: 'This deletes a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository';
      };
      operationId: 'repos/delete-autolink';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/autolink-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an autolink reference from a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'autolinks';
      };
    };
    get: {
      description: 'This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository';
      };
      operationId: 'repos/get-autolink';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/autolink-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink';
                };
              };
              schema: {
                $ref: '#/components/schemas/autolink';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an autolink reference of a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'autolinks';
      };
    };
  };
  '/repos/{owner}/{repo}/automated-security-fixes': {
    delete: {
      description: 'Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#disable-automated-security-fixes';
      };
      operationId: 'repos/disable-automated-security-fixes';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Disable automated security fixes';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#enable-automated-security-fixes';
      };
      operationId: 'repos/enable-automated-security-fixes';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Enable automated security fixes';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/branches': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branches#list-branches';
      };
      operationId: 'repos/list-branches';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.';
          in: 'query';
          name: 'protected';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/short-branch-with-protection-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/short-branch';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List branches';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branches#get-a-branch';
      };
      operationId: 'repos/get-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-get';
                };
              };
              schema: {
                $ref: '#/components/schemas/branch-with-protection';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-branch-protection';
      };
      operationId: 'repos/delete-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Delete branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-branch-protection';
      };
      operationId: 'repos/get-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-protection';
                };
              };
              schema: {
                $ref: '#/components/schemas/branch-protection';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    put: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#update-branch-protection';
      };
      operationId: 'repos/update-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allow_deletions: true;
                  allow_force_pushes: true;
                  allow_fork_syncing: true;
                  block_creations: true;
                  enforce_admins: true;
                  lock_branch: true;
                  required_conversation_resolution: true;
                  required_linear_history: true;
                  required_pull_request_reviews: {
                    bypass_pull_request_allowances: {
                      teams: ['justice-league'];
                      users: ['octocat'];
                    };
                    dismiss_stale_reviews: true;
                    dismissal_restrictions: {
                      teams: ['justice-league'];
                      users: ['octocat'];
                    };
                    require_code_owner_reviews: true;
                    require_last_push_approval: true;
                    required_approving_review_count: 2;
                  };
                  required_status_checks: {
                    contexts: ['continuous-integration/travis-ci'];
                    strict: true;
                  };
                  restrictions: {
                    apps: ['super-ci'];
                    teams: ['justice-league'];
                    users: ['octocat'];
                  };
                };
              };
            };
            schema: {
              properties: {
                allow_deletions: {
                  description: 'Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.';
                  type: 'boolean';
                };
                allow_force_pushes: {
                  description: 'Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."';
                  nullable: true;
                  type: 'boolean';
                };
                allow_fork_syncing: {
                  default: false;
                  description: 'Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.';
                  type: 'boolean';
                };
                block_creations: {
                  description: 'If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.';
                  type: 'boolean';
                };
                enforce_admins: {
                  description: 'Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.';
                  nullable: true;
                  type: 'boolean';
                };
                lock_branch: {
                  default: false;
                  description: 'Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.';
                  type: 'boolean';
                };
                required_conversation_resolution: {
                  description: 'Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.';
                  type: 'boolean';
                };
                required_linear_history: {
                  description: 'Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.';
                  type: 'boolean';
                };
                required_pull_request_reviews: {
                  description: 'Require at least one approving review on a pull request, before merging. Set to `null` to disable.';
                  nullable: true;
                  properties: {
                    bypass_pull_request_allowances: {
                      description: 'Allow specific users, teams, or apps to bypass pull request requirements.';
                      properties: {
                        apps: {
                          description: 'The list of app `slug`s allowed to bypass pull request requirements.';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                        teams: {
                          description: 'The list of team `slug`s allowed to bypass pull request requirements.';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                        users: {
                          description: 'The list of user `login`s allowed to bypass pull request requirements.';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                      };
                      type: 'object';
                    };
                    dismiss_stale_reviews: {
                      description: 'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.';
                      type: 'boolean';
                    };
                    dismissal_restrictions: {
                      description: 'Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.';
                      properties: {
                        apps: {
                          description: 'The list of app `slug`s with dismissal access';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                        teams: {
                          description: 'The list of team `slug`s with dismissal access';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                        users: {
                          description: 'The list of user `login`s with dismissal access';
                          items: {
                            type: 'string';
                          };
                          type: 'array';
                        };
                      };
                      type: 'object';
                    };
                    require_code_owner_reviews: {
                      description: 'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.';
                      type: 'boolean';
                    };
                    require_last_push_approval: {
                      default: false;
                      description: 'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.';
                      type: 'boolean';
                    };
                    required_approving_review_count: {
                      description: 'Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.';
                      type: 'integer';
                    };
                  };
                  type: 'object';
                };
                required_status_checks: {
                  description: 'Require status checks to pass before merging. Set to `null` to disable.';
                  nullable: true;
                  properties: {
                    checks: {
                      description: 'The list of status checks to require in order to merge into this branch.';
                      items: {
                        properties: {
                          app_id: {
                            description: 'The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.';
                            type: 'integer';
                          };
                          context: {
                            description: 'The name of the required check';
                            type: 'string';
                          };
                        };
                        required: ['context'];
                        type: 'object';
                      };
                      type: 'array';
                    };
                    contexts: {
                      deprecated: true;
                      description: '**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    strict: {
                      description: 'Require branches to be up to date before merging.';
                      type: 'boolean';
                    };
                  };
                  required: ['strict', 'contexts'];
                  type: 'object';
                };
                restrictions: {
                  description: 'Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.';
                  nullable: true;
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s with push access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    teams: {
                      description: 'The list of team `slug`s with push access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    users: {
                      description: 'The list of user `login`s with push access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['users', 'teams'];
                  type: 'object';
                };
              };
              required: ['required_status_checks', 'enforce_admins', 'required_pull_request_reviews', 'restrictions'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-protection-update';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection';
      };
      operationId: 'repos/delete-admin-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete admin branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection';
      };
      operationId: 'repos/get-admin-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get admin branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection';
      };
      operationId: 'repos/set-admin-branch-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Set admin branch protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection';
      };
      operationId: 'repos/delete-pull-request-review-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete pull request review protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection';
      };
      operationId: 'repos/get-pull-request-review-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-pull-request-review';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-pull-request-review';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get pull request review protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    patch: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection';
      };
      operationId: 'repos/update-pull-request-review-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  bypass_pull_request_allowances: {
                    apps: ['octoapp'];
                    teams: ['justice-league'];
                    users: ['octocat'];
                  };
                  dismiss_stale_reviews: true;
                  dismissal_restrictions: {
                    apps: ['octoapp'];
                    teams: ['justice-league'];
                    users: ['octocat'];
                  };
                  require_code_owner_reviews: true;
                  require_last_push_approval: true;
                  required_approving_review_count: 2;
                };
              };
            };
            schema: {
              properties: {
                bypass_pull_request_allowances: {
                  description: 'Allow specific users, teams, or apps to bypass pull request requirements.';
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s allowed to bypass pull request requirements.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    teams: {
                      description: 'The list of team `slug`s allowed to bypass pull request requirements.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    users: {
                      description: 'The list of user `login`s allowed to bypass pull request requirements.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  type: 'object';
                };
                dismiss_stale_reviews: {
                  description: 'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.';
                  type: 'boolean';
                };
                dismissal_restrictions: {
                  description: 'Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.';
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s with dismissal access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    teams: {
                      description: 'The list of team `slug`s with dismissal access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                    users: {
                      description: 'The list of user `login`s with dismissal access';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  type: 'object';
                };
                require_code_owner_reviews: {
                  description: 'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.';
                  type: 'boolean';
                };
                require_last_push_approval: {
                  default: false;
                  description: 'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`';
                  type: 'boolean';
                };
                required_approving_review_count: {
                  description: 'Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.';
                  type: 'integer';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-pull-request-review';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update pull request review protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection';
      };
      operationId: 'repos/delete-commit-signature-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete commit signature protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection';
      };
      operationId: 'repos/get-commit-signature-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get commit signature protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection';
      };
      operationId: 'repos/create-commit-signature-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced';
                };
              };
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Create commit signature protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection';
      };
      operationId: 'repos/remove-status-check-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove status check protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection';
      };
      operationId: 'repos/get-status-checks-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-check-policy';
                };
              };
              schema: {
                $ref: '#/components/schemas/status-check-policy';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get status checks protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    patch: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#update-status-check-protection';
      };
      operationId: 'repos/update-status-check-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  contexts: ['continuous-integration/travis-ci'];
                  strict: true;
                };
              };
            };
            schema: {
              properties: {
                checks: {
                  description: 'The list of status checks to require in order to merge into this branch.';
                  items: {
                    properties: {
                      app_id: {
                        description: 'The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.';
                        type: 'integer';
                      };
                      context: {
                        description: 'The name of the required check';
                        type: 'string';
                      };
                    };
                    required: ['context'];
                    type: 'object';
                  };
                  type: 'array';
                };
                contexts: {
                  deprecated: true;
                  description: '**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                strict: {
                  description: 'Require branches to be up to date before merging.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-check-policy';
                };
              };
              schema: {
                $ref: '#/components/schemas/status-check-policy';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update status check protection';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts';
      };
      operationId: 'repos/remove-status-check-contexts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing status checks from a branch protection rule';
                value: {
                  contexts: ['continuous-integration/jenkins'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'];
                  };
                  properties: {
                    contexts: {
                      description: 'The name of the status checks';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['contexts'];
                  type: 'object';
                },
                {
                  description: 'The name of the status checks';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'];
                };
              };
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove status check contexts';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'contexts';
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts';
      };
      operationId: 'repos/get-all-status-check-contexts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'];
                };
              };
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get all status check contexts';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts';
      };
      operationId: 'repos/add-status-check-contexts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding status checks to a branch protection rule';
                value: {
                  contexts: ['continuous-integration/travis-ci', 'continuous-integration/jenkins'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'];
                  };
                  properties: {
                    contexts: {
                      description: 'The name of the status checks';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['contexts'];
                  type: 'object';
                },
                {
                  description: 'The name of the status checks';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci', 'continuous-integration/jenkins'];
                };
              };
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add status check contexts';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'contexts';
        subcategory: 'branch-protection';
      };
    };
    put: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts';
      };
      operationId: 'repos/set-status-check-contexts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example updating status checks for a branch protection rule';
                value: {
                  contexts: ['continuous-integration/travis-ci'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'];
                  };
                  properties: {
                    contexts: {
                      description: 'The name of the status checks';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['contexts'];
                  type: 'object';
                },
                {
                  description: 'The name of the status checks';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'];
                };
              };
              schema: {
                items: {
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set status check contexts';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'contexts';
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions';
      };
      operationId: 'repos/delete-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#get-access-restrictions';
      };
      operationId: 'repos/get-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-restriction-policy';
                };
              };
              schema: {
                $ref: '#/components/schemas/branch-restriction-policy';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions';
      };
      operationId: 'repos/remove-app-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['my-app'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'];
                  };
                  properties: {
                    apps: {
                      description: 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['apps'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/integration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove app access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'apps';
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#list-apps-with-access-to-the-protected-branch';
      };
      operationId: 'repos/get-apps-with-access-to-protected-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/integration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get apps with access to the protected branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions';
      };
      operationId: 'repos/add-app-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['octoapp'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'];
                  };
                  properties: {
                    apps: {
                      description: 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['apps'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/integration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add app access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'apps';
        subcategory: 'branch-protection';
      };
    };
    put: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions';
      };
      operationId: 'repos/set-app-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['octoapp'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'];
                  };
                  properties: {
                    apps: {
                      description: 'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['apps'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/integration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set app access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'apps';
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions';
      };
      operationId: 'repos/remove-team-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing a team in a branch protection rule';
                value: {
                  teams: ['octocats'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['my-team'];
                  };
                  properties: {
                    teams: {
                      description: 'The slug values for teams';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['teams'];
                  type: 'object';
                },
                {
                  description: 'The slug values for teams';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove team access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'teams';
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#list-teams-with-access-to-the-protected-branch';
      };
      operationId: 'repos/get-teams-with-access-to-protected-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get teams with access to the protected branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions';
      };
      operationId: 'repos/add-team-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding a team in a branch protection rule';
                value: {
                  teams: ['justice-league'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['my-team'];
                  };
                  properties: {
                    teams: {
                      description: 'The slug values for teams';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['teams'];
                  type: 'object';
                },
                {
                  description: 'The slug values for teams';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add team access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'teams';
        subcategory: 'branch-protection';
      };
    };
    put: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions';
      };
      operationId: 'repos/set-team-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example replacing a team in a branch protection rule';
                value: {
                  teams: ['justice-league'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['justice-league'];
                  };
                  properties: {
                    teams: {
                      description: 'The slug values for teams';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['teams'];
                  type: 'object';
                },
                {
                  description: 'The slug values for teams';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set team access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'teams';
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users': {
    delete: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions';
      };
      operationId: 'repos/remove-user-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing a user in a branch protection rule';
                value: {
                  users: ['octocat'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'];
                  };
                  properties: {
                    users: {
                      description: 'The username for users';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['users'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove user access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'users';
        subcategory: 'branch-protection';
      };
    };
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#list-users-with-access-to-the-protected-branch';
      };
      operationId: 'repos/get-users-with-access-to-protected-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get users with access to the protected branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-protection';
      };
    };
    post: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions';
      };
      operationId: 'repos/add-user-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding a user in a branch protection rule';
                value: {
                  users: ['octocat'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'];
                  };
                  properties: {
                    users: {
                      description: 'The username for users';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['users'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add user access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'users';
        subcategory: 'branch-protection';
      };
    };
    put: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions';
      };
      operationId: 'repos/set-user-access-restrictions';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example replacing a user in a branch protection rule';
                value: {
                  users: ['octocat'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'];
                  };
                  properties: {
                    users: {
                      description: 'The username for users';
                      items: {
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['users'];
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set user access restrictions';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        requestBodyParameterName: 'users';
        subcategory: 'branch-protection';
      };
    };
  };
  '/repos/{owner}/{repo}/branches/{branch}/rename': {
    post: {
      description: 'Renames a branch in a repository.\n\n**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won\'t be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".\n\nThe permissions required to use this endpoint depends on whether you are renaming the default branch.\n\nTo rename a non-default branch:\n\n* Users must have push access.\n* GitHub Apps must have the `contents:write` repository permission.\n\nTo rename the default branch:\n\n* Users must have admin or owner permissions.\n* GitHub Apps must have the `administration:write` repository permission.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branches#rename-a-branch';
      };
      operationId: 'repos/rename-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/branch';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  new_name: 'my_renamed_branch';
                };
              };
            };
            schema: {
              properties: {
                new_name: {
                  description: 'The new name of the branch.';
                  type: 'string';
                };
              };
              required: ['new_name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-with-protection';
                };
              };
              schema: {
                $ref: '#/components/schemas/branch-with-protection';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Rename a branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/check-runs': {
    post: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nCreates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.\n\nIn a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#create-a-check-run';
      };
      operationId: 'checks/create';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-of-completed-conclusion': {
                summary: 'Example of a completed conclusion';
                value: {
                  actions: [
                    {
                      description: 'Allow us to fix these errors for you';
                      identifier: 'fix_errors';
                      label: 'Fix';
                    },
                  ];
                  completed_at: '2017-11-30T19:49:10Z';
                  conclusion: 'success';
                  head_sha: 'ce587453ced02b1526dfb4cb910479d431683101';
                  name: 'mighty_readme';
                  output: {
                    annotations: [
                      {
                        annotation_level: 'warning';
                        end_line: 2;
                        message: "Check your spelling for 'banaas'.";
                        path: 'README.md';
                        raw_details: "Do you mean 'bananas' or 'banana'?";
                        start_line: 2;
                        title: 'Spell Checker';
                      },
                      {
                        annotation_level: 'warning';
                        end_line: 4;
                        message: "Check your spelling for 'aples'";
                        path: 'README.md';
                        raw_details: "Do you mean 'apples' or 'Naples'";
                        start_line: 4;
                        title: 'Spell Checker';
                      },
                    ];
                    images: [
                      {
                        alt: 'Super bananas';
                        image_url: 'http://example.com/images/42';
                      },
                    ];
                    summary: 'There are 0 failures, 2 warnings, and 1 notices.';
                    text: 'You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.';
                    title: 'Mighty Readme report';
                  };
                  started_at: '2017-11-30T19:39:10Z';
                  status: 'completed';
                };
              };
              'example-of-in-progress-conclusion': {
                summary: 'Example of an in_progress conclusion';
                value: {
                  external_id: '42';
                  head_sha: 'ce587453ced02b1526dfb4cb910479d431683101';
                  name: 'mighty_readme';
                  output: {
                    summary: '';
                    text: '';
                    title: 'Mighty Readme report';
                  };
                  started_at: '2018-05-04T01:14:52Z';
                  status: 'in_progress';
                };
              };
            };
            schema: {
              oneOf: [
                {
                  additionalProperties: true;
                  properties: {
                    status: {
                      enum: ['completed'];
                    };
                  };
                  required: ['status', 'conclusion'];
                },
                {
                  additionalProperties: true;
                  properties: {
                    status: {
                      enum: ['queued', 'in_progress'];
                    };
                  };
                },
              ];
              properties: {
                actions: {
                  description: 'Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."';
                  items: {
                    properties: {
                      description: {
                        description: 'A short explanation of what this action would do. The maximum size is 40 characters.';
                        maxLength: 40;
                        type: 'string';
                      };
                      identifier: {
                        description: "A reference for the action on the integrator's system. The maximum size is 20 characters.";
                        maxLength: 20;
                        type: 'string';
                      };
                      label: {
                        description: 'The text to be displayed on a button in the web UI. The maximum size is 20 characters.';
                        maxLength: 20;
                        type: 'string';
                      };
                    };
                    required: ['label', 'description', 'identifier'];
                    type: 'object';
                  };
                  maxItems: 3;
                  type: 'array';
                };
                completed_at: {
                  description: 'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                conclusion: {
                  description: '**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.';
                  enum: [
                    'action_required',
                    'cancelled',
                    'failure',
                    'neutral',
                    'success',
                    'skipped',
                    'stale',
                    'timed_out',
                  ];
                  type: 'string';
                };
                details_url: {
                  description: "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.";
                  type: 'string';
                };
                external_id: {
                  description: "A reference for the run on the integrator's system.";
                  type: 'string';
                };
                head_sha: {
                  description: 'The SHA of the commit.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the check. For example, "code-coverage".';
                  type: 'string';
                };
                output: {
                  description: 'Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.';
                  properties: {
                    annotations: {
                      description: 'Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".';
                      items: {
                        properties: {
                          annotation_level: {
                            description: 'The level of the annotation.';
                            enum: ['notice', 'warning', 'failure'];
                            type: 'string';
                          };
                          end_column: {
                            description: 'The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.';
                            type: 'integer';
                          };
                          end_line: {
                            description: 'The end line of the annotation.';
                            type: 'integer';
                          };
                          message: {
                            description: 'A short description of the feedback for these lines of code. The maximum size is 64 KB.';
                            type: 'string';
                          };
                          path: {
                            description: 'The path of the file to add an annotation to. For example, `assets/css/main.css`.';
                            type: 'string';
                          };
                          raw_details: {
                            description: 'Details about this annotation. The maximum size is 64 KB.';
                            type: 'string';
                          };
                          start_column: {
                            description: 'The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.';
                            type: 'integer';
                          };
                          start_line: {
                            description: 'The start line of the annotation. Line numbers start at 1.';
                            type: 'integer';
                          };
                          title: {
                            description: 'The title that represents the annotation. The maximum size is 255 characters.';
                            type: 'string';
                          };
                        };
                        required: ['path', 'start_line', 'end_line', 'annotation_level', 'message'];
                        type: 'object';
                      };
                      maxItems: 50;
                      type: 'array';
                    };
                    images: {
                      description: 'Adds images to the output displayed in the GitHub pull request UI.';
                      items: {
                        properties: {
                          alt: {
                            description: 'The alternative text for the image.';
                            type: 'string';
                          };
                          caption: {
                            description: 'A short image description.';
                            type: 'string';
                          };
                          image_url: {
                            description: 'The full URL of the image.';
                            type: 'string';
                          };
                        };
                        required: ['alt', 'image_url'];
                        type: 'object';
                      };
                      type: 'array';
                    };
                    summary: {
                      description: 'The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.';
                      maxLength: 65535;
                      type: 'string';
                    };
                    text: {
                      description: 'The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.';
                      maxLength: 65535;
                      type: 'string';
                    };
                    title: {
                      description: 'The title of the check run.';
                      type: 'string';
                    };
                  };
                  required: ['title', 'summary'];
                  type: 'object';
                };
                started_at: {
                  description: 'The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                status: {
                  default: 'queued';
                  description: 'The current status.';
                  enum: ['queued', 'in_progress', 'completed'];
                  type: 'string';
                };
              };
              required: ['name', 'head_sha'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-of-completed-conclusion': {
                  $ref: '#/components/examples/check-run-example-of-completed-conclusion';
                };
                'example-of-in-progress-conclusion': {
                  $ref: '#/components/examples/check-run-example-of-in-progress-conclusion';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-run';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a check run';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/check-runs/{check_run_id}': {
    get: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nGets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#get-a-check-run';
      };
      operationId: 'checks/get';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-run-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-run';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a check run';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
    patch: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nUpdates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#update-a-check-run';
      };
      operationId: 'checks/update';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-run-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  completed_at: '2018-05-04T01:14:52Z';
                  conclusion: 'success';
                  name: 'mighty_readme';
                  output: {
                    annotations: [
                      {
                        annotation_level: 'warning';
                        end_line: 2;
                        message: "Check your spelling for 'banaas'.";
                        path: 'README.md';
                        raw_details: "Do you mean 'bananas' or 'banana'?";
                        start_line: 2;
                        title: 'Spell Checker';
                      },
                      {
                        annotation_level: 'warning';
                        end_line: 4;
                        message: "Check your spelling for 'aples'";
                        path: 'README.md';
                        raw_details: "Do you mean 'apples' or 'Naples'";
                        start_line: 4;
                        title: 'Spell Checker';
                      },
                    ];
                    images: [
                      {
                        alt: 'Super bananas';
                        image_url: 'http://example.com/images/42';
                      },
                    ];
                    summary: 'There are 0 failures, 2 warnings, and 1 notices.';
                    text: 'You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.';
                    title: 'Mighty Readme report';
                  };
                  started_at: '2018-05-04T01:14:52Z';
                  status: 'completed';
                };
              };
            };
            schema: {
              anyOf: [
                {
                  additionalProperties: true;
                  properties: {
                    status: {
                      enum: ['completed'];
                    };
                  };
                  required: ['conclusion'];
                },
                {
                  additionalProperties: true;
                  properties: {
                    status: {
                      enum: ['queued', 'in_progress'];
                    };
                  };
                },
              ];
              properties: {
                actions: {
                  description: 'Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."';
                  items: {
                    properties: {
                      description: {
                        description: 'A short explanation of what this action would do. The maximum size is 40 characters.';
                        maxLength: 40;
                        type: 'string';
                      };
                      identifier: {
                        description: "A reference for the action on the integrator's system. The maximum size is 20 characters.";
                        maxLength: 20;
                        type: 'string';
                      };
                      label: {
                        description: 'The text to be displayed on a button in the web UI. The maximum size is 20 characters.';
                        maxLength: 20;
                        type: 'string';
                      };
                    };
                    required: ['label', 'description', 'identifier'];
                    type: 'object';
                  };
                  maxItems: 3;
                  type: 'array';
                };
                completed_at: {
                  description: 'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                conclusion: {
                  description: '**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.';
                  enum: [
                    'action_required',
                    'cancelled',
                    'failure',
                    'neutral',
                    'success',
                    'skipped',
                    'stale',
                    'timed_out',
                  ];
                  type: 'string';
                };
                details_url: {
                  description: "The URL of the integrator's site that has the full details of the check.";
                  type: 'string';
                };
                external_id: {
                  description: "A reference for the run on the integrator's system.";
                  type: 'string';
                };
                name: {
                  description: 'The name of the check. For example, "code-coverage".';
                  type: 'string';
                };
                output: {
                  description: 'Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.';
                  properties: {
                    annotations: {
                      description: 'Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\'s pull request UI. Annotations are visible in GitHub\'s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".';
                      items: {
                        properties: {
                          annotation_level: {
                            description: 'The level of the annotation.';
                            enum: ['notice', 'warning', 'failure'];
                            type: 'string';
                          };
                          end_column: {
                            description: 'The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.';
                            type: 'integer';
                          };
                          end_line: {
                            description: 'The end line of the annotation.';
                            type: 'integer';
                          };
                          message: {
                            description: 'A short description of the feedback for these lines of code. The maximum size is 64 KB.';
                            type: 'string';
                          };
                          path: {
                            description: 'The path of the file to add an annotation to. For example, `assets/css/main.css`.';
                            type: 'string';
                          };
                          raw_details: {
                            description: 'Details about this annotation. The maximum size is 64 KB.';
                            type: 'string';
                          };
                          start_column: {
                            description: 'The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.';
                            type: 'integer';
                          };
                          start_line: {
                            description: 'The start line of the annotation. Line numbers start at 1.';
                            type: 'integer';
                          };
                          title: {
                            description: 'The title that represents the annotation. The maximum size is 255 characters.';
                            type: 'string';
                          };
                        };
                        required: ['path', 'start_line', 'end_line', 'annotation_level', 'message'];
                        type: 'object';
                      };
                      maxItems: 50;
                      type: 'array';
                    };
                    images: {
                      description: 'Adds images to the output displayed in the GitHub pull request UI.';
                      items: {
                        properties: {
                          alt: {
                            description: 'The alternative text for the image.';
                            type: 'string';
                          };
                          caption: {
                            description: 'A short image description.';
                            type: 'string';
                          };
                          image_url: {
                            description: 'The full URL of the image.';
                            type: 'string';
                          };
                        };
                        required: ['alt', 'image_url'];
                        type: 'object';
                      };
                      type: 'array';
                    };
                    summary: {
                      description: 'Can contain Markdown.';
                      maxLength: 65535;
                      type: 'string';
                    };
                    text: {
                      description: 'Can contain Markdown.';
                      maxLength: 65535;
                      type: 'string';
                    };
                    title: {
                      description: '**Required**.';
                      type: 'string';
                    };
                  };
                  required: ['summary'];
                  type: 'object';
                };
                started_at: {
                  description: 'This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                status: {
                  description: 'The current status.';
                  enum: ['queued', 'in_progress', 'completed'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-run';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a check run';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations': {
    get: {
      description: 'Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#list-check-run-annotations';
      };
      operationId: 'checks/list-annotations';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-run-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-annotation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/check-annotation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List check run annotations';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest': {
    post: {
      description: 'Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#rerequest-a-check-run';
      };
      operationId: 'checks/rerequest-run';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-run-id';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: "Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App";
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Validation error if the check run is not rerequestable';
        };
      };
      summary: 'Rerequest a check run';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/check-suites': {
    post: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nBy default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you\'ve disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#create-a-check-suite';
      };
      operationId: 'checks/create-suite';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  head_sha: 'd6fde92930d4715a2b49857d24b940956b26d2d3';
                };
              };
            };
            schema: {
              properties: {
                head_sha: {
                  description: 'The sha of the head commit.';
                  type: 'string';
                };
              };
              required: ['head_sha'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-suite';
              };
            };
          };
          description: 'Response when the suite already exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-suite';
              };
            };
          };
          description: 'Response when the suite was created';
        };
      };
      summary: 'Create a check suite';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'suites';
      };
    };
  };
  '/repos/{owner}/{repo}/check-suites/preferences': {
    patch: {
      description: 'Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites';
      };
      operationId: 'checks/set-suites-preferences';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  auto_trigger_checks: [
                    {
                      app_id: 4;
                      setting: false;
                    },
                  ];
                };
              };
            };
            schema: {
              properties: {
                auto_trigger_checks: {
                  description: 'Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.';
                  items: {
                    properties: {
                      app_id: {
                        description: 'The `id` of the GitHub App.';
                        type: 'integer';
                      };
                      setting: {
                        default: true;
                        description: 'Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.';
                        type: 'boolean';
                      };
                    };
                    required: ['app_id', 'setting'];
                    type: 'object';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite-preference';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-suite-preference';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update repository preferences for check suites';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'suites';
      };
    };
  };
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}': {
    get: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nGets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#get-a-check-suite';
      };
      operationId: 'checks/get-suite';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-suite-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite';
                };
              };
              schema: {
                $ref: '#/components/schemas/check-suite';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a check suite';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'suites';
      };
    };
  };
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs': {
    get: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite';
      };
      operationId: 'checks/list-for-suite';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-suite-id';
        },
        {
          $ref: '#/components/parameters/check-name';
        },
        {
          $ref: '#/components/parameters/status';
        },
        {
          description: 'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.';
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'latest';
            enum: ['latest', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run-paginated';
                };
              };
              schema: {
                properties: {
                  check_runs: {
                    items: {
                      $ref: '#/components/schemas/check-run';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'check_runs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List check runs in a check suite';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest': {
    post: {
      description: 'Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#rerequest-a-check-suite';
      };
      operationId: 'checks/rerequest-suite';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/check-suite-id';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Rerequest a check suite';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'suites';
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/alerts': {
    get: {
      description: 'Lists code scanning alerts.\n\nTo use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read\npermission to use this endpoint.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository';
      };
      operationId: 'code-scanning/list-alerts-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/tool-name';
        },
        {
          $ref: '#/components/parameters/tool-guid';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/git-ref';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          description: 'The property by which to sort the results.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated'];
            type: 'string';
          };
        },
        {
          description: 'If specified, only code scanning alerts with this state will be returned.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-state';
          };
        },
        {
          description: 'If specified, only code scanning alerts with this severity will be returned.';
          in: 'query';
          name: 'severity';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-severity';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-alert-items';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List code scanning alerts for a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}': {
    get: {
      description: 'Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert';
      };
      operationId: 'code-scanning/get-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-alert';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a code scanning alert';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: 'Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert';
      };
      operationId: 'code-scanning/update-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  dismissed_comment: "This alert is not actually correct, because there's a sanitizer included in the library.";
                  dismissed_reason: 'false positive';
                  state: 'dismissed';
                };
              };
            };
            schema: {
              properties: {
                dismissed_comment: {
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-comment';
                };
                dismissed_reason: {
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-reason';
                };
                state: {
                  $ref: '#/components/schemas/code-scanning-alert-set-state';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-dismissed';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-alert';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Update a code scanning alert';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances': {
    get: {
      description: 'Lists all instances of the specified code scanning alert.\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert';
      };
      operationId: 'code-scanning/list-alert-instances';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/git-ref';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-instances';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-alert-instance';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List instances of a code scanning alert';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/analyses': {
    get: {
      description: "Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository';
      };
      operationId: 'code-scanning/list-recent-analyses';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/tool-name';
        },
        {
          $ref: '#/components/parameters/tool-guid';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          description: 'The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.';
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-ref';
          };
        },
        {
          description: 'Filter analyses belonging to the same SARIF upload.';
          in: 'query';
          name: 'sarif_id';
          required: false;
          schema: {
            $ref: '#/components/schemas/code-scanning-analysis-sarif-id';
          };
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          description: 'The property by which to sort the results.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-analysis-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-analysis';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List code scanning analyses for a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}': {
    delete: {
      description: "Deletes a specified code scanning analysis from a repository. For\nprivate repositories, you must use an access token with the `repo` scope. For public repositories,\nyou must use an access token with `public_repo` scope.\nGitHub Apps must have the `security_events` write permission to use this endpoint.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n\"deletable\": true\n```\n\nAn analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `category`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set:\n`next_analysis_url` and `confirm_delete_url`.\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin a set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find an analysis that's identified as deletable.\nEach set of analyses always has one that's identified as deletable.\nHaving found the deletable analysis for one of the two sets,\ndelete this analysis and then continue deleting the next analysis in the set until they're all deleted.\nThen repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository';
      };
      operationId: 'code-scanning/delete-analysis';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.';
          in: 'path';
          name: 'analysis_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
        {
          description: "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`";
          in: 'query';
          name: 'confirm_delete';
          required: false;
          schema: {
            nullable: true;
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/code-scanning-analysis-deletion';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-analysis-deletion';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Delete a code scanning analysis from a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    get: {
      description: 'Gets a specified code scanning analysis for a repository.\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nIf you use the Accept header `application/sarif+json`,\nthe response contains the analysis data that was uploaded.\nThis is formatted as\n[SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository';
      };
      operationId: 'code-scanning/get-analysis';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.';
          in: 'path';
          name: 'analysis_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                response: {
                  $ref: '#/components/examples/code-scanning-analysis-default';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-analysis';
              };
            };
            'application/json+sarif': {
              examples: {
                response: {
                  $ref: '#/components/examples/code-scanning-analysis-sarif';
                };
              };
              schema: {
                additionalProperties: true;
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a code scanning analysis for a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/codeql/databases': {
    get: {
      description: 'Lists the CodeQL databases that are available in a repository.\n\nFor private repositories, you must use an access token with the `security_events` scope.\nFor public repositories, you can use tokens with the `security_events` or `public_repo` scope.\nGitHub Apps must have the `contents` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-codeql-databases';
      };
      operationId: 'code-scanning/list-codeql-databases';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-codeql-databases';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-codeql-database';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List CodeQL databases for a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}': {
    get: {
      description: 'Gets a CodeQL database for a language in a repository.\n\nBy default this endpoint returns JSON metadata about the CodeQL database. To\ndownload the CodeQL database binary content, set the `Accept` header of the request\nto [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure\nyour HTTP client is configured to follow redirects or use the `Location` header\nto make a second request to get the redirect URL.\n\nFor private repositories, you must use an access token with the `security_events` scope.\nFor public repositories, you can use tokens with the `security_events` or `public_repo` scope.\nGitHub Apps must have the `contents` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#get-codeql-database';
      };
      operationId: 'code-scanning/get-codeql-database';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The language of the CodeQL database.';
          in: 'path';
          name: 'language';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-codeql-database';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-codeql-database';
              };
            };
          };
          description: 'Response';
        };
        '302': {
          $ref: '#/components/responses/found';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a CodeQL database for a repository';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/sarifs': {
    post: {
      description: 'Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n<br>\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file';
      };
      operationId: 'code-scanning/upload-sarif';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  commit_sha: '4b6472266afd7b471e86085a6659e8c7f2b119da';
                  ref: 'refs/heads/master';
                  sarif: 'H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA';
                };
              };
            };
            schema: {
              properties: {
                checkout_uri: {
                  description: 'The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.';
                  example: 'file:///github/workspace/';
                  format: 'uri';
                  type: 'string';
                };
                commit_sha: {
                  $ref: '#/components/schemas/code-scanning-analysis-commit-sha';
                };
                ref: {
                  $ref: '#/components/schemas/code-scanning-ref';
                };
                sarif: {
                  $ref: '#/components/schemas/code-scanning-analysis-sarif-file';
                };
                started_at: {
                  description: 'The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                tool_name: {
                  description: 'The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.';
                  type: 'string';
                };
                validate: {
                  description: 'Whether the SARIF file will be validated according to the code scanning specifications.\nThis parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.';
                  type: 'boolean';
                };
              };
              required: ['commit_sha', 'ref', 'sarif'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-sarif-upload';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-sarifs-receipt';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          description: 'Bad Request if the sarif field is invalid';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '413': {
          description: 'Payload Too Large if the sarif field is too large';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Upload an analysis as SARIF data';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}': {
    get: {
      description: 'Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository';
      };
      operationId: 'code-scanning/get-sarif';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The SARIF ID obtained after uploading.';
          in: 'path';
          name: 'sarif_id';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-sarif-upload-status';
                };
              };
              schema: {
                $ref: '#/components/schemas/code-scanning-sarifs-status';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read';
        };
        '404': {
          description: 'Not Found if the sarif id does not match any upload';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get information about a SARIF upload';
      tags: ['code-scanning'];
      'x-github': {
        category: 'code-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/codeowners/errors': {
    get: {
      description: 'List any syntax errors that are detected in the CODEOWNERS\nfile.\n\nFor more information about the correct CODEOWNERS syntax,\nsee "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-codeowners-errors';
      };
      operationId: 'repos/codeowners-errors';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)";
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codeowners-errors';
                };
              };
              schema: {
                $ref: '#/components/schemas/codeowners-errors';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          description: 'Resource not found';
        };
      };
      summary: 'List CODEOWNERS errors';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces': {
    get: {
      description: 'Lists the codespaces associated to a specified repository and the authenticated user.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user';
      };
      operationId: 'codespaces/list-in-repository-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-for-repository';
                };
              };
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'codespaces'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List codespaces in a repository for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates a codespace owned by the authenticated user in the specified repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository';
      };
      operationId: 'codespaces/create-with-repo-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  machine: 'standardLinux32gb';
                  ref: 'main';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                client_ip: {
                  description: 'IP for location auto-detection when proxying a request';
                  type: 'string';
                };
                devcontainer_path: {
                  description: 'Path to devcontainer.json config to use for this codespace';
                  type: 'string';
                };
                display_name: {
                  description: 'Display name for this codespace';
                  type: 'string';
                };
                idle_timeout_minutes: {
                  description: 'Time in minutes before codespace stops from inactivity';
                  type: 'integer';
                };
                location: {
                  description: 'Location for this codespace. Assigned by IP if not provided';
                  type: 'string';
                };
                machine: {
                  description: 'Machine type to use for this codespace';
                  type: 'string';
                };
                multi_repo_permissions_opt_out: {
                  description: 'Whether to authorize requested permissions from devcontainer.json';
                  type: 'boolean';
                };
                ref: {
                  description: 'Git ref (typically a branch name) for this codespace';
                  type: 'string';
                };
                retention_period_minutes: {
                  description: 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).';
                  type: 'integer';
                };
                working_directory: {
                  description: 'Working directory for this codespace';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace was successfully created';
        };
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace creation partially failed but is being retried in the background';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Create a codespace in a repository';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/devcontainers': {
    get: {
      description: 'Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files\nspecify launchpoint configurations for codespaces created within the repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user';
      };
      operationId: 'codespaces/list-devcontainers-in-repository-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-devcontainers-for-repository';
                };
              };
              schema: {
                properties: {
                  devcontainers: {
                    items: {
                      properties: {
                        name: {
                          type: 'string';
                        };
                        path: {
                          type: 'string';
                        };
                      };
                      required: ['path'];
                      type: 'object';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'devcontainers'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List devcontainer configurations in a repository for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/machines': {
    get: {
      description: 'List the machine types available for a given repository based on its configuration.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository';
      };
      operationId: 'codespaces/repo-machines-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The location to check for available machines. Assigned by IP if not provided.';
          in: 'query';
          name: 'location';
          schema: {
            example: 'WestUs2';
            type: 'string';
          };
        },
        {
          description: 'IP for location auto-detection when proxying a request';
          in: 'query';
          name: 'client_ip';
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-machines-list';
                };
              };
              schema: {
                properties: {
                  machines: {
                    items: {
                      $ref: '#/components/schemas/codespace-machine';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'machines'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List available machine types for a repository';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'machines';
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/new': {
    get: {
      description: 'Gets the default attributes for codespaces created by the user with the repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace';
      };
      operationId: 'codespaces/pre-flight-with-repo-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.';
          in: 'query';
          name: 'ref';
          schema: {
            example: 'main';
            type: 'string';
          };
        },
        {
          description: 'An alternative IP for default location auto-detection, such as when proxying a request.';
          in: 'query';
          name: 'client_ip';
          schema: {
            example: '1.2.3.4';
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-devcontainers-for-repository';
                };
              };
              schema: {
                properties: {
                  billable_owner: {
                    $ref: '#/components/schemas/simple-user';
                  };
                  defaults: {
                    properties: {
                      devcontainer_path: {
                        nullable: true;
                        type: 'string';
                      };
                      location: {
                        type: 'string';
                      };
                    };
                    required: ['location', 'devcontainer_path'];
                    type: 'object';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response when a user is able to create codespaces from the repository.';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get default attributes for a codespace';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/secrets': {
    get: {
      description: 'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-repository-secrets';
      };
      operationId: 'codespaces/list-repo-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/repo-codespaces-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository secrets';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repository-secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key';
      };
      operationId: 'codespaces/get-repo-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespaces-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository public key';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'repository-secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret';
      };
      operationId: 'codespaces/delete-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repository-secrets';
      };
    };
    get: {
      description: 'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-repository-secret';
      };
      operationId: 'codespaces/get-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/repo-codespaces-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repository-secrets';
      };
    };
    put: {
      description: 'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`\nrepository permission to use this endpoint.\n\n#### Example of encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example of encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example of encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example of encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret';
      };
      operationId: 'codespaces/create-or-update-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update a repository secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repository-secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/collaborators': {
    get: {
      description: 'For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators';
      };
      operationId: 'repos/list-collaborators';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.';
          in: 'query';
          name: 'affiliation';
          required: false;
          schema: {
            default: 'all';
            enum: ['outside', 'direct', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.';
          in: 'query';
          name: 'permission';
          required: false;
          schema: {
            enum: ['pull', 'triage', 'push', 'maintain', 'admin'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/collaborator-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/collaborator';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repository collaborators';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/collaborators/{username}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator';
      };
      operationId: 'repos/remove-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove a repository collaborator';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    get: {
      description: 'For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator';
      };
      operationId: 'repos/check-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response if user is a collaborator';
        };
        '404': {
          description: 'Not Found if user is not a collaborator';
        };
      };
      summary: 'Check if a user is a repository collaborator';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    put: {
      description: 'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\nAdding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."\n\nFor more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).\n\n**Updating an existing collaborator\'s permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator';
      };
      operationId: 'repos/add-collaborator';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'new-invitation-is-created': {
                summary: 'Add a collaborator with triage permissions';
                value: {
                  permission: 'triage';
                };
              };
            };
            schema: {
              properties: {
                permission: {
                  default: 'push';
                  description: 'The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'new-invitation-is-created': {
                  $ref: '#/components/examples/repository-invitation-response-when-a-new-invitation-is-created';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository-invitation';
              };
            };
          };
          description: 'Response when a new invitation is created';
        };
        '204': {
          description: 'Response when:\n- an existing collaborator is added as a collaborator\n- an organization member is added as an individual collaborator\n- an existing team member (whose team is also a repository collaborator) is added as an individual collaborator';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add a repository collaborator';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/collaborators/{username}/permission': {
    get: {
      description: 'Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user';
      };
      operationId: 'repos/get-collaborator-permission-level';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-has-admin-permissions': {
                  $ref: '#/components/examples/repository-collaborator-permission-response-if-user-has-admin-permissions';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository-collaborator-permission';
              };
            };
          };
          description: 'if user has admin permissions';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get repository permissions for a user';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/comments': {
    get: {
      description: 'Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).\n\nComments are ordered by ascending ID.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository';
      };
      operationId: 'repos/list-commit-comments-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List commit comments for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/comments/{comment_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#delete-a-commit-comment';
      };
      operationId: 'repos/delete-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a commit comment';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#get-a-commit-comment';
      };
      operationId: 'repos/get-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit-comment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a commit comment';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#update-a-commit-comment';
      };
      operationId: 'repos/update-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Nice change';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit-comment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Update a commit comment';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/comments/{comment_id}/reactions': {
    get: {
      description: 'List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment';
      };
      operationId: 'reactions/list-for-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List reactions for a commit comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment';
      };
      operationId: 'reactions/create-for-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction created';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create reaction for a commit comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction';
      };
      operationId: 'reactions/delete-for-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a commit comment reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/commits': {
    get: {
      description: '**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/commits#list-commits';
      };
      operationId: 'repos/list-commits';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).';
          in: 'query';
          name: 'sha';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Only commits containing this file path will be returned.';
          in: 'query';
          name: 'path';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'GitHub login or email address by which to filter by commit author.';
          in: 'query';
          name: 'author';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          description: 'Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
          in: 'query';
          name: 'until';
          required: false;
          schema: {
            format: 'date-time';
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/commit';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List commits';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head': {
    get: {
      description: "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/commits#list-branches-for-head-commit';
      };
      operationId: 'repos/list-branches-for-head-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/commit-sha';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-short-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/branch-short';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List branches for HEAD commit';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{commit_sha}/comments': {
    get: {
      description: 'Use the `:commit_sha` to specify the commit that will have its comments listed.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#list-commit-comments';
      };
      operationId: 'repos/list-comments-for-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/commit-sha';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List commit comments';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    post: {
      description: 'Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/comments#create-a-commit-comment';
      };
      operationId: 'repos/create-commit-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/commit-sha';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Great stuff';
                  line: 1;
                  path: 'file1.txt';
                  position: 4;
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.';
                  type: 'string';
                };
                line: {
                  description: '**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.';
                  type: 'integer';
                };
                path: {
                  description: 'Relative path of the file to comment on.';
                  type: 'string';
                };
                position: {
                  description: 'Line index in the diff to comment on.';
                  type: 'integer';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit-comment';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/comments/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a commit comment';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{commit_sha}/pulls': {
    get: {
      description: 'Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit';
      };
      operationId: 'repos/list-pull-requests-associated-with-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/commit-sha';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List pull requests associated with a commit';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{ref}': {
    get: {
      description: "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nYou can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/commits#get-a-commit';
      };
      operationId: 'repos/get-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a commit';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{ref}/check-runs': {
    get: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference';
      };
      operationId: 'checks/list-for-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          $ref: '#/components/parameters/check-name';
        },
        {
          $ref: '#/components/parameters/status';
        },
        {
          description: 'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.';
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'latest';
            enum: ['latest', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          in: 'query';
          name: 'app_id';
          required: false;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run-paginated';
                };
              };
              schema: {
                properties: {
                  check_runs: {
                    items: {
                      $ref: '#/components/schemas/check-run';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'check_runs'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List check runs for a Git reference';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'runs';
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{ref}/check-suites': {
    get: {
      description: '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nLists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference';
      };
      operationId: 'checks/list-suites-for-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          description: 'Filters check suites by GitHub App `id`.';
          example: 1;
          in: 'query';
          name: 'app_id';
          required: false;
          schema: {
            type: 'integer';
          };
        },
        {
          $ref: '#/components/parameters/check-name';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite-paginated';
                };
              };
              schema: {
                properties: {
                  check_suites: {
                    items: {
                      $ref: '#/components/schemas/check-suite';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'check_suites'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List check suites for a Git reference';
      tags: ['checks'];
      'x-github': {
        category: 'checks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'suites';
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{ref}/status': {
    get: {
      description: 'Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference';
      };
      operationId: 'repos/get-combined-status-for-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-commit-status';
                };
              };
              schema: {
                $ref: '#/components/schemas/combined-commit-status';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get the combined status for a specific reference';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
  };
  '/repos/{owner}/{repo}/commits/{ref}/statuses': {
    get: {
      description: 'Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference';
      };
      operationId: 'repos/list-commit-statuses-for-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/status';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
      };
      summary: 'List commit statuses for a reference';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
  };
  '/repos/{owner}/{repo}/community/profile': {
    get: {
      description: 'Returns all community profile metrics for a repository. The repository cannot be a fork.\n\nThe returned metrics include an overall health score, the repository description, the presence of documentation, the\ndetected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\nREADME, and CONTRIBUTING files.\n\nThe `health_percentage` score is defined as a percentage of how many of\nthese four documents are present: README, CONTRIBUTING, LICENSE, and\nCODE_OF_CONDUCT. For example, if all four documents are present, then\nthe `health_percentage` is `100`. If only one is present, then the\n`health_percentage` is `25`.\n\n`content_reports_enabled` is only returned for organization-owned repositories.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/community#get-community-profile-metrics';
      };
      operationId: 'repos/get-community-profile-metrics';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/community-profile';
                };
              };
              schema: {
                $ref: '#/components/schemas/community-profile';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get community profile metrics';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'community';
      };
    };
  };
  '/repos/{owner}/{repo}/compare/{basehead}': {
    get: {
      description: 'Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository\'s network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."\n\nThis endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\nWhen calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.\n\n**Working with large comparisons**\n\nTo process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:\n\n- The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.\n- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.\n\nFor more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The `verification` object includes the following fields:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/commits#compare-two-commits';
      };
      operationId: 'repos/compare-commits';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          description: 'The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.';
          in: 'path';
          name: 'basehead';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comparison';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit-comparison';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Compare two commits';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/contents/{path}': {
    delete: {
      description: 'Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user\'s information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you\'ll receive a `422` status code.\n\n**Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#delete-a-file';
      };
      operationId: 'repos/delete-file';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'path parameter';
          in: 'path';
          name: 'path';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  committer: {
                    email: 'octocat@github.com';
                    name: 'Monalisa Octocat';
                  };
                  message: 'my commit message';
                  sha: '329688480d39049927147c162b9d2deaf885005f';
                };
              };
            };
            schema: {
              properties: {
                author: {
                  description: 'object containing information about the author.';
                  properties: {
                    email: {
                      description: 'The email of the author (or committer) of the commit';
                      type: 'string';
                    };
                    name: {
                      description: 'The name of the author (or committer) of the commit';
                      type: 'string';
                    };
                  };
                  type: 'object';
                };
                branch: {
                  description: 'The branch name. Default: the repository’s default branch (usually `master`)';
                  type: 'string';
                };
                committer: {
                  description: 'object containing information about the committer.';
                  properties: {
                    email: {
                      description: 'The email of the author (or committer) of the commit';
                      type: 'string';
                    };
                    name: {
                      description: 'The name of the author (or committer) of the commit';
                      type: 'string';
                    };
                  };
                  type: 'object';
                };
                message: {
                  description: 'The commit message.';
                  type: 'string';
                };
                sha: {
                  description: 'The blob SHA of the file being deleted.';
                  type: 'string';
                };
              };
              required: ['message', 'sha'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/file-commit';
                };
              };
              schema: {
                $ref: '#/components/schemas/file-commit';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Delete a file';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
    get: {
      description: 'Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of the repository\'s root directory. See the description below regarding what the API response includes for directories. \n\nFiles and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Notes**:\n*   To get a repository\'s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://docs.github.com/rest/reference/git#get-a-tree).\n *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.\n#### Size limits\nIf the requested file\'s size is:\n* 1 MB or smaller: All features of this endpoint are supported.\n* Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.\n * Greater than 100 MB: This endpoint is not supported.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value\n_should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as "submodule".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink\'s target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the\ngithub.com URLs (`html_url` and `_links["html"]`) will have null values.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-repository-content';
      };
      operationId: 'repos/get-content';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'path parameter';
          in: 'path';
          name: 'path';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)';
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-content-is-a-directory': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-directory';
                };
                'response-if-content-is-a-file': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-file';
                };
                'response-if-content-is-a-submodule': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-submodule';
                };
                'response-if-content-is-a-symlink': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-symlink';
                };
              };
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/content-directory';
                  },
                  {
                    $ref: '#/components/schemas/content-file';
                  },
                  {
                    $ref: '#/components/schemas/content-symlink';
                  },
                  {
                    $ref: '#/components/schemas/content-submodule';
                  },
                ];
              };
            };
            'application/vnd.github.object': {
              examples: {
                'response-if-content-is-a-directory': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-directory-object';
                };
                'response-if-content-is-a-file': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-file';
                };
              };
              schema: {
                $ref: '#/components/schemas/content-tree';
              };
            };
          };
          description: 'Response';
        };
        '302': {
          $ref: '#/components/responses/found';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get repository content';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
    put: {
      description: 'Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.\n\n**Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-or-update-file-contents';
      };
      operationId: 'repos/create-or-update-file-contents';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'path parameter';
          in: 'path';
          name: 'path';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-for-creating-a-file': {
                summary: 'Example for creating a file';
                value: {
                  committer: {
                    email: 'octocat@github.com';
                    name: 'Monalisa Octocat';
                  };
                  content: 'bXkgbmV3IGZpbGUgY29udGVudHM=';
                  message: 'my commit message';
                };
              };
              'example-for-updating-a-file': {
                summary: 'Example for updating a file';
                value: {
                  committer: {
                    email: 'octocat@github.com';
                    name: 'Monalisa Octocat';
                  };
                  content: 'bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz';
                  message: 'a new commit message';
                  sha: '95b966ae1c166bd92f8ae7d1c313e738c731dfc3';
                };
              };
            };
            schema: {
              properties: {
                author: {
                  description: 'The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.';
                  properties: {
                    date: {
                      example: '"2013-01-15T17:13:22+05:00"';
                      type: 'string';
                    };
                    email: {
                      description: "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.";
                      type: 'string';
                    };
                    name: {
                      description: "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.";
                      type: 'string';
                    };
                  };
                  required: ['name', 'email'];
                  type: 'object';
                };
                branch: {
                  description: 'The branch name. Default: the repository’s default branch (usually `master`)';
                  type: 'string';
                };
                committer: {
                  description: 'The person that committed the file. Default: the authenticated user.';
                  properties: {
                    date: {
                      example: '"2013-01-05T13:13:22+05:00"';
                      type: 'string';
                    };
                    email: {
                      description: "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.";
                      type: 'string';
                    };
                    name: {
                      description: "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.";
                      type: 'string';
                    };
                  };
                  required: ['name', 'email'];
                  type: 'object';
                };
                content: {
                  description: 'The new file content, using Base64 encoding.';
                  type: 'string';
                };
                message: {
                  description: 'The commit message.';
                  type: 'string';
                };
                sha: {
                  description: '**Required if you are updating a file**. The blob SHA of the file being replaced.';
                  type: 'string';
                };
              };
              required: ['message', 'content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-for-updating-a-file': {
                  $ref: '#/components/examples/file-commit-example-for-updating-a-file';
                };
              };
              schema: {
                $ref: '#/components/schemas/file-commit';
              };
            };
          };
          description: 'Response';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-for-creating-a-file': {
                  $ref: '#/components/examples/file-commit-example-for-creating-a-file';
                };
              };
              schema: {
                $ref: '#/components/schemas/file-commit';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create or update file contents';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
  };
  '/repos/{owner}/{repo}/contributors': {
    get: {
      description: 'Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repository-contributors';
      };
      operationId: 'repos/list-contributors';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'Set to `1` or `true` to include anonymous contributors in results.';
          in: 'query';
          name: 'anon';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-repository-contains-content': {
                  $ref: '#/components/examples/contributor-items-response-if-repository-contains-content';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/contributor';
                };
                type: 'array';
              };
            };
          };
          description: 'if repository contains content';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '204': {
          description: 'Response if repository is empty';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repository contributors';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/dependabot/alerts': {
    get: {
      description: 'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#list-dependabot-alerts-for-a-repository';
      };
      operationId: 'dependabot/list-alerts-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-manifests';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          deprecated: true;
          description: '**Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.';
          in: 'query';
          name: 'page';
          schema: {
            default: 1;
            type: 'integer';
          };
        },
        {
          deprecated: true;
          description: 'The number of results per page (max 100).';
          in: 'query';
          name: 'per_page';
          schema: {
            default: 30;
            type: 'integer';
          };
        },
        {
          $ref: '#/components/parameters/pagination-before';
        },
        {
          $ref: '#/components/parameters/pagination-after';
        },
        {
          $ref: '#/components/parameters/pagination-first';
        },
        {
          $ref: '#/components/parameters/pagination-last';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-repository';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'List Dependabot alerts for a repository';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'alerts';
      };
    };
  };
  '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}': {
    get: {
      description: 'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-dependabot-alert';
      };
      operationId: 'dependabot/get-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alert-open';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependabot-alert';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a Dependabot alert';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'alerts';
      };
    };
    patch: {
      description: 'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** write permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#update-a-dependabot-alert';
      };
      operationId: 'dependabot/update-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/dependabot-alert-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  dismissed_comment: 'This alert is accurate but we use a sanitizer.';
                  dismissed_reason: 'tolerable_risk';
                  state: 'dismissed';
                };
              };
            };
            schema: {
              additionalProperties: false;
              properties: {
                dismissed_comment: {
                  description: 'An optional comment associated with dismissing the alert.';
                  maxLength: 280;
                  type: 'string';
                };
                dismissed_reason: {
                  description: '**Required when `state` is `dismissed`.** A reason for dismissing the alert.';
                  enum: ['fix_started', 'inaccurate', 'no_bandwidth', 'not_used', 'tolerable_risk'];
                  type: 'string';
                };
                state: {
                  description: 'The state of the Dependabot alert.\nA `dismissed_reason` must be provided when setting the state to `dismissed`.';
                  enum: ['dismissed', 'open'];
                  type: 'string';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alert-dismissed';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependabot-alert';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update a Dependabot alert';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'alerts';
      };
    };
  };
  '/repos/{owner}/{repo}/dependabot/secrets': {
    get: {
      description: 'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#list-repository-secrets';
      };
      operationId: 'dependabot/list-repo-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/dependabot-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository secrets';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/dependabot/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key';
      };
      operationId: 'dependabot/get-repo-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependabot-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository public key';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#delete-a-repository-secret';
      };
      operationId: 'dependabot/delete-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: 'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-repository-secret';
      };
      operationId: 'dependabot/get-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependabot-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a repository secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository\npermission to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependabot#create-or-update-a-repository-secret';
      };
      operationId: 'dependabot/create-or-update-repo-secret';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update a repository secret';
      tags: ['dependabot'];
      'x-github': {
        category: 'dependabot';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}': {
    get: {
      description: 'Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits';
      };
      operationId: 'dependency-graph/diff-range';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.';
          in: 'path';
          name: 'basehead';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/manifest-path';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/diff-range-response';
                };
              };
              schema: {
                $ref: '#/components/schemas/dependency-graph-diff';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a diff of the dependencies between commits';
      tags: ['dependency-graph'];
      'x-github': {
        category: 'dependency-graph';
        githubCloudOnly: false;
        subcategory: 'dependency-review';
      };
    };
  };
  '/repos/{owner}/{repo}/dependency-graph/snapshots': {
    post: {
      description: "Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/dependency-graph#create-a-snapshot-of-dependencies-for-a-repository';
      };
      operationId: 'dependency-graph/create-repository-snapshot';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-of-a-dependency-submission': {
                $ref: '#/components/examples/dependency-graph-create-snapshot-request';
              };
            };
            schema: {
              $ref: '#/components/schemas/snapshot';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-of-a-dependency-submission': {
                  $ref: '#/components/examples/dependency-graph-create-snapshot-success';
                };
              };
              schema: {
                properties: {
                  created_at: {
                    description: 'The time at which the snapshot was created.';
                    type: 'string';
                  };
                  id: {
                    description: 'ID of the created snapshot.';
                    type: 'integer';
                  };
                  message: {
                    description: 'A message providing further details about the result, such as why the dependencies were not updated.';
                    type: 'string';
                  };
                  result: {
                    description: 'Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository\'s dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository\'s dependencies were not updated. "INVALID" indicates that the snapshot was malformed.';
                    type: 'string';
                  };
                };
                required: ['id', 'created_at', 'result', 'message'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a snapshot of dependencies for a repository';
      tags: ['dependency-graph'];
      'x-github': {
        category: 'dependency-graph';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'dependency-submission';
      };
    };
  };
  '/repos/{owner}/{repo}/deployments': {
    get: {
      description: 'Simple filtering of deployments is available via query parameters:';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/deployments#list-deployments';
      };
      operationId: 'repos/list-deployments';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The SHA recorded at creation time.';
          in: 'query';
          name: 'sha';
          required: false;
          schema: {
            default: 'none';
            type: 'string';
          };
        },
        {
          description: 'The name of the ref. This can be a branch, tag, or SHA.';
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            default: 'none';
            type: 'string';
          };
        },
        {
          description: 'The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).';
          in: 'query';
          name: 'task';
          required: false;
          schema: {
            default: 'none';
            type: 'string';
          };
        },
        {
          description: 'The name of the environment that was deployed to (e.g., `staging` or `production`).';
          in: 'query';
          name: 'environment';
          required: false;
          schema: {
            default: 'none';
            nullable: true;
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List deployments';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    post: {
      description: "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n\n#### Merged branch response\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\n#### Merge conflict response\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\n#### Failed commit status checks\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/deployments#create-a-deployment';
      };
      operationId: 'repos/create-deployment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'advanced-example': {
                summary: 'Advanced example';
                value: {
                  auto_merge: false;
                  description: 'Deploy request from hubot';
                  payload: '{ "deploy": "migrate" }';
                  ref: 'topic-branch';
                  required_contexts: ['ci/janky', 'security/brakeman'];
                };
              };
              'simple-example': {
                summary: 'Simple example';
                value: {
                  description: 'Deploy request from hubot';
                  payload: '{ "deploy": "migrate" }';
                  ref: 'topic-branch';
                };
              };
            };
            schema: {
              properties: {
                auto_merge: {
                  default: true;
                  description: "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.";
                  type: 'boolean';
                };
                description: {
                  default: '';
                  description: 'Short description of the deployment.';
                  nullable: true;
                  type: 'string';
                };
                environment: {
                  default: 'production';
                  description: 'Name for the target deployment environment (e.g., `production`, `staging`, `qa`).';
                  type: 'string';
                };
                payload: {
                  oneOf: [
                    {
                      additionalProperties: true;
                      type: 'object';
                    },
                    {
                      default: '';
                      description: 'JSON payload with extra information about the deployment.';
                      type: 'string';
                    },
                  ];
                };
                production_environment: {
                  description: 'Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.';
                  type: 'boolean';
                };
                ref: {
                  description: 'The ref to deploy. This can be a branch, tag, or SHA.';
                  type: 'string';
                };
                required_contexts: {
                  description: 'The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                task: {
                  default: 'deploy';
                  description: 'Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).';
                  type: 'string';
                };
                transient_environment: {
                  default: false;
                  description: 'Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`';
                  type: 'boolean';
                };
              };
              required: ['ref'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'simple-example': {
                  $ref: '#/components/examples/deployment-simple-example';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment';
              };
            };
          };
          description: 'Response';
        };
        '202': {
          content: {
            'application/json': {
              examples: {
                'merged-branch-response': {
                  value: {
                    message: 'Auto-merged master into topic-branch on deployment.';
                  };
                };
              };
              schema: {
                properties: {
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Merged branch response';
        };
        '409': {
          description: "Conflict when there is a merge conflict or the commit's status checks failed";
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a deployment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/deployments/{deployment_id}': {
    delete: {
      description: 'If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/deployments#delete-a-deployment';
      };
      operationId: 'repos/delete-deployment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/deployment-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Delete a deployment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/deployments#get-a-deployment';
      };
      operationId: 'repos/get-deployment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/deployment-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a deployment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses': {
    get: {
      description: 'Users with pull access can view deployment statuses for a deployment:';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/statuses#list-deployment-statuses';
      };
      operationId: 'repos/list-deployment-statuses';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/deployment-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment-status';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List deployment statuses';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
    post: {
      description: 'Users with `push` access can create deployment statuses for a given deployment.\n\nGitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/statuses#create-a-deployment-status';
      };
      operationId: 'repos/create-deployment-status';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/deployment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Deployment finished successfully.';
                  environment: 'production';
                  log_url: 'https://example.com/deployment/42/output';
                  state: 'success';
                };
              };
            };
            schema: {
              properties: {
                auto_inactive: {
                  description: "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`";
                  type: 'boolean';
                };
                description: {
                  default: '';
                  description: 'A short description of the status. The maximum description length is 140 characters.';
                  type: 'string';
                };
                environment: {
                  description: 'Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.';
                  enum: ['production', 'staging', 'qa'];
                  type: 'string';
                };
                environment_url: {
                  default: '';
                  description: 'Sets the URL for accessing your environment. Default: `""`';
                  type: 'string';
                };
                log_url: {
                  default: '';
                  description: 'The full URL of the deployment\'s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`';
                  type: 'string';
                };
                state: {
                  description: 'The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.';
                  enum: ['error', 'failure', 'inactive', 'in_progress', 'queued', 'pending', 'success'];
                  type: 'string';
                };
                target_url: {
                  default: '';
                  description: "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.";
                  type: 'string';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment-status';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a deployment status';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
  };
  '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}': {
    get: {
      description: 'Users with pull access can view a deployment status for a deployment:';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/statuses#get-a-deployment-status';
      };
      operationId: 'repos/get-deployment-status';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/deployment-id';
        },
        {
          in: 'path';
          name: 'status_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment-status';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a deployment status';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
  };
  '/repos/{owner}/{repo}/dispatches': {
    post: {
      description: 'You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n\nThis endpoint requires write access to the repository by providing either:\n\n  - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.\n  - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event';
      };
      operationId: 'repos/create-dispatch-event';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  client_payload: {
                    integration: true;
                    unit: false;
                  };
                  event_type: 'on-demand-test';
                };
              };
            };
            schema: {
              properties: {
                client_payload: {
                  additionalProperties: true;
                  description: 'JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.';
                  maxProperties: 10;
                  type: 'object';
                };
                event_type: {
                  description: 'A custom webhook event name. Must be 100 characters or fewer.';
                  maxLength: 100;
                  minLength: 1;
                  type: 'string';
                };
              };
              required: ['event_type'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a repository dispatch event';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/environments': {
    get: {
      description: 'Lists the environments for a repository.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/environments#list-environments';
      };
      operationId: 'repos/get-all-environments';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environments';
                };
              };
              schema: {
                properties: {
                  environments: {
                    items: {
                      $ref: '#/components/schemas/environment';
                    };
                    type: 'array';
                  };
                  total_count: {
                    description: 'The number of environments in this repository';
                    example: 5;
                    type: 'integer';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List environments';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'environments';
      };
    };
  };
  '/repos/{owner}/{repo}/environments/{environment_name}': {
    delete: {
      description: 'You must authenticate using an access token with the repo scope to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/environments#delete-an-environment';
      };
      operationId: 'repos/delete-an-environment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      responses: {
        '204': {
          description: 'Default response';
        };
      };
      summary: 'Delete an environment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'environments';
      };
    };
    get: {
      description: '**Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."\n\nAnyone with read access to the repository can use this endpoint. If the\nrepository is private, you must use an access token with the `repo` scope. GitHub\nApps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/environments#get-an-environment';
      };
      operationId: 'repos/get-environment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment';
                };
              };
              schema: {
                $ref: '#/components/schemas/environment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an environment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'environments';
      };
    };
    put: {
      description: 'Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."\n\n**Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."\n\n**Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/environments#create-or-update-an-environment';
      };
      operationId: 'repos/create-or-update-environment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  deployment_branch_policy: {
                    custom_branch_policies: true;
                    protected_branches: false;
                  };
                  reviewers: [
                    {
                      id: 1;
                      type: 'User';
                    },
                    {
                      id: 1;
                      type: 'Team';
                    },
                  ];
                  wait_timer: 30;
                };
              };
            };
            schema: {
              additionalProperties: false;
              nullable: true;
              properties: {
                deployment_branch_policy: {
                  $ref: '#/components/schemas/deployment-branch-policy-settings';
                };
                reviewers: {
                  description: 'The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.';
                  items: {
                    properties: {
                      id: {
                        description: 'The id of the user or team who can review the deployment';
                        example: 4532992;
                        type: 'integer';
                      };
                      type: {
                        $ref: '#/components/schemas/deployment-reviewer-type';
                      };
                    };
                    type: 'object';
                  };
                  nullable: true;
                  type: 'array';
                };
                wait_timer: {
                  $ref: '#/components/schemas/wait-timer';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment';
                };
              };
              schema: {
                $ref: '#/components/schemas/environment';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value';
        };
      };
      summary: 'Create or update an environment';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'environments';
      };
    };
  };
  '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies': {
    get: {
      description: 'Lists the deployment branch policies for an environment.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies';
      };
      operationId: 'repos/list-deployment-branch-policies';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policies-list';
                };
              };
              schema: {
                properties: {
                  branch_policies: {
                    items: {
                      $ref: '#/components/schemas/deployment-branch-policy';
                    };
                    type: 'array';
                  };
                  total_count: {
                    description: 'The number of deployment branch policies for the environment.';
                    example: 2;
                    type: 'integer';
                  };
                };
                required: ['total_count', 'branch_policies'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List deployment branch policies';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-policies';
      };
    };
    post: {
      description: 'Creates a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/branch-policies#create-deployment-branch-policy';
      };
      operationId: 'repos/create-deployment-branch-policy';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-single-branch': {
                summary: 'Example of a single branch name pattern';
                value: {
                  name: 'main';
                };
              };
              'example-wildcard': {
                summary: 'Example of a wildcard name pattern';
                value: {
                  name: 'release/*';
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/deployment-branch-policy-name-pattern';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-single-branch': {
                  $ref: '#/components/examples/deployment-branch-policy-single-branch';
                };
                'example-wildcard': {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy';
              };
            };
          };
          description: 'Response';
        };
        '303': {
          description: 'Response if the same branch name pattern already exists';
        };
        '404': {
          description: 'Not Found or `deployment_branch_policy.custom_branch_policies` property for the environment is set to false';
        };
      };
      summary: 'Create a deployment branch policy';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-policies';
      };
    };
  };
  '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}': {
    delete: {
      description: 'Deletes a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/branch-policies#delete-deployment-branch-policy';
      };
      operationId: 'repos/delete-deployment-branch-policy';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/branch-policy-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a deployment branch policy';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-policies';
      };
    };
    get: {
      description: 'Gets a deployment branch policy for an environment.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/branch-policies#get-deployment-branch-policy';
      };
      operationId: 'repos/get-deployment-branch-policy';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/branch-policy-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a deployment branch policy';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-policies';
      };
    };
    put: {
      description: 'Updates a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deployments/branch-policies#update-deployment-branch-policy';
      };
      operationId: 'repos/update-deployment-branch-policy';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/branch-policy-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'release/*';
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/deployment-branch-policy-name-pattern';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard';
                };
              };
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a deployment branch policy';
      tags: ['repos'];
      'x-github': {
        category: 'deployments';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'branch-policies';
      };
    };
  };
  '/repos/{owner}/{repo}/events': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repository-events';
      };
      operationId: 'activity/list-repo-events';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                '200-response': {
                  $ref: '#/components/examples/repo-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List repository events';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/repos/{owner}/{repo}/forks': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-forks';
      };
      operationId: 'repos/list-forks';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The sort order. `stargazers` will sort by star count.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'newest';
            enum: ['newest', 'oldest', 'stargazers', 'watchers'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
      };
      summary: 'List forks';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'forks';
      };
    };
    post: {
      description: 'Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-a-fork';
      };
      operationId: 'repos/create-fork';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  default_branch_only: true;
                  name: 'Hello-World';
                  organization: 'octocat';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                default_branch_only: {
                  description: 'When forking from an existing repository, fork with only the default branch.';
                  type: 'boolean';
                };
                name: {
                  description: 'When forking from an existing repository, a new name for the fork.';
                  type: 'string';
                };
                organization: {
                  description: 'Optional parameter to specify the organization name if forking into an organization.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/full-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/full-repository';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a fork';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'forks';
      };
    };
  };
  '/repos/{owner}/{repo}/git/blobs': {
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#create-a-blob';
      };
      operationId: 'git/create-blob';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'Content of the blob';
                  encoding: 'utf-8';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: "The new blob's content.";
                  type: 'string';
                };
                encoding: {
                  default: 'utf-8';
                  description: 'The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.';
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/short-blob';
                };
              };
              schema: {
                $ref: '#/components/schemas/short-blob';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a blob';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blobs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/blobs/{file_sha}': {
    get: {
      description: 'The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#get-a-blob';
      };
      operationId: 'git/get-blob';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'file_sha';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/blob';
                };
              };
              schema: {
                $ref: '#/components/schemas/blob';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a blob';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'blobs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/commits': {
    post: {
      description: 'Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#create-a-commit';
      };
      operationId: 'git/create-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  author: {
                    date: '2008-07-09T16:13:30+12:00';
                    email: 'octocat@github.com';
                    name: 'Mona Octocat';
                  };
                  message: 'my commit message';
                  parents: ['7d1b31e74ee336d15cbd21741bc88a537ed063a0'];
                  signature: '-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n';
                  tree: '827efc6d56897b048c772eb4087f854f46256132';
                };
              };
            };
            schema: {
              properties: {
                author: {
                  description: 'Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.';
                  properties: {
                    date: {
                      description: 'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                      format: 'date-time';
                      type: 'string';
                    };
                    email: {
                      description: 'The email of the author (or committer) of the commit';
                      type: 'string';
                    };
                    name: {
                      description: 'The name of the author (or committer) of the commit';
                      type: 'string';
                    };
                  };
                  required: ['name', 'email'];
                  type: 'object';
                };
                committer: {
                  description: 'Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.';
                  properties: {
                    date: {
                      description: 'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                      format: 'date-time';
                      type: 'string';
                    };
                    email: {
                      description: 'The email of the author (or committer) of the commit';
                      type: 'string';
                    };
                    name: {
                      description: 'The name of the author (or committer) of the commit';
                      type: 'string';
                    };
                  };
                  type: 'object';
                };
                message: {
                  description: 'The commit message';
                  type: 'string';
                };
                parents: {
                  description: 'The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                signature: {
                  description: 'The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.';
                  type: 'string';
                };
                tree: {
                  description: 'The SHA of the tree object this commit points to';
                  type: 'string';
                };
              };
              required: ['message', 'tree'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-commit';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-commit';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a commit';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'commits';
      };
    };
  };
  '/repos/{owner}/{repo}/git/commits/{commit_sha}': {
    get: {
      description: 'Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#get-a-commit';
      };
      operationId: 'git/get-commit';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/commit-sha';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-commit-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-commit';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a commit';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'commits';
      };
    };
  };
  '/repos/{owner}/{repo}/git/matching-refs/{ref}': {
    get: {
      description: 'Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn\'t exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#list-matching-references';
      };
      operationId: 'git/list-matching-refs';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/git-ref';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List matching references';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'refs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/ref/{ref}': {
    get: {
      description: 'Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#get-a-reference';
      };
      operationId: 'git/get-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-ref';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a reference';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'refs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/refs': {
    post: {
      description: 'Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#create-a-reference';
      };
      operationId: 'git/create-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ref: 'refs/heads/featureA';
                  sha: 'aa218f56b14c9653891f9e74264a383fa43fefbd';
                };
              };
            };
            schema: {
              properties: {
                key: {
                  example: '"refs/heads/newbranch"';
                  type: 'string';
                };
                ref: {
                  description: "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.";
                  type: 'string';
                };
                sha: {
                  description: 'The SHA1 value for this reference.';
                  type: 'string';
                };
              };
              required: ['ref', 'sha'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-ref';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a reference';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'refs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/refs/{ref}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#delete-a-reference';
      };
      operationId: 'git/delete-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'ref parameter';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete a reference';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'refs';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#update-a-reference';
      };
      operationId: 'git/update-ref';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: "The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected.";
          example: 'refs/head/master';
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  force: true;
                  sha: 'aa218f56b14c9653891f9e74264a383fa43fefbd';
                };
              };
            };
            schema: {
              properties: {
                force: {
                  default: false;
                  description: "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.";
                  type: 'boolean';
                };
                sha: {
                  description: 'The SHA1 value to set this reference to';
                  type: 'string';
                };
              };
              required: ['sha'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-ref';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a reference';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'refs';
      };
    };
  };
  '/repos/{owner}/{repo}/git/tags': {
    post: {
      description: 'Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#create-a-tag-object';
      };
      operationId: 'git/create-tag';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  message: 'initial version';
                  object: 'c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c';
                  tag: 'v0.0.1';
                  tagger: {
                    date: '2011-06-17T14:53:35-07:00';
                    email: 'octocat@github.com';
                    name: 'Monalisa Octocat';
                  };
                  type: 'commit';
                };
              };
            };
            schema: {
              properties: {
                message: {
                  description: 'The tag message.';
                  type: 'string';
                };
                object: {
                  description: 'The SHA of the git object this is tagging.';
                  type: 'string';
                };
                tag: {
                  description: 'The tag\'s name. This is typically a version (e.g., "v0.0.1").';
                  type: 'string';
                };
                tagger: {
                  description: 'An object with information about the individual creating the tag.';
                  properties: {
                    date: {
                      description: 'When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                      format: 'date-time';
                      type: 'string';
                    };
                    email: {
                      description: 'The email of the author of the tag';
                      type: 'string';
                    };
                    name: {
                      description: 'The name of the author of the tag';
                      type: 'string';
                    };
                  };
                  required: ['name', 'email'];
                  type: 'object';
                };
                type: {
                  description: "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.";
                  enum: ['commit', 'tree', 'blob'];
                  type: 'string';
                };
              };
              required: ['tag', 'message', 'object', 'type'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tag';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-tag';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a tag object';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'tags';
      };
    };
  };
  '/repos/{owner}/{repo}/git/tags/{tag_sha}': {
    get: {
      description: '**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#get-a-tag';
      };
      operationId: 'git/get-tag';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'tag_sha';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tag';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-tag';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a tag';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'tags';
      };
    };
  };
  '/repos/{owner}/{repo}/git/trees': {
    post: {
      description: 'The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."\n\nReturns an error if you try to delete a file that does not exist.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#create-a-tree';
      };
      operationId: 'git/create-tree';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base_tree: '9fb037999f264ba9a7fc6274d15fa3ae2ab98312';
                  tree: [
                    {
                      mode: '100644';
                      path: 'file.rb';
                      sha: '44b4fc6d56897b048c772eb4087f854f46256132';
                      type: 'blob';
                    },
                  ];
                };
              };
            };
            schema: {
              properties: {
                base_tree: {
                  description: "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n";
                  type: 'string';
                };
                tree: {
                  description: 'Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.';
                  items: {
                    properties: {
                      content: {
                        description: 'The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.';
                        type: 'string';
                      };
                      mode: {
                        description: 'The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.';
                        enum: ['100644', '100755', '040000', '160000', '120000'];
                        type: 'string';
                      };
                      path: {
                        description: 'The file referenced in the tree.';
                        type: 'string';
                      };
                      sha: {
                        description: 'The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.';
                        nullable: true;
                        type: 'string';
                      };
                      type: {
                        description: 'Either `blob`, `tree`, or `commit`.';
                        enum: ['blob', 'tree', 'commit'];
                        type: 'string';
                      };
                    };
                    type: 'object';
                  };
                  type: 'array';
                };
              };
              required: ['tree'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tree';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-tree';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a tree';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'trees';
      };
    };
  };
  '/repos/{owner}/{repo}/git/trees/{tree_sha}': {
    get: {
      description: 'Returns a single tree using the SHA1 value for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n\n\n**Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/git#get-a-tree';
      };
      operationId: 'git/get-tree';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'tree_sha';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          description: 'Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.';
          in: 'query';
          name: 'recursive';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/git-tree-default-response';
                };
                'response-recursively-retrieving-a-tree': {
                  $ref: '#/components/examples/git-tree-response-recursively-retrieving-a-tree';
                };
              };
              schema: {
                $ref: '#/components/schemas/git-tree';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a tree';
      tags: ['git'];
      'x-github': {
        category: 'git';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'trees';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks': {
    get: {
      description: 'Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#list-repository-webhooks';
      };
      operationId: 'repos/list-webhooks';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/hook';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repository webhooks';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
    post: {
      description: 'Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#create-a-repository-webhook';
      };
      operationId: 'repos/create-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true;
                  config: {
                    content_type: 'json';
                    insecure_ssl: '0';
                    url: 'https://example.com/webhook';
                  };
                  events: ['push', 'pull_request'];
                  name: 'web';
                };
              };
            };
            schema: {
              additionalProperties: false;
              nullable: true;
              properties: {
                active: {
                  default: true;
                  description: 'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.';
                  type: 'boolean';
                };
                config: {
                  description: 'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).';
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type';
                    };
                    digest: {
                      example: '"sha256"';
                      type: 'string';
                    };
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl';
                    };
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret';
                    };
                    token: {
                      example: '"abc"';
                      type: 'string';
                    };
                    url: {
                      $ref: '#/components/schemas/webhook-config-url';
                    };
                  };
                  type: 'object';
                };
                events: {
                  default: ['push'];
                  description: 'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                name: {
                  description: 'Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/hooks/12345678';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook';
      };
      operationId: 'repos/delete-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
    get: {
      description: 'Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#get-a-repository-webhook';
      };
      operationId: 'repos/get-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
    patch: {
      description: 'Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#update-a-repository-webhook';
      };
      operationId: 'repos/update-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true;
                  add_events: ['pull_request'];
                };
              };
            };
            schema: {
              properties: {
                active: {
                  default: true;
                  description: 'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.';
                  type: 'boolean';
                };
                add_events: {
                  description: 'Determines a list of events to be added to the list of events that the Hook triggers for.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                config: {
                  description: 'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).';
                  properties: {
                    address: {
                      example: '"bar@example.com"';
                      type: 'string';
                    };
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type';
                    };
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl';
                    };
                    room: {
                      example: '"The Serious Room"';
                      type: 'string';
                    };
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret';
                    };
                    url: {
                      $ref: '#/components/schemas/webhook-config-url';
                    };
                  };
                  required: ['url'];
                  type: 'object';
                };
                events: {
                  default: ['push'];
                  description: 'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                remove_events: {
                  description: 'Determines a list of events to be removed from the list of events that the Hook triggers for.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/config': {
    get: {
      description: 'Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."\n\nAccess tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository';
      };
      operationId: 'repos/get-webhook-config-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a webhook configuration for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repo-config';
      };
    };
    patch: {
      description: 'Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."\n\nAccess tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository';
      };
      operationId: 'repos/update-webhook-config-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of updating content type and URL';
                value: {
                  content_type: 'json';
                  url: 'https://example.com/webhook';
                };
              };
            };
            schema: {
              additionalProperties: false;
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type';
                };
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl';
                };
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret';
                };
                url: {
                  $ref: '#/components/schemas/webhook-config-url';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config';
                };
              };
              schema: {
                $ref: '#/components/schemas/webhook-config';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a webhook configuration for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repo-config';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries': {
    get: {
      description: 'Returns a list of webhook deliveries for a webhook configured in a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#list-deliveries-for-a-repository-webhook';
      };
      operationId: 'repos/list-webhook-deliveries';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/cursor';
        },
        {
          in: 'query';
          name: 'redelivery';
          required: false;
          schema: {
            type: 'boolean';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List deliveries for a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repo-deliveries';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}': {
    get: {
      description: 'Returns a delivery for a webhook configured in a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#get-a-delivery-for-a-repository-webhook';
      };
      operationId: 'repos/get-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery';
                };
              };
              schema: {
                $ref: '#/components/schemas/hook-delivery';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a delivery for a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repo-deliveries';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    post: {
      description: 'Redeliver a webhook delivery for a webhook configured in a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#redeliver-a-delivery-for-a-repository-webhook';
      };
      operationId: 'repos/redeliver-webhook-delivery';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
        {
          $ref: '#/components/parameters/delivery-id';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Redeliver a delivery for a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repo-deliveries';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/pings': {
    post: {
      description: 'This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#ping-a-repository-webhook';
      };
      operationId: 'repos/ping-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Ping a repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
  };
  '/repos/{owner}/{repo}/hooks/{hook_id}/tests': {
    post: {
      description: 'This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/webhooks/repos#test-the-push-repository-webhook';
      };
      operationId: 'repos/test-push-webhook';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/hook-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Test the push repository webhook';
      tags: ['repos'];
      'x-github': {
        category: 'webhooks';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
  };
  '/repos/{owner}/{repo}/import': {
    delete: {
      description: 'Stop an import for a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#cancel-an-import';
      };
      operationId: 'migrations/cancel-import';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Cancel an import';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
    get: {
      description: 'View the progress of an import.\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `detection_found_nothing` - the importer didn\'t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#get-an-import-status';
      };
      operationId: 'migrations/get-import-status';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import';
                };
              };
              schema: {
                $ref: '#/components/schemas/import';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Get an import status';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
    patch: {
      description: 'An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.\n\nSome servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will\nhave the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.\nYou can select the project to import by providing one of the objects in the `project_choices` array in the update request.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#update-an-import';
      };
      operationId: 'migrations/update-import';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-1': {
                summary: 'Update authentication for an import';
                value: {
                  vcs_password: 'secret';
                  vcs_username: 'octocat';
                };
              };
              'example-2': {
                summary: 'Updating the project choice';
                value: {
                  human_name: 'project1 (tfs)';
                  tfvc_project: 'project1';
                  vcs: 'tfvc';
                };
              };
              'example-3': {
                summary: 'Restarting an import';
              };
            };
            schema: {
              nullable: true;
              properties: {
                tfvc_project: {
                  description: 'For a tfvc import, the name of the project that is being imported.';
                  example: '"project1"';
                  type: 'string';
                };
                vcs: {
                  description: 'The type of version control system you are migrating from.';
                  enum: ['subversion', 'tfvc', 'git', 'mercurial'];
                  example: '"git"';
                  type: 'string';
                };
                vcs_password: {
                  description: 'The password to provide to the originating repository.';
                  type: 'string';
                };
                vcs_username: {
                  description: 'The username to provide to the originating repository.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-1': {
                  $ref: '#/components/examples/import-example-1';
                };
                'example-2': {
                  $ref: '#/components/examples/import-example-2';
                };
                'example-3': {
                  $ref: '#/components/examples/import-response';
                };
              };
              schema: {
                $ref: '#/components/schemas/import';
              };
            };
          };
          description: 'Response';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Update an import';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
    put: {
      description: 'Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#start-an-import';
      };
      operationId: 'migrations/start-import';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  vcs: 'subversion';
                  vcs_password: 'secret';
                  vcs_url: 'http://svn.mycompany.com/svn/myproject';
                  vcs_username: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                tfvc_project: {
                  description: 'For a tfvc import, the name of the project that is being imported.';
                  type: 'string';
                };
                vcs: {
                  description: 'The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.';
                  enum: ['subversion', 'git', 'mercurial', 'tfvc'];
                  type: 'string';
                };
                vcs_password: {
                  description: 'If authentication is required, the password to provide to `vcs_url`.';
                  type: 'string';
                };
                vcs_url: {
                  description: 'The URL of the originating repository.';
                  type: 'string';
                };
                vcs_username: {
                  description: 'If authentication is required, the username to provide to `vcs_url`.';
                  type: 'string';
                };
              };
              required: ['vcs_url'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/import';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/spraints/socm/import';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Start an import';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
  };
  '/repos/{owner}/{repo}/import/authors': {
    get: {
      description: 'Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#get-commit-authors';
      };
      operationId: 'migrations/get-commit-authors';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/since-user';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-author-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/porter-author';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Get commit authors';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
  };
  '/repos/{owner}/{repo}/import/authors/{author_id}': {
    patch: {
      description: "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#map-a-commit-author';
      };
      operationId: 'migrations/map-commit-author';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'author_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  email: 'hubot@github.com';
                  name: 'Hubot the Robot';
                };
              };
            };
            schema: {
              additionalProperties: false;
              properties: {
                email: {
                  description: 'The new Git author email.';
                  type: 'string';
                };
                name: {
                  description: 'The new Git author name.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-author';
                };
              };
              schema: {
                $ref: '#/components/schemas/porter-author';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Map a commit author';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
  };
  '/repos/{owner}/{repo}/import/large_files': {
    get: {
      description: 'List files larger than 100MB found during the import';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#get-large-files';
      };
      operationId: 'migrations/get-large-files';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-large-file-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/porter-large-file';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Get large files';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
  };
  '/repos/{owner}/{repo}/import/lfs': {
    patch: {
      description: 'You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference';
      };
      operationId: 'migrations/set-lfs-preference';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  use_lfs: 'opt_in';
                };
              };
            };
            schema: {
              properties: {
                use_lfs: {
                  description: 'Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.';
                  enum: ['opt_in', 'opt_out'];
                  type: 'string';
                };
              };
              required: ['use_lfs'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import';
                };
              };
              schema: {
                $ref: '#/components/schemas/import';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/porter_maintenance';
        };
      };
      summary: 'Update Git LFS preference';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'source-imports';
      };
    };
  };
  '/repos/{owner}/{repo}/installation': {
    get: {
      description: "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app';
      };
      operationId: 'apps/get-repo-installation';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation';
                };
              };
              schema: {
                $ref: '#/components/schemas/installation';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a repository installation for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/interaction-limits': {
    delete: {
      description: 'Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository';
      };
      operationId: 'interactions/remove-restrictions-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '409': {
          description: 'Response';
        };
      };
      summary: 'Remove interaction restrictions for a repository';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
    get: {
      description: 'Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository';
      };
      operationId: 'interactions/get-restrictions-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-2';
                };
              };
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response';
                  },
                  {
                    additionalProperties: false;
                    properties: {};
                    type: 'object';
                  },
                ];
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get interaction restrictions for a repository';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
    put: {
      description: 'Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository';
      };
      operationId: 'interactions/set-restrictions-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example request body';
                value: {
                  expiry: 'one_day';
                  limit: 'collaborators_only';
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/interaction-limit';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/interaction-limit-response';
              };
            };
          };
          description: 'Response';
        };
        '409': {
          description: 'Response';
        };
      };
      summary: 'Set interaction restrictions for a repository';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'repos';
      };
    };
  };
  '/repos/{owner}/{repo}/invitations': {
    get: {
      description: 'When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#list-repository-invitations';
      };
      operationId: 'repos/list-invitations';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/repository-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository invitations';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
  };
  '/repos/{owner}/{repo}/invitations/{invitation_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation';
      };
      operationId: 'repos/delete-invitation';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/invitation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository invitation';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation';
      };
      operationId: 'repos/update-invitation';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/invitation-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example request body';
                value: {
                  permissions: 'write';
                };
              };
            };
            schema: {
              properties: {
                permissions: {
                  description: 'The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.';
                  enum: ['read', 'write', 'maintain', 'triage', 'admin'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository-invitation';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a repository invitation';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
  };
  '/repos/{owner}/{repo}/issues': {
    get: {
      description: 'List issues in a repository. Only open issues will be listed.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-repository-issues';
      };
      operationId: 'issues/list-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.';
          in: 'query';
          name: 'milestone';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Indicates the state of the issues to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.';
          in: 'query';
          name: 'assignee';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'The user that created the issue.';
          in: 'query';
          name: 'creator';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: "A user that's mentioned in the issue.";
          in: 'query';
          name: 'mentioned';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/labels';
        },
        {
          description: 'What to sort results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'comments'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List repository issues';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#create-an-issue';
      };
      operationId: 'issues/create';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['octocat'];
                  body: "I'm having a problem with this.";
                  labels: ['bug'];
                  milestone: 1;
                  title: 'Found a bug';
                };
              };
            };
            schema: {
              properties: {
                assignee: {
                  description: 'Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_';
                  nullable: true;
                  type: 'string';
                };
                assignees: {
                  description: 'Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                body: {
                  description: 'The contents of the issue.';
                  type: 'string';
                };
                labels: {
                  description: 'Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._';
                  items: {
                    oneOf: [
                      {
                        type: 'string';
                      },
                      {
                        properties: {
                          color: {
                            nullable: true;
                            type: 'string';
                          };
                          description: {
                            nullable: true;
                            type: 'string';
                          };
                          id: {
                            type: 'integer';
                          };
                          name: {
                            type: 'string';
                          };
                        };
                        type: 'object';
                      },
                    ];
                  };
                  type: 'array';
                };
                milestone: {
                  nullable: true;
                  oneOf: [
                    {
                      type: 'string';
                    },
                    {
                      description: 'The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._';
                      type: 'integer';
                    },
                  ];
                };
                title: {
                  description: 'The title of the issue.';
                  oneOf: [
                    {
                      type: 'string';
                    },
                    {
                      type: 'integer';
                    },
                  ];
                };
              };
              required: ['title'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/issues/1347';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Create an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/comments': {
    get: {
      description: 'By default, Issue Comments are ordered by ascending ID.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository';
      };
      operationId: 'issues/list-comments-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/sort';
        },
        {
          description: 'Either `asc` or `desc`. Ignored without the `sort` parameter.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List issue comments for a repository';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/comments/{comment_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#delete-an-issue-comment';
      };
      operationId: 'issues/delete-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an issue comment';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue-comment';
      };
      operationId: 'issues/get-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue-comment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an issue comment';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#update-an-issue-comment';
      };
      operationId: 'issues/update-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Me too';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue-comment';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update an issue comment';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions': {
    get: {
      description: 'List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment';
      };
      operationId: 'reactions/list-for-issue-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List reactions for an issue comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment';
      };
      operationId: 'reactions/create-for-issue-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction created';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create reaction for an issue comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction';
      };
      operationId: 'reactions/delete-for-issue-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an issue comment reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/events': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository';
      };
      operationId: 'issues/list-events-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List issue events for a repository';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/events/{event_id}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue-event';
      };
      operationId: 'issues/get-event';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'event_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue-event';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Get an issue event';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}': {
    get: {
      description: 'The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue';
      };
      operationId: 'issues/get';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Get an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: 'Issue owners and users with push access can edit an issue.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#update-an-issue';
      };
      operationId: 'issues/update';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['octocat'];
                  body: "I'm having a problem with this.";
                  labels: ['bug'];
                  milestone: 1;
                  state: 'open';
                  title: 'Found a bug';
                };
              };
            };
            schema: {
              properties: {
                assignee: {
                  description: 'Username to assign to this issue. **This field is deprecated.**';
                  nullable: true;
                  type: 'string';
                };
                assignees: {
                  description: 'Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                body: {
                  description: 'The contents of the issue.';
                  nullable: true;
                  type: 'string';
                };
                labels: {
                  description: 'Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.';
                  items: {
                    oneOf: [
                      {
                        type: 'string';
                      },
                      {
                        properties: {
                          color: {
                            nullable: true;
                            type: 'string';
                          };
                          description: {
                            nullable: true;
                            type: 'string';
                          };
                          id: {
                            type: 'integer';
                          };
                          name: {
                            type: 'string';
                          };
                        };
                        type: 'object';
                      },
                    ];
                  };
                  type: 'array';
                };
                milestone: {
                  nullable: true;
                  oneOf: [
                    {
                      type: 'string';
                    },
                    {
                      description: 'The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.';
                      type: 'integer';
                    },
                  ];
                };
                state: {
                  description: 'The open or closed state of the issue.';
                  enum: ['open', 'closed'];
                  type: 'string';
                };
                state_reason: {
                  description: 'The reason for the state change. Ignored unless `state` is changed.';
                  enum: ['completed', 'not_planned', 'reopened'];
                  example: 'not_planned';
                  nullable: true;
                  type: 'string';
                };
                title: {
                  description: 'The title of the issue.';
                  nullable: true;
                  oneOf: [
                    {
                      type: 'string';
                    },
                    {
                      type: 'integer';
                    },
                  ];
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Update an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/assignees': {
    delete: {
      description: 'Removes one or more assignees from an issue.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue';
      };
      operationId: 'issues/remove-assignees';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['hubot', 'other_user'];
                };
              };
            };
            schema: {
              properties: {
                assignees: {
                  description: 'Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Remove assignees from an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'assignees';
      };
    };
    post: {
      description: 'Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue';
      };
      operationId: 'issues/add-assignees';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['hubot', 'other_user'];
                };
              };
            };
            schema: {
              properties: {
                assignees: {
                  description: 'Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Add assignees to an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'assignees';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}': {
    get: {
      description: 'Checks if a user has permission to be assigned to a specific issue.\n\nIf the `assignee` can be assigned to this issue, a `204` status code with no content is returned.\n\nOtherwise a `404` status code is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned-to-a-issue';
      };
      operationId: 'issues/check-user-can-be-assigned-to-issue';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          in: 'path';
          name: 'assignee';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response if `assignee` can be assigned to `issue_number`';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Response if `assignee` can not be assigned to `issue_number`';
        };
      };
      summary: 'Check if a user can be assigned to a issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'assignees';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/comments': {
    get: {
      description: 'Issue Comments are ordered by ascending ID.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-issue-comments';
      };
      operationId: 'issues/list-comments';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'List issue comments';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    post: {
      description: 'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#create-an-issue-comment';
      };
      operationId: 'issues/create-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Me too';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/issue-comment';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/issues/comments/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create an issue comment';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/events': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-issue-events';
      };
      operationId: 'issues/list-events';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event-for-issue-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-event-for-issue';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'List issue events';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/labels': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue';
      };
      operationId: 'issues/remove-all-labels';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Remove all labels from an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-an-issue';
      };
      operationId: 'issues/list-labels-on-issue';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'List labels for an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#add-labels-to-an-issue';
      };
      operationId: 'issues/add-labels';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['bug', 'enhancement'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  properties: {
                    labels: {
                      description: 'The names of the labels to add to the issue\'s existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."';
                      items: {
                        type: 'string';
                      };
                      minItems: 1;
                      type: 'array';
                    };
                  };
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  minItems: 1;
                  type: 'array';
                },
                {
                  properties: {
                    labels: {
                      items: {
                        properties: {
                          name: {
                            type: 'string';
                          };
                        };
                        required: ['name'];
                        type: 'object';
                      };
                      minItems: 1;
                      type: 'array';
                    };
                  };
                  type: 'object';
                },
                {
                  items: {
                    properties: {
                      name: {
                        type: 'string';
                      };
                    };
                    required: ['name'];
                    type: 'object';
                  };
                  minItems: 1;
                  type: 'array';
                },
                {
                  type: 'string';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add labels to an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    put: {
      description: 'Removes any previous labels and sets the new labels for an issue.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#set-labels-for-an-issue';
      };
      operationId: 'issues/set-labels';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['bug', 'enhancement'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  properties: {
                    labels: {
                      description: 'The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."';
                      items: {
                        type: 'string';
                      };
                      minItems: 1;
                      type: 'array';
                    };
                  };
                  type: 'object';
                },
                {
                  items: {
                    type: 'string';
                  };
                  minItems: 1;
                  type: 'array';
                },
                {
                  properties: {
                    labels: {
                      items: {
                        properties: {
                          name: {
                            type: 'string';
                          };
                        };
                        required: ['name'];
                        type: 'object';
                      };
                      minItems: 1;
                      type: 'array';
                    };
                  };
                  type: 'object';
                },
                {
                  items: {
                    properties: {
                      name: {
                        type: 'string';
                      };
                    };
                    required: ['name'];
                    type: 'object';
                  };
                  minItems: 1;
                  type: 'array';
                },
                {
                  type: 'string';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set labels for an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}': {
    delete: {
      description: 'Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue';
      };
      operationId: 'issues/remove-label';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          in: 'path';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '301': {
          $ref: '#/components/responses/moved_permanently';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'Remove a label from an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/lock': {
    delete: {
      description: "Users with push access can unlock an issue's conversation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#unlock-an-issue';
      };
      operationId: 'issues/unlock';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unlock an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'Users with push access can lock an issue or pull request\'s conversation.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#lock-an-issue';
      };
      operationId: 'issues/lock';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of locking an issue as off-topic';
                value: {
                  lock_reason: 'off-topic';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                lock_reason: {
                  description: "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n * `off-topic`  \n * `too heated`  \n * `resolved`  \n * `spam`";
                  enum: ['off-topic', 'too heated', 'resolved', 'spam'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Lock an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/reactions': {
    get: {
      description: 'List the reactions to an [issue](https://docs.github.com/rest/reference/issues).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue';
      };
      operationId: 'reactions/list-for-issue';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'List reactions for an issue';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue';
      };
      operationId: 'reactions/create-for-issue';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create reaction for an issue';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction';
      };
      operationId: 'reactions/delete-for-issue';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an issue reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/issues/{issue_number}/timeline': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue';
      };
      operationId: 'issues/list-events-for-timeline';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/issue-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/timeline-issue-events';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/timeline-issue-events';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
      };
      summary: 'List timeline events for an issue';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'timeline';
      };
    };
  };
  '/repos/{owner}/{repo}/keys': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deploy-keys#list-deploy-keys';
      };
      operationId: 'repos/list-deploy-keys';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/deploy-key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List deploy keys';
      tags: ['repos'];
      'x-github': {
        category: 'deploy-keys';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    post: {
      description: 'You can create a read-only deploy key.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deploy-keys#create-a-deploy-key';
      };
      operationId: 'repos/create-deploy-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: 'ssh-rsa AAA...';
                  read_only: true;
                  title: 'octocat@octomac';
                };
              };
            };
            schema: {
              properties: {
                key: {
                  description: 'The contents of the key.';
                  type: 'string';
                };
                read_only: {
                  description: 'If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."';
                  type: 'boolean';
                };
                title: {
                  description: 'A name for the key.';
                  type: 'string';
                };
              };
              required: ['key'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/deploy-key';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/keys/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a deploy key';
      tags: ['repos'];
      'x-github': {
        category: 'deploy-keys';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/keys/{key_id}': {
    delete: {
      description: 'Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deploy-keys#delete-a-deploy-key';
      };
      operationId: 'repos/delete-deploy-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/key-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a deploy key';
      tags: ['repos'];
      'x-github': {
        category: 'deploy-keys';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/deploy-keys#get-a-deploy-key';
      };
      operationId: 'repos/get-deploy-key';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/key-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/deploy-key';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a deploy key';
      tags: ['repos'];
      'x-github': {
        category: 'deploy-keys';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/labels': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-a-repository';
      };
      operationId: 'issues/list-labels-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List labels for a repository';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#create-a-label';
      };
      operationId: 'issues/create-label';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  color: 'f29513';
                  description: "Something isn't working";
                  name: 'bug';
                };
              };
            };
            schema: {
              properties: {
                color: {
                  description: 'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.';
                  type: 'string';
                };
                description: {
                  description: 'A short description of the label. Must be 100 characters or fewer.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label';
                };
              };
              schema: {
                $ref: '#/components/schemas/label';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/labels/bug';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a label';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
  };
  '/repos/{owner}/{repo}/labels/{name}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#delete-a-label';
      };
      operationId: 'issues/delete-label';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a label';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#get-a-label';
      };
      operationId: 'issues/get-label';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label';
                };
              };
              schema: {
                $ref: '#/components/schemas/label';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a label';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#update-a-label';
      };
      operationId: 'issues/update-label';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  color: 'b01f26';
                  description: 'Small bug fix required';
                  new_name: 'bug :bug:';
                };
              };
            };
            schema: {
              properties: {
                color: {
                  description: 'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.';
                  type: 'string';
                };
                description: {
                  description: 'A short description of the label. Must be 100 characters or fewer.';
                  type: 'string';
                };
                new_name: {
                  description: 'The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/label';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a label';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
  };
  '/repos/{owner}/{repo}/languages': {
    get: {
      description: 'Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repository-languages';
      };
      operationId: 'repos/list-languages';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/language';
                };
              };
              schema: {
                $ref: '#/components/schemas/language';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List repository languages';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/lfs': {
    delete: {
      description: 'Disables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#disable-git-lfs-for-a-repository';
      };
      operationId: 'repos/disable-lfs-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Disable Git LFS for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'lfs';
      };
    };
    put: {
      description: 'Enables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#enable-git-lfs-for-a-repository';
      };
      operationId: 'repos/enable-lfs-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '403': {
          description: 'We will return a 403 with one of the following messages:\n\n- Git LFS support not enabled because Git LFS is globally disabled.\n- Git LFS support not enabled because Git LFS is disabled for the root repository in the network.\n- Git LFS support not enabled because Git LFS is disabled for <owner>.';
        };
      };
      summary: 'Enable Git LFS for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'lfs';
      };
    };
  };
  '/repos/{owner}/{repo}/license': {
    get: {
      description: "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository';
      };
      operationId: 'licenses/get-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license-content';
                };
              };
              schema: {
                $ref: '#/components/schemas/license-content';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the license for a repository';
      tags: ['licenses'];
      'x-github': {
        category: 'licenses';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/merge-upstream': {
    post: {
      description: 'Sync a branch of a forked repository to keep it up-to-date with the upstream repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository';
      };
      operationId: 'repos/merge-upstream';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  branch: 'main';
                };
              };
            };
            schema: {
              properties: {
                branch: {
                  description: 'The name of the branch which should be updated to match upstream.';
                  type: 'string';
                };
              };
              required: ['branch'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/merged-upstream';
                };
              };
              schema: {
                $ref: '#/components/schemas/merged-upstream';
              };
            };
          };
          description: 'The branch has been successfully synced with the upstream repository';
        };
        '409': {
          description: 'The branch could not be synced because of a merge conflict';
        };
        '422': {
          description: 'The branch could not be synced for some other reason';
        };
      };
      summary: 'Sync a fork branch with the upstream repository';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/merges': {
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/branches/branches#merge-a-branch';
      };
      operationId: 'repos/merge';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master';
                  commit_message: 'Shipped cool_feature!';
                  head: 'cool_feature';
                };
              };
            };
            schema: {
              properties: {
                base: {
                  description: 'The name of the base branch that the head will be merged into.';
                  type: 'string';
                };
                commit_message: {
                  description: 'Commit message to use for the merge commit. If omitted, a default message will be used.';
                  type: 'string';
                };
                head: {
                  description: 'The head to merge. This can be a branch name or a commit SHA1.';
                  type: 'string';
                };
              };
              required: ['base', 'head'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit';
                };
              };
              schema: {
                $ref: '#/components/schemas/commit';
              };
            };
          };
          description: 'Successful Response (The resulting merge commit)';
        };
        '204': {
          description: 'Response when already merged';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          description: 'Not Found when the base or head does not exist';
        };
        '409': {
          description: 'Conflict when there is a merge conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Merge a branch';
      tags: ['repos'];
      'x-github': {
        category: 'branches';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/milestones': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-milestones';
      };
      operationId: 'issues/list-milestones';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The state of the milestone. Either `open`, `closed`, or `all`.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          description: 'What to sort results by. Either `due_on` or `completeness`.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'due_on';
            enum: ['due_on', 'completeness'];
            type: 'string';
          };
        },
        {
          description: 'The direction of the sort. Either `asc` or `desc`.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            default: 'asc';
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/milestone';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List milestones';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'milestones';
      };
    };
    post: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#create-a-milestone';
      };
      operationId: 'issues/create-milestone';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Tracking milestone for version 1.0';
                  due_on: '2012-10-09T23:39:01Z';
                  state: 'open';
                  title: 'v1.0';
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'A description of the milestone.';
                  type: 'string';
                };
                due_on: {
                  description: 'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                state: {
                  default: 'open';
                  description: 'The state of the milestone. Either `open` or `closed`.';
                  enum: ['open', 'closed'];
                  type: 'string';
                };
                title: {
                  description: 'The title of the milestone.';
                  type: 'string';
                };
              };
              required: ['title'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone';
                };
              };
              schema: {
                $ref: '#/components/schemas/milestone';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/milestones/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a milestone';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'milestones';
      };
    };
  };
  '/repos/{owner}/{repo}/milestones/{milestone_number}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#delete-a-milestone';
      };
      operationId: 'issues/delete-milestone';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/milestone-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a milestone';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'milestones';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#get-a-milestone';
      };
      operationId: 'issues/get-milestone';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/milestone-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone';
                };
              };
              schema: {
                $ref: '#/components/schemas/milestone';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a milestone';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'milestones';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#update-a-milestone';
      };
      operationId: 'issues/update-milestone';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/milestone-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Tracking milestone for version 1.0';
                  due_on: '2012-10-09T23:39:01Z';
                  state: 'open';
                  title: 'v1.0';
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'A description of the milestone.';
                  type: 'string';
                };
                due_on: {
                  description: 'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.';
                  format: 'date-time';
                  type: 'string';
                };
                state: {
                  default: 'open';
                  description: 'The state of the milestone. Either `open` or `closed`.';
                  enum: ['open', 'closed'];
                  type: 'string';
                };
                title: {
                  description: 'The title of the milestone.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone';
                };
              };
              schema: {
                $ref: '#/components/schemas/milestone';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a milestone';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'milestones';
      };
    };
  };
  '/repos/{owner}/{repo}/milestones/{milestone_number}/labels': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone';
      };
      operationId: 'issues/list-labels-for-milestone';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/milestone-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/label';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List labels for issues in a milestone';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'labels';
      };
    };
  };
  '/repos/{owner}/{repo}/notifications': {
    get: {
      description: 'Lists all notifications for the current user in the specified repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user';
      };
      operationId: 'activity/list-repo-notifications-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/all';
        },
        {
          $ref: '#/components/parameters/participating';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/before';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/thread';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository notifications for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
    put: {
      description: 'Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read';
      };
      operationId: 'activity/mark-repo-notifications-as-read';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  last_read_at: '2019-01-01T00:00:00Z';
                };
              };
            };
            schema: {
              properties: {
                last_read_at: {
                  description: 'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.';
                  format: 'date-time';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    message: "Unread notifications couldn't be marked in a single request. Notifications are being marked as read in the background.";
                  };
                };
              };
              schema: {
                properties: {
                  message: {
                    type: 'string';
                  };
                  url: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '205': {
          description: 'Reset Content';
        };
      };
      summary: 'Mark repository notifications as read';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'notifications';
      };
    };
  };
  '/repos/{owner}/{repo}/pages': {
    delete: {
      description: "Deletes a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#delete-a-github-pages-site';
      };
      operationId: 'repos/delete-pages-site';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete a GitHub Pages site';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#get-a-github-pages-site';
      };
      operationId: 'repos/get-pages';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page';
                };
              };
              schema: {
                $ref: '#/components/schemas/page';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a GitHub Pages site';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    post: {
      description: 'Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the \'manage GitHub Pages settings\' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#create-a-github-pages-site';
      };
      operationId: 'repos/create-pages-site';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  source: {
                    branch: 'main';
                    path: '/docs';
                  };
                };
              };
            };
            schema: {
              anyOf: [
                {
                  required: ['source'];
                },
                {
                  required: ['build_type'];
                },
              ];
              description: 'The source branch and directory used to publish your Pages site.';
              nullable: true;
              properties: {
                build_type: {
                  description: 'The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.';
                  enum: ['legacy', 'workflow'];
                  type: 'string';
                };
                source: {
                  description: 'The source branch and directory used to publish your Pages site.';
                  properties: {
                    branch: {
                      description: "The repository branch used to publish your site's source files.";
                      type: 'string';
                    };
                    path: {
                      default: '/';
                      description: 'The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`';
                      enum: ['/', '/docs'];
                      type: 'string';
                    };
                  };
                  required: ['branch'];
                  type: 'object';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page';
                };
              };
              schema: {
                $ref: '#/components/schemas/page';
              };
            };
          };
          description: 'Response';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a GitHub Pages site';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    put: {
      description: "Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#update-information-about-a-github-pages-site';
      };
      operationId: 'repos/update-information-about-pages-site';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  cname: 'octocatblog.com';
                  source: {
                    branch: 'main';
                    path: '/';
                  };
                };
              };
            };
            schema: {
              anyOf: [
                {
                  required: ['build_type'];
                },
                {
                  required: ['source'];
                },
                {
                  required: ['cname'];
                },
                {
                  required: ['public'];
                },
                {
                  required: ['https_enforced'];
                },
              ];
              properties: {
                build_type: {
                  description: 'The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.';
                  enum: ['legacy', 'workflow'];
                  type: 'string';
                };
                cname: {
                  description: 'Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."';
                  nullable: true;
                  type: 'string';
                };
                https_enforced: {
                  description: 'Specify whether HTTPS should be enforced for the repository.';
                  type: 'boolean';
                };
                source: {
                  anyOf: [
                    {
                      description: 'Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.';
                      enum: ['gh-pages', 'master', 'master /docs'];
                      type: 'string';
                    },
                    {
                      description: 'Update the source for the repository. Must include the branch name and path.';
                      properties: {
                        branch: {
                          description: "The repository branch used to publish your site's source files.";
                          type: 'string';
                        };
                        path: {
                          description: 'The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.';
                          enum: ['/', '/docs'];
                          type: 'string';
                        };
                      };
                      required: ['branch', 'path'];
                      type: 'object';
                    },
                  ];
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update information about a GitHub Pages site';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/pages/builds': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#list-github-pages-builds';
      };
      operationId: 'repos/list-pages-builds';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/page-build';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List GitHub Pages builds';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
    post: {
      description: 'You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#request-a-github-pages-build';
      };
      operationId: 'repos/request-pages-build';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build-status';
                };
              };
              schema: {
                $ref: '#/components/schemas/page-build-status';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Request a GitHub Pages build';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/pages/builds/latest': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#get-latest-pages-build';
      };
      operationId: 'repos/get-latest-pages-build';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build';
                };
              };
              schema: {
                $ref: '#/components/schemas/page-build';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get latest Pages build';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/pages/builds/{build_id}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#get-github-pages-build';
      };
      operationId: 'repos/get-pages-build';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'build_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build';
                };
              };
              schema: {
                $ref: '#/components/schemas/page-build';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Pages build';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/pages/deployment': {
    post: {
      description: 'Create a GitHub Pages deployment for a repository.\n\nUsers must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#create-a-github-pages-deployment';
      };
      operationId: 'repos/create-pages-deployment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  artifact_url: 'https://downloadcontent/';
                  environment: 'github-pages';
                  oidc_token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlV2R1h4SUhlY0JFc1JCdEttemUxUEhfUERiVSIsImtpZCI6IjUyRjE5N0M0ODFERTcwMTEyQzQ0MUI0QTlCMzdCNTNDN0ZDRjBEQjUifQ.eyJqdGkiOiJhMWIwNGNjNy0zNzZiLTQ1N2QtOTMzNS05NTY5YmVjZDExYTIiLCJzdWIiOiJyZXBvOnBhcGVyLXNwYS9taW55aTplbnZpcm9ubWVudDpQcm9kdWN0aW9uIiwiYXVkIjoiaHR0cHM6Ly9naXRodWIuY29tL3BhcGVyLXNwYSIsInJlZiI6InJlZnMvaGVhZHMvbWFpbiIsInNoYSI6ImEyODU1MWJmODdiZDk3NTFiMzdiMmM0YjM3M2MxZjU3NjFmYWM2MjYiLCJyZXBvc2l0b3J5IjoicGFwZXItc3BhL21pbnlpIiwicmVwb3NpdG9yeV9vd25lciI6InBhcGVyLXNwYSIsInJ1bl9pZCI6IjE1NDY0NTkzNjQiLCJydW5fbnVtYmVyIjoiMzQiLCJydW5fYXR0ZW1wdCI6IjYiLCJhY3RvciI6IllpTXlzdHkiLCJ3b3JrZmxvdyI6IkNJIiwiaGVhZF9yZWYiOiIiLCJiYXNlX3JlZiI6IiIsImV2ZW50X25hbWUiOiJwdXNoIiwicmVmX3R5cGUiOiJicmFuY2giLCJlbnZpcm9ubWVudCI6IlByb2R1Y3Rpb24iLCJqb2Jfd29ya2Zsb3dfcmVmIjoicGFwZXItc3BhL21pbnlpLy5naXRodWIvd29ya2Zsb3dzL2JsYW5rLnltbEByZWZzL2hlYWRzL21haW4iLCJpc3MiOiJodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tIiwibmJmIjoxNjM5MDAwODU2LCJleHAiOjE2MzkwMDE3NTYsImlhdCI6MTYzOTAwMTQ1Nn0.VP8WictbQECKozE2SgvKb2FqJ9hisWsoMkYRTqfBrQfZTCXi5IcFEdgDMB2X7a99C2DeUuTvHh9RMKXLL2a0zg3-Sd7YrO7a2ll2kNlnvyIypcN6AeIc7BxHsTTnZN9Ud_xmEsTrSRGOEKmzCFkULQ6N4zlVD0sidypmXlMemmWEcv_ZHqhioEI_VMp5vwXQurketWH7qX4oDgG4okyYtPrv5RQHbfQcVo9izaPJ_jnsDd0CBA0QOx9InjPidtIkMYQLyUgJy33HLJy86EFNUnAf8UhBQuQi5mAsEpEzBBuKpG3PDiPtYCHOk64JZkZGd5mR888a5sbHRiaF8hm8YA';
                  pages_build_version: '4fd754f7e594640989b406850d0bc8f06a121251';
                  preview: false;
                };
              };
            };
            schema: {
              description: 'The object used to create GitHub Pages deployment';
              properties: {
                artifact_url: {
                  description: 'The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.';
                  type: 'string';
                };
                environment: {
                  default: 'github-pages';
                  description: 'The target environment for this GitHub Pages deployment.';
                  type: 'string';
                };
                oidc_token: {
                  description: 'The OIDC token issued by GitHub Actions certifying the origin of the deployment.';
                  type: 'string';
                };
                pages_build_version: {
                  default: 'GITHUB_SHA';
                  description: 'A unique string that represents the version of the build for this deployment.';
                  type: 'string';
                };
              };
              required: ['artifact_url', 'pages_build_version', 'oidc_token'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-deployment';
                };
              };
              schema: {
                $ref: '#/components/schemas/page-deployment';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a GitHub Pages deployment';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/pages/health': {
    get: {
      description: "Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.\n\nThe first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/pages#get-a-dns-health-check-for-github-pages';
      };
      operationId: 'repos/get-pages-health-check';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pages-health-check';
                };
              };
              schema: {
                $ref: '#/components/schemas/pages-health-check';
              };
            };
          };
          description: 'Response';
        };
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Empty response';
        };
        '400': {
          description: 'Custom domains are not available for GitHub Pages';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          description: "There isn't a CNAME for this page";
        };
      };
      summary: 'Get a DNS health check for GitHub Pages';
      tags: ['repos'];
      'x-github': {
        category: 'pages';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/projects': {
    get: {
      description: 'Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-repository-projects';
      };
      operationId: 'projects/list-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'Indicates the state of the projects to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/project';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'List repository projects';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#create-a-repository-project';
      };
      operationId: 'projects/create-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Developer documentation project for the developer site.';
                  name: 'Projects Documentation';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The description of the project.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the project.';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3';
                };
              };
              schema: {
                $ref: '#/components/schemas/project';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '410': {
          $ref: '#/components/responses/gone';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a repository project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls': {
    get: {
      description: "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-pull-requests';
      };
      operationId: 'pulls/list';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'Either `open`, `closed`, or `all` to filter by state.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.';
          in: 'query';
          name: 'head';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Filter pulls by base branch name. Example: `gh-pages`.';
          in: 'query';
          name: 'base';
          required: false;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'popularity', 'long-running'];
            type: 'string';
          };
        },
        {
          description: 'The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List pull requests';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#create-a-pull-request';
      };
      operationId: 'pulls/create';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master';
                  body: 'Please pull these awesome changes in!';
                  head: 'octocat:new-feature';
                  title: 'Amazing new feature';
                };
              };
            };
            schema: {
              properties: {
                base: {
                  description: 'The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.';
                  type: 'string';
                };
                body: {
                  description: 'The contents of the pull request.';
                  type: 'string';
                };
                draft: {
                  description: 'Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.';
                  type: 'boolean';
                };
                head: {
                  description: 'The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.';
                  type: 'string';
                };
                head_repo: {
                  description: 'The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.';
                  example: 'octo-org/octo-repo';
                  format: 'repo.nwo';
                  type: 'string';
                };
                issue: {
                  description: 'An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.';
                  example: 1;
                  type: 'integer';
                };
                maintainer_can_modify: {
                  description: 'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.';
                  type: 'boolean';
                };
                title: {
                  description: 'The title of the new pull request. Required unless `issue` is specified.';
                  type: 'string';
                };
              };
              required: ['head', 'base'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/comments': {
    get: {
      description: 'Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository';
      };
      operationId: 'pulls/list-review-comments-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['created', 'updated', 'created_at'];
            type: 'string';
          };
        },
        {
          description: 'The direction to sort results. Ignored without `sort` parameter.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List review comments in a repository';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}': {
    delete: {
      description: 'Deletes a review comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request';
      };
      operationId: 'pulls/delete-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a review comment for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    get: {
      description: 'Provides details for a review comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request';
      };
      operationId: 'pulls/get-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a review comment for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    patch: {
      description: 'Enables you to edit a review comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request';
      };
      operationId: 'pulls/update-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'I like this too!';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The text of the reply to the review comment.';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a review comment for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions': {
    get: {
      description: 'List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment';
      };
      operationId: 'reactions/list-for-pull-request-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List reactions for a pull request review comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment';
      };
      operationId: 'reactions/create-for-pull-request-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction created';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create reaction for a pull request review comment';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction';
      };
      operationId: 'reactions/delete-for-pull-request-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a pull request comment reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}': {
    get: {
      description: 'Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#get-a-pull-request';
      };
      operationId: 'pulls/get';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request';
              };
            };
          };
          description: 'Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls/#update-a-pull-request';
      };
      operationId: 'pulls/update';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master';
                  body: 'updated body';
                  state: 'open';
                  title: 'new title';
                };
              };
            };
            schema: {
              properties: {
                base: {
                  description: 'The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.';
                  type: 'string';
                };
                body: {
                  description: 'The contents of the pull request.';
                  type: 'string';
                };
                maintainer_can_modify: {
                  description: 'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.';
                  type: 'boolean';
                };
                state: {
                  description: 'State of this Pull Request. Either `open` or `closed`.';
                  enum: ['open', 'closed'];
                  type: 'string';
                };
                title: {
                  description: 'The title of the pull request.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces': {
    post: {
      description: 'Creates a codespace owned by the authenticated user for the specified pull request.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request';
      };
      operationId: 'codespaces/create-with-pr-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ref: 'main';
                  repository_id: 1;
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                client_ip: {
                  description: 'IP for location auto-detection when proxying a request';
                  type: 'string';
                };
                devcontainer_path: {
                  description: 'Path to devcontainer.json config to use for this codespace';
                  type: 'string';
                };
                display_name: {
                  description: 'Display name for this codespace';
                  type: 'string';
                };
                idle_timeout_minutes: {
                  description: 'Time in minutes before codespace stops from inactivity';
                  type: 'integer';
                };
                location: {
                  description: 'Location for this codespace. Assigned by IP if not provided';
                  type: 'string';
                };
                machine: {
                  description: 'Machine type to use for this codespace';
                  type: 'string';
                };
                multi_repo_permissions_opt_out: {
                  description: 'Whether to authorize requested permissions from devcontainer.json';
                  type: 'boolean';
                };
                retention_period_minutes: {
                  description: 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).';
                  type: 'integer';
                };
                working_directory: {
                  description: 'Working directory for this codespace';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace was successfully created';
        };
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace creation partially failed but is being retried in the background';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Create a codespace from a pull request';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/comments': {
    get: {
      description: 'Lists all review comments for a pull request. By default, review comments are in ascending order by ID.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request';
      };
      operationId: 'pulls/list-review-comments';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/sort';
        },
        {
          description: 'The direction to sort results. Ignored without `sort` parameter.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List review comments on a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
      };
    };
    post: {
      description: '\nCreates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n\nThe `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.\n\n**Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request';
      };
      operationId: 'pulls/create-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-for-a-multi-line-comment': {
                summary: 'Example for a multi-line comment';
                value: {
                  body: 'Great stuff!';
                  commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e';
                  line: 2;
                  path: 'file1.txt';
                  side: 'RIGHT';
                  start_line: 1;
                  start_side: 'RIGHT';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The text of the review comment.';
                  type: 'string';
                };
                commit_id: {
                  description: 'The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.';
                  type: 'string';
                };
                in_reply_to: {
                  description: 'The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.';
                  example: 2;
                  type: 'integer';
                };
                line: {
                  description: 'The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.';
                  type: 'integer';
                };
                path: {
                  description: 'The relative path to the file that necessitates a comment.';
                  type: 'string';
                };
                position: {
                  deprecated: true;
                  description: '**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.';
                  type: 'integer';
                  'x-github': {
                    deprecationDate: '2022-11-01';
                  };
                };
                side: {
                  description: 'In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.';
                  enum: ['LEFT', 'RIGHT'];
                  type: 'string';
                };
                start_line: {
                  description: '**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.';
                  type: 'integer';
                };
                start_side: {
                  description: '**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.';
                  enum: ['LEFT', 'RIGHT', 'side'];
                  type: 'string';
                };
              };
              required: ['body', 'commit_id', 'path', 'line'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-for-a-multi-line-comment': {
                  $ref: '#/components/examples/pull-request-review-comment-example-for-a-multi-line-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a review comment for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'comments';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies': {
    post: {
      description: 'Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment';
      };
      operationId: 'pulls/create-reply-for-review-comment';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/comment-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Great stuff!';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The text of the review comment.';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Create a reply for a review comment';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'comments';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/commits': {
    get: {
      description: 'Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request';
      };
      operationId: 'pulls/list-commits';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/commit';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List commits on a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/files': {
    get: {
      description: '**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-pull-requests-files';
      };
      operationId: 'pulls/list-files';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/diff-entry-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/diff-entry';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List pull requests files';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/merge': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged';
      };
      operationId: 'pulls/check-if-merged';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response if pull request has been merged';
        };
        '404': {
          description: 'Not Found if pull request has not been merged';
        };
      };
      summary: 'Check if a pull request has been merged';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#merge-a-pull-request';
      };
      operationId: 'pulls/merge';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'response-if-merge-was-successful': {
                value: {
                  commit_message: 'Add a new value to the merge_method enum';
                  commit_title: 'Expand enum';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                commit_message: {
                  description: 'Extra detail to append to automatic commit message.';
                  type: 'string';
                };
                commit_title: {
                  description: 'Title for the automatic commit message.';
                  type: 'string';
                };
                merge_method: {
                  description: 'The merge method to use.';
                  enum: ['merge', 'squash', 'rebase'];
                  type: 'string';
                };
                sha: {
                  description: 'SHA that pull request head must match to allow merge.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-merge-was-successful': {
                  $ref: '#/components/examples/pull-request-merge-result-response-if-merge-was-successful';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-merge-result';
              };
            };
          };
          description: 'if merge was successful';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '405': {
          content: {
            'application/json': {
              examples: {
                'response-if-merge-cannot-be-performed': {
                  value: {
                    message: 'Pull Request is not mergeable';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Method Not Allowed if merge cannot be performed';
        };
        '409': {
          content: {
            'application/json': {
              examples: {
                'response-if-sha-was-provided-and-pull-request-head-did-not-match': {
                  value: {
                    message: 'Head branch was modified. Review and try the merge again.';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Conflict if sha was provided and pull request head did not match';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Merge a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request';
      };
      operationId: 'pulls/remove-requested-reviewers';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  reviewers: ['octocat', 'hubot', 'other_user'];
                  team_reviewers: ['justice-league'];
                };
              };
            };
            schema: {
              properties: {
                reviewers: {
                  description: 'An array of user `login`s that will be removed.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                team_reviewers: {
                  description: 'An array of team `slug`s that will be removed.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              required: ['reviewers'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-simple';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove requested reviewers from a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'review-requests';
      };
    };
    get: {
      description: 'Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request';
      };
      operationId: 'pulls/list-requested-reviewers';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-pull-request-review-request';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review-request';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'Get all requested reviewers for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'review-requests';
      };
    };
    post: {
      description: 'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request';
      };
      operationId: 'pulls/request-reviewers';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  reviewers: ['octocat', 'hubot', 'other_user'];
                  team_reviewers: ['justice-league'];
                };
              };
            };
            schema: {
              anyOf: [
                {
                  required: ['reviewers'];
                },
                {
                  required: ['team_reviewers'];
                },
              ];
              properties: {
                reviewers: {
                  description: 'An array of user `login`s that will be requested.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
                team_reviewers: {
                  description: 'An array of team `slug`s that will be requested.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-request';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-simple';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          description: 'Unprocessable Entity if user is not a collaborator';
        };
      };
      summary: 'Request reviewers for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'review-requests';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews': {
    get: {
      description: 'The list of reviews returns in chronological order.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request';
      };
      operationId: 'pulls/list-reviews';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review';
                };
                type: 'array';
              };
            };
          };
          description: 'The list of reviews returns in chronological order.';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List reviews for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
    post: {
      description: 'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\nPull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."\n\n**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request';
      };
      operationId: 'pulls/create-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'This is close to perfect! Please address the suggested inline change.';
                  comments: [
                    {
                      body: 'Please add more information here, and fix this typo.';
                      path: 'file.md';
                      position: 6;
                    },
                  ];
                  commit_id: 'ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091';
                  event: 'REQUEST_CHANGES';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: '**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.';
                  type: 'string';
                };
                comments: {
                  description: 'Use the following table to specify the location, destination, and contents of the draft review comment.';
                  items: {
                    properties: {
                      body: {
                        description: 'Text of the review comment.';
                        type: 'string';
                      };
                      line: {
                        example: 28;
                        type: 'integer';
                      };
                      path: {
                        description: 'The relative path to the file that necessitates a review comment.';
                        type: 'string';
                      };
                      position: {
                        description: 'The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.';
                        type: 'integer';
                      };
                      side: {
                        example: 'RIGHT';
                        type: 'string';
                      };
                      start_line: {
                        example: 26;
                        type: 'integer';
                      };
                      start_side: {
                        example: 'LEFT';
                        type: 'string';
                      };
                    };
                    required: ['path', 'body'];
                    type: 'object';
                  };
                  type: 'array';
                };
                commit_id: {
                  description: 'The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.';
                  type: 'string';
                };
                event: {
                  description: 'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.';
                  enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request';
      };
      operationId: 'pulls/delete-pending-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Delete a pending review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request';
      };
      operationId: 'pulls/get-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-4';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
    put: {
      description: 'Update the review summary comment with new text.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request';
      };
      operationId: 'pulls/update-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'This is close to perfect! Please address the suggested inline change. And add more about this.';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The body text of the pull request review.';
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-5';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Update a review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments': {
    get: {
      description: 'List comments for a specific pull request review.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review';
      };
      operationId: 'pulls/list-comments-for-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/review-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/review-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List comments for a pull request review';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals': {
    put: {
      description: '**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request';
      };
      operationId: 'pulls/dismiss-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  event: 'DISMISS';
                  message: 'You are dismissed';
                };
              };
            };
            schema: {
              properties: {
                event: {
                  enum: ['DISMISS'];
                  example: '"DISMISS"';
                  type: 'string';
                };
                message: {
                  description: 'The message for the pull request review dismissal';
                  type: 'string';
                };
              };
              required: ['message'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-3';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Dismiss a review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events': {
    post: {
      description: 'Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request';
      };
      operationId: 'pulls/submit-review';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
        {
          $ref: '#/components/parameters/review-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Here is the body for the review.';
                  event: 'REQUEST_CHANGES';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'The body text of the pull request review';
                  type: 'string';
                };
                event: {
                  description: 'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.';
                  enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'];
                  type: 'string';
                };
              };
              required: ['event'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-4';
                };
              };
              schema: {
                $ref: '#/components/schemas/pull-request-review';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Submit a review for a pull request';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'reviews';
      };
    };
  };
  '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch': {
    put: {
      description: 'Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch';
      };
      operationId: 'pulls/update-branch';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/pull-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expected_head_sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e';
                };
              };
            };
            schema: {
              nullable: true;
              properties: {
                expected_head_sha: {
                  description: "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/reference/repos#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.";
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    message: 'Updating pull request branch.';
                    url: 'https://github.com/repos/octocat/Hello-World/pulls/53';
                  };
                };
              };
              schema: {
                properties: {
                  message: {
                    type: 'string';
                  };
                  url: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a pull request branch';
      tags: ['pulls'];
      'x-github': {
        category: 'pulls';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/readme': {
    get: {
      description: 'Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository-readme';
      };
      operationId: 'repos/get-readme';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)';
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-file';
                };
              };
              schema: {
                $ref: '#/components/schemas/content-file';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a repository README';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
  };
  '/repos/{owner}/{repo}/readme/{dir}': {
    get: {
      description: 'Gets the README from a repository directory.\n\nREADMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme';
      };
      operationId: 'repos/get-readme-in-directory';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'The alternate path to look for a README file';
          in: 'path';
          name: 'dir';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)';
          in: 'query';
          name: 'ref';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-file';
                };
              };
              schema: {
                $ref: '#/components/schemas/content-file';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get a repository README for a directory';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
  };
  '/repos/{owner}/{repo}/releases': {
    get: {
      description: 'This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-releases';
      };
      operationId: 'repos/list-releases';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/release';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List releases';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    post: {
      description: 'Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/releases/releases#create-a-release';
      };
      operationId: 'repos/create-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Description of the release';
                  draft: false;
                  generate_release_notes: false;
                  name: 'v1.0.0';
                  prerelease: false;
                  tag_name: 'v1.0.0';
                  target_commitish: 'master';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'Text describing the contents of the tag.';
                  type: 'string';
                };
                discussion_category_name: {
                  description: 'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."';
                  type: 'string';
                };
                draft: {
                  default: false;
                  description: '`true` to create a draft (unpublished) release, `false` to create a published one.';
                  type: 'boolean';
                };
                generate_release_notes: {
                  default: false;
                  description: 'Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.';
                  type: 'boolean';
                };
                make_latest: {
                  default: true;
                  description: 'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.';
                  enum: ['true', 'false', 'legacy'];
                  type: 'string';
                };
                name: {
                  description: 'The name of the release.';
                  type: 'string';
                };
                prerelease: {
                  default: false;
                  description: '`true` to identify the release as a prerelease. `false` to identify the release as a full release.';
                  type: 'boolean';
                };
                tag_name: {
                  description: 'The name of the tag.';
                  type: 'string';
                };
                target_commitish: {
                  description: "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).";
                  type: 'string';
                };
              };
              required: ['tag_name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release';
                };
              };
              schema: {
                $ref: '#/components/schemas/release';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/releases/1';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Not Found if the discussion category name is invalid';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
        triggersNotification: true;
      };
    };
  };
  '/repos/{owner}/{repo}/releases/assets/{asset_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#delete-a-release-asset';
      };
      operationId: 'repos/delete-release-asset';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/asset-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a release asset';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    get: {
      description: "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-release-asset';
      };
      operationId: 'repos/get-release-asset';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/asset-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset';
                };
              };
              schema: {
                $ref: '#/components/schemas/release-asset';
              };
            };
          };
          description: 'Response';
        };
        '302': {
          $ref: '#/components/responses/found';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a release asset';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    patch: {
      description: 'Users with push access to the repository can edit a release asset.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#update-a-release-asset';
      };
      operationId: 'repos/update-release-asset';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/asset-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  label: 'Mac binary';
                  name: 'foo-1.0.0-osx.zip';
                };
              };
            };
            schema: {
              properties: {
                label: {
                  description: 'An alternate short description of the asset. Used in place of the filename.';
                  type: 'string';
                };
                name: {
                  description: 'The file name of the asset.';
                  type: 'string';
                };
                state: {
                  example: '"uploaded"';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset';
                };
              };
              schema: {
                $ref: '#/components/schemas/release-asset';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a release asset';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/generate-notes': {
    post: {
      description: 'Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#generate-release-notes';
      };
      operationId: 'repos/generate-release-notes';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  configuration_file_path: '.github/custom_release_config.yml';
                  previous_tag_name: 'v0.9.2';
                  tag_name: 'v1.0.0';
                  target_commitish: 'main';
                };
              };
            };
            schema: {
              properties: {
                configuration_file_path: {
                  description: "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.";
                  type: 'string';
                };
                previous_tag_name: {
                  description: 'The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.';
                  type: 'string';
                };
                tag_name: {
                  description: 'The tag name for the release. This can be an existing tag or a new one.';
                  type: 'string';
                };
                target_commitish: {
                  description: "Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.";
                  type: 'string';
                };
              };
              required: ['tag_name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-notes-content';
                };
              };
              schema: {
                $ref: '#/components/schemas/release-notes-content';
              };
            };
          };
          description: 'Name and body of generated release notes';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Generate release notes content for a release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/latest': {
    get: {
      description: 'View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-the-latest-release';
      };
      operationId: 'repos/get-latest-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release';
                };
              };
              schema: {
                $ref: '#/components/schemas/release';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the latest release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/tags/{tag}': {
    get: {
      description: 'Get a published release with the specified tag.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name';
      };
      operationId: 'repos/get-release-by-tag';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          description: 'tag parameter';
          in: 'path';
          name: 'tag';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release';
                };
              };
              schema: {
                $ref: '#/components/schemas/release';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a release by tag name';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/{release_id}': {
    delete: {
      description: 'Users with push access to the repository can delete a release.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#delete-a-release';
      };
      operationId: 'repos/delete-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    get: {
      description: '**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-a-release';
      };
      operationId: 'repos/get-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release';
                };
              };
              schema: {
                $ref: '#/components/schemas/release';
              };
            };
          };
          description: '**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    patch: {
      description: 'Users with push access to the repository can edit a release.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#update-a-release';
      };
      operationId: 'repos/update-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Description of the release';
                  draft: false;
                  name: 'v1.0.0';
                  prerelease: false;
                  tag_name: 'v1.0.0';
                  target_commitish: 'master';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'Text describing the contents of the tag.';
                  type: 'string';
                };
                discussion_category_name: {
                  description: 'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."';
                  type: 'string';
                };
                draft: {
                  description: '`true` makes the release a draft, and `false` publishes the release.';
                  type: 'boolean';
                };
                make_latest: {
                  default: true;
                  description: 'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.';
                  enum: ['true', 'false', 'legacy'];
                  type: 'string';
                };
                name: {
                  description: 'The name of the release.';
                  type: 'string';
                };
                prerelease: {
                  description: '`true` to identify the release as a prerelease, `false` to identify the release as a full release.';
                  type: 'boolean';
                };
                tag_name: {
                  description: 'The name of the tag.';
                  type: 'string';
                };
                target_commitish: {
                  description: "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).";
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release';
                };
              };
              schema: {
                $ref: '#/components/schemas/release';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Not Found if the discussion category name is invalid';
        };
      };
      summary: 'Update a release';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/{release_id}/assets': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-release-assets';
      };
      operationId: 'repos/list-release-assets';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/release-asset';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List release assets';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
    post: {
      description: 'This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou\'ll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n*   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). \n*   If you upload an asset with the same filename as another uploaded asset, you\'ll receive an error and must delete the old file before you can re-upload the new asset.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#upload-a-release-asset';
      };
      operationId: 'repos/upload-release-asset';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
        {
          in: 'query';
          name: 'name';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          in: 'query';
          name: 'label';
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/octet-stream': {
            examples: {
              default: {
                value: '@example.zip';
              };
            };
            schema: {
              description: 'The raw file data';
              format: 'binary';
              type: 'string';
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'response-for-successful-upload': {
                  $ref: '#/components/examples/release-asset-response-for-successful-upload';
                };
              };
              schema: {
                $ref: '#/components/schemas/release-asset';
              };
            };
          };
          description: 'Response for successful upload';
        };
        '422': {
          description: 'Response if you upload an asset with the same filename as another uploaded asset';
        };
      };
      servers: [
        {
          description: 'The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the "Create a release" endpoint';
          url: 'https://uploads.github.com';
        },
      ];
      summary: 'Upload a release asset';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'releases';
      };
    };
  };
  '/repos/{owner}/{repo}/releases/{release_id}/reactions': {
    get: {
      description: 'List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-release';
      };
      operationId: 'reactions/list-for-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', 'laugh', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List reactions for a release';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release';
      };
      operationId: 'reactions/create-for-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.';
                  enum: ['+1', 'laugh', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Reaction created';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create reaction for a release';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}': {
    delete: {
      description: '**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.\n\nDelete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#delete-a-release-reaction';
      };
      operationId: 'reactions/delete-for-release';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/release-id';
        },
        {
          $ref: '#/components/parameters/reaction-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a release reaction';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/secret-scanning/alerts': {
    get: {
      description: 'Lists secret scanning alerts for an eligible repository, from newest to oldest.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository';
      };
      operationId: 'secret-scanning/list-alerts-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution';
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-before-org-repo';
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-after-org-repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-list';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/secret-scanning-alert';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          description: 'Repository is public or secret scanning is disabled for the repository';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List secret scanning alerts for a repository';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}': {
    get: {
      description: 'Gets a single secret scanning alert detected in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert';
      };
      operationId: 'secret-scanning/get-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-open';
                };
              };
              schema: {
                $ref: '#/components/schemas/secret-scanning-alert';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          description: 'Repository is public, or secret scanning is disabled for the repository, or the resource is not found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Get a secret scanning alert';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: 'Updates the status of a secret scanning alert in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert';
      };
      operationId: 'secret-scanning/update-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  resolution: 'false_positive';
                  state: 'resolved';
                };
              };
            };
            schema: {
              properties: {
                resolution: {
                  $ref: '#/components/schemas/secret-scanning-alert-resolution';
                };
                resolution_comment: {
                  $ref: '#/components/schemas/secret-scanning-alert-resolution-comment';
                };
                state: {
                  $ref: '#/components/schemas/secret-scanning-alert-state';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-resolved';
                };
              };
              schema: {
                $ref: '#/components/schemas/secret-scanning-alert';
              };
            };
          };
          description: 'Response';
        };
        '400': {
          description: 'Bad request, resolution comment is invalid or the resolution was not changed.';
        };
        '404': {
          description: 'Repository is public, or secret scanning is disabled for the repository, or the resource is not found';
        };
        '422': {
          description: 'State does not match the resolution or resolution comment';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Update a secret scanning alert';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
  '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations': {
    get: {
      description: 'Lists all locations for a given secret scanning alert for an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert';
      };
      operationId: 'secret-scanning/list-locations-for-alert';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/alert-number';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-location-list';
                };
              };
              schema: {
                description: 'List of locations where the secret was detected';
                items: {
                  $ref: '#/components/schemas/secret-scanning-location';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          description: 'Repository is public, or secret scanning is disabled for the repository, or the resource is not found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'List locations for a secret scanning alert';
      tags: ['secret-scanning'];
      'x-github': {
        category: 'secret-scanning';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/stargazers': {
    get: {
      description: 'Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-stargazers';
      };
      operationId: 'activity/list-stargazers-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-star-creation-timestamps': {
                  $ref: '#/components/examples/stargazer-items-alternative-response-with-star-creation-timestamps';
                };
                'default-response': {
                  $ref: '#/components/examples/simple-user-items-default-response';
                };
              };
              schema: {
                anyOf: [
                  {
                    items: {
                      $ref: '#/components/schemas/simple-user';
                    };
                    type: 'array';
                  },
                  {
                    items: {
                      $ref: '#/components/schemas/stargazer';
                    };
                    type: 'array';
                  },
                ];
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List stargazers';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
  };
  '/repos/{owner}/{repo}/stats/code_frequency': {
    get: {
      description: 'Returns a weekly aggregate of the number of additions and deletions pushed to a repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity';
      };
      operationId: 'repos/get-code-frequency-stats';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-frequency-stat-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-frequency-stat';
                };
                type: 'array';
              };
            };
          };
          description: 'Returns a weekly aggregate of the number of additions and deletions pushed to a repository.';
        };
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '204': {
          $ref: '#/components/responses/no_content';
        };
      };
      summary: 'Get the weekly commit activity';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statistics';
      };
    };
  };
  '/repos/{owner}/{repo}/stats/commit_activity': {
    get: {
      description: 'Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity';
      };
      operationId: 'repos/get-commit-activity-stats';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-activity-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-activity';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '204': {
          $ref: '#/components/responses/no_content';
        };
      };
      summary: 'Get the last year of commit activity';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statistics';
      };
    };
  };
  '/repos/{owner}/{repo}/stats/contributors': {
    get: {
      description: '\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity';
      };
      operationId: 'repos/get-contributors-stats';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/contributor-activity-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/contributor-activity';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '204': {
          $ref: '#/components/responses/no_content';
        };
      };
      summary: 'Get all contributor commit activity';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statistics';
      };
    };
  };
  '/repos/{owner}/{repo}/stats/participation': {
    get: {
      description: "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count';
      };
      operationId: 'repos/get-participation-stats';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/participation-stats';
                };
              };
              schema: {
                $ref: '#/components/schemas/participation-stats';
              };
            };
          };
          description: 'The array order is oldest week (index 0) to most recent week.';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get the weekly commit count';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statistics';
      };
    };
  };
  '/repos/{owner}/{repo}/stats/punch_card': {
    get: {
      description: 'Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day';
      };
      operationId: 'repos/get-punch-card-stats';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-frequency-stat-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/code-frequency-stat';
                };
                type: 'array';
              };
            };
          };
          description: 'For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.';
        };
        '204': {
          $ref: '#/components/responses/no_content';
        };
      };
      summary: 'Get the hourly commit count for each day';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statistics';
      };
    };
  };
  '/repos/{owner}/{repo}/statuses/{sha}': {
    post: {
      description: 'Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/commits/statuses#create-a-commit-status';
      };
      operationId: 'repos/create-commit-status';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'sha';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  context: 'continuous-integration/jenkins';
                  description: 'The build succeeded!';
                  state: 'success';
                  target_url: 'https://example.com/build/status';
                };
              };
            };
            schema: {
              properties: {
                context: {
                  default: 'default';
                  description: 'A string label to differentiate this status from the status of other systems. This field is case-insensitive.';
                  type: 'string';
                };
                description: {
                  description: 'A short description of the status.';
                  nullable: true;
                  type: 'string';
                };
                state: {
                  description: 'The state of the status.';
                  enum: ['error', 'failure', 'pending', 'success'];
                  type: 'string';
                };
                target_url: {
                  description: 'The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`';
                  nullable: true;
                  type: 'string';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status';
                };
              };
              schema: {
                $ref: '#/components/schemas/status';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Create a commit status';
      tags: ['repos'];
      'x-github': {
        category: 'commits';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'statuses';
      };
    };
  };
  '/repos/{owner}/{repo}/subscribers': {
    get: {
      description: 'Lists the people watching the specified repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-watchers';
      };
      operationId: 'activity/list-watchers-for-repo';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List watchers';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
  };
  '/repos/{owner}/{repo}/subscription': {
    delete: {
      description: "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#delete-a-repository-subscription';
      };
      operationId: 'activity/delete-repo-subscription';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a repository subscription';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#get-a-repository-subscription';
      };
      operationId: 'activity/get-repo-subscription';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-you-subscribe-to-the-repository': {
                  $ref: '#/components/examples/repository-subscription-response-if-you-subscribe-to-the-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository-subscription';
              };
            };
          };
          description: 'if you subscribe to the repository';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          description: "Not Found if you don't subscribe to the repository";
        };
      };
      summary: 'Get a repository subscription';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
    put: {
      description: "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#set-a-repository-subscription';
      };
      operationId: 'activity/set-repo-subscription';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ignored: false;
                  subscribed: true;
                };
              };
            };
            schema: {
              properties: {
                ignored: {
                  description: 'Determines if all notifications should be blocked from this repository.';
                  type: 'boolean';
                };
                subscribed: {
                  description: 'Determines if notifications should be received from this repository.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-subscription';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository-subscription';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Set a repository subscription';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
  };
  '/repos/{owner}/{repo}/tags': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repository-tags';
      };
      operationId: 'repos/list-tags';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/tag';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository tags';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/tags/protection': {
    get: {
      description: 'This returns the tag protection states of a repository.\n\nThis information is only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-tag-protection-state-of-a-repository';
      };
      operationId: 'repos/list-tag-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-protection-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/tag-protection';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List tag protection states for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'tags';
      };
    };
    post: {
      description: 'This creates a tag protection state for a repository.\nThis endpoint is only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-tag-protection-state-for-a-repository';
      };
      operationId: 'repos/create-tag-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  pattern: 'v1.*';
                };
              };
            };
            schema: {
              properties: {
                pattern: {
                  description: 'An optional glob pattern to match against when enforcing tag protection.';
                  type: 'string';
                };
              };
              required: ['pattern'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-protection';
                };
              };
              schema: {
                $ref: '#/components/schemas/tag-protection';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Create a tag protection state for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'tags';
      };
    };
  };
  '/repos/{owner}/{repo}/tags/protection/{tag_protection_id}': {
    delete: {
      description: 'This deletes a tag protection state for a repository.\nThis endpoint is only available to repository administrators.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#delete-tag-protection-state-for-a-repository';
      };
      operationId: 'repos/delete-tag-protection';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/tag-protection-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a tag protection state for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'tags';
      };
    };
  };
  '/repos/{owner}/{repo}/tarball/{ref}': {
    get: {
      description: 'Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n**Note**: For private repositories, these links are temporary and expire after five minutes.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#download-a-repository-archive';
      };
      operationId: 'repos/download-tarball-archive';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              example: 'https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Download a repository archive (tar)';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
  };
  '/repos/{owner}/{repo}/teams': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repository-teams';
      };
      operationId: 'repos/list-teams';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repository teams';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/topics': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#get-all-repository-topics';
      };
      operationId: 'repos/get-all-topics';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic';
                };
              };
              schema: {
                $ref: '#/components/schemas/topic';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get all repository topics';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#replace-all-repository-topics';
      };
      operationId: 'repos/replace-all-topics';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  names: ['octocat', 'atom', 'electron', 'api'];
                };
              };
            };
            schema: {
              properties: {
                names: {
                  description: 'An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              required: ['names'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic';
                };
              };
              schema: {
                $ref: '#/components/schemas/topic';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Replace all repository topics';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/traffic/clones': {
    get: {
      description: 'Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/traffic#get-repository-clones';
      };
      operationId: 'repos/get-clones';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/clone-traffic';
                };
              };
              schema: {
                $ref: '#/components/schemas/clone-traffic';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get repository clones';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'traffic';
      };
    };
  };
  '/repos/{owner}/{repo}/traffic/popular/paths': {
    get: {
      description: 'Get the top 10 popular contents over the last 14 days.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/traffic#get-top-referral-paths';
      };
      operationId: 'repos/get-top-paths';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-traffic-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/content-traffic';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get top referral paths';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'traffic';
      };
    };
  };
  '/repos/{owner}/{repo}/traffic/popular/referrers': {
    get: {
      description: 'Get the top 10 referrers over the last 14 days.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/traffic#get-top-referral-sources';
      };
      operationId: 'repos/get-top-referrers';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/referrer-traffic-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/referrer-traffic';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get top referral sources';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'traffic';
      };
    };
  };
  '/repos/{owner}/{repo}/traffic/views': {
    get: {
      description: 'Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/metrics/traffic#get-page-views';
      };
      operationId: 'repos/get-views';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          $ref: '#/components/parameters/per';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/view-traffic';
                };
              };
              schema: {
                $ref: '#/components/schemas/view-traffic';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get page views';
      tags: ['repos'];
      'x-github': {
        category: 'metrics';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'traffic';
      };
    };
  };
  '/repos/{owner}/{repo}/transfer': {
    post: {
      description: 'A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#transfer-a-repository';
      };
      operationId: 'repos/transfer';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  new_name: 'octorepo';
                  new_owner: 'github';
                  team_ids: [12, 345];
                };
              };
            };
            schema: {
              properties: {
                new_name: {
                  description: 'The new name to be given to the repository.';
                  type: 'string';
                };
                new_owner: {
                  description: 'The username or organization name the repository will be transferred to.';
                  type: 'string';
                };
                team_ids: {
                  description: 'ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['new_owner'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/minimal-repository';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Transfer a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/vulnerability-alerts': {
    delete: {
      description: 'Disables dependency alerts and the dependency graph for a repository.\nThe authenticated user must have admin access to the repository. For more information,\nsee "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts';
      };
      operationId: 'repos/disable-vulnerability-alerts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Disable vulnerability alerts';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository';
      };
      operationId: 'repos/check-vulnerability-alerts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response if repository is enabled with vulnerability alerts';
        };
        '404': {
          description: 'Not Found if repository is not enabled with vulnerability alerts';
        };
      };
      summary: 'Check if vulnerability alerts are enabled for a repository';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    put: {
      description: 'Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts';
      };
      operationId: 'repos/enable-vulnerability-alerts';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Enable vulnerability alerts';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repos/{owner}/{repo}/zipball/{ref}': {
    get: {
      description: 'Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n**Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#download-a-repository-archive';
      };
      operationId: 'repos/download-zipball-archive';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
        {
          in: 'path';
          name: 'ref';
          required: true;
          schema: {
            type: 'string';
          };
          'x-multi-segment': true;
        },
      ];
      responses: {
        '302': {
          description: 'Response';
          headers: {
            Location: {
              example: 'https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Download a repository archive (zip)';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'contents';
      };
    };
  };
  '/repos/{template_owner}/{template_repo}/generate': {
    post: {
      description: "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template';
      };
      operationId: 'repos/create-using-template';
      parameters: [
        {
          in: 'path';
          name: 'template_owner';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          in: 'path';
          name: 'template_repo';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository';
                  include_all_branches: false;
                  name: 'Hello-World';
                  owner: 'octocat';
                  private: false;
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'A short description of the new repository.';
                  type: 'string';
                };
                include_all_branches: {
                  default: false;
                  description: 'Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.';
                  type: 'boolean';
                };
                name: {
                  description: 'The name of the new repository.';
                  type: 'string';
                };
                owner: {
                  description: 'The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.';
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Either `true` to create a new private repository or `false` to create a new public one.';
                  type: 'boolean';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-3';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World';
              schema: {
                type: 'string';
              };
            };
          };
        };
      };
      summary: 'Create a repository using a template';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repositories': {
    get: {
      description: 'Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-public-repositories';
      };
      operationId: 'repos/list-public';
      parameters: [
        {
          $ref: '#/components/parameters/since-repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              example: '<https://api.github.com/repositories?since=364>; rel="next"';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List public repositories';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/repositories/{repository_id}/environments/{environment_name}/secrets': {
    get: {
      description: 'Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#list-environment-secrets';
      };
      operationId: 'actions/list-environment-secrets';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/actions-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List environment secrets';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key': {
    get: {
      description: 'Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-an-environment-public-key';
      };
      operationId: 'actions/get-environment-public-key';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an environment public key';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}': {
    delete: {
      description: 'Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#delete-an-environment-secret';
      };
      operationId: 'actions/delete-environment-secret';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Default response';
        };
      };
      summary: 'Delete an environment secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: 'Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#get-an-environment-secret';
      };
      operationId: 'actions/get-environment-secret';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an environment secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates an environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret';
      };
      operationId: 'actions/create-or-update-environment-secret';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
              };
              required: ['encrypted_value', 'key_id'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response when creating a secret';
        };
        '204': {
          description: 'Response when updating a secret';
        };
      };
      summary: 'Create or update an environment secret';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/repositories/{repository_id}/environments/{environment_name}/variables': {
    get: {
      description: 'Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#list-environment-variables';
      };
      operationId: 'actions/list-environment-variables';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/variables-per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variables-paginated';
                };
              };
              schema: {
                properties: {
                  total_count: {
                    type: 'integer';
                  };
                  variables: {
                    items: {
                      $ref: '#/components/schemas/actions-variable';
                    };
                    type: 'array';
                  };
                };
                required: ['total_count', 'variables'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List environment variables';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    post: {
      description: 'Create an environment variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#create-an-environment-variable';
      };
      operationId: 'actions/create-environment-variable';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  value: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
              };
              required: ['name', 'value'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create an environment variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/repositories/{repository_id}/environments/{environment_name}/variables/{name}': {
    delete: {
      description: 'Deletes an environment variable using the variable name.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#delete-an-environment-variable';
      };
      operationId: 'actions/delete-environment-variable';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete an environment variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    get: {
      description: 'Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#get-an-environment-variable';
      };
      operationId: 'actions/get-environment-variable';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variable';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-variable';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get an environment variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
    patch: {
      description: 'Updates an environment variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/actions/variables#update-an-environment-variable';
      };
      operationId: 'actions/update-environment-variable';
      parameters: [
        {
          $ref: '#/components/parameters/repository-id';
        },
        {
          $ref: '#/components/parameters/variable-name';
        },
        {
          $ref: '#/components/parameters/environment-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME';
                  value: 'octocat';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.';
                  type: 'string';
                };
                value: {
                  description: 'The value of the variable.';
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Update an environment variable';
      tags: ['actions'];
      'x-github': {
        category: 'actions';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'variables';
      };
    };
  };
  '/search/code': {
    get: {
      description: "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-code';
      };
      operationId: 'search/code';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['indexed'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/code-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Search code';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/commits': {
    get: {
      description: 'Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-commits';
      };
      operationId: 'search/commits';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['author-date', 'committer-date'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/commit-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Search commits';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/issues': {
    get: {
      description: 'Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can\'t retrieve a combination of issues and pull requests in a single query. Requests that don\'t include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-issues-and-pull-requests';
      };
      operationId: 'search/issues-and-pull-requests';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: [
              'comments',
              'reactions',
              'reactions-+1',
              'reactions--1',
              'reactions-smile',
              'reactions-thinking_face',
              'reactions-heart',
              'reactions-tada',
              'interactions',
              'created',
              'updated',
            ];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/issue-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Search issues and pull requests';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/labels': {
    get: {
      description: 'Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-labels';
      };
      operationId: 'search/labels';
      parameters: [
        {
          description: 'The id of the repository.';
          in: 'query';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
        {
          description: 'The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['created', 'updated'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/label-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Search labels';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/repositories': {
    get: {
      description: 'Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-repositories';
      };
      operationId: 'search/repos';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['stars', 'forks', 'help-wanted-issues', 'updated'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/repo-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Search repositories';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/topics': {
    get: {
      description: 'Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic\'s **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-topics';
      };
      operationId: 'search/topics';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/topic-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'Search topics';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/search/users': {
    get: {
      description: "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/search#search-users';
      };
      operationId: 'search/users';
      parameters: [
        {
          description: 'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.';
          in: 'query';
          name: 'q';
          required: true;
          schema: {
            type: 'string';
          };
        },
        {
          description: 'Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            enum: ['followers', 'repositories', 'joined'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/order';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-search-result-item-paginated';
                };
              };
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean';
                  };
                  items: {
                    items: {
                      $ref: '#/components/schemas/user-search-result-item';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'incomplete_results', 'items'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Search users';
      tags: ['search'];
      'x-github': {
        category: 'search';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}': {
    delete: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#delete-a-team-legacy';
      };
      operationId: 'teams/delete-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete a team (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#get-a-team-legacy';
      };
      operationId: 'teams/get-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a team (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    patch: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#update-a-team-legacy';
      };
      operationId: 'teams/update-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'new team description';
                  name: 'new team name';
                  privacy: 'closed';
                };
              };
            };
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.';
                  type: 'string';
                };
                name: {
                  description: 'The name of the team.';
                  type: 'string';
                };
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.';
                  nullable: true;
                  type: 'integer';
                };
                permission: {
                  default: 'pull';
                  description: '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.';
                  enum: ['pull', 'push', 'admin'];
                  type: 'string';
                };
                privacy: {
                  description: 'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.';
                  enum: ['secret', 'closed'];
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response when the updated information already exists';
        };
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-full';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update a team (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/discussions': {
    get: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-discussions-legacy';
      };
      operationId: 'teams/list-discussions-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List discussions (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussions';
      };
    };
    post: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team\'s page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-legacy';
      };
      operationId: 'teams/create-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Hi! This is an area for us to collaborate as a team.';
                  title: 'Our first team post';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.";
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.';
                  type: 'boolean';
                };
                title: {
                  description: "The discussion post's title.";
                  type: 'string';
                };
              };
              required: ['title', 'body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a discussion (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussions';
        triggersNotification: true;
      };
    };
  };
  '/teams/{team_id}/discussions/{discussion_number}': {
    delete: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy';
      };
      operationId: 'teams/delete-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a discussion (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussions';
      };
    };
    get: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-legacy';
      };
      operationId: 'teams/get-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a discussion (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussions';
      };
    };
    patch: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-legacy';
      };
      operationId: 'teams/update-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  title: 'Welcome to our first team post';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.";
                  type: 'string';
                };
                title: {
                  description: "The discussion post's title.";
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a discussion (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussions';
      };
    };
  };
  '/teams/{team_id}/discussions/{discussion_number}/comments': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy';
      };
      operationId: 'teams/list-discussion-comments-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion-comment';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List discussion comments (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussion-comments';
      };
    };
    post: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy';
      };
      operationId: 'teams/create-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like apples?';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.";
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create a discussion comment (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussion-comments';
        triggersNotification: true;
      };
    };
  };
  '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}': {
    delete: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy';
      };
      operationId: 'teams/delete-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a discussion comment (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussion-comments';
      };
    };
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy';
      };
      operationId: 'teams/get-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a discussion comment (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussion-comments';
      };
    };
    patch: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy';
      };
      operationId: 'teams/update-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like pineapples?';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.";
                  type: 'string';
                };
              };
              required: ['body'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-discussion-comment';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Update a discussion comment (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'discussion-comments';
      };
    };
  };
  '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy';
      };
      operationId: 'reactions/list-for-team-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List reactions for a team discussion comment (Legacy)';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        deprecationDate: '2020-02-26';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-21';
        subcategory: null;
      };
    };
    post: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.\n\nCreate a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy';
      };
      operationId: 'reactions/create-for-team-discussion-comment-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          $ref: '#/components/parameters/comment-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create reaction for a team discussion comment (Legacy)';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        deprecationDate: '2020-02-26';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-21';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/discussions/{discussion_number}/reactions': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy';
      };
      operationId: 'reactions/list-for-team-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
        {
          description: 'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.';
          in: 'query';
          name: 'content';
          required: false;
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List reactions for a team discussion (Legacy)';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        deprecationDate: '2020-02-26';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-21';
        subcategory: null;
      };
    };
    post: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy';
      };
      operationId: 'reactions/create-for-team-discussion-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/discussion-number';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart';
                };
              };
            };
            schema: {
              properties: {
                content: {
                  description: 'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.';
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'];
                  type: 'string';
                };
              };
              required: ['content'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction';
                };
              };
              schema: {
                $ref: '#/components/schemas/reaction';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Create reaction for a team discussion (Legacy)';
      tags: ['reactions'];
      'x-github': {
        category: 'reactions';
        deprecationDate: '2020-02-26';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        removalDate: '2021-02-21';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/invitations': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy';
      };
      operationId: 'teams/list-pending-invitations-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List pending team invitations (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
  };
  '/teams/{team_id}/members': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.\n\nTeam members will include the members of child teams.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-team-members-legacy';
      };
      operationId: 'teams/list-members-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          description: 'Filters members returned by their role in the team.';
          in: 'query';
          name: 'role';
          required: false;
          schema: {
            default: 'all';
            enum: ['member', 'maintainer', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List team members (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
  };
  '/teams/{team_id}/members/{username}': {
    delete: {
      deprecated: true;
      description: "The \"Remove team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#remove-team-member-legacy';
      };
      operationId: 'teams/remove-member-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          description: 'Not Found if team synchronization is setup';
        };
      };
      summary: 'Remove team member (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
    get: {
      deprecated: true;
      description: 'The "Get team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-team-member-legacy';
      };
      operationId: 'teams/get-member-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'if user is a member';
        };
        '404': {
          description: 'if user is not a member';
        };
      };
      summary: 'Get team member (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
    put: {
      deprecated: true;
      description: 'The "Add team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they\'re changing. The person being added to the team must be a member of the team\'s organization.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#add-team-member-legacy';
      };
      operationId: 'teams/add-member-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          description: 'Not Found if team synchronization is set up';
        };
        '422': {
          description: 'Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization';
        };
      };
      summary: 'Add team member (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
  };
  '/teams/{team_id}/memberships/{username}': {
    delete: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy';
      };
      operationId: 'teams/remove-membership-for-user-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          description: 'if team synchronization is set up';
        };
      };
      summary: 'Remove team membership for a user (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
    get: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy';
      };
      operationId: 'teams/get-membership-for-user-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-team-maintainer': {
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-membership';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get team membership for a user (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
    put: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team\'s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nIf the user is unaffiliated with the team\'s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy';
      };
      operationId: 'teams/add-or-update-membership-for-user-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Assign the member role for a user in a team';
                value: {
                  role: 'member';
                };
              };
            };
            schema: {
              properties: {
                role: {
                  default: 'member';
                  description: 'The role that this user should have in the team.';
                  enum: ['member', 'maintainer'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-users-membership-with-team-is-now-pending': {
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          description: 'Forbidden if team synchronization is set up';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          description: 'Unprocessable Entity if you attempt to add an organization to a team';
        };
      };
      summary: 'Add or update team membership for a user (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: 'members';
      };
    };
  };
  '/teams/{team_id}/projects': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.\n\nLists the organization projects for a team.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#list-team-projects-legacy';
      };
      operationId: 'teams/list-projects-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-project';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List team projects (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/projects/{project_id}': {
    delete: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.\n\nRemoves an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy';
      };
      operationId: 'teams/remove-project-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Remove a project from a team (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy';
      };
      operationId: 'teams/check-permissions-for-project-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-project';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          description: 'Not Found if project is not managed by this team';
        };
      };
      summary: 'Check team permissions for a project (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    put: {
      deprecated: true;
      description: "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.\n\nAdds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy';
      };
      operationId: 'teams/add-or-update-project-permissions-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/project-id';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of setting permission to read';
                value: {
                  permission: 'read';
                };
              };
            };
            schema: {
              properties: {
                permission: {
                  description: 'The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
                  enum: ['read', 'write', 'admin'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          content: {
            'application/json': {
              examples: {
                'response-if-the-project-is-not-owned-by-the-organization': {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions';
                    message: 'Must have admin rights to Repository.';
                  };
                };
              };
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string';
                  };
                  message: {
                    type: 'string';
                  };
                };
                type: 'object';
              };
            };
          };
          description: 'Forbidden if the project is not owned by the organization';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add or update team project permissions (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/repos': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy';
      };
      operationId: 'teams/list-repos-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List team repositories (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/repos/{owner}/{repo}': {
    delete: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy';
      };
      operationId: 'teams/remove-repo-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove a repository from a team (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    get: {
      deprecated: true;
      description: '**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy';
      };
      operationId: 'teams/check-permissions-for-repo-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-extra-repository-information': {
                  $ref: '#/components/examples/team-repository-alternative-response-with-extra-repository-information';
                };
              };
              schema: {
                $ref: '#/components/schemas/team-repository';
              };
            };
          };
          description: 'Alternative response with extra repository information';
        };
        '204': {
          description: 'Response if repository is managed by this team';
        };
        '404': {
          description: 'Not Found if repository is not managed by this team';
        };
      };
      summary: 'Check team permissions for a repository (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
    put: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.\n\nTo add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions-legacy';
      };
      operationId: 'teams/add-or-update-repo-permissions-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of setting permission to pull';
                value: {
                  permission: 'push';
                };
              };
            };
            schema: {
              properties: {
                permission: {
                  description: "The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.";
                  enum: ['pull', 'push', 'admin'];
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add or update team repository permissions (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/teams/{team_id}/teams': {
    get: {
      deprecated: true;
      description: '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams/#list-child-teams-legacy';
      };
      operationId: 'teams/list-child-legacy';
      parameters: [
        {
          $ref: '#/components/parameters/team-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-child-teams-exist': {
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team';
                };
                type: 'array';
              };
            };
          };
          description: 'if child teams exist';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List child teams (Legacy)';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        deprecationDate: '2020-01-21';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        removalDate: '2021-02-01';
        subcategory: null;
      };
    };
  };
  '/user': {
    get: {
      description: 'If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n\nIf the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-the-authenticated-user';
      };
      operationId: 'users/get-authenticated';
      parameters: [];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-with-public-and-private-profile-information': {
                  $ref: '#/components/examples/private-user-response-with-public-and-private-profile-information';
                };
                'response-with-public-profile-information': {
                  $ref: '#/components/examples/private-user-response-with-public-profile-information';
                };
              };
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/private-user';
                  },
                  {
                    $ref: '#/components/schemas/public-user';
                  },
                ];
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Get the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: '**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users/#update-the-authenticated-user';
      };
      operationId: 'users/update-authenticated';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of updating blog and name';
                value: {
                  blog: 'https://github.com/blog';
                  name: 'monalisa octocat';
                };
              };
            };
            schema: {
              properties: {
                bio: {
                  description: 'The new short biography of the user.';
                  type: 'string';
                };
                blog: {
                  description: 'The new blog URL of the user.';
                  example: 'blog.example.com';
                  type: 'string';
                };
                company: {
                  description: 'The new company of the user.';
                  example: 'Acme corporation';
                  type: 'string';
                };
                email: {
                  description: 'The publicly visible email address of the user.';
                  example: 'omar@example.com';
                  type: 'string';
                };
                hireable: {
                  description: 'The new hiring availability of the user.';
                  type: 'boolean';
                };
                location: {
                  description: 'The new location of the user.';
                  example: 'Berlin, Germany';
                  type: 'string';
                };
                name: {
                  description: 'The new name of the user.';
                  example: 'Omar Jahandar';
                  type: 'string';
                };
                twitter_username: {
                  description: 'The new Twitter username of the user.';
                  example: 'therealomarj';
                  nullable: true;
                  type: 'string';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/private-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/private-user';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/blocks': {
    get: {
      description: "List the users you've blocked on your personal account.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user';
      };
      operationId: 'users/list-blocked-by-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List users blocked by the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
  };
  '/user/blocks/{username}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#unblock-a-user';
      };
      operationId: 'users/unblock';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unblock a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user';
      };
      operationId: 'users/check-blocked';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'If the user is blocked';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'If the user is not blocked';
        };
      };
      summary: 'Check if a user is blocked by the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
    put: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#block-a-user';
      };
      operationId: 'users/block';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Block a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'blocking';
      };
    };
  };
  '/user/codespaces': {
    get: {
      description: "Lists the authenticated user's codespaces.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user';
      };
      operationId: 'codespaces/list-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/repository-id-in-query';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list';
                };
              };
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'codespaces'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List codespaces for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates a new codespace, owned by the authenticated user.\n\nThis endpoint requires either a `repository_id` OR a `pull_request` but not both.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/create-for-authenticated-user';
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  location: 'WestUs2';
                  ref: 'main';
                  repository_id: 1;
                };
              };
            };
            schema: {
              oneOf: [
                {
                  properties: {
                    client_ip: {
                      description: 'IP for location auto-detection when proxying a request';
                      type: 'string';
                    };
                    devcontainer_path: {
                      description: 'Path to devcontainer.json config to use for this codespace';
                      type: 'string';
                    };
                    display_name: {
                      description: 'Display name for this codespace';
                      type: 'string';
                    };
                    idle_timeout_minutes: {
                      description: 'Time in minutes before codespace stops from inactivity';
                      type: 'integer';
                    };
                    location: {
                      description: 'Location for this codespace. Assigned by IP if not provided';
                      type: 'string';
                    };
                    machine: {
                      description: 'Machine type to use for this codespace';
                      type: 'string';
                    };
                    multi_repo_permissions_opt_out: {
                      description: 'Whether to authorize requested permissions from devcontainer.json';
                      type: 'boolean';
                    };
                    ref: {
                      description: 'Git ref (typically a branch name) for this codespace';
                      type: 'string';
                    };
                    repository_id: {
                      description: 'Repository id for this codespace';
                      type: 'integer';
                    };
                    retention_period_minutes: {
                      description: 'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).';
                      type: 'integer';
                    };
                    working_directory: {
                      description: 'Working directory for this codespace';
                      type: 'string';
                    };
                  };
                  required: ['repository_id'];
                  type: 'object';
                },
                {
                  properties: {
                    devcontainer_path: {
                      description: 'Path to devcontainer.json config to use for this codespace';
                      type: 'string';
                    };
                    idle_timeout_minutes: {
                      description: 'Time in minutes before codespace stops from inactivity';
                      type: 'integer';
                    };
                    location: {
                      description: 'Location for this codespace. Assigned by IP if not provided';
                      type: 'string';
                    };
                    machine: {
                      description: 'Machine type to use for this codespace';
                      type: 'string';
                    };
                    pull_request: {
                      description: 'Pull request number for this codespace';
                      properties: {
                        pull_request_number: {
                          description: 'Pull request number';
                          type: 'integer';
                        };
                        repository_id: {
                          description: 'Repository id for this codespace';
                          type: 'integer';
                        };
                      };
                      required: ['pull_request_number', 'repository_id'];
                      type: 'object';
                    };
                    working_directory: {
                      description: 'Working directory for this codespace';
                      type: 'string';
                    };
                  };
                  required: ['pull_request'];
                  type: 'object';
                },
              ];
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace was successfully created';
        };
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response when the codespace creation partially failed but is being retried in the background';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '503': {
          $ref: '#/components/responses/service_unavailable';
        };
      };
      summary: 'Create a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/secrets': {
    get: {
      description: "Lists all secrets available for a user's Codespaces without revealing their\nencrypted values.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user';
      };
      operationId: 'codespaces/list-secrets-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated';
                };
              };
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/codespaces-secret';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'secrets'];
                type: 'object';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List secrets for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/user/codespaces/secrets/public-key': {
    get: {
      description: 'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user';
      };
      operationId: 'codespaces/get-public-key-for-authenticated-user';
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-user-public-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespaces-user-public-key';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get public key for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/user/codespaces/secrets/{secret_name}': {
    delete: {
      description: "Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user';
      };
      operationId: 'codespaces/delete-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Delete a secret for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    get: {
      description: "Gets a secret available to a user's codespaces without revealing its encrypted value.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user';
      };
      operationId: 'codespaces/get-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-codespaces-secret';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespaces-secret';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a secret for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: 'Creates or updates a secret for a user\'s codespace with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user';
      };
      operationId: 'codespaces/create-or-update-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0';
                  key_id: '012345678912345678';
                  selected_repository_ids: ['1234567', '2345678'];
                };
              };
            };
            schema: {
              properties: {
                encrypted_value: {
                  description: 'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.';
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$';
                  type: 'string';
                };
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.';
                  type: 'string';
                };
                selected_repository_ids: {
                  description: 'An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.';
                  items: {
                    anyOf: [
                      {
                        type: 'integer';
                      },
                      {
                        type: 'string';
                      },
                    ];
                  };
                  type: 'array';
                };
              };
              required: ['key_id'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null;
                };
              };
              schema: {
                $ref: '#/components/schemas/empty-object';
              };
            };
          };
          description: 'Response after successfully creating a secret';
        };
        '204': {
          description: 'Response after successfully updating a secret';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create or update a secret for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/user/codespaces/secrets/{secret_name}/repositories': {
    get: {
      description: "List the repositories that have been granted the ability to use a user's codespace secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret';
      };
      operationId: 'codespaces/list-repositories-for-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List selected repositories for a user secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: "Select the repositories that will use a user's codespace secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret';
      };
      operationId: 'codespaces/set-repositories-for-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: ['1296269', '1296280'];
                };
              };
            };
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.';
                  items: {
                    type: 'integer';
                  };
                  type: 'array';
                };
              };
              required: ['selected_repository_ids'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '204': {
          description: 'No Content when repositories were added to the selected list';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Set selected repositories for a user secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description: "Removes a repository from the selected repositories for a user's codespace secret.\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret';
      };
      operationId: 'codespaces/remove-repository-for-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'No Content when repository was removed from the selected list';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Remove a selected repository from a user secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
    put: {
      description: "Adds a repository to the selected repositories for a user's codespace secret.\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret';
      };
      operationId: 'codespaces/add-repository-for-secret-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/secret-name';
        },
        {
          in: 'path';
          name: 'repository_id';
          required: true;
          schema: {
            type: 'integer';
          };
        },
      ];
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Add a selected repository to a user secret';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'secrets';
      };
    };
  };
  '/user/codespaces/{codespace_name}': {
    delete: {
      description: "Deletes a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/delete-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '202': {
          $ref: '#/components/responses/accepted';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Delete a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: "Gets information about a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/get-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Get a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    patch: {
      description: "Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.\n\nIf you specify a new machine type it will be applied the next time your codespace is started.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/update-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  machine: 'standardLinux';
                };
              };
            };
            schema: {
              properties: {
                display_name: {
                  description: 'Display name for this codespace';
                  type: 'string';
                };
                machine: {
                  description: 'A valid machine to transition this codespace to.';
                  type: 'string';
                };
                recent_folders: {
                  description: 'Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.';
                  items: {
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              type: 'object';
            };
          };
        };
        required: false;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Update a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/{codespace_name}/exports': {
    post: {
      description: "Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.\n\nIf changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/export-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-export-details';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace-export-details';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Export a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/{codespace_name}/exports/{export_id}': {
    get: {
      description: 'Gets information about an export of a codespace.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export';
      };
      operationId: 'codespaces/get-export-details-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
        {
          $ref: '#/components/parameters/export-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-export-details';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace-export-details';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get details about a codespace export';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/{codespace_name}/machines': {
    get: {
      description: 'List the machine types a codespace can transition to use.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace';
      };
      operationId: 'codespaces/codespace-machines-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-machines-list';
                };
              };
              schema: {
                properties: {
                  machines: {
                    items: {
                      $ref: '#/components/schemas/codespace-machine';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'machines'];
                type: 'object';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'List machine types for a codespace';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'machines';
      };
    };
  };
  '/user/codespaces/{codespace_name}/publish': {
    post: {
      description: "Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.\n\nThe codespace's token is granted write permissions to the repository, allowing the user to push their changes.\n\nThis will fail for a codespace that is already published, meaning it has an associated repository.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace';
      };
      operationId: 'codespaces/publish-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  private: false;
                  repository: 'monalisa-octocat-hello-world-g4wpq6h95q';
                };
              };
            };
            schema: {
              properties: {
                name: {
                  description: 'A name for the new repository.';
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Whether the new repository should be private.';
                  type: 'boolean';
                };
              };
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-with-full-repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace-with-full-repository';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a repository from an unpublished codespace';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/{codespace_name}/start': {
    post: {
      description: "Starts a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/start-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '402': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Payment required';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Start a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/codespaces/{codespace_name}/stop': {
    post: {
      description: "Stops a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user';
      };
      operationId: 'codespaces/stop-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace';
                };
              };
              schema: {
                $ref: '#/components/schemas/codespace';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '500': {
          $ref: '#/components/responses/internal_error';
        };
      };
      summary: 'Stop a codespace for the authenticated user';
      tags: ['codespaces'];
      'x-github': {
        category: 'codespaces';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/email/visibility': {
    patch: {
      description: 'Sets the visibility for your primary email addresses.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user';
      };
      operationId: 'users/set-primary-email-visibility-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example setting the primary email address to private';
                value: {
                  visibility: 'private';
                };
              };
            };
            schema: {
              properties: {
                visibility: {
                  description: 'Denotes whether an email is publicly visible.';
                  enum: ['public', 'private'];
                  type: 'string';
                };
              };
              required: ['visibility'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-3';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/email';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set primary email visibility for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'emails';
      };
    };
  };
  '/user/emails': {
    delete: {
      description: 'This endpoint is accessible with the `user` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user';
      };
      operationId: 'users/delete-email-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example deleting multiple email accounts';
                value: {
                  emails: ['octocat@github.com', 'mona@github.com'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  description: 'Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.';
                  example: {
                    emails: ['octocat@github.com', 'mona@github.com'];
                  };
                  properties: {
                    emails: {
                      description: 'Email addresses associated with the GitHub user account.';
                      items: {
                        example: 'username@example.com';
                        minItems: 1;
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['emails'];
                  type: 'object';
                },
                {
                  items: {
                    example: 'username@example.com';
                    minItems: 1;
                    type: 'string';
                  };
                  type: 'array';
                },
                {
                  type: 'string';
                },
              ];
            };
          };
        };
      };
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete an email address for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'emails';
      };
    };
    get: {
      description: 'Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user';
      };
      operationId: 'users/list-emails-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/email';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List email addresses for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'emails';
      };
    };
    post: {
      description: 'This endpoint is accessible with the `user` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user';
      };
      operationId: 'users/add-email-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding multiple email addresses';
                value: {
                  emails: ['octocat@github.com', 'mona@github.com', 'octocat@octocat.org'];
                };
              };
            };
            schema: {
              oneOf: [
                {
                  example: {
                    emails: ['octocat@github.com', 'mona@github.com'];
                  };
                  properties: {
                    emails: {
                      description: 'Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.';
                      example: [];
                      items: {
                        example: 'username@example.com';
                        minItems: 1;
                        type: 'string';
                      };
                      type: 'array';
                    };
                  };
                  required: ['emails'];
                  type: 'object';
                },
                {
                  items: {
                    example: 'username@example.com';
                    minItems: 1;
                    type: 'string';
                  };
                  type: 'array';
                },
                {
                  type: 'string';
                },
              ];
            };
          };
        };
        required: false;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/email';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Add an email address for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'emails';
      };
    };
  };
  '/user/followers': {
    get: {
      description: 'Lists the people following the authenticated user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user';
      };
      operationId: 'users/list-followers-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List followers of the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/user/following': {
    get: {
      description: 'Lists the people who the authenticated user follows.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows';
      };
      operationId: 'users/list-followed-by-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List the people the authenticated user follows';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/user/following/{username}': {
    delete: {
      description: 'Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#unfollow-a-user';
      };
      operationId: 'users/unfollow';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unfollow a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user';
      };
      operationId: 'users/check-person-is-followed-by-authenticated';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'if the person is followed by the authenticated user';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'if the person is not followed by the authenticated user';
        };
      };
      summary: 'Check if a person is followed by the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
    put: {
      description: 'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\nFollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#follow-a-user';
      };
      operationId: 'users/follow';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Follow a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/user/gpg_keys': {
    get: {
      description: "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user';
      };
      operationId: 'users/list-gpg-keys-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/gpg-key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List GPG keys for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'gpg-keys';
      };
    };
    post: {
      description: "Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user';
      };
      operationId: 'users/create-gpg-key-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  armored_public_key: '-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1\n\nmQINBFnZ2ZIBEADQ2Z7Z7\n-----END PGP PUBLIC KEY BLOCK-----';
                  name: "Octocat's GPG Key";
                };
              };
            };
            schema: {
              properties: {
                armored_public_key: {
                  description: 'A GPG key in ASCII-armored format.';
                  type: 'string';
                };
                name: {
                  description: 'A descriptive name for the new key.';
                  type: 'string';
                };
              };
              required: ['armored_public_key'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/gpg-key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a GPG key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'gpg-keys';
      };
    };
  };
  '/user/gpg_keys/{gpg_key_id}': {
    delete: {
      description: "Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user';
      };
      operationId: 'users/delete-gpg-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/gpg-key-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Delete a GPG key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'gpg-keys';
      };
    };
    get: {
      description: 'View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user';
      };
      operationId: 'users/get-gpg-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/gpg-key-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/gpg-key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a GPG key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'gpg-keys';
      };
    };
  };
  '/user/installations': {
    get: {
      description: 'Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token';
      };
      operationId: 'apps/list-installations-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation-for-auth-user-paginated';
                };
              };
              schema: {
                properties: {
                  installations: {
                    items: {
                      $ref: '#/components/schemas/installation';
                    };
                    type: 'array';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'installations'];
                type: 'object';
              };
            };
          };
          description: 'You can find the permissions for the installation under the `permissions` key.';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List app installations accessible to the user access token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
  };
  '/user/installations/{installation_id}/repositories': {
    get: {
      description: 'List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token';
      };
      operationId: 'apps/list-installation-repos-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated';
                };
              };
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository';
                    };
                    type: 'array';
                  };
                  repository_selection: {
                    type: 'string';
                  };
                  total_count: {
                    type: 'integer';
                  };
                };
                required: ['total_count', 'repositories'];
                type: 'object';
              };
            };
          };
          description: 'The access the user has to each repository is included in the hash under the `permissions` key.';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repositories accessible to the user access token';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
  };
  '/user/installations/{installation_id}/repositories/{repository_id}': {
    delete: {
      description: 'Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation';
      };
      operationId: 'apps/remove-repo-from-installation-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Remove a repository from an app installation';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
    put: {
      description: 'Add a single repository to an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation';
      };
      operationId: 'apps/add-repo-to-installation-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/installation-id';
        },
        {
          $ref: '#/components/parameters/repository-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Add a repository to an app installation';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'installations';
      };
    };
  };
  '/user/interaction-limits': {
    delete: {
      description: 'Removes any interaction restrictions from your public repositories.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories';
      };
      operationId: 'interactions/remove-restrictions-for-authenticated-user';
      responses: {
        '204': {
          description: 'Response';
        };
      };
      summary: 'Remove interaction restrictions from your public repositories';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'user';
      };
    };
    get: {
      description: 'Shows which type of GitHub user can interact with your public repositories and when the restriction expires.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories';
      };
      operationId: 'interactions/get-restrictions-for-authenticated-user';
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response';
                };
              };
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response';
                  },
                  {
                    additionalProperties: false;
                    properties: {};
                    type: 'object';
                  },
                ];
              };
            };
          };
          description: 'Default response';
        };
        '204': {
          description: 'Response when there are no restrictions';
        };
      };
      summary: 'Get interaction restrictions for your public repositories';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'user';
      };
    };
    put: {
      description: 'Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories';
      };
      operationId: 'interactions/set-restrictions-for-authenticated-user';
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expiry: 'one_month';
                  limit: 'collaborators_only';
                };
              };
            };
            schema: {
              $ref: '#/components/schemas/interaction-limit';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/interaction-limit-response';
              };
            };
          };
          description: 'Response';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Set interaction restrictions for your public repositories';
      tags: ['interactions'];
      'x-github': {
        category: 'interactions';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'user';
      };
    };
  };
  '/user/issues': {
    get: {
      description: 'List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user';
      };
      operationId: 'issues/list-for-authenticated-user';
      parameters: [
        {
          description: "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.";
          in: 'query';
          name: 'filter';
          required: false;
          schema: {
            default: 'assigned';
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'];
            type: 'string';
          };
        },
        {
          description: 'Indicates the state of the issues to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/labels';
        },
        {
          description: 'What to sort results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'created';
            enum: ['created', 'updated', 'comments'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/issue';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List user account issues assigned to the authenticated user';
      tags: ['issues'];
      'x-github': {
        category: 'issues';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/keys': {
    get: {
      description: "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user';
      };
      operationId: 'users/list-public-ssh-keys-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List public SSH keys for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'keys';
      };
    };
    post: {
      description: "Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user';
      };
      operationId: 'users/create-public-ssh-key-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: '2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234';
                  title: 'ssh-rsa AAAAB3NzaC1yc2EAAA';
                };
              };
            };
            schema: {
              properties: {
                key: {
                  description: 'The public SSH key to add to your GitHub account.';
                  pattern: '^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ';
                  type: 'string';
                };
                title: {
                  description: 'A descriptive name for the new key.';
                  example: 'Personal MacBook Air';
                  type: 'string';
                };
              };
              required: ['key'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key';
                };
              };
              schema: {
                $ref: '#/components/schemas/key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a public SSH key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'keys';
      };
    };
  };
  '/user/keys/{key_id}': {
    delete: {
      description: "Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user';
      };
      operationId: 'users/delete-public-ssh-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/key-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a public SSH key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'keys';
      };
    };
    get: {
      description: 'View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user';
      };
      operationId: 'users/get-public-ssh-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/key-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key';
                };
              };
              schema: {
                $ref: '#/components/schemas/key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a public SSH key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'keys';
      };
    };
  };
  '/user/marketplace_purchases': {
    get: {
      description: 'Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user';
      };
      operationId: 'apps/list-subscriptions-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-marketplace-purchase-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/user-marketplace-purchase';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List subscriptions for the authenticated user';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/user/marketplace_purchases/stubbed': {
    get: {
      description: 'Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed';
      };
      operationId: 'apps/list-subscriptions-for-authenticated-user-stubbed';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-marketplace-purchase-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/user-marketplace-purchase';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
      };
      summary: 'List subscriptions for the authenticated user (stubbed)';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'marketplace';
      };
    };
  };
  '/user/memberships/orgs': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user';
      };
      operationId: 'orgs/list-memberships-for-authenticated-user';
      parameters: [
        {
          description: 'Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            enum: ['active', 'pending'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/org-membership';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List organization memberships for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/user/memberships/orgs/{org}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user';
      };
      operationId: 'orgs/get-membership-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an organization membership for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user';
      };
      operationId: 'orgs/update-membership-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/org';
        },
      ];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  state: 'active';
                };
              };
            };
            schema: {
              properties: {
                state: {
                  description: 'The state that the membership should be in. Only `"active"` will be accepted.';
                  enum: ['active'];
                  type: 'string';
                };
              };
              required: ['state'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/org-membership';
              };
            };
          };
          description: 'Response';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Update an organization membership for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'members';
      };
    };
  };
  '/user/migrations': {
    get: {
      description: 'Lists all migrations a user has started.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#list-user-migrations';
      };
      operationId: 'migrations/list-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/migration';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List user migrations';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
    post: {
      description: 'Initiates the generation of a user migration archive.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#start-a-user-migration';
      };
      operationId: 'migrations/start-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  lock_repositories: true;
                  repositories: ['octocat/Hello-World'];
                };
              };
            };
            schema: {
              properties: {
                exclude: {
                  description: 'Exclude attributes from the API response to improve performance';
                  example: ['repositories'];
                  items: {
                    description: 'Allowed values that can be passed to the exclude param.';
                    enum: ['repositories'];
                    example: 'repositories';
                    type: 'string';
                  };
                  readOnly: false;
                  type: 'array';
                };
                exclude_attachments: {
                  description: 'Do not include attachments in the migration';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                exclude_git_data: {
                  description: 'Indicates whether the repository git data should be excluded from the migration.';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                exclude_metadata: {
                  description: 'Indicates whether metadata should be excluded and only git source should be included for the migration.';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                exclude_owner_projects: {
                  description: 'Indicates whether projects owned by the organization or users should be excluded.';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                exclude_releases: {
                  description: 'Do not include releases in the migration';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                lock_repositories: {
                  description: 'Lock the repositories being migrated at the start of the migration';
                  example: true;
                  readOnly: false;
                  type: 'boolean';
                };
                org_metadata_only: {
                  default: false;
                  description: 'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).';
                  example: true;
                  type: 'boolean';
                };
                repositories: {
                  items: {
                    description: 'Repository path, owner and name';
                    example: 'acme/widgets';
                    type: 'string';
                  };
                  type: 'array';
                };
              };
              required: ['repositories'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-2';
                };
              };
              schema: {
                $ref: '#/components/schemas/migration';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Start a user migration';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
  };
  '/user/migrations/{migration_id}': {
    get: {
      description: "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#get-a-user-migration-status';
      };
      operationId: 'migrations/get-status-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          in: 'query';
          name: 'exclude';
          required: false;
          schema: {
            items: {
              type: 'string';
            };
            type: 'array';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration';
                };
              };
              schema: {
                $ref: '#/components/schemas/migration';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a user migration status';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
  };
  '/user/migrations/{migration_id}/archive': {
    delete: {
      description: 'Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive';
      };
      operationId: 'migrations/delete-archive-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/migration-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a user migration archive';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
    get: {
      description: "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#download-a-user-migration-archive';
      };
      operationId: 'migrations/get-archive-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/migration-id';
        },
      ];
      responses: {
        '302': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'Download a user migration archive';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
  };
  '/user/migrations/{migration_id}/repos/{repo_name}/lock': {
    delete: {
      description: 'Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#unlock-a-user-repository';
      };
      operationId: 'migrations/unlock-repo-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          $ref: '#/components/parameters/repo-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unlock a user repository';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
  };
  '/user/migrations/{migration_id}/repositories': {
    get: {
      description: 'Lists all the repositories for this user migration.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration';
      };
      operationId: 'migrations/list-repos-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/migration-id';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repositories for a user migration';
      tags: ['migrations'];
      'x-github': {
        category: 'migrations';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'users';
      };
    };
  };
  '/user/orgs': {
    get: {
      description: 'List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user';
      };
      operationId: 'orgs/list-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List organizations for the authenticated user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages': {
    get: {
      description: 'Lists packages owned by the authenticated user within the user\'s namespace.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-the-authenticated-user';
      };
      operationId: 'packages/list-packages-for-authenticated-user';
      parameters: [
        {
          description: "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.";
          in: 'query';
          name: 'package_type';
          required: true;
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/package-visibility';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-user';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: "List packages for the authenticated user's namespace";
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages/{package_type}/{package_name}': {
    delete: {
      description: 'Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user';
      };
      operationId: 'packages/delete-package-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a package for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user';
      };
      operationId: 'packages/get-package-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/package';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages/{package_type}/{package_name}/restore': {
    post: {
      description: 'Restores a package owned by the authenticated user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user';
      };
      operationId: 'packages/restore-package-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          description: 'package token';
          in: 'query';
          name: 'token';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore a package for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages/{package_type}/{package_name}/versions': {
    get: {
      description: 'Lists package versions for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user';
      };
      operationId: 'packages/get-all-package-versions-for-package-owned-by-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          description: 'The state of the package, either active or deleted.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'active';
            enum: ['active', 'deleted'];
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-authenticated-user';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List package versions for a package owned by the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description: 'Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user';
      };
      operationId: 'packages/delete-package-version-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a package version for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package version for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user';
      };
      operationId: 'packages/get-package-version-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-authenticated-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/package-version';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package version for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description: 'Restores a package version owned by the authenticated user.\n\nYou can restore a deleted package version under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user';
      };
      operationId: 'packages/restore-package-version-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore a package version for the authenticated user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/projects': {
    post: {
      description: 'Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#create-a-user-project';
      };
      operationId: 'projects/create-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Create a new project';
                value: {
                  body: 'A board to manage my personal projects.';
                  name: 'My Projects';
                };
              };
            };
            schema: {
              properties: {
                body: {
                  description: 'Body of the project';
                  example: 'This project represents the sprint of the first week in January';
                  nullable: true;
                  type: 'string';
                };
                name: {
                  description: 'Name of the project';
                  example: 'Week One Sprint';
                  type: 'string';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project';
                };
              };
              schema: {
                $ref: '#/components/schemas/project';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed_simple';
        };
      };
      summary: 'Create a user project';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/public_emails': {
    get: {
      description: 'Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user';
      };
      operationId: 'users/list-public-emails-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-2';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/email';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List public email addresses for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'emails';
      };
    };
  };
  '/user/repos': {
    get: {
      description: 'Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user';
      };
      operationId: 'repos/list-for-authenticated-user';
      parameters: [
        {
          description: 'Limit results to repositories with the specified visibility.';
          in: 'query';
          name: 'visibility';
          required: false;
          schema: {
            default: 'all';
            enum: ['all', 'public', 'private'];
            type: 'string';
          };
        },
        {
          description: 'Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.';
          in: 'query';
          name: 'affiliation';
          required: false;
          schema: {
            default: 'owner,collaborator,organization_member';
            type: 'string';
          };
        },
        {
          description: 'Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.';
          in: 'query';
          name: 'type';
          required: false;
          schema: {
            default: 'all';
            enum: ['all', 'owner', 'public', 'private', 'member'];
            type: 'string';
          };
        },
        {
          description: 'The property to sort the results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'full_name';
            enum: ['created', 'updated', 'pushed', 'full_name'];
            type: 'string';
          };
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/before';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-items-default-response';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List repositories for the authenticated user';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    post: {
      description: 'Creates a new repository for the authenticated user.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user';
      };
      operationId: 'repos/create-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repo!';
                  homepage: 'https://github.com';
                  is_template: true;
                  name: 'Hello-World';
                  private: false;
                };
              };
            };
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false;
                  description: 'Whether to allow Auto-merge to be used on pull requests.';
                  example: false;
                  type: 'boolean';
                };
                allow_merge_commit: {
                  default: true;
                  description: 'Whether to allow merge commits for pull requests.';
                  example: true;
                  type: 'boolean';
                };
                allow_rebase_merge: {
                  default: true;
                  description: 'Whether to allow rebase merges for pull requests.';
                  example: true;
                  type: 'boolean';
                };
                allow_squash_merge: {
                  default: true;
                  description: 'Whether to allow squash merges for pull requests.';
                  example: true;
                  type: 'boolean';
                };
                auto_init: {
                  default: false;
                  description: 'Whether the repository is initialized with a minimal README.';
                  type: 'boolean';
                };
                delete_branch_on_merge: {
                  default: false;
                  description: 'Whether to delete head branches when pull requests are merged';
                  example: false;
                  type: 'boolean';
                };
                description: {
                  description: 'A short description of the repository.';
                  type: 'string';
                };
                gitignore_template: {
                  description: 'The desired language or platform to apply to the .gitignore.';
                  example: 'Haskell';
                  type: 'string';
                };
                has_discussions: {
                  default: false;
                  description: 'Whether discussions are enabled.';
                  example: true;
                  type: 'boolean';
                };
                has_downloads: {
                  default: true;
                  description: 'Whether downloads are enabled.';
                  example: true;
                  type: 'boolean';
                };
                has_issues: {
                  default: true;
                  description: 'Whether issues are enabled.';
                  example: true;
                  type: 'boolean';
                };
                has_projects: {
                  default: true;
                  description: 'Whether projects are enabled.';
                  example: true;
                  type: 'boolean';
                };
                has_wiki: {
                  default: true;
                  description: 'Whether the wiki is enabled.';
                  example: true;
                  type: 'boolean';
                };
                homepage: {
                  description: 'A URL with more information about the repository.';
                  type: 'string';
                };
                is_template: {
                  default: false;
                  description: 'Whether this repository acts as a template that can be used to generate new repositories.';
                  example: true;
                  type: 'boolean';
                };
                license_template: {
                  description: 'The license keyword of the open source license for this repository.';
                  example: 'mit';
                  type: 'string';
                };
                merge_commit_message: {
                  description: "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'];
                  type: 'string';
                };
                merge_commit_title: {
                  description: "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).";
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'];
                  type: 'string';
                };
                name: {
                  description: 'The name of the repository.';
                  example: 'Team Environment';
                  type: 'string';
                };
                private: {
                  default: false;
                  description: 'Whether the repository is private.';
                  type: 'boolean';
                };
                squash_merge_commit_message: {
                  description: "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.";
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'];
                  type: 'string';
                };
                squash_merge_commit_title: {
                  description: "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).";
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'];
                  type: 'string';
                };
                team_id: {
                  description: 'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.';
                  type: 'integer';
                };
              };
              required: ['name'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository';
                };
              };
              schema: {
                $ref: '#/components/schemas/repository';
              };
            };
          };
          description: 'Response';
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '400': {
          $ref: '#/components/responses/bad_request';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a repository for the authenticated user';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/user/repository_invitations': {
    get: {
      description: 'When authenticating as a user, this endpoint will list all currently open repository invitations for that user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user';
      };
      operationId: 'repos/list-invitations-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/repository-invitation';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List repository invitations for the authenticated user';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
  };
  '/user/repository_invitations/{invitation_id}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation';
      };
      operationId: 'repos/decline-invitation-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/invitation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
      };
      summary: 'Decline a repository invitation';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
    patch: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation';
      };
      operationId: 'repos/accept-invitation-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/invitation-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '409': {
          $ref: '#/components/responses/conflict';
        };
      };
      summary: 'Accept a repository invitation';
      tags: ['repos'];
      'x-github': {
        category: 'collaborators';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'invitations';
      };
    };
  };
  '/user/ssh_signing_keys': {
    get: {
      description: 'Lists the SSH signing keys for the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user';
      };
      operationId: 'users/list-ssh-signing-keys-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/ssh-signing-key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List SSH signing keys for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        previews: [];
        subcategory: 'ssh-signing-keys';
      };
    };
    post: {
      description: 'Creates an SSH signing key for the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user';
      };
      operationId: 'users/create-ssh-signing-key-for-authenticated-user';
      parameters: [];
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: '2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234';
                  title: 'ssh-rsa AAAAB3NzaC1yc2EAAA';
                };
              };
            };
            schema: {
              properties: {
                key: {
                  description: 'The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."';
                  pattern: '^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com ';
                  type: 'string';
                };
                title: {
                  description: 'A descriptive name for the new key.';
                  example: 'Personal MacBook Air';
                  type: 'string';
                };
              };
              required: ['key'];
              type: 'object';
            };
          };
        };
        required: true;
      };
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/ssh-signing-key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Create a SSH signing key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'ssh-signing-keys';
      };
    };
  };
  '/user/ssh_signing_keys/{ssh_signing_key_id}': {
    delete: {
      description: 'Deletes an SSH signing key from the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user';
      };
      operationId: 'users/delete-ssh-signing-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/ssh-signing-key-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete an SSH signing key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'ssh-signing-keys';
      };
    };
    get: {
      description: 'Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user';
      };
      operationId: 'users/get-ssh-signing-key-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/ssh-signing-key-id';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key';
                };
              };
              schema: {
                $ref: '#/components/schemas/ssh-signing-key';
              };
            };
          };
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get an SSH signing key for the authenticated user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'ssh-signing-keys';
      };
    };
  };
  '/user/starred': {
    get: {
      description: 'Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user';
      };
      operationId: 'activity/list-repos-starred-by-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/repository-items-default-response';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/repository';
                };
                type: 'array';
              };
            };
            'application/vnd.github.v3.star+json': {
              examples: {
                'alternative-response-with-star-creation-timestamps': {
                  $ref: '#/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/starred-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List repositories starred by the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
  };
  '/user/starred/{owner}/{repo}': {
    delete: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user';
      };
      operationId: 'activity/unstar-repo-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Unstar a repository for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user';
      };
      operationId: 'activity/check-repo-is-starred-by-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response if this repository is starred by you';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error';
              };
            };
          };
          description: 'Not Found if this repository is not starred by you';
        };
      };
      summary: 'Check if a repository is starred by the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
    put: {
      description: 'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user';
      };
      operationId: 'activity/star-repo-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/owner';
        },
        {
          $ref: '#/components/parameters/repo';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Star a repository for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
  };
  '/user/subscriptions': {
    get: {
      description: 'Lists repositories the authenticated user is watching.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user';
      };
      operationId: 'activity/list-watched-repos-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List repositories watched by the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
  };
  '/user/teams': {
    get: {
      description: 'List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user';
      };
      operationId: 'teams/list-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/team-full';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List teams for the authenticated user';
      tags: ['teams'];
      'x-github': {
        category: 'teams';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users': {
    get: {
      description: 'Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-users';
      };
      operationId: 'users/list';
      parameters: [
        {
          $ref: '#/components/parameters/since-user';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              example: '<https://api.github.com/users?since=135>; rel="next"';
              schema: {
                type: 'string';
              };
            };
          };
        };
        '304': {
          $ref: '#/components/responses/not_modified';
        };
      };
      summary: 'List users';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}': {
    get: {
      description: 'Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user\'s GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see \'Response with GitHub plan information\' below"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-a-user';
      };
      operationId: 'users/get-by-username';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/public-user-default-response';
                };
                'response-with-git-hub-plan-information': {
                  $ref: '#/components/examples/public-user-response-with-git-hub-plan-information';
                };
              };
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/private-user';
                  },
                  {
                    $ref: '#/components/schemas/public-user';
                  },
                ];
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/events': {
    get: {
      description: "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user';
      };
      operationId: 'activity/list-events-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List events for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/users/{username}/events/orgs/{org}': {
    get: {
      description: "This is the user's organization dashboard. You must be authenticated as the user to view this.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user';
      };
      operationId: 'activity/list-org-events-for-authenticated-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/org';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-org-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List organization events for the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/users/{username}/events/public': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-for-a-user';
      };
      operationId: 'activity/list-public-events-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-public-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List public events for a user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/users/{username}/followers': {
    get: {
      description: 'Lists the people following the specified user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-followers-of-a-user';
      };
      operationId: 'users/list-followers-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List followers of a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/users/{username}/following': {
    get: {
      description: 'Lists the people who the specified user follows.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-the-people-a-user-follows';
      };
      operationId: 'users/list-following-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List the people a user follows';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/users/{username}/following/{target_user}': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user';
      };
      operationId: 'users/check-following-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          in: 'path';
          name: 'target_user';
          required: true;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'if the user follows the target user';
        };
        '404': {
          description: 'if the user does not follow the target user';
        };
      };
      summary: 'Check if a user follows another user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'followers';
      };
    };
  };
  '/users/{username}/gists': {
    get: {
      description: 'Lists public gists for the specified user:';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/gists#list-gists-for-a-user';
      };
      operationId: 'gists/list-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/since';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List gists for a user';
      tags: ['gists'];
      'x-github': {
        category: 'gists';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/gpg_keys': {
    get: {
      description: 'Lists the GPG keys for a user. This information is accessible by anyone.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user';
      };
      operationId: 'users/list-gpg-keys-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/gpg-key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List GPG keys for a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'gpg-keys';
      };
    };
  };
  '/users/{username}/hovercard': {
    get: {
      description: "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\nThe `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n\n```shell\n curl -u username:token\n  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n```";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user';
      };
      operationId: 'users/get-context-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          description: "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.";
          in: 'query';
          name: 'subject_type';
          required: false;
          schema: {
            enum: ['organization', 'repository', 'issue', 'pull_request'];
            type: 'string';
          };
        },
        {
          description: 'Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.';
          in: 'query';
          name: 'subject_id';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hovercard';
                };
              };
              schema: {
                $ref: '#/components/schemas/hovercard';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'Get contextual information for a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/installation': {
    get: {
      description: 'Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app';
      };
      operationId: 'apps/get-user-installation';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation';
                };
              };
              schema: {
                $ref: '#/components/schemas/installation';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a user installation for the authenticated app';
      tags: ['apps'];
      'x-github': {
        category: 'apps';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/keys': {
    get: {
      description: 'Lists the _verified_ public SSH keys for a user. This is accessible by anyone.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-public-keys-for-a-user';
      };
      operationId: 'users/list-public-keys-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/key-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List public keys for a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'keys';
      };
    };
  };
  '/users/{username}/orgs': {
    get: {
      description: 'List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user';
      };
      operationId: 'orgs/list-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List organizations for a user';
      tags: ['orgs'];
      'x-github': {
        category: 'orgs';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages': {
    get: {
      description: 'Lists all packages in a user\'s namespace for which the requesting user has access.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-user';
      };
      operationId: 'packages/list-packages-for-user';
      parameters: [
        {
          description: "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.";
          in: 'query';
          name: 'package_type';
          required: true;
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/package-visibility';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-user';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
      };
      summary: 'List packages for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages/{package_type}/{package_name}': {
    delete: {
      description: 'Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-a-user';
      };
      operationId: 'packages/delete-package-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete a package for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package metadata for a public package owned by a user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-a-user';
      };
      operationId: 'packages/get-package-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/package';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages/{package_type}/{package_name}/restore': {
    post: {
      description: 'Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-a-user';
      };
      operationId: 'packages/restore-package-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
        {
          description: 'package token';
          in: 'query';
          name: 'token';
          required: false;
          schema: {
            type: 'string';
          };
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore a package for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages/{package_type}/{package_name}/versions': {
    get: {
      description: 'Lists package versions for a public package owned by a specified user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-a-user';
      };
      operationId: 'packages/get-all-package-versions-for-package-owned-by-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-user';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'List package versions for a package owned by a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description: 'Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-a-user';
      };
      operationId: 'packages/delete-package-version-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Delete package version for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
    get: {
      description: 'Gets a specific package version for a public package owned by a specified user.\n\nAt this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user';
      };
      operationId: 'packages/get-package-version-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-user';
                };
              };
              schema: {
                $ref: '#/components/schemas/package-version';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get a package version for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description: 'Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-a-user';
      };
      operationId: 'packages/restore-package-version-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/package-type';
        },
        {
          $ref: '#/components/parameters/package-name';
        },
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/package-version-id';
        },
      ];
      responses: {
        '204': {
          description: 'Response';
        };
        '401': {
          $ref: '#/components/responses/requires_authentication';
        };
        '403': {
          $ref: '#/components/responses/forbidden';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Restore package version for a user';
      tags: ['packages'];
      'x-github': {
        category: 'packages';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/projects': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/projects#list-user-projects';
      };
      operationId: 'projects/list-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          description: 'Indicates the state of the projects to return.';
          in: 'query';
          name: 'state';
          required: false;
          schema: {
            default: 'open';
            enum: ['open', 'closed', 'all'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items-3';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/project';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
        '422': {
          $ref: '#/components/responses/validation_failed';
        };
      };
      summary: 'List user projects';
      tags: ['projects'];
      'x-github': {
        category: 'projects';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/received_events': {
    get: {
      description: "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.";
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user';
      };
      operationId: 'activity/list-received-events-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-received-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List events received by the authenticated user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/users/{username}/received_events/public': {
    get: {
      description: '';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user';
      };
      operationId: 'activity/list-received-public-events-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-received-public-events-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/event';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'List public events received by a user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'events';
      };
    };
  };
  '/users/{username}/repos': {
    get: {
      description: 'Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/repos#list-repositories-for-a-user';
      };
      operationId: 'repos/list-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          description: 'Limit results to repositories of the specified type.';
          in: 'query';
          name: 'type';
          required: false;
          schema: {
            default: 'owner';
            enum: ['all', 'owner', 'member'];
            type: 'string';
          };
        },
        {
          description: 'The property to sort the results by.';
          in: 'query';
          name: 'sort';
          required: false;
          schema: {
            default: 'full_name';
            enum: ['created', 'updated', 'pushed', 'full_name'];
            type: 'string';
          };
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.';
          in: 'query';
          name: 'direction';
          required: false;
          schema: {
            enum: ['asc', 'desc'];
            type: 'string';
          };
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repositories for a user';
      tags: ['repos'];
      'x-github': {
        category: 'repos';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/settings/billing/actions': {
    get: {
      description: 'Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAccess tokens must have the `user` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user';
      };
      operationId: 'billing/get-github-actions-billing-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/actions-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Actions billing for a user';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/settings/billing/packages': {
    get: {
      description: 'Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `user` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user';
      };
      operationId: 'billing/get-github-packages-billing-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/packages-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get GitHub Packages billing for a user';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/settings/billing/shared-storage': {
    get: {
      description: 'Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `user` scope.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user';
      };
      operationId: 'billing/get-shared-storage-billing-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-billing-usage';
                };
              };
              schema: {
                $ref: '#/components/schemas/combined-billing-usage';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get shared storage billing for a user';
      tags: ['billing'];
      'x-github': {
        category: 'billing';
        enabledForGitHubApps: false;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/users/{username}/ssh_signing_keys': {
    get: {
      description: 'Lists the SSH signing keys for a user. This operation is accessible by anyone.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user';
      };
      operationId: 'users/list-ssh-signing-keys-for-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/ssh-signing-key';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List SSH signing keys for a user';
      tags: ['users'];
      'x-github': {
        category: 'users';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'ssh-signing-keys';
      };
    };
  };
  '/users/{username}/starred': {
    get: {
      description: 'Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user';
      };
      operationId: 'activity/list-repos-starred-by-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/sort';
        },
        {
          $ref: '#/components/parameters/direction';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/repository-items-default-response';
                };
              };
              schema: {
                anyOf: [
                  {
                    items: {
                      $ref: '#/components/schemas/starred-repository';
                    };
                    type: 'array';
                  },
                  {
                    items: {
                      $ref: '#/components/schemas/repository';
                    };
                    type: 'array';
                  },
                ];
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repositories starred by a user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'starring';
      };
    };
  };
  '/users/{username}/subscriptions': {
    get: {
      description: 'Lists repositories a user is watching.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user';
      };
      operationId: 'activity/list-repos-watched-by-user';
      parameters: [
        {
          $ref: '#/components/parameters/username';
        },
        {
          $ref: '#/components/parameters/per-page';
        },
        {
          $ref: '#/components/parameters/page';
        },
      ];
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items';
                };
              };
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
          headers: {
            Link: {
              $ref: '#/components/headers/link';
            };
          };
        };
      };
      summary: 'List repositories watched by a user';
      tags: ['activity'];
      'x-github': {
        category: 'activity';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: 'watching';
      };
    };
  };
  '/versions': {
    get: {
      description: 'Get all supported GitHub API versions.';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/reference/meta#get-all-api-versions';
      };
      operationId: 'meta/get-all-versions';
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['2021-01-01', '2021-06-01', '2022-01-01'];
                };
              };
              schema: {
                items: {
                  example: '2021-01-01';
                  format: 'date';
                  type: 'string';
                };
                type: 'array';
              };
            };
          };
          description: 'Response';
        };
        '404': {
          $ref: '#/components/responses/not_found';
        };
      };
      summary: 'Get all API versions';
      tags: ['meta'];
      'x-github': {
        category: 'meta';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
        subcategory: null;
      };
    };
  };
  '/zen': {
    get: {
      description: 'Get a random sentence from the Zen of GitHub';
      externalDocs: {
        description: 'API method documentation';
        url: 'https://docs.github.com/rest/meta#get-the-zen-of-github';
      };
      operationId: 'meta/get-zen';
      responses: {
        '200': {
          content: {
            'text/plain': {
              examples: {
                default: {
                  summary: 'Example response';
                  value: 'Responsive is better than fast';
                };
              };
              schema: {
                type: 'string';
              };
            };
          };
          description: 'Response';
        };
      };
      summary: 'Get the Zen of GitHub';
      tags: ['meta'];
      'x-github': {
        category: 'meta';
        enabledForGitHubApps: true;
        githubCloudOnly: false;
      };
    };
  };
};
export const paths = {
  '/': {
    get: {
      description: "Get Hypermedia links to resources accessible in GitHub's REST API",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint',
      },
      operationId: 'meta/root',
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/root',
                },
              },
              schema: {
                $ref: '#/components/schemas/root',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'GitHub API Root',
      tags: ['meta'],
      'x-github': {
        category: 'meta',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/app': {
    get: {
      description:
        'Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app\'s installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-the-authenticated-app',
      },
      operationId: 'apps/get-authenticated',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration',
                },
              },
              schema: {
                $ref: '#/components/schemas/integration',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/app-manifests/{code}/conversions': {
    post: {
      description:
        "Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest',
      },
      operationId: 'apps/create-from-manifest',
      parameters: [
        {
          in: 'path',
          name: 'code',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-from-manifest',
                },
              },
              schema: {
                allOf: [
                  {
                    $ref: '#/components/schemas/integration',
                  },
                  {
                    additionalProperties: true,
                    properties: {
                      client_id: {
                        type: 'string',
                      },
                      client_secret: {
                        type: 'string',
                      },
                      pem: {
                        type: 'string',
                      },
                      webhook_secret: {
                        nullable: true,
                        type: 'string',
                      },
                    },
                    required: ['client_id', 'client_secret', 'webhook_secret', 'pem'],
                    type: 'object',
                  },
                ],
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a GitHub App from a manifest',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/app/hook/config': {
    get: {
      description:
        'Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app',
      },
      operationId: 'apps/get-webhook-config-for-app',
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a webhook configuration for an app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
    patch: {
      description:
        'Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app',
      },
      operationId: 'apps/update-webhook-config-for-app',
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content_type: 'json',
                  insecure_ssl: '0',
                  secret: '********',
                  url: 'https://example.com/webhook',
                },
              },
            },
            schema: {
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type',
                },
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl',
                },
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret',
                },
                url: {
                  $ref: '#/components/schemas/webhook-config-url',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a webhook configuration for an app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/app/hook/deliveries': {
    get: {
      description:
        'Returns a list of webhook deliveries for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook',
      },
      operationId: 'apps/list-webhook-deliveries',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/cursor',
        },
        {
          in: 'query',
          name: 'redelivery',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List deliveries for an app webhook',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/app/hook/deliveries/{delivery_id}': {
    get: {
      description:
        'Returns a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook',
      },
      operationId: 'apps/get-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook-delivery',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a delivery for an app webhook',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/app/hook/deliveries/{delivery_id}/attempts': {
    post: {
      description:
        'Redeliver a delivery for the webhook configured for a GitHub App.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook',
      },
      operationId: 'apps/redeliver-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Redeliver a delivery for an app webhook',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/app/installations': {
    get: {
      description:
        'You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.\n\nThe permissions the installation has are included under the `permissions` key.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app',
      },
      operationId: 'apps/list-installations',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          in: 'query',
          name: 'outdated',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/installation',
                },
                type: 'array',
              },
            },
          },
          description: 'The permissions the installation has are included under the `permissions` key.',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List installations for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/app/installations/{installation_id}': {
    delete: {
      description:
        'Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app\'s access to your account\'s resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app',
      },
      operationId: 'apps/delete-installation',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an installation for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        "Enables an authenticated GitHub App to find an installation's information using the installation id.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app',
      },
      operationId: 'apps/get-installation',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation',
                },
              },
              schema: {
                $ref: '#/components/schemas/installation',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an installation for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/app/installations/{installation_id}/access_tokens': {
    post: {
      description:
        "Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app',
      },
      operationId: 'apps/create-installation-access-token',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  permissions: {
                    contents: 'read',
                    issues: 'write',
                  },
                  repository: 'Hello-World',
                },
              },
            },
            schema: {
              properties: {
                permissions: {
                  $ref: '#/components/schemas/app-permissions',
                },
                repositories: {
                  description: 'List of repository names that the token should have access to',
                  items: {
                    example: 'rails',
                    type: 'string',
                  },
                  type: 'array',
                },
                repository_ids: {
                  description: 'List of repository IDs that the token should have access to',
                  example: [1],
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation-token',
                },
              },
              schema: {
                $ref: '#/components/schemas/installation-token',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an installation access token for an app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/app/installations/{installation_id}/suspended': {
    delete: {
      description:
        'Removes a GitHub App installation suspension.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation',
      },
      operationId: 'apps/unsuspend-installation',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unsuspend an app installation',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        "Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#suspend-an-app-installation',
      },
      operationId: 'apps/suspend-installation',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Suspend an app installation',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/applications/{client_id}/grant': {
    delete: {
      description:
        "OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#delete-an-app-authorization',
      },
      operationId: 'apps/delete-authorization',
      parameters: [
        {
          $ref: '#/components/parameters/client-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                },
              },
            },
            schema: {
              properties: {
                access_token: {
                  description: 'The OAuth access token used to authenticate to the GitHub API.',
                  type: 'string',
                },
              },
              required: ['access_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete an app authorization',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'oauth-applications',
      },
    },
  },
  '/applications/{client_id}/token': {
    delete: {
      description:
        "OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#delete-an-app-token',
      },
      operationId: 'apps/delete-token',
      parameters: [
        {
          $ref: '#/components/parameters/client-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                },
              },
            },
            schema: {
              properties: {
                access_token: {
                  description: 'The OAuth access token used to authenticate to the GitHub API.',
                  type: 'string',
                },
              },
              required: ['access_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete an app token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'oauth-applications',
      },
    },
    patch: {
      description:
        'OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application\'s `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#reset-a-token',
      },
      operationId: 'apps/reset-token',
      parameters: [
        {
          $ref: '#/components/parameters/client-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                },
              },
            },
            schema: {
              properties: {
                access_token: {
                  description: 'The access_token of the OAuth application.',
                  type: 'string',
                },
              },
              required: ['access_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authorization-with-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/authorization',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Reset a token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'oauth-applications',
      },
    },
    post: {
      description:
        'OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#check-a-token',
      },
      operationId: 'apps/check-token',
      parameters: [
        {
          $ref: '#/components/parameters/client-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                },
              },
            },
            schema: {
              properties: {
                access_token: {
                  description: 'The access_token of the OAuth application.',
                  type: 'string',
                },
              },
              required: ['access_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authorization-with-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/authorization',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Check a token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'oauth-applications',
      },
    },
  },
  '/applications/{client_id}/token/scoped': {
    post: {
      description:
        'Use a non-scoped user-to-server access token to create a repository scoped and/or permission scoped user-to-server access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the `client_id` and `client_secret` of the GitHub App as the username and password. Invalid tokens will return `404 NOT FOUND`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/apps/apps#create-a-scoped-access-token',
      },
      operationId: 'apps/scope-token',
      parameters: [
        {
          $ref: '#/components/parameters/client-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  access_token: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                  permissions: {
                    contents: 'read',
                    issues: 'write',
                    metadata: 'read',
                  },
                  target: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                access_token: {
                  description: 'The access token used to authenticate to the GitHub API.',
                  example: 'e72e16c7e42f292c6912e7710c838347ae178b4a',
                  type: 'string',
                },
                permissions: {
                  $ref: '#/components/schemas/app-permissions',
                },
                repositories: {
                  description:
                    'The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.',
                  items: {
                    example: 'rails',
                    type: 'string',
                  },
                  type: 'array',
                },
                repository_ids: {
                  description:
                    'The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.',
                  example: [1],
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
                target: {
                  description:
                    'The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.',
                  example: 'octocat',
                  type: 'string',
                },
                target_id: {
                  description:
                    'The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.',
                  example: 1,
                  type: 'integer',
                },
              },
              required: ['access_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/scope-token',
                },
              },
              schema: {
                $ref: '#/components/schemas/authorization',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a scoped access token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'apps',
      },
    },
  },
  '/apps/{app_slug}': {
    get: {
      description:
        '**Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).\n\nIf the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps/#get-an-app',
      },
      operationId: 'apps/get-by-slug',
      parameters: [
        {
          $ref: '#/components/parameters/app-slug',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration',
                },
              },
              schema: {
                $ref: '#/components/schemas/integration',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/codes_of_conduct': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct',
      },
      operationId: 'codes-of-conduct/get-all-codes-of-conduct',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-of-conduct-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-of-conduct',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get all codes of conduct',
      tags: ['codes-of-conduct'],
      'x-github': {
        category: 'codes-of-conduct',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/codes_of_conduct/{key}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct',
      },
      operationId: 'codes-of-conduct/get-conduct-code',
      parameters: [
        {
          in: 'path',
          name: 'key',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-of-conduct',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-of-conduct',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a code of conduct',
      tags: ['codes-of-conduct'],
      'x-github': {
        category: 'codes-of-conduct',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/emojis': {
    get: {
      description: 'Lists all the emojis available to use on GitHub.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/emojis#get-emojis',
      },
      operationId: 'emojis/get',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/emojis-get',
                },
              },
              schema: {
                additionalProperties: {
                  type: 'string',
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get emojis',
      tags: ['emojis'],
      'x-github': {
        category: 'emojis',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/enterprises/{enterprise}/dependabot/alerts': {
    get: {
      description:
        'Lists Dependabot alerts for repositories that are owned by the specified enterprise.\nTo use this endpoint, you must be a member of the enterprise, and you must use an\naccess token with the `repo` scope or `security_events` scope.\nAlerts are only returned for organizations in the enterprise for which you are an organization owner or a security manager. For more information about security managers, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise',
      },
      operationId: 'dependabot/list-alerts-for-enterprise',
      parameters: [
        {
          $ref: '#/components/parameters/enterprise',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/pagination-before',
        },
        {
          $ref: '#/components/parameters/pagination-after',
        },
        {
          $ref: '#/components/parameters/pagination-first',
        },
        {
          $ref: '#/components/parameters/pagination-last',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-organization',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert-with-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'List Dependabot alerts for an enterprise',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'alerts',
      },
    },
  },
  '/enterprises/{enterprise}/secret-scanning/alerts': {
    get: {
      description:
        'Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.\nTo use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise',
      },
      operationId: 'secret-scanning/list-alerts-for-enterprise',
      parameters: [
        {
          $ref: '#/components/parameters/enterprise',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/pagination-before',
        },
        {
          $ref: '#/components/parameters/pagination-after',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-secret-scanning-alert-list',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-secret-scanning-alert',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List secret scanning alerts for an enterprise',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/events': {
    get: {
      description:
        'We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-public-events',
      },
      operationId: 'activity/list-public-events',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List public events',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/feeds': {
    get: {
      description:
        'GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:\n\n*   **Timeline**: The GitHub global public timeline\n*   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)\n*   **Current user public**: The public timeline for the authenticated user\n*   **Current user**: The private timeline for the authenticated user\n*   **Current user actor**: The private timeline for activity created by the authenticated user\n*   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.\n*   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.\n\n**Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#get-feeds',
      },
      operationId: 'activity/get-feeds',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/feed',
                },
              },
              schema: {
                $ref: '#/components/schemas/feed',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get feeds',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'feeds',
      },
    },
  },
  '/gists': {
    get: {
      description:
        "Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user',
      },
      operationId: 'gists/list',
      parameters: [
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List gists for the authenticated user',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Allows you to add a new gist with one or more files.\n\n**Note:** Don\'t name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#create-a-gist',
      },
      operationId: 'gists/create',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Creating a gist',
                value: {
                  description: 'Example of a gist',
                  files: {
                    'README.md': {
                      content: 'Hello World',
                    },
                  },
                  public: false,
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'Description of the gist',
                  example: 'Example Ruby script',
                  type: 'string',
                },
                files: {
                  additionalProperties: {
                    properties: {
                      content: {
                        description: 'Content of the file',
                        readOnly: false,
                        type: 'string',
                      },
                    },
                    required: ['content'],
                    type: 'object',
                  },
                  description: 'Names and content for the files that make up the gist',
                  example: {
                    'hello.rb': {
                      content: 'puts "Hello, World!"',
                    },
                  },
                  type: 'object',
                },
                public: {
                  oneOf: [
                    {
                      default: false,
                      description: 'Flag indicating whether the gist is public',
                      example: true,
                      type: 'boolean',
                    },
                    {
                      default: 'false',
                      enum: ['true', 'false'],
                      example: 'true',
                      type: 'string',
                    },
                  ],
                },
              },
              required: ['files'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-simple',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/gists/aa5a315d61ae9438b18d',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/public': {
    get: {
      description:
        'List public gists sorted by most recently updated to least recently updated.\n\nNote: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-public-gists',
      },
      operationId: 'gists/list-public',
      parameters: [
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List public gists',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/starred': {
    get: {
      description: "List the authenticated user's starred gists:",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-starred-gists',
      },
      operationId: 'gists/list-starred',
      parameters: [
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List starred gists',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/{gist_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#delete-a-gist',
      },
      operationId: 'gists/delete',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist',
      },
      operationId: 'gists/get',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-simple',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden_gist',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "Allows you to update a gist's description and to update, delete, or rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists/#update-a-gist',
      },
      operationId: 'gists/update',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              deleteFile: {
                summary: 'Deleting a gist file',
                value: {
                  files: {
                    'hello.py': null,
                  },
                },
              },
              renameFile: {
                summary: 'Renaming a gist file',
                value: {
                  files: {
                    'hello.py': {
                      filename: 'goodbye.py',
                    },
                  },
                },
              },
              updateGist: {
                summary: 'Updating a gist',
                value: {
                  description: 'An updated gist description',
                  files: {
                    'README.md': {
                      content: 'Hello World from GitHub',
                    },
                  },
                },
              },
            },
            schema: {
              anyOf: [
                {
                  required: ['description'],
                },
                {
                  required: ['files'],
                },
              ],
              nullable: true,
              properties: {
                description: {
                  description: 'The description of the gist.',
                  example: 'Example Ruby script',
                  type: 'string',
                },
                files: {
                  additionalProperties: {
                    anyOf: [
                      {
                        required: ['content'],
                      },
                      {
                        required: ['filename'],
                      },
                      {
                        maxProperties: 0,
                        type: 'object',
                      },
                    ],
                    nullable: true,
                    properties: {
                      content: {
                        description: 'The new content of the file.',
                        type: 'string',
                      },
                      filename: {
                        description: 'The new filename for the file.',
                        nullable: true,
                        type: 'string',
                      },
                    },
                    type: 'object',
                  },
                  description:
                    'The gist files to be updated, renamed, or deleted. Each `key` must match the current filename\n(including extension) of the targeted gist file. For example: `hello.py`.\n\nTo delete a file, set the whole file to null. For example: `hello.py : null`.',
                  example: {
                    'hello.rb': {
                      content: 'blah',
                      filename: 'goodbye.rb',
                    },
                  },
                  type: 'object',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                deleteFile: {
                  $ref: '#/components/examples/delete-gist-file',
                },
                renameFile: {
                  $ref: '#/components/examples/rename-gist-file',
                },
                updateGist: {
                  $ref: '#/components/examples/gist',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-simple',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/{gist_id}/comments': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-gist-comments',
      },
      operationId: 'gists/list-comments',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List gist comments',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#create-a-gist-comment',
      },
      operationId: 'gists/create-comment',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Creating a comment in a gist',
                value: {
                  body: 'This is a comment to a gist',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The comment text.',
                  example: 'Body of the attachment',
                  maxLength: 65535,
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-comment',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/gists/a6db0bec360bb87e9418/comments/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Create a gist comment',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/gists/{gist_id}/comments/{comment_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#delete-a-gist-comment',
      },
      operationId: 'gists/delete-comment',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a gist comment',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist-comment',
      },
      operationId: 'gists/get-comment',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-comment',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden_gist',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a gist comment',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#update-a-gist-comment',
      },
      operationId: 'gists/update-comment',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Updating a comment in a gist',
                value: {
                  body: 'This is an update to a comment in a gist',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The comment text.',
                  example: 'Body of the attachment',
                  maxLength: 65535,
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-comment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Update a gist comment',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/gists/{gist_id}/commits': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-gist-commits',
      },
      operationId: 'gists/list-commits',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-commit-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-commit',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              example: '<https://api.github.com/resource?page=2>; rel="next"',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List gist commits',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/{gist_id}/forks': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-gist-forks',
      },
      operationId: 'gists/list-forks',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist-fork-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/gist-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List gist forks',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#fork-a-gist',
      },
      operationId: 'gists/fork',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist',
                },
              },
              schema: {
                $ref: '#/components/schemas/base-gist',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/gists/aa5a315d61ae9438b18d',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Fork a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/{gist_id}/star': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#unstar-a-gist',
      },
      operationId: 'gists/unstar',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unstar a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred',
      },
      operationId: 'gists/check-is-starred',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response if gist is starred',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                additionalProperties: false,
                properties: {},
                type: 'object',
              },
            },
          },
          description: 'Not Found if gist is not starred',
        },
      },
      summary: 'Check if a gist is starred',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#star-a-gist',
      },
      operationId: 'gists/star',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Star a gist',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gists/{gist_id}/{sha}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#get-a-gist-revision',
      },
      operationId: 'gists/get-revision',
      parameters: [
        {
          $ref: '#/components/parameters/gist-id',
        },
        {
          in: 'path',
          name: 'sha',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gist',
                },
              },
              schema: {
                $ref: '#/components/schemas/gist-simple',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a gist revision',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gitignore/templates': {
    get: {
      description:
        'List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates',
      },
      operationId: 'gitignore/get-all-templates',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['Actionscript', 'Android', 'AppceleratorTitanium', 'Autotools', 'Bancha', 'C', 'C++'],
                },
              },
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get all gitignore templates',
      tags: ['gitignore'],
      'x-github': {
        category: 'gitignore',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/gitignore/templates/{name}': {
    get: {
      description:
        'The API also allows fetching the source of a single template.\nUse the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template',
      },
      operationId: 'gitignore/get-template',
      parameters: [
        {
          in: 'path',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gitignore-template',
                },
              },
              schema: {
                $ref: '#/components/schemas/gitignore-template',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get a gitignore template',
      tags: ['gitignore'],
      'x-github': {
        category: 'gitignore',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/installation/repositories': {
    get: {
      description:
        'List repositories that an app installation can access.\n\nYou must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation',
      },
      operationId: 'apps/list-repos-accessible-to-installation',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated-2',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository',
                    },
                    type: 'array',
                  },
                  repository_selection: {
                    example: 'selected',
                    type: 'string',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List repositories accessible to the app installation',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
  },
  '/installation/token': {
    delete: {
      description:
        'Revokes the installation token you\'re using to authenticate as an installation and access this endpoint.\n\nOnce an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.\n\nYou must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token',
      },
      operationId: 'apps/revoke-installation-access-token',
      parameters: [],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Revoke an installation access token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
  },
  '/issues': {
    get: {
      description:
        'List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you.\n\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user',
      },
      operationId: 'issues/list',
      parameters: [
        {
          description:
            "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'assigned',
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'],
            type: 'string',
          },
        },
        {
          description: 'Indicates the state of the issues to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/labels',
        },
        {
          description: 'What to sort results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'comments'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          in: 'query',
          name: 'collab',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          in: 'query',
          name: 'orgs',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          in: 'query',
          name: 'owned',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          in: 'query',
          name: 'pulls',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List issues assigned to the authenticated user',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/licenses': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses',
      },
      operationId: 'licenses/get-all-commonly-used',
      parameters: [
        {
          in: 'query',
          name: 'featured',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/license-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get all commonly used licenses',
      tags: ['licenses'],
      'x-github': {
        category: 'licenses',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/licenses/{license}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/licenses#get-a-license',
      },
      operationId: 'licenses/get',
      parameters: [
        {
          in: 'path',
          name: 'license',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license',
                },
              },
              schema: {
                $ref: '#/components/schemas/license',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a license',
      tags: ['licenses'],
      'x-github': {
        category: 'licenses',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/markdown': {
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/markdown#render-a-markdown-document',
      },
      operationId: 'markdown/render',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Rendering markdown',
                value: {
                  text: 'Hello **world**',
                },
              },
            },
            schema: {
              properties: {
                context: {
                  description:
                    'The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.',
                  type: 'string',
                },
                mode: {
                  default: 'markdown',
                  description: 'The rendering mode.',
                  enum: ['markdown', 'gfm'],
                  example: 'markdown',
                  type: 'string',
                },
                text: {
                  description: 'The Markdown text to render in HTML.',
                  type: 'string',
                },
              },
              required: ['text'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'text/html': {
              examples: {
                default: {
                  summary: 'Example response',
                  value: '<p>Hello <strong>world</strong></p>',
                },
              },
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Response',
          headers: {
            'Content-Length': {
              example: '279',
              schema: {
                type: 'string',
              },
            },
            'Content-Type': {
              $ref: '#/components/headers/content-type',
            },
            'X-CommonMarker-Version': {
              $ref: '#/components/headers/x-common-marker-version',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Render a Markdown document',
      tags: ['markdown'],
      'x-github': {
        category: 'markdown',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/markdown/raw': {
    post: {
      description:
        'You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode',
      },
      operationId: 'markdown/render-raw',
      parameters: [],
      requestBody: {
        content: {
          'text/plain': {
            examples: {
              default: {
                value: {
                  text: 'Hello **world**',
                },
              },
            },
            schema: {
              type: 'string',
            },
          },
          'text/x-markdown': {
            examples: {
              default: {
                summary: 'Rendering markdown',
                value: {
                  text: 'Hello **world**',
                },
              },
            },
            schema: {
              type: 'string',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'text/html': {
              examples: {
                default: {
                  summary: 'Example response',
                  value: '<p>Hello <strong>world</strong></p>',
                },
              },
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Response',
          headers: {
            'X-CommonMarker-Version': {
              $ref: '#/components/headers/x-common-marker-version',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Render a Markdown document in raw mode',
      tags: ['markdown'],
      'x-github': {
        category: 'markdown',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/marketplace_listing/accounts/{account_id}': {
    get: {
      description:
        "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account',
      },
      operationId: 'apps/get-subscription-plan-for-account',
      parameters: [
        {
          $ref: '#/components/parameters/account-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase',
                },
              },
              schema: {
                $ref: '#/components/schemas/marketplace-purchase',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Not Found when the account has not purchased the listing',
        },
      },
      summary: 'Get a subscription plan for an account',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/marketplace_listing/plans': {
    get: {
      description:
        'Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-plans',
      },
      operationId: 'apps/list-plans',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-listing-plan-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-listing-plan',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List plans',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/marketplace_listing/plans/{plan_id}/accounts': {
    get: {
      description:
        "Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan',
      },
      operationId: 'apps/list-accounts-for-plan',
      parameters: [
        {
          $ref: '#/components/parameters/plan-id',
        },
        {
          $ref: '#/components/parameters/sort',
        },
        {
          description: 'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-purchase',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List accounts for a plan',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/marketplace_listing/stubbed/accounts/{account_id}': {
    get: {
      description:
        "Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed',
      },
      operationId: 'apps/get-subscription-plan-for-account-stubbed',
      parameters: [
        {
          $ref: '#/components/parameters/account-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase',
                },
              },
              schema: {
                $ref: '#/components/schemas/marketplace-purchase',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '404': {
          description: 'Not Found when the account has not purchased the listing',
        },
      },
      summary: 'Get a subscription plan for an account (stubbed)',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/marketplace_listing/stubbed/plans': {
    get: {
      description:
        'Lists all plans that are part of your GitHub Marketplace listing.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-plans-stubbed',
      },
      operationId: 'apps/list-plans-stubbed',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-listing-plan-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-listing-plan',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
      },
      summary: 'List plans (stubbed)',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/marketplace_listing/stubbed/plans/{plan_id}/accounts': {
    get: {
      description:
        "Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.\n\nGitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed',
      },
      operationId: 'apps/list-accounts-for-plan-stubbed',
      parameters: [
        {
          $ref: '#/components/parameters/plan-id',
        },
        {
          $ref: '#/components/parameters/sort',
        },
        {
          description: 'To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/marketplace-purchase-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/marketplace-purchase',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
      },
      summary: 'List accounts for a plan (stubbed)',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/meta': {
    get: {
      description:
        "Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see \"[About GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/).\"\n\n**Note:** This endpoint returns both IPv4 and IPv6 addresses. However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if IPv6 is supported.\n\n**Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/meta#get-github-meta-information',
      },
      operationId: 'meta/get',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/api-overview',
                },
              },
              schema: {
                $ref: '#/components/schemas/api-overview',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Get GitHub meta information',
      tags: ['meta'],
      'x-github': {
        category: 'meta',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/networks/{owner}/{repo}/events': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories',
      },
      operationId: 'activity/list-public-events-for-repo-network',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repo-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List public events for a network of repositories',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/notifications': {
    get: {
      description: 'List all notifications for the current user, sorted by most recently updated.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user',
      },
      operationId: 'activity/list-notifications-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/all',
        },
        {
          $ref: '#/components/parameters/participating',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/before',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          description: 'The number of results per page (max 50).',
          in: 'query',
          name: 'per_page',
          schema: {
            default: 50,
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/thread',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List notifications for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
    put: {
      description:
        'Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#mark-notifications-as-read',
      },
      operationId: 'activity/mark-notifications-as-read',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  last_read_at: '2022-06-10T00:00:00Z',
                  read: true,
                },
              },
            },
            schema: {
              properties: {
                last_read_at: {
                  description:
                    'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.',
                  format: 'date-time',
                  type: 'string',
                },
                read: {
                  description: 'Whether the notification has been read.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/notifications-mark-read',
                },
              },
              schema: {
                properties: {
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '205': {
          description: 'Reset Content',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Mark notifications as read',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
  },
  '/notifications/threads/{thread_id}': {
    get: {
      description: 'Gets information about a notification thread.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#get-a-thread',
      },
      operationId: 'activity/get-thread',
      parameters: [
        {
          $ref: '#/components/parameters/thread-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread',
                },
              },
              schema: {
                $ref: '#/components/schemas/thread',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get a thread',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
    patch: {
      description:
        'Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#mark-a-thread-as-read',
      },
      operationId: 'activity/mark-thread-as-read',
      parameters: [
        {
          $ref: '#/components/parameters/thread-id',
        },
      ],
      responses: {
        '205': {
          description: 'Reset Content',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Mark a thread as read',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
  },
  '/notifications/threads/{thread_id}/subscription': {
    delete: {
      description:
        'Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#delete-a-thread-subscription',
      },
      operationId: 'activity/delete-thread-subscription',
      parameters: [
        {
          $ref: '#/components/parameters/thread-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Delete a thread subscription',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
    get: {
      description:
        "This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).\n\nNote that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user',
      },
      operationId: 'activity/get-thread-subscription-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/thread-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-subscription',
                },
              },
              schema: {
                $ref: '#/components/schemas/thread-subscription',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get a thread subscription for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
    put: {
      description:
        'If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.\n\nYou can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.\n\nUnsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#set-a-thread-subscription',
      },
      operationId: 'activity/set-thread-subscription',
      parameters: [
        {
          $ref: '#/components/parameters/thread-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ignored: false,
                },
              },
            },
            schema: {
              properties: {
                ignored: {
                  default: false,
                  description: 'Whether to block all notifications from a thread.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-subscription',
                },
              },
              schema: {
                $ref: '#/components/schemas/thread-subscription',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Set a thread subscription',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
  },
  '/octocat': {
    get: {
      description: 'Get the octocat as ASCII art',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/meta#get-octocat',
      },
      operationId: 'meta/get-octocat',
      parameters: [
        {
          description: "The words to show in Octocat's speech bubble",
          in: 'query',
          name: 's',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/octocat-stream': {
              examples: {
                default: {
                  $ref: '#/components/examples/octocat',
                },
              },
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get Octocat',
      tags: ['meta'],
      'x-github': {
        category: 'meta',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/organizations': {
    get: {
      description:
        'Lists all organizations, in the order that they were created on GitHub.\n\n**Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations',
      },
      operationId: 'orgs/list',
      parameters: [
        {
          $ref: '#/components/parameters/since-org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              example: '<https://api.github.com/organizations?since=135>; rel="next"',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'List organizations',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}': {
    get: {
      description:
        'To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).\n\nGitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization\'s GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see \'Response with GitHub plan information\' below."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization',
      },
      operationId: 'orgs/get',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/organization-full-default-response',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-full',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "**Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).\n\nEnables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization',
      },
      operationId: 'orgs/update',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  billing_email: 'mona@github.com',
                  company: 'GitHub',
                  default_repository_permission: 'read',
                  description: 'GitHub, the company.',
                  email: 'mona@github.com',
                  location: 'San Francisco',
                  members_allowed_repository_creation_type: 'all',
                  members_can_create_repositories: true,
                  name: 'github',
                  twitter_username: 'github',
                },
              },
            },
            schema: {
              properties: {
                advanced_security_enabled_for_new_repositories: {
                  description:
                    'Whether GitHub Advanced Security is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                billing_email: {
                  description: 'Billing email address. This address is not publicized.',
                  type: 'string',
                },
                blog: {
                  example: '"http://github.blog"',
                  type: 'string',
                },
                company: {
                  description: 'The company name.',
                  type: 'string',
                },
                default_repository_permission: {
                  default: 'read',
                  description: 'Default permission level members have for organization repositories.',
                  enum: ['read', 'write', 'admin', 'none'],
                  type: 'string',
                },
                dependabot_alerts_enabled_for_new_repositories: {
                  description:
                    'Whether Dependabot alerts is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                dependabot_security_updates_enabled_for_new_repositories: {
                  description:
                    'Whether Dependabot security updates is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                dependency_graph_enabled_for_new_repositories: {
                  description:
                    'Whether dependency graph is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                description: {
                  description: 'The description of the company.',
                  type: 'string',
                },
                email: {
                  description: 'The publicly visible email address.',
                  type: 'string',
                },
                has_organization_projects: {
                  description: 'Whether an organization can use organization projects.',
                  type: 'boolean',
                },
                has_repository_projects: {
                  description: 'Whether repositories that belong to the organization can use repository projects.',
                  type: 'boolean',
                },
                location: {
                  description: 'The location.',
                  type: 'string',
                },
                members_allowed_repository_creation_type: {
                  description:
                    'Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.',
                  enum: ['all', 'private', 'none'],
                  type: 'string',
                },
                members_can_create_internal_repositories: {
                  description:
                    'Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
                  type: 'boolean',
                },
                members_can_create_pages: {
                  default: true,
                  description:
                    'Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.',
                  type: 'boolean',
                },
                members_can_create_private_pages: {
                  default: true,
                  description:
                    'Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.',
                  type: 'boolean',
                },
                members_can_create_private_repositories: {
                  description:
                    'Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
                  type: 'boolean',
                },
                members_can_create_public_pages: {
                  default: true,
                  description:
                    'Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.',
                  type: 'boolean',
                },
                members_can_create_public_repositories: {
                  description:
                    'Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.',
                  type: 'boolean',
                },
                members_can_create_repositories: {
                  default: true,
                  description:
                    'Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.',
                  type: 'boolean',
                },
                members_can_fork_private_repositories: {
                  default: false,
                  description: 'Whether organization members can fork private organization repositories.',
                  type: 'boolean',
                },
                name: {
                  description: 'The shorthand name of the company.',
                  type: 'string',
                },
                secret_scanning_enabled_for_new_repositories: {
                  description:
                    'Whether secret scanning is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                secret_scanning_push_protection_custom_link: {
                  description:
                    'If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.',
                  type: 'string',
                },
                secret_scanning_push_protection_custom_link_enabled: {
                  description:
                    'Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.',
                  type: 'boolean',
                },
                secret_scanning_push_protection_enabled_for_new_repositories: {
                  description:
                    'Whether secret scanning push protection is automatically enabled for new repositories.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nYou can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.',
                  type: 'boolean',
                },
                twitter_username: {
                  description: 'The Twitter username of the company.',
                  type: 'string',
                },
                web_commit_signoff_required: {
                  default: false,
                  description:
                    "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-full',
              },
            },
          },
          description: 'Response',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/validation-error',
                  },
                  {
                    $ref: '#/components/schemas/validation-error-simple',
                  },
                ],
              },
            },
          },
          description: 'Validation failed',
        },
      },
      summary: 'Update an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/actions/cache/usage': {
    get: {
      description:
        'Gets the total GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-an-organization',
      },
      operationId: 'actions/get-actions-cache-usage-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-usage-org-enterprise',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-cache-usage-org-enterprise',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'Get GitHub Actions cache usage for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cache',
      },
    },
  },
  '/orgs/{org}/actions/cache/usage-by-repository': {
    get: {
      description:
        'Lists repositories and their GitHub Actions cache usage for an organization.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `organization_admistration:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-repositories-with-github-actions-cache-usage-for-an-organization',
      },
      operationId: 'actions/get-actions-cache-usage-by-repo-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-actions-cache-usage-by-repo',
                },
              },
              schema: {
                properties: {
                  repository_cache_usages: {
                    items: {
                      $ref: '#/components/schemas/actions-cache-usage-by-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repository_cache_usages'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repositories with GitHub Actions cache usage for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cache',
      },
    },
  },
  '/orgs/{org}/actions/oidc/customization/sub': {
    get: {
      description:
        'Gets the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\nGitHub Apps must have the `organization_administration:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization',
      },
      operationId: 'oidc/get-oidc-custom-sub-template-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/oidc-custom-sub',
                },
              },
              schema: {
                $ref: '#/components/schemas/oidc-custom-sub',
              },
            },
          },
          description: 'A JSON serialized template for OIDC subject claim customization',
        },
      },
      summary: 'Get the customization template for an OIDC subject claim for an organization',
      tags: ['oidc'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        subcategory: 'oidc',
      },
    },
    put: {
      description:
        'Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `write:org` scope to use this endpoint.\nGitHub Apps must have the `admin:org` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization',
      },
      operationId: 'oidc/update-oidc-custom-sub-template-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/oidc-custom-sub',
              },
            },
            schema: {
              $ref: '#/components/schemas/oidc-custom-sub',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Empty response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Set the customization template for an OIDC subject claim for an organization',
      tags: ['oidc'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        previews: [],
        subcategory: 'oidc',
      },
    },
  },
  '/orgs/{org}/actions/permissions': {
    get: {
      description:
        'Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization',
      },
      operationId: 'actions/get-github-actions-permissions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-organization-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-organization-permissions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Actions permissions for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization',
      },
      operationId: 'actions/set-github-actions-permissions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allowed_actions: 'selected',
                  enabled_repositories: 'all',
                },
              },
            },
            schema: {
              properties: {
                allowed_actions: {
                  $ref: '#/components/schemas/allowed-actions',
                },
                enabled_repositories: {
                  $ref: '#/components/schemas/enabled-repositories',
                },
              },
              required: ['enabled_repositories'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set GitHub Actions permissions for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/orgs/{org}/actions/permissions/repositories': {
    get: {
      description:
        'Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization',
      },
      operationId: 'actions/list-selected-repositories-enabled-github-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'number',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List selected repositories enabled for GitHub Actions in an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization',
      },
      operationId: 'actions/set-selected-repositories-enabled-github-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [32, 42],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'List of repository IDs to enable for GitHub Actions.',
                  items: {
                    description: 'Unique identifier of the repository.',
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set selected repositories enabled for GitHub Actions in an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/orgs/{org}/actions/permissions/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization',
      },
      operationId: 'actions/disable-selected-repository-github-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Disable a selected repository for GitHub Actions in an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization',
      },
      operationId: 'actions/enable-selected-repository-github-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Enable a selected repository for GitHub Actions in an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/orgs/{org}/actions/permissions/selected-actions': {
    get: {
      description:
        'Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization',
      },
      operationId: 'actions/get-allowed-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/selected-actions',
                },
              },
              schema: {
                $ref: '#/components/schemas/selected-actions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get allowed actions and reusable workflows for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization',
      },
      operationId: 'actions/set-allowed-actions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              selected_actions: {
                $ref: '#/components/examples/selected-actions',
              },
            },
            schema: {
              $ref: '#/components/schemas/selected-actions',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set allowed actions and reusable workflows for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/orgs/{org}/actions/permissions/workflow': {
    get: {
      description:
        'Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,\nas well as whether GitHub Actions can submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-default-workflow-permissions',
      },
      operationId: 'actions/get-github-actions-default-workflow-permissions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-default-workflow-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-get-default-workflow-permissions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get default workflow permissions for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets if GitHub Actions\ncan submit approving pull request reviews. For more information, see\n"[Setting the permissions of the GITHUB_TOKEN for your organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-default-workflow-permissions',
      },
      operationId: 'actions/set-github-actions-default-workflow-permissions-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-default-workflow-permissions',
              },
            },
            schema: {
              $ref: '#/components/schemas/actions-set-default-workflow-permissions',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Success response',
        },
      },
      summary: 'Set default workflow permissions for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/orgs/{org}/actions/required_workflows': {
    get: {
      description:
        'List all required workflows in an organization.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-required-workflows',
      },
      operationId: 'actions/list-required-workflows',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflows-paginated',
                },
              },
              schema: {
                properties: {
                  required_workflows: {
                    items: {
                      $ref: '#/components/schemas/required-workflow',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'required_workflows'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List required workflows',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
    post: {
      description:
        'Create a required workflow in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-required-workflow',
      },
      operationId: 'actions/create-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  repository_id: 53,
                  scope: 'selected',
                  selected_repository_ids: [32, 91],
                  workflow_file_path: '.github/workflows/ci.yaml',
                },
              },
            },
            schema: {
              properties: {
                repository_id: {
                  description: 'The ID of the repository that contains the workflow file.',
                  type: 'string',
                },
                scope: {
                  default: 'all',
                  description:
                    'Enable the required workflow for all repositories or selected repositories in the organization.',
                  enum: ['selected', 'all'],
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.',
                  items: {
                    description: 'Unique identifier of the repository.',
                    type: 'integer',
                  },
                  type: 'array',
                },
                workflow_file_path: {
                  description: 'Path of the workflow file to be configured as a required workflow.',
                  type: 'string',
                },
              },
              required: ['workflow_file_path', 'repository_id'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow',
                },
              },
              schema: {
                $ref: '#/components/schemas/required-workflow',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}': {
    delete: {
      description:
        'Deletes a required workflow configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-a-required-workflow',
      },
      operationId: 'actions/delete-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
    get: {
      description:
        'Get a required workflow configured in an organization.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-required-workflow',
      },
      operationId: 'actions/get-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow',
                },
              },
              schema: {
                $ref: '#/components/schemas/required-workflow',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
    patch: {
      description:
        'Update a required workflow in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#update-a-required-workflow',
      },
      operationId: 'actions/update-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  repository_id: 53,
                  scope: 'selected',
                  selected_repository_ids: [32, 91],
                  workflow_file_path: '.github/workflows/ci.yaml',
                },
              },
            },
            schema: {
              properties: {
                repository_id: {
                  description: 'The ID of the repository that contains the workflow file.',
                  type: 'string',
                },
                scope: {
                  default: 'all',
                  description:
                    'Enable the required workflow for all repositories or selected repositories in the organization.',
                  enum: ['selected', 'all'],
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`.',
                  items: {
                    description: 'Unique identifier of the repository.',
                    type: 'integer',
                  },
                  type: 'array',
                },
                workflow_file_path: {
                  description: 'Path of the workflow file to be configured as a required workflow.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/required-workflow',
                },
              },
              schema: {
                $ref: '#/components/schemas/required-workflow',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories': {
    get: {
      description:
        'Lists the selected repositories that are configured for a required workflow in an organization. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `read:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description:
          'API method documentation https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows',
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-required-workflows',
      },
      operationId: 'actions/list-selected-repositories-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'number',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Success',
        },
        '404': {
          description: 'Resource Not Found',
        },
      },
      summary: 'List selected repositories for a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
    put: {
      description:
        'Sets the repositories for a required workflow that is required for selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-for-a-required-workflow',
      },
      operationId: 'actions/set-selected-repos-to-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [32, 91],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'The IDs of the repositories for which the workflow should be required.',
                  items: {
                    description: 'Unique identifier of the repository.',
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Sets repositories for a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-a-repository-from-selected-repositories-list-for-a-required-workflow',
      },
      operationId: 'actions/remove-selected-repo-from-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Success',
        },
        '404': {
          description: 'Resource Not Found',
        },
        '422': {
          description: 'Validation Error',
        },
      },
      summary: 'Remove a selected repository from required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
    put: {
      description:
        'Adds a repository to a required workflow. To use this endpoint, the required workflow must be configured to run on selected repositories.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\nFor more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#add-a-repository-to-selected-repositories-list-for-a-required-workflow',
      },
      operationId: 'actions/add-selected-repo-to-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/required-workflow-id',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Success',
        },
        '404': {
          description: 'Resource Not Found',
        },
        '422': {
          description: 'Validation Error',
        },
      },
      summary: 'Add a repository to a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/orgs/{org}/actions/runners': {
    get: {
      description:
        'Lists all self-hosted runners configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization',
      },
      operationId: 'actions/list-self-hosted-runners-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-paginated',
                },
              },
              schema: {
                properties: {
                  runners: {
                    items: {
                      $ref: '#/components/schemas/runner',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'runners'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List self-hosted runners for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/downloads': {
    get: {
      description:
        'Lists binaries for the runner application that you can download and run.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization',
      },
      operationId: 'actions/list-runner-applications-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-application-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/runner-application',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List runner applications for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/registration-token': {
    post: {
      description:
        'Returns a token that you can pass to the `config` script. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using registration token\n\nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org --token TOKEN\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization',
      },
      operationId: 'actions/create-registration-token-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token',
                },
              },
              schema: {
                $ref: '#/components/schemas/authentication-token',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a registration token for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/remove-token': {
    post: {
      description:
        'Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\n\n#### Example using remove token\n\nTo remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this\nendpoint.\n\n```\n./config.sh remove --token TOKEN\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization',
      },
      operationId: 'actions/create-remove-token-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/authentication-token',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a remove token for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/{runner_id}': {
    delete: {
      description:
        'Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization',
      },
      operationId: 'actions/delete-self-hosted-runner-from-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a self-hosted runner from an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    get: {
      description:
        'Gets a specific self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/get-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner',
                },
              },
              schema: {
                $ref: '#/components/schemas/runner',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/{runner_id}/labels': {
    delete: {
      description:
        'Remove all custom labels from a self-hosted runner configured in an\norganization. Returns the remaining read-only labels from the runner.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/remove-all-custom-labels-from-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels_readonly',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Remove all custom labels from a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    get: {
      description:
        'Lists all labels for a self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/list-labels-for-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List labels for a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    post: {
      description:
        'Add custom labels to a self-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/add-custom-labels-to-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'],
                },
              },
            },
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to add to the runner.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  minItems: 1,
                  type: 'array',
                },
              },
              required: ['labels'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Add custom labels to a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    put: {
      description:
        'Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in an organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/set-custom-labels-for-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'],
                },
              },
            },
            schema: {
              properties: {
                labels: {
                  description:
                    'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  minItems: 0,
                  type: 'array',
                },
              },
              required: ['labels'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Set custom labels for a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/runners/{runner_id}/labels/{name}': {
    delete: {
      description:
        'Remove a custom label from a self-hosted runner configured\nin an organization. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization',
      },
      operationId: 'actions/remove-custom-label-from-self-hosted-runner-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
        {
          $ref: '#/components/parameters/runner-label-name',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Remove a custom label from a self-hosted runner for an organization',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/orgs/{org}/actions/secrets': {
    get: {
      description:
        'Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-organization-secrets',
      },
      operationId: 'actions/list-org-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/organization-actions-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization secrets',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/actions/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-an-organization-public-key',
      },
      operationId: 'actions/get-org-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization public key',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/actions/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-an-organization-secret',
      },
      operationId: 'actions/delete-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        'Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-an-organization-secret',
      },
      operationId: 'actions/get-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-actions-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to\nuse this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret',
      },
      operationId: 'actions/create-or-update-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                  selected_repository_ids: [1296269, 1296280],
                  visibility: 'selected',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
                visibility: {
                  description:
                    'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.',
                  enum: ['all', 'private', 'selected'],
                  type: 'string',
                },
              },
              required: ['visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/actions/secrets/{secret_name}/repositories': {
    get: {
      description:
        'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret',
      },
      operationId: 'actions/list-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List selected repositories for an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret',
      },
      operationId: 'actions/set-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set selected repositories for an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret',
      },
      operationId: 'actions/remove-selected-repo-from-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list',
        },
        '409': {
          description: 'Conflict when visibility type not set to selected',
        },
      },
      summary: 'Remove selected repository from an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret',
      },
      operationId: 'actions/add-selected-repo-to-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list',
        },
        '409': {
          description: 'Conflict when visibility type is not set to selected',
        },
      },
      summary: 'Add selected repository to an organization secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/actions/variables': {
    get: {
      description:
        'Lists all organization variables. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#list-organization-variables',
      },
      operationId: 'actions/list-org-variables',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variables-per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-variables-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  variables: {
                    items: {
                      $ref: '#/components/schemas/organization-actions-variable',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'variables'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization variables',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    post: {
      description:
        'Creates an organization variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#create-an-organization-variable',
      },
      operationId: 'actions/create-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  selected_repository_ids: [1296269, 1296280],
                  value: 'octocat',
                  visibility: 'selected',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
                visibility: {
                  description:
                    'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.',
                  enum: ['all', 'private', 'selected'],
                  type: 'string',
                },
              },
              required: ['name', 'value', 'visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a variable',
        },
      },
      summary: 'Create an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/orgs/{org}/actions/variables/{name}': {
    delete: {
      description:
        'Deletes an organization variable using the variable name.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#delete-an-organization-variable',
      },
      operationId: 'actions/delete-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    get: {
      description:
        'Gets a specific variable in an organization. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#get-an-organization-variable',
      },
      operationId: 'actions/get-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-actions-variable',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-actions-variable',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    patch: {
      description:
        'Updates an organization variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.\nGitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#update-an-organization-variable',
      },
      operationId: 'actions/update-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  selected_repository_ids: [1296269, 1296280],
                  value: 'octocat',
                  visibility: 'selected',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
                visibility: {
                  description:
                    'The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.',
                  enum: ['all', 'private', 'selected'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Update an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/orgs/{org}/actions/variables/{name}/repositories': {
    get: {
      description:
        'Lists all repositories that can access an organization variable that is available to selected repositories. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:read` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable',
      },
      operationId: 'actions/list-selected-repos-for-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`',
        },
      },
      summary: 'List selected repositories for an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    put: {
      description:
        'Replaces all repositories for an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable',
      },
      operationId: 'actions/set-selected-repos-for-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description: 'The IDs of the repositories that can access the organization variable.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`',
        },
      },
      summary: 'Set selected repositories for an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable',
      },
      operationId: 'actions/remove-selected-repo-from-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`',
        },
      },
      summary: 'Remove selected repository from an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    put: {
      description:
        'Adds a repository to an organization variable that is available to selected repositories. Organization variables that are available to selected repositories have their `visibility` field set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `organization_actions_variables:write` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable',
      },
      operationId: 'actions/add-selected-repo-to-org-variable',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '409': {
          description: 'Response when the visibility of the variable is not set to `selected`',
        },
      },
      summary: 'Add selected repository to an organization variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/orgs/{org}/blocks': {
    get: {
      description: 'List the users blocked by an organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization',
      },
      operationId: 'orgs/list-blocked-users',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List users blocked by an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
  },
  '/orgs/{org}/blocks/{username}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization',
      },
      operationId: 'orgs/unblock-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Unblock a user from an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization',
      },
      operationId: 'orgs/check-blocked-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'If the user is blocked',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'If the user is not blocked',
        },
      },
      summary: 'Check if a user is blocked by an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
    put: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization',
      },
      operationId: 'orgs/block-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Block a user from an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
  },
  '/orgs/{org}/code-scanning/alerts': {
    get: {
      description:
        'Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible repositories are repositories that are owned by organizations that you own or for which you are a security manager. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nTo use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-by-organization',
      },
      operationId: 'code-scanning/list-alerts-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/tool-name',
        },
        {
          $ref: '#/components/parameters/tool-guid',
        },
        {
          $ref: '#/components/parameters/pagination-before',
        },
        {
          $ref: '#/components/parameters/pagination-after',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          description: 'If specified, only code scanning alerts with this state will be returned.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-state',
          },
        },
        {
          description: 'The property by which to sort the results.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated'],
            type: 'string',
          },
        },
        {
          description: 'If specified, only code scanning alerts with this severity will be returned.',
          in: 'query',
          name: 'severity',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-severity',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-organization-alert-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-organization-alert-items',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List code scanning alerts for an organization',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/codespaces': {
    get: {
      description:
        'Lists the codespaces associated to a specified organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-in-organization',
      },
      operationId: 'codespaces/list-in-organization',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list',
                },
              },
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'codespaces'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List codespaces for the organization',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/codespaces/billing': {
    put: {
      description:
        'Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces billing permissions for users according to the visibility.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#set-codespaces-billing',
      },
      operationId: 'codespaces/set-codespaces-billing',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'],
                  visibility: 'selected_members',
                },
              },
            },
            schema: {
              properties: {
                selected_usernames: {
                  description:
                    'The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  type: 'array',
                },
                visibility: {
                  description:
                    'Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.',
                  enum: ['disabled', 'selected_members', 'all_members', 'all_members_and_outside_collaborators'],
                  type: 'string',
                },
              },
              required: ['visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          description: 'Users are neither members nor collaborators of this organization.',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Manage access control for organization codespaces',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/codespaces/billing/selected_users': {
    delete: {
      description:
        'Codespaces for the specified users will no longer be billed to the organization.\nTo use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#delete-codespaces-billing-users',
      },
      operationId: 'codespaces/delete-codespaces-billing-users',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'],
                },
              },
            },
            schema: {
              properties: {
                selected_usernames: {
                  description:
                    'The usernames of the organization members whose codespaces should not be billed to the organization.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  type: 'array',
                },
              },
              required: ['selected_usernames'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          description: 'Users are neither members nor collaborators of this organization.',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Removes users from Codespaces billing for an organization',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
    post: {
      description:
        'Codespaces for the specified users will be billed to the organization.\nTo use this endpoint, the billing settings for the organization must be set to `selected_members`. For information on how to change this setting please see [these docs].(https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces) You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#set-codespaces-billing-users',
      },
      operationId: 'codespaces/set-codespaces-billing-users',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_usernames: ['johnDoe', 'atomIO'],
                },
              },
            },
            schema: {
              properties: {
                selected_usernames: {
                  description:
                    'The usernames of the organization members whose codespaces be billed to the organization.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  type: 'array',
                },
              },
              required: ['selected_usernames'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response when successfully modifying permissions.',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          description: 'Users are neither members nor collaborators of this organization.',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Add users to Codespaces billing for an organization',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/codespaces/secrets': {
    get: {
      description:
        'Lists all Codespaces secrets available at the organization-level without revealing their encrypted values.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-organization-secrets',
      },
      operationId: 'codespaces/list-org-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/codespaces-org-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization secrets',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
  },
  '/orgs/{org}/codespaces/secrets/public-key': {
    get: {
      description:
        'Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key',
      },
      operationId: 'codespaces/get-org-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespaces-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization public key',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
  },
  '/orgs/{org}/codespaces/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes an organization secret using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#delete-an-organization-secret',
      },
      operationId: 'codespaces/delete-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
    get: {
      description:
        'Gets an organization secret without revealing its encrypted value.\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-an-organization-secret',
      },
      operationId: 'codespaces/get-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespaces-org-secret',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'Get an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
    put: {
      description:
        'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret',
      },
      operationId: 'codespaces/create-or-update-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                  selected_repository_ids: [1296269, 1296280],
                  visibility: 'selected',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'The ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
                visibility: {
                  description:
                    'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.',
                  enum: ['all', 'private', 'selected'],
                  type: 'string',
                },
              },
              required: ['visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create or update an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
  },
  '/orgs/{org}/codespaces/secrets/{secret_name}/repositories': {
    get: {
      description:
        'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret',
      },
      operationId: 'codespaces/list-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List selected repositories for an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
    put: {
      description:
        'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret',
      },
      operationId: 'codespaces/set-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          description: 'Conflict when visibility type not set to selected',
        },
      },
      summary: 'Set selected repositories for an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
  },
  '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret',
      },
      operationId: 'codespaces/remove-selected-repo-from-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          description: 'Conflict when visibility type not set to selected',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove selected repository from an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
    put: {
      description:
        'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/codespaces#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#add-selected-repository-to-an-organization-secret',
      },
      operationId: 'codespaces/add-selected-repo-to-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          description: 'Conflict when visibility type is not set to selected',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add selected repository to an organization secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organization-secrets',
      },
    },
  },
  '/orgs/{org}/dependabot/alerts': {
    get: {
      description:
        'Lists Dependabot alerts for an organization.\n\nTo use this endpoint, you must be an owner or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\n\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization',
      },
      operationId: 'dependabot/list-alerts-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/pagination-before',
        },
        {
          $ref: '#/components/parameters/pagination-after',
        },
        {
          $ref: '#/components/parameters/pagination-first',
        },
        {
          $ref: '#/components/parameters/pagination-last',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-organization',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert-with-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'List Dependabot alerts for an organization',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'alerts',
      },
    },
  },
  '/orgs/{org}/dependabot/secrets': {
    get: {
      description:
        'Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#list-organization-secrets',
      },
      operationId: 'dependabot/list-org-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-dependabot-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/organization-dependabot-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization secrets',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/dependabot/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key',
      },
      operationId: 'dependabot/get-org-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependabot-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization public key',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/dependabot/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#delete-an-organization-secret',
      },
      operationId: 'dependabot/delete-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        'Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#get-an-organization-secret',
      },
      operationId: 'dependabot/get-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-dependabot-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-dependabot-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization\npermission to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret',
      },
      operationId: 'dependabot/create-or-update-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                  selected_repository_ids: ['1296269', '1296280'],
                  visibility: 'selected',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                visibility: {
                  description:
                    'Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.',
                  enum: ['all', 'private', 'selected'],
                  type: 'string',
                },
              },
              required: ['visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/dependabot/secrets/{secret_name}/repositories': {
    get: {
      description:
        'Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret',
      },
      operationId: 'dependabot/list-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List selected repositories for an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret',
      },
      operationId: 'dependabot/set-selected-repos-for-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: [64780797],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set selected repositories for an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description:
        'Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret',
      },
      operationId: 'dependabot/remove-selected-repo-from-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response when repository was removed from the selected list',
        },
        '409': {
          description: 'Conflict when visibility type not set to selected',
        },
      },
      summary: 'Remove selected repository from an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/dependabot#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` organization permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#add-selected-repository-to-an-organization-secret',
      },
      operationId: 'dependabot/add-selected-repo-to-org-secret',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list',
        },
        '409': {
          description: 'Conflict when visibility type is not set to selected',
        },
      },
      summary: 'Add selected repository to an organization secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/orgs/{org}/events': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-public-organization-events',
      },
      operationId: 'activity/list-public-org-events',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                '200-response': {
                  $ref: '#/components/examples/public-org-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List public organization events',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/orgs/{org}/failed_invitations': {
    get: {
      description:
        'The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations',
      },
      operationId: 'orgs/list-failed-invitations',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List failed organization invitations',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/hooks': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-webhooks',
      },
      operationId: 'orgs/list-webhooks',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/org-hook',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List organization webhooks',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
    post: {
      description: "Here's how you can create a hook that posts payloads in JSON format:",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#create-an-organization-webhook',
      },
      operationId: 'orgs/create-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true,
                  config: {
                    content_type: 'json',
                    url: 'http://example.com/webhook',
                  },
                  events: ['push', 'pull_request'],
                  name: 'web',
                },
              },
            },
            schema: {
              properties: {
                active: {
                  default: true,
                  description:
                    'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
                  type: 'boolean',
                },
                config: {
                  description:
                    'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).',
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type',
                    },
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl',
                    },
                    password: {
                      example: '"password"',
                      type: 'string',
                    },
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret',
                    },
                    url: {
                      $ref: '#/components/schemas/webhook-config-url',
                    },
                    username: {
                      example: '"kdaigle"',
                      type: 'string',
                    },
                  },
                  required: ['url'],
                  type: 'object',
                },
                events: {
                  default: ['push'],
                  description:
                    'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                name: {
                  description: 'Must be passed as "web".',
                  type: 'string',
                },
              },
              required: ['name', 'config'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-hook',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/orgs/octocat/hooks/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook',
      },
      operationId: 'orgs/delete-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
    get: {
      description:
        'Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization-webhook',
      },
      operationId: 'orgs/get-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-hook',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
    patch: {
      description:
        'Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization-webhook',
      },
      operationId: 'orgs/update-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true,
                  events: ['pull_request'],
                },
              },
            },
            schema: {
              properties: {
                active: {
                  default: true,
                  description:
                    'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
                  type: 'boolean',
                },
                config: {
                  description:
                    'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).',
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type',
                    },
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl',
                    },
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret',
                    },
                    url: {
                      $ref: '#/components/schemas/webhook-config-url',
                    },
                  },
                  required: ['url'],
                  type: 'object',
                },
                events: {
                  default: ['push'],
                  description:
                    'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                name: {
                  example: '"web"',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-hook-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-hook',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}/config': {
    get: {
      description:
        'Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."\n\nAccess tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization',
      },
      operationId: 'orgs/get-webhook-config-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a webhook configuration for an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
    patch: {
      description:
        'Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."\n\nAccess tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization',
      },
      operationId: 'orgs/update-webhook-config-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Update an existing webhook',
                value: {
                  content_type: 'json',
                  insecure_ssl: '0',
                  secret: '********',
                  url: 'http://example.com/webhook',
                },
              },
            },
            schema: {
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type',
                },
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl',
                },
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret',
                },
                url: {
                  $ref: '#/components/schemas/webhook-config-url',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a webhook configuration for an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}/deliveries': {
    get: {
      description: 'Returns a list of webhook deliveries for a webhook configured in an organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook',
      },
      operationId: 'orgs/list-webhook-deliveries',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/cursor',
        },
        {
          in: 'query',
          name: 'redelivery',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List deliveries for an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}': {
    get: {
      description: 'Returns a delivery for a webhook configured in an organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook',
      },
      operationId: 'orgs/get-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook-delivery',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a webhook delivery for an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    post: {
      description: 'Redeliver a delivery for a webhook configured in an organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook',
      },
      operationId: 'orgs/redeliver-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Redeliver a delivery for an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/hooks/{hook_id}/pings': {
    post: {
      description:
        'This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook',
      },
      operationId: 'orgs/ping-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Ping an organization webhook',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'webhooks',
      },
    },
  },
  '/orgs/{org}/installation': {
    get: {
      description:
        "Enables an authenticated GitHub App to find the organization's installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app',
      },
      operationId: 'apps/get-org-installation',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation',
                },
              },
              schema: {
                $ref: '#/components/schemas/installation',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an organization installation for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/installations': {
    get: {
      description:
        'Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization',
      },
      operationId: 'orgs/list-app-installations',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation-paginated',
                },
              },
              schema: {
                properties: {
                  installations: {
                    items: {
                      $ref: '#/components/schemas/installation',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'installations'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List app installations for an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/interaction-limits': {
    delete: {
      description:
        'Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization',
      },
      operationId: 'interactions/remove-restrictions-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove interaction restrictions for an organization',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
    get: {
      description:
        'Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization',
      },
      operationId: 'interactions/get-restrictions-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response',
                },
              },
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response',
                  },
                  {
                    additionalProperties: false,
                    properties: {},
                    type: 'object',
                  },
                ],
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get interaction restrictions for an organization',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
    put: {
      description:
        'Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization',
      },
      operationId: 'interactions/set-restrictions-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expiry: 'one_month',
                  limit: 'collaborators_only',
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/interaction-limit',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response',
                },
              },
              schema: {
                $ref: '#/components/schemas/interaction-limit-response',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set interaction restrictions for an organization',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/invitations': {
    get: {
      description:
        'The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations',
      },
      operationId: 'orgs/list-pending-invitations',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          description: 'Filter invitations by their member role.',
          in: 'query',
          name: 'role',
          required: false,
          schema: {
            default: 'all',
            enum: ['all', 'admin', 'direct_member', 'billing_manager', 'hiring_manager'],
            type: 'string',
          },
        },
        {
          description: 'Filter invitations by their invitation source.',
          in: 'query',
          name: 'invitation_source',
          required: false,
          schema: {
            default: 'all',
            enum: ['all', 'member', 'scim'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List pending organization invitations',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    post: {
      description:
        'Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#create-an-organization-invitation',
      },
      operationId: 'orgs/create-invitation',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  email: 'octocat@github.com',
                  role: 'direct_member',
                  team_ids: [12, 26],
                },
              },
            },
            schema: {
              properties: {
                email: {
                  description:
                    '**Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.',
                  type: 'string',
                },
                invitee_id: {
                  description:
                    '**Required unless you provide `email`**. GitHub user ID for the person you are inviting.',
                  type: 'integer',
                },
                role: {
                  default: 'direct_member',
                  description:
                    'The role for the new member. \n * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.',
                  enum: ['admin', 'direct_member', 'billing_manager'],
                  type: 'string',
                },
                team_ids: {
                  description: 'Specify IDs for the teams you want to invite new members to.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation',
                },
              },
              schema: {
                $ref: '#/components/schemas/organization-invitation',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an organization invitation',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
        triggersNotification: true,
      },
    },
  },
  '/orgs/{org}/invitations/{invitation_id}': {
    delete: {
      description:
        'Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation',
      },
      operationId: 'orgs/cancel-invitation',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/invitation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Cancel an organization invitation',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
        triggersNotification: true,
      },
    },
  },
  '/orgs/{org}/invitations/{invitation_id}/teams': {
    get: {
      description:
        'List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams',
      },
      operationId: 'orgs/list-invitation-teams',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/invitation-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List organization invitation teams',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/issues': {
    get: {
      description:
        'List issues in an organization assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user',
      },
      operationId: 'issues/list-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          description:
            "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'assigned',
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'],
            type: 'string',
          },
        },
        {
          description: 'Indicates the state of the issues to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/labels',
        },
        {
          description: 'What to sort results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'comments'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List organization issues assigned to the authenticated user',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/members': {
    get: {
      description:
        'List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-members',
      },
      operationId: 'orgs/list-members',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          description:
            'Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.',
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'all',
            enum: ['2fa_disabled', 'all'],
            type: 'string',
          },
        },
        {
          description: 'Filter members returned by their role.',
          in: 'query',
          name: 'role',
          required: false,
          schema: {
            default: 'all',
            enum: ['all', 'admin', 'member'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List organization members',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/members/{username}': {
    delete: {
      description:
        "Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#remove-an-organization-member',
      },
      operationId: 'orgs/remove-member',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Remove an organization member',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    get: {
      description: 'Check if a user is, publicly or privately, a member of the organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user',
      },
      operationId: 'orgs/check-membership-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response if requester is an organization member and user is a member',
        },
        '302': {
          description: 'Response if requester is not an organization member',
          headers: {
            Location: {
              example: 'https://api.github.com/orgs/github/public_members/pezra',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          description: 'Not Found if requester is an organization member and user is not a member',
        },
      },
      summary: 'Check organization membership for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/members/{username}/codespaces': {
    get: {
      description:
        'Lists the codespaces that a member of an organization has for repositories in that organization.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-codespaces-for-user-in-org',
      },
      operationId: 'codespaces/get-codespaces-for-user-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list',
                },
              },
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'codespaces'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List codespaces for a user in organization',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/members/{username}/codespaces/{codespace_name}': {
    delete: {
      description:
        "Deletes a user's codespace.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces',
      },
      operationId: 'codespaces/delete-from-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Delete a codespace from the organization',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop': {
    post: {
      description:
        "Stops a user's codespace.\n\nYou must authenticate using an access token with the `admin:org` scope to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces',
      },
      operationId: 'codespaces/stop-in-organization',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Stop a codespace for an organization user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'organizations',
      },
    },
  },
  '/orgs/{org}/memberships/{username}': {
    delete: {
      description:
        "In order to remove a user's membership with an organization, the authenticated user must be an organization owner.\n\nIf the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user',
      },
      operationId: 'orgs/remove-membership-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Remove organization membership for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    get: {
      description:
        "In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user',
      },
      operationId: 'orgs/get-membership-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-has-an-active-admin-membership-with-organization': {
                  $ref: '#/components/examples/org-membership-response-if-user-has-an-active-admin-membership-with-organization',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get organization membership for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    put: {
      description:
        "Only authenticated organization owners can add a member to the organization or update the member's role.\n\n*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.\n    \n*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.\n\n**Rate limits**\n\nTo prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user',
      },
      operationId: 'orgs/set-membership-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Set an organization membership role for a user',
                value: {
                  role: 'member',
                },
              },
            },
            schema: {
              properties: {
                role: {
                  default: 'member',
                  description:
                    'The role to give the user in the organization. Can be one of:  \n * `admin` - The user will become an owner of the organization.  \n * `member` - The user will become a non-owner member of the organization.',
                  enum: ['admin', 'member'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-already-had-membership-with-organization': {
                  $ref: '#/components/examples/org-membership-response-if-user-has-an-active-admin-membership-with-organization',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set organization membership for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/migrations': {
    get: {
      description:
        'Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).\n\nA list of `repositories` is only returned for export migrations.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#list-organization-migrations',
      },
      operationId: 'migrations/list-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          description: 'Exclude attributes from the API response to improve performance',
          in: 'query',
          name: 'exclude',
          schema: {
            items: {
              description: 'Allowed values that can be passed to the exclude param.',
              enum: ['repositories'],
              example: 'repositories',
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/migration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization migrations',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
    post: {
      description: 'Initiates the generation of a migration archive.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#start-an-organization-migration',
      },
      operationId: 'migrations/start-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  lock_repositories: true,
                  repositories: ['github/Hello-World'],
                },
              },
            },
            schema: {
              properties: {
                exclude: {
                  description:
                    'Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.',
                  items: {
                    enum: ['repositories'],
                    type: 'string',
                  },
                  type: 'array',
                },
                exclude_attachments: {
                  default: false,
                  description:
                    'Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).',
                  example: true,
                  type: 'boolean',
                },
                exclude_git_data: {
                  default: false,
                  description: 'Indicates whether the repository git data should be excluded from the migration.',
                  type: 'boolean',
                },
                exclude_metadata: {
                  default: false,
                  description:
                    'Indicates whether metadata should be excluded and only git source should be included for the migration.',
                  type: 'boolean',
                },
                exclude_owner_projects: {
                  default: false,
                  description:
                    'Indicates whether projects owned by the organization or users should be excluded. from the migration.',
                  example: true,
                  type: 'boolean',
                },
                exclude_releases: {
                  default: false,
                  description:
                    'Indicates whether releases should be excluded from the migration (to reduce migration archive file size).',
                  example: true,
                  type: 'boolean',
                },
                lock_repositories: {
                  default: false,
                  description:
                    'Indicates whether repositories should be locked (to prevent manipulation) while migrating data.',
                  example: true,
                  type: 'boolean',
                },
                org_metadata_only: {
                  default: false,
                  description:
                    'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).',
                  example: true,
                  type: 'boolean',
                },
                repositories: {
                  description: 'A list of arrays indicating which repositories should be migrated.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              required: ['repositories'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/migration',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Start an organization migration',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/migrations/{migration_id}': {
    get: {
      description:
        "Fetches the status of a migration.\n\nThe `state` of a migration can be one of the following values:\n\n*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status',
      },
      operationId: 'migrations/get-status-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          description: 'Exclude attributes from the API response to improve performance',
          in: 'query',
          name: 'exclude',
          schema: {
            items: {
              description: 'Allowed values that can be passed to the exclude param.',
              enum: ['repositories'],
              example: 'repositories',
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-with-short-org',
                },
              },
              schema: {
                $ref: '#/components/schemas/migration',
              },
            },
          },
          description:
            "*   `pending`, which means the migration hasn't started yet.\n*   `exporting`, which means the migration is in progress.\n*   `exported`, which means the migration finished successfully.\n*   `failed`, which means the migration failed.",
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an organization migration status',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/migrations/{migration_id}/archive': {
    delete: {
      description:
        'Deletes a previous migration archive. Migration archives are automatically deleted after seven days.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive',
      },
      operationId: 'migrations/delete-archive-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/migration-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an organization migration archive',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
    get: {
      description: 'Fetches the URL to a migration archive.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive',
      },
      operationId: 'migrations/download-archive-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/migration-id',
        },
      ],
      responses: {
        '302': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Download an organization migration archive',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock': {
    delete: {
      description:
        'Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository',
      },
      operationId: 'migrations/unlock-repo-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          $ref: '#/components/parameters/repo-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unlock an organization repository',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/migrations/{migration_id}/repositories': {
    get: {
      description: 'List all the repositories for this organization migration.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration',
      },
      operationId: 'migrations/list-repos-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repositories in an organization migration',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'orgs',
      },
    },
  },
  '/orgs/{org}/outside_collaborators': {
    get: {
      description: 'List all users who are outside collaborators of an organization.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization',
      },
      operationId: 'orgs/list-outside-collaborators',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          description:
            'Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.',
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'all',
            enum: ['2fa_disabled', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List outside collaborators for an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'outside-collaborators',
      },
    },
  },
  '/orgs/{org}/outside_collaborators/{username}': {
    delete: {
      description: "Removing a user from this list will remove them from all the organization's repositories.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization',
      },
      operationId: 'orgs/remove-outside-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-member-of-the-organization': {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/orgs#remove-outside-collaborator',
                    message: 'You cannot specify an organization member to remove as an outside collaborator.',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Unprocessable Entity if user is a member of the organization',
        },
      },
      summary: 'Remove outside collaborator from an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'outside-collaborators',
      },
    },
    put: {
      description:
        'When an organization member is converted to an outside collaborator, they\'ll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator',
      },
      operationId: 'orgs/convert-member-to-outside-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              '202': {
                summary: 'Status code 202, asynchronous request',
                value: {
                  async: true,
                },
              },
              '204': {
                summary: 'Status code 204, synchronous request',
                value: null,
              },
            },
            schema: {
              properties: {
                async: {
                  default: false,
                  description:
                    'When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                '202': {
                  value: null,
                },
              },
              schema: {
                additionalProperties: false,
                properties: {},
                type: 'object',
              },
            },
          },
          description: 'User is getting converted asynchronously',
        },
        '204': {
          description: 'User was converted',
        },
        '403': {
          description:
            'Forbidden if user is the last owner of the organization, not a member of the organization, or if the enterprise enforces a policy for inviting outside collaborators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Convert an organization member to outside collaborator',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'outside-collaborators',
      },
    },
  },
  '/orgs/{org}/packages': {
    get: {
      description:
        'Lists packages in an organization readable by the user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-an-organization',
      },
      operationId: 'packages/list-packages-for-organization',
      parameters: [
        {
          description:
            "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          in: 'query',
          name: 'package_type',
          required: true,
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/package-visibility',
        },
        {
          description: 'Page number of the results to fetch.',
          in: 'query',
          name: 'page',
          schema: {
            default: 1,
            type: 'integer',
          },
        },
        {
          description: 'The number of results per page (max 100).',
          in: 'query',
          name: 'per_page',
          schema: {
            default: 30,
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-org',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List packages for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/packages/{package_type}/{package_name}': {
    delete: {
      description:
        'Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization',
      },
      operationId: 'packages/delete-package-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a package for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package in an organization.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization',
      },
      operationId: 'packages/get-package-for-organization',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-org',
                },
              },
              schema: {
                $ref: '#/components/schemas/package',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/packages/{package_type}/{package_name}/restore': {
    post: {
      description:
        'Restores an entire package in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization',
      },
      operationId: 'packages/restore-package-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          description: 'package token',
          in: 'query',
          name: 'token',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore a package for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/packages/{package_type}/{package_name}/versions': {
    get: {
      description:
        'Lists package versions for a package owned by an organization.\n\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-an-organization',
      },
      operationId: 'packages/get-all-package-versions-for-package-owned-by-org',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          description: 'The state of the package, either active or deleted.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'active',
            enum: ['active', 'deleted'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-org',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List package versions for a package owned by an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description:
        'Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization',
      },
      operationId: 'packages/delete-package-version-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete package version for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package version in an organization.\n\nYou must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization',
      },
      operationId: 'packages/get-package-version-for-organization',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-org',
                },
              },
              schema: {
                $ref: '#/components/schemas/package-version',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package version for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description:
        'Restores a specific package version in an organization.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization',
      },
      operationId: 'packages/restore-package-version-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore package version for an organization',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/projects': {
    get: {
      description:
        'Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-organization-projects',
      },
      operationId: 'projects/list-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          description: 'Indicates the state of the projects to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/project',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'List organization projects',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if the organization does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#create-an-organization-project',
      },
      operationId: 'projects/create-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'High-level roadmap for the upcoming year.',
                  name: 'Organization Roadmap',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The description of the project.',
                  type: 'string',
                },
                name: {
                  description: 'The name of the project.',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/project',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create an organization project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/public_members': {
    get: {
      description: 'Members of an organization can choose to have their membership publicized or not.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-public-organization-members',
      },
      operationId: 'orgs/list-public-members',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List public organization members',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/public_members/{username}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user',
      },
      operationId: 'orgs/remove-public-membership-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove public organization membership for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user',
      },
      operationId: 'orgs/check-public-membership-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response if user is a public member',
        },
        '404': {
          description: 'Not Found if user is not a public member',
        },
      },
      summary: 'Check public organization membership for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    put: {
      description:
        'The user can publicize their own membership. (A user cannot publicize the membership for another user.)\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user',
      },
      operationId: 'orgs/set-public-membership-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Set public organization membership for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/repos': {
    get: {
      description:
        'Lists repositories for the specified organization.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-organization-repositories',
      },
      operationId: 'repos/list-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          description: 'Specifies the types of repositories you want returned.',
          in: 'query',
          name: 'type',
          required: false,
          schema: {
            enum: ['all', 'public', 'private', 'forks', 'sources', 'member'],
            type: 'string',
          },
        },
        {
          description: 'The property to sort the results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'pushed', 'full_name'],
            type: 'string',
          },
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organization repositories',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates a new repository in the specified organization. The authenticated user must be a member of the organization.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-an-organization-repository',
      },
      operationId: 'repos/create-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository',
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  homepage: 'https://github.com',
                  name: 'Hello-World',
                  private: false,
                },
              },
            },
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false,
                  description: 'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.',
                  type: 'boolean',
                },
                allow_merge_commit: {
                  default: true,
                  description:
                    'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.',
                  type: 'boolean',
                },
                allow_rebase_merge: {
                  default: true,
                  description:
                    'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.',
                  type: 'boolean',
                },
                allow_squash_merge: {
                  default: true,
                  description:
                    'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.',
                  type: 'boolean',
                },
                auto_init: {
                  default: false,
                  description: 'Pass `true` to create an initial commit with empty README.',
                  type: 'boolean',
                },
                delete_branch_on_merge: {
                  default: false,
                  description:
                    'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**',
                  type: 'boolean',
                },
                description: {
                  description: 'A short description of the repository.',
                  type: 'string',
                },
                gitignore_template: {
                  description:
                    'Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".',
                  type: 'string',
                },
                has_downloads: {
                  default: true,
                  description: 'Whether downloads are enabled.',
                  example: true,
                  type: 'boolean',
                },
                has_issues: {
                  default: true,
                  description: 'Either `true` to enable issues for this repository or `false` to disable them.',
                  type: 'boolean',
                },
                has_projects: {
                  default: true,
                  description:
                    "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                  type: 'boolean',
                },
                has_wiki: {
                  default: true,
                  description: 'Either `true` to enable the wiki for this repository or `false` to disable it.',
                  type: 'boolean',
                },
                homepage: {
                  description: 'A URL with more information about the repository.',
                  type: 'string',
                },
                is_template: {
                  default: false,
                  description:
                    'Either `true` to make this repo available as a template repository or `false` to prevent it.',
                  type: 'boolean',
                },
                license_template: {
                  description:
                    'Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".',
                  type: 'string',
                },
                merge_commit_message: {
                  description:
                    "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'],
                  type: 'string',
                },
                merge_commit_title: {
                  description:
                    "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'],
                  type: 'string',
                },
                name: {
                  description: 'The name of the repository.',
                  type: 'string',
                },
                private: {
                  default: false,
                  description: 'Whether the repository is private.',
                  type: 'boolean',
                },
                squash_merge_commit_message: {
                  description:
                    "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'],
                  type: 'string',
                },
                squash_merge_commit_title: {
                  description:
                    "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'],
                  type: 'string',
                },
                team_id: {
                  description:
                    'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.',
                  type: 'integer',
                },
                use_squash_pr_title_as_default: {
                  default: false,
                  deprecated: true,
                  description:
                    'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.',
                  type: 'boolean',
                },
                visibility: {
                  description: 'The visibility of the repository.',
                  enum: ['public', 'private'],
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an organization repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/secret-scanning/alerts': {
    get: {
      description:
        'Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.\nTo use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-organization',
      },
      operationId: 'secret-scanning/list-alerts-for-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-before-org-repo',
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-after-org-repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-secret-scanning-alert-list',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-secret-scanning-alert',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List secret scanning alerts for an organization',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/security-managers': {
    get: {
      description:
        'Lists teams that are security managers for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nTo use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `read:org` scope.\n\nGitHub Apps must have the `administration` organization read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-security-manager-teams',
      },
      operationId: 'orgs/list-security-manager-teams',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List security manager teams',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'security-managers',
      },
    },
  },
  '/orgs/{org}/security-managers/teams/{team_slug}': {
    delete: {
      description:
        'Removes the security manager role from a team for an organization. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) team from an organization."\n\nTo use this endpoint, you must be an administrator for the organization, and you must use an access token with the `admin:org` scope.\n\nGitHub Apps must have the `administration` organization read-write permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#remove-a-security-manager-team',
      },
      operationId: 'orgs/remove-security-manager-team',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove a security manager team',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'security-managers',
      },
    },
    put: {
      description:
        'Adds a team as a security manager for an organization. For more information, see "[Managing security for an organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) for an organization."\n\nTo use this endpoint, you must be an administrator for the organization, and you must use an access token with the `write:org` scope.\n\nGitHub Apps must have the `administration` organization read-write permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#add-a-security-manager-team',
      },
      operationId: 'orgs/add-security-manager-team',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '409': {
          description: 'The organization has reached the maximum number of security manager teams.',
        },
      },
      summary: 'Add a security manager team',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'security-managers',
      },
    },
  },
  '/orgs/{org}/settings/billing/actions': {
    get: {
      description:
        'Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAccess tokens must have the `repo` or `admin:org` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization',
      },
      operationId: 'billing/get-github-actions-billing-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Actions billing for an organization',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/settings/billing/packages': {
    get: {
      description:
        'Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `repo` or `admin:org` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization',
      },
      operationId: 'billing/get-github-packages-billing-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/packages-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Packages billing for an organization',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/settings/billing/shared-storage': {
    get: {
      description:
        'Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `repo` or `admin:org` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization',
      },
      operationId: 'billing/get-shared-storage-billing-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/combined-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get shared storage billing for an organization',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams': {
    get: {
      description: 'Lists all teams in an organization that are visible to the authenticated user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-teams',
      },
      operationId: 'teams/list',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List teams',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."\n\nWhen you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#create-a-team',
      },
      operationId: 'teams/create',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'A great team',
                  name: 'Justice League',
                  permission: 'push',
                  privacy: 'closed',
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.',
                  type: 'string',
                },
                maintainers: {
                  description: 'List GitHub IDs for organization members who will become team maintainers.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                name: {
                  description: 'The name of the team.',
                  type: 'string',
                },
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.',
                  type: 'integer',
                },
                permission: {
                  default: 'pull',
                  description:
                    '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.',
                  enum: ['pull', 'push'],
                  type: 'string',
                },
                privacy: {
                  description:
                    'The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.  \nDefault for child team: `closed`',
                  enum: ['secret', 'closed'],
                  type: 'string',
                },
                repo_names: {
                  description:
                    'The full name (e.g., "organization-name/repository-name") of repositories to add the team to.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a team',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}': {
    delete: {
      description:
        'To delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#delete-a-team',
      },
      operationId: 'teams/delete-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a team',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a team using the team\'s `slug`. To create the `slug`, GitHub replaces special characters in the `name` string, changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become `my-team-name`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-a-team-by-name',
      },
      operationId: 'teams/get-by-name',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a team by name',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        'To edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#update-a-team',
      },
      operationId: 'teams/update-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'new team description',
                  name: 'new team name',
                  privacy: 'closed',
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.',
                  type: 'string',
                },
                name: {
                  description: 'The name of the team.',
                  type: 'string',
                },
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.',
                  nullable: true,
                  type: 'integer',
                },
                permission: {
                  default: 'pull',
                  description:
                    '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.',
                  enum: ['pull', 'push', 'admin'],
                  type: 'string',
                },
                privacy: {
                  description:
                    'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.',
                  enum: ['secret', 'closed'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response when the updated information already exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a team',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions': {
    get: {
      description:
        "List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-discussions',
      },
      operationId: 'teams/list-discussions-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          description: 'Pinned discussions only filter',
          in: 'query',
          name: 'pinned',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List discussions',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussions',
      },
    },
    post: {
      description:
        'Creates a new discussion post on a team\'s page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion',
      },
      operationId: 'teams/create-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Hi! This is an area for us to collaborate as a team.',
                  title: 'Our first team post',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.",
                  type: 'string',
                },
                private: {
                  default: false,
                  description:
                    'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.',
                  type: 'boolean',
                },
                title: {
                  description: "The discussion post's title.",
                  type: 'string',
                },
              },
              required: ['title', 'body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a discussion',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussions',
        triggersNotification: true,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}': {
    delete: {
      description:
        "Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion',
      },
      operationId: 'teams/delete-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a discussion',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussions',
      },
    },
    get: {
      description:
        "Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion',
      },
      operationId: 'teams/get-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a discussion',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussions',
      },
    },
    patch: {
      description:
        'Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion',
      },
      operationId: 'teams/update-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  title: 'Welcome to our first team post',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.",
                  type: 'string',
                },
                title: {
                  description: "The discussion post's title.",
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a discussion',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussions',
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments': {
    get: {
      description:
        'List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-discussion-comments',
      },
      operationId: 'teams/list-discussion-comments-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List discussion comments',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussion-comments',
      },
    },
    post: {
      description:
        'Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-comment',
      },
      operationId: 'teams/create-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like apples?',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.",
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a discussion comment',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussion-comments',
        triggersNotification: true,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}': {
    delete: {
      description:
        'Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-comment',
      },
      operationId: 'teams/delete-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a discussion comment',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussion-comments',
      },
    },
    get: {
      description:
        'Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-comment',
      },
      operationId: 'teams/get-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a discussion comment',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussion-comments',
      },
    },
    patch: {
      description:
        'Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-comment',
      },
      operationId: 'teams/update-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like pineapples?',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.",
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a discussion comment',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'discussion-comments',
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    get: {
      description:
        'List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment',
      },
      operationId: 'reactions/list-for-team-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List reactions for a team discussion comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment',
      },
      operationId: 'reactions/create-for-team-discussion-comment-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response when the reaction type has already been added to this team discussion comment',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create reaction for a team discussion comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction',
      },
      operationId: 'reactions/delete-for-team-discussion-comment',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete team discussion comment reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions': {
    get: {
      description:
        'List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion',
      },
      operationId: 'reactions/list-for-team-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List reactions for a team discussion',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion',
      },
      operationId: 'reactions/create-for-team-discussion-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create reaction for a team discussion',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.\n\nDelete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction',
      },
      operationId: 'reactions/delete-for-team-discussion',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete team discussion reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/invitations': {
    get: {
      description:
        'The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-pending-team-invitations',
      },
      operationId: 'teams/list-pending-invitations-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List pending team invitations',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/members': {
    get: {
      description:
        'Team members will include the members of child teams.\n\nTo list members in a team, the team must be visible to the authenticated user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-team-members',
      },
      operationId: 'teams/list-members-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          description: 'Filters members returned by their role in the team.',
          in: 'query',
          name: 'role',
          required: false,
          schema: {
            default: 'all',
            enum: ['member', 'maintainer', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List team members',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/memberships/{username}': {
    delete: {
      description:
        "To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user',
      },
      operationId: 'teams/remove-membership-for-user-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          description: 'Forbidden if team synchronization is set up',
        },
      },
      summary: 'Remove team membership for a user',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    get: {
      description:
        "Team members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user',
      },
      operationId: 'teams/get-membership-for-user-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-team-maintainer': {
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-membership',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          description: 'if user has no team membership',
        },
      },
      summary: 'Get team membership for a user',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    put: {
      description:
        'Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nAn organization owner can add someone who is not part of the team\'s organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user',
      },
      operationId: 'teams/add-or-update-membership-for-user-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Add or update team membership for an organization member',
                value: {
                  role: 'maintainer',
                },
              },
            },
            schema: {
              properties: {
                role: {
                  default: 'member',
                  description: 'The role that this user should have in the team.',
                  enum: ['member', 'maintainer'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-users-membership-with-team-is-now-pending': {
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          description: 'Forbidden if team synchronization is set up',
        },
        '422': {
          description: 'Unprocessable Entity if you attempt to add an organization to a team',
        },
      },
      summary: 'Add or update team membership for a user',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/projects': {
    get: {
      description:
        'Lists the organization projects for a team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-team-projects',
      },
      operationId: 'teams/list-projects-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-project',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List team projects',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/projects/{project_id}': {
    delete: {
      description:
        'Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team',
      },
      operationId: 'teams/remove-project-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove a project from a team',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project',
      },
      operationId: 'teams/check-permissions-for-project-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-project',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          description: 'Not Found if project is not managed by this team',
        },
      },
      summary: 'Check team permissions for a project',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        "Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions',
      },
      operationId: 'teams/add-or-update-project-permissions-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Updates the permissions for the team to write for the project',
                value: {
                  permission: 'write',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                permission: {
                  description:
                    'The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
                  enum: ['read', 'write', 'admin'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          content: {
            'application/json': {
              examples: {
                'response-if-the-project-is-not-owned-by-the-organization': {
                  value: {
                    documentation_url:
                      'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions',
                    message: 'Must have admin rights to Repository.',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden if the project is not owned by the organization',
        },
      },
      summary: 'Add or update team project permissions',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/repos': {
    get: {
      description:
        "Lists a team's repositories visible to the authenticated user.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-team-repositories',
      },
      operationId: 'teams/list-repos-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List team repositories',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}': {
    delete: {
      description:
        'If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team',
      },
      operationId: 'teams/remove-repo-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove a repository from a team',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        "Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.\n\nIf a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository',
      },
      operationId: 'teams/check-permissions-for-repo-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-repository-permissions': {
                  $ref: '#/components/examples/team-repository-alternative-response-with-repository-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-repository',
              },
            },
          },
          description: 'Alternative response with repository permissions',
        },
        '204': {
          description:
            "Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.",
        },
        '404': {
          description: 'Not Found if team does not have permission for the repository',
        },
      },
      summary: 'Check team permissions for a repository',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'To add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.\n\nFor more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions',
      },
      operationId: 'teams/add-or-update-repo-permissions-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Adding a team to an organization repository with the write role',
                value: {
                  permission: 'push',
                },
              },
            },
            schema: {
              properties: {
                permission: {
                  default: 'push',
                  description:
                    "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Add or update team repository permissions',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/teams/{team_slug}/teams': {
    get: {
      description:
        'Lists the child teams of the team specified by `{team_slug}`.\n\n**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-child-teams',
      },
      operationId: 'teams/list-child-in-org',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/team-slug',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-child-teams-exist': {
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'if child teams exist',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List child teams',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/orgs/{org}/{security_product}/{enablement}': {
    post: {
      description:
        'Enables or disables the specified security feature for all repositories in an organization.\n\nTo use this endpoint, you must be an organization owner or be member of a team with the security manager role.\nA token with the \'write:org\' scope is also required.\n\nGitHub Apps must have the `organization_administration:write` permission to use this endpoint.\n\nFor more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#enable-or-disable-security-product-on-all-org-repos',
      },
      operationId: 'orgs/enable-or-disable-security-product-on-all-org-repos',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/security-product',
        },
        {
          $ref: '#/components/parameters/org-security-product-enablement',
        },
      ],
      responses: {
        '204': {
          description: 'Action started',
        },
        '422': {
          description:
            'The action could not be taken due to an in progress enablement, or a policy is preventing enablement',
        },
      },
      summary: 'Enable or disable a security feature for an organization',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'orgs',
      },
    },
  },
  '/projects/columns/cards/{card_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project-card',
      },
      operationId: 'projects/delete-card',
      parameters: [
        {
          $ref: '#/components/parameters/card-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a project card',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#get-a-project-card',
      },
      operationId: 'projects/get-card',
      parameters: [
        {
          $ref: '#/components/parameters/card-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-card',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a project card',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#update-a-project-card',
      },
      operationId: 'projects/update-card',
      parameters: [
        {
          $ref: '#/components/parameters/card-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Change the note on the card',
                value: {
                  note: 'Add payload for delete Project column',
                },
              },
            },
            schema: {
              properties: {
                archived: {
                  description: 'Whether or not the card is archived',
                  example: false,
                  type: 'boolean',
                },
                note: {
                  description: "The project card's note",
                  example: 'Update all gems',
                  nullable: true,
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-card',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update an existing project card',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
  },
  '/projects/columns/cards/{card_id}/moves': {
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#move-a-project-card',
      },
      operationId: 'projects/move-card',
      parameters: [
        {
          $ref: '#/components/parameters/card-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Move the card to the bottom of the column',
                value: {
                  column_id: 42,
                  position: 'bottom',
                },
              },
            },
            schema: {
              properties: {
                column_id: {
                  description: 'The unique identifier of the column the card should be moved to',
                  example: 42,
                  type: 'integer',
                },
                position: {
                  description:
                    'The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.',
                  example: 'bottom',
                  pattern: '^(?:top|bottom|after:\\d+)$',
                  type: 'string',
                },
              },
              required: ['position'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                additionalProperties: false,
                properties: {},
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string',
                        },
                        field: {
                          type: 'string',
                        },
                        message: {
                          type: 'string',
                        },
                        resource: {
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  code: {
                    type: 'string',
                  },
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string',
                        },
                        message: {
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Move a project card',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
  },
  '/projects/columns/{column_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project-column',
      },
      operationId: 'projects/delete-column',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Delete a project column',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#get-a-project-column',
      },
      operationId: 'projects/get-column',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-column',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a project column',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#update-a-project-column',
      },
      operationId: 'projects/update-column',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Rename the project column',
                value: {
                  name: 'To Do',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'Name of the project column',
                  example: 'Remaining tasks',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-column',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Update an existing project column',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
  },
  '/projects/columns/{column_id}/cards': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-project-cards',
      },
      operationId: 'projects/list-cards',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
        {
          description: "Filters the project cards that are returned by the card's state.",
          in: 'query',
          name: 'archived_state',
          required: false,
          schema: {
            default: 'not_archived',
            enum: ['all', 'archived', 'not_archived'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/project-card',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List project cards',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#create-a-project-card',
      },
      operationId: 'projects/create-card',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Create a new card',
                value: {
                  note: 'Add payload for delete Project column',
                },
              },
            },
            schema: {
              oneOf: [
                {
                  properties: {
                    note: {
                      description: "The project card's note",
                      example: 'Update all gems',
                      nullable: true,
                      type: 'string',
                    },
                  },
                  required: ['note'],
                  type: 'object',
                },
                {
                  properties: {
                    content_id: {
                      description: 'The unique identifier of the content associated with the card',
                      example: 42,
                      type: 'integer',
                    },
                    content_type: {
                      description: 'The piece of content associated with the card',
                      example: 'PullRequest',
                      type: 'string',
                    },
                  },
                  required: ['content_id', 'content_type'],
                  type: 'object',
                },
              ],
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-card',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-card',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          content: {
            'application/json': {
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/validation-error',
                  },
                  {
                    $ref: '#/components/schemas/validation-error-simple',
                  },
                ],
              },
            },
          },
          description: 'Validation failed',
        },
        '503': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  code: {
                    type: 'string',
                  },
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      properties: {
                        code: {
                          type: 'string',
                        },
                        message: {
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a project card',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cards',
      },
    },
  },
  '/projects/columns/{column_id}/moves': {
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#move-a-project-column',
      },
      operationId: 'projects/move-column',
      parameters: [
        {
          $ref: '#/components/parameters/column-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Move the column to the end of the board',
                value: {
                  position: 'last',
                },
              },
            },
            schema: {
              properties: {
                position: {
                  description:
                    'The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.',
                  example: 'last',
                  pattern: '^(?:first|last|after:\\d+)$',
                  type: 'string',
                },
              },
              required: ['position'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                additionalProperties: false,
                properties: {},
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Move a project column',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
  },
  '/projects/{project_id}': {
    delete: {
      description: 'Deletes a project board. Returns a `404 Not Found` status if projects are disabled.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#delete-a-project',
      },
      operationId: 'projects/delete',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '204': {
          description: 'Delete Success',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Delete a project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#get-a-project',
      },
      operationId: 'projects/get',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3',
                },
              },
              schema: {
                $ref: '#/components/schemas/project',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get a project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#update-a-project',
      },
      operationId: 'projects/update',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Change the name, state, and permissions for a project',
                value: {
                  name: 'Week One Sprint',
                  organization_permission: 'write',
                  state: 'open',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'Body of the project',
                  example: 'This project represents the sprint of the first week in January',
                  nullable: true,
                  type: 'string',
                },
                name: {
                  description: 'Name of the project',
                  example: 'Week One Sprint',
                  type: 'string',
                },
                organization_permission: {
                  description: 'The baseline permission that all organization members have on this project',
                  enum: ['read', 'write', 'admin', 'none'],
                  type: 'string',
                },
                private: {
                  description: 'Whether or not this project can be seen by everyone.',
                  type: 'boolean',
                },
                state: {
                  description: "State of the project; either 'open' or 'closed'",
                  example: 'open',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3',
                },
              },
              schema: {
                $ref: '#/components/schemas/project',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  errors: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden',
        },
        '404': {
          description: 'Not Found if the authenticated user does not have access to the project',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update a project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/projects/{project_id}/collaborators': {
    get: {
      description:
        'Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-project-collaborators',
      },
      operationId: 'projects/list-collaborators',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
        {
          description:
            "Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
          in: 'query',
          name: 'affiliation',
          required: false,
          schema: {
            default: 'all',
            enum: ['outside', 'direct', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List project collaborators',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'collaborators',
      },
    },
  },
  '/projects/{project_id}/collaborators/{username}': {
    delete: {
      description:
        'Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#remove-project-collaborator',
      },
      operationId: 'projects/remove-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove user as a collaborator',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'collaborators',
      },
    },
    put: {
      description:
        'Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#add-project-collaborator',
      },
      operationId: 'projects/add-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Applying write permissions for the new collaborator',
                value: {
                  permission: 'write',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                permission: {
                  default: 'write',
                  description: 'The permission to grant the collaborator.',
                  enum: ['read', 'write', 'admin'],
                  example: 'write',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add project collaborator',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'collaborators',
      },
    },
  },
  '/projects/{project_id}/collaborators/{username}/permission': {
    get: {
      description:
        "Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user',
      },
      operationId: 'projects/get-permission-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-collaborator-permission',
                },
              },
              schema: {
                $ref: '#/components/schemas/project-collaborator-permission',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get project permission for a user',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'collaborators',
      },
    },
  },
  '/projects/{project_id}/columns': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-project-columns',
      },
      operationId: 'projects/list-columns',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-column-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/project-column',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List project columns',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#create-a-project-column',
      },
      operationId: 'projects/create-column',
      parameters: [
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'Remaining tasks',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'Name of the project column',
                  example: 'Remaining tasks',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    cards_url: 'https://api.github.com/projects/columns/367/cards',
                    created_at: '2016-09-05T14:18:44Z',
                    id: 367,
                    name: 'To Do',
                    node_id: 'MDEzOlByb2plY3RDb2x1bW4zNjc=',
                    project_url: 'https://api.github.com/projects/120',
                    updated_at: '2016-09-05T14:22:28Z',
                    url: 'https://api.github.com/projects/columns/367',
                  },
                },
              },
              schema: {
                $ref: '#/components/schemas/project-column',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a project column',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'columns',
      },
    },
  },
  '/rate_limit': {
    get: {
      description:
        "**Note:** Accessing this endpoint does not count against your REST API rate limit.\n\n**Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user',
      },
      operationId: 'rate-limit/get',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/rate-limit-overview',
                },
              },
              schema: {
                $ref: '#/components/schemas/rate-limit-overview',
              },
            },
          },
          description: 'Response',
          headers: {
            'X-RateLimit-Limit': {
              $ref: '#/components/headers/x-rate-limit-limit',
            },
            'X-RateLimit-Remaining': {
              $ref: '#/components/headers/x-rate-limit-remaining',
            },
            'X-RateLimit-Reset': {
              $ref: '#/components/headers/x-rate-limit-reset',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get rate limit status for the authenticated user',
      tags: ['rate-limit'],
      'x-github': {
        category: 'rate-limit',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{org}/{repo}/actions/required_workflows': {
    get: {
      description:
        'Lists the required workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-repository-required-workflows',
      },
      operationId: 'actions/list-repo-required-workflows',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-required-workflow-paginated',
                },
              },
              schema: {
                properties: {
                  required_workflows: {
                    items: {
                      $ref: '#/components/schemas/repo-required-workflow',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'required_workflows'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repository required workflows',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}': {
    get: {
      description:
        'Gets a specific required workflow present in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-repository-required-workflow',
      },
      operationId: 'actions/get-repo-required-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-required-workflow',
                },
              },
              schema: {
                $ref: '#/components/schemas/repo-required-workflow',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a required workflow entity for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing': {
    get: {
      description:
        'Gets the number of billable minutes used by a specific required workflow during the current billing cycle.\n\nBillable minutes only apply to required workflows running in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)."\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-repository-required-workflow-usage',
      },
      operationId: 'actions/get-repo-required-workflow-usage',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow-usage',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get required workflow usage',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'required-workflows',
      },
    },
  },
  '/repos/{owner}/{repo}': {
    delete: {
      description:
        'Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.\n\nIf an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a `403 Forbidden` response.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#delete-a-repository',
      },
      operationId: 'repos/delete',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '307': {
          $ref: '#/components/responses/temporary_redirect',
        },
        '403': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    documentation_url: 'https://docs.github.com/rest/reference/repos#delete-a-repository',
                    message: 'Organization members cannot delete repositories.',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description:
            'If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.\n\n**Note:** In order to see the `security_and_analysis` block for a repository you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository',
      },
      operationId: 'repos/get',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/full-repository-default-response',
                },
              },
              schema: {
                $ref: '#/components/schemas/full-repository',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/repos/repos#update-a-repository',
      },
      operationId: 'repos/update',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository',
                  has_issues: true,
                  has_projects: true,
                  has_wiki: true,
                  homepage: 'https://github.com',
                  name: 'Hello-World',
                  private: true,
                },
              },
            },
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false,
                  description: 'Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.',
                  type: 'boolean',
                },
                allow_forking: {
                  default: false,
                  description: 'Either `true` to allow private forks, or `false` to prevent private forks.',
                  type: 'boolean',
                },
                allow_merge_commit: {
                  default: true,
                  description:
                    'Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.',
                  type: 'boolean',
                },
                allow_rebase_merge: {
                  default: true,
                  description:
                    'Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.',
                  type: 'boolean',
                },
                allow_squash_merge: {
                  default: true,
                  description:
                    'Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.',
                  type: 'boolean',
                },
                allow_update_branch: {
                  default: false,
                  description:
                    'Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.',
                  type: 'boolean',
                },
                archived: {
                  default: false,
                  description:
                    'Whether to archive this repository. `false` will unarchive a previously archived repository.',
                  type: 'boolean',
                },
                default_branch: {
                  description: 'Updates the default branch for this repository.',
                  type: 'string',
                },
                delete_branch_on_merge: {
                  default: false,
                  description:
                    'Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.',
                  type: 'boolean',
                },
                description: {
                  description: 'A short description of the repository.',
                  type: 'string',
                },
                has_issues: {
                  default: true,
                  description: 'Either `true` to enable issues for this repository or `false` to disable them.',
                  type: 'boolean',
                },
                has_projects: {
                  default: true,
                  description:
                    "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
                  type: 'boolean',
                },
                has_wiki: {
                  default: true,
                  description: 'Either `true` to enable the wiki for this repository or `false` to disable it.',
                  type: 'boolean',
                },
                homepage: {
                  description: 'A URL with more information about the repository.',
                  type: 'string',
                },
                is_template: {
                  default: false,
                  description:
                    'Either `true` to make this repo available as a template repository or `false` to prevent it.',
                  type: 'boolean',
                },
                merge_commit_message: {
                  description:
                    "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'],
                  type: 'string',
                },
                merge_commit_title: {
                  description:
                    "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'],
                  type: 'string',
                },
                name: {
                  description: 'The name of the repository.',
                  type: 'string',
                },
                private: {
                  default: false,
                  description:
                    'Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.',
                  type: 'boolean',
                },
                security_and_analysis: {
                  description:
                    'Specify which security and analysis features to enable or disable for the repository.\n\nTo use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."\n\nFor example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n`{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.\n\nYou can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.',
                  nullable: true,
                  properties: {
                    advanced_security: {
                      description:
                        'Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."',
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.',
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                    secret_scanning: {
                      description:
                        'Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."',
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.',
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                    secret_scanning_push_protection: {
                      description:
                        'Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."',
                      properties: {
                        status: {
                          description: 'Can be `enabled` or `disabled`.',
                          type: 'string',
                        },
                      },
                      type: 'object',
                    },
                  },
                  type: 'object',
                },
                squash_merge_commit_message: {
                  description:
                    "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'],
                  type: 'string',
                },
                squash_merge_commit_title: {
                  description:
                    "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'],
                  type: 'string',
                },
                use_squash_pr_title_as_default: {
                  default: false,
                  deprecated: true,
                  description:
                    'Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.',
                  type: 'boolean',
                },
                visibility: {
                  description: 'The visibility of the repository.',
                  enum: ['public', 'private'],
                  type: 'string',
                },
                web_commit_signoff_required: {
                  default: false,
                  description:
                    'Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/full-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/full-repository',
              },
            },
          },
          description: 'Response',
        },
        '307': {
          $ref: '#/components/responses/temporary_redirect',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/actions/artifacts': {
    get: {
      description:
        'Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository',
      },
      operationId: 'actions/list-artifacts-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          description: 'Filters artifacts by exact match on their name field.',
          in: 'query',
          name: 'name',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact-paginated',
                },
              },
              schema: {
                properties: {
                  artifacts: {
                    items: {
                      $ref: '#/components/schemas/artifact',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'artifacts'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List artifacts for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'artifacts',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}': {
    delete: {
      description:
        'Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-an-artifact',
      },
      operationId: 'actions/delete-artifact',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/artifact-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an artifact',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'artifacts',
      },
    },
    get: {
      description:
        'Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-an-artifact',
      },
      operationId: 'actions/get-artifact',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/artifact-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact',
                },
              },
              schema: {
                $ref: '#/components/schemas/artifact',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an artifact',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'artifacts',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}': {
    get: {
      description:
        'Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in\nthe response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#download-an-artifact',
      },
      operationId: 'actions/download-artifact',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/artifact-id',
        },
        {
          in: 'path',
          name: 'archive_format',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              $ref: '#/components/headers/location',
            },
          },
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Download an artifact',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'artifacts',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/cache/usage': {
    get: {
      description:
        'Gets GitHub Actions cache usage for a repository.\nThe data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-cache-usage-for-a-repository',
      },
      operationId: 'actions/get-actions-cache-usage',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-cache-usage-by-repository',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Actions cache usage for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cache',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/caches': {
    delete: {
      description:
        'Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\nGitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key',
      },
      operationId: 'actions/delete-actions-cache-by-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/actions-cache-key-required',
        },
        {
          $ref: '#/components/parameters/git-ref',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-list',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-cache-list',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Delete GitHub Actions caches for a repository (using a cache key)',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cache',
      },
    },
    get: {
      description:
        'Lists the GitHub Actions caches for a repository.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository',
      },
      operationId: 'actions/get-actions-cache-list',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/git-ref',
        },
        {
          $ref: '#/components/parameters/actions-cache-key',
        },
        {
          $ref: '#/components/parameters/actions-cache-list-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-cache-list',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-cache-list',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List GitHub Actions caches for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'cache',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/caches/{cache_id}': {
    delete: {
      description:
        'Deletes a GitHub Actions cache for a repository, using a cache ID.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\nGitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id',
      },
      operationId: 'actions/delete-actions-cache-by-id',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/cache-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a GitHub Actions cache for a repository (using a cache ID)',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'cache',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/jobs/{job_id}': {
    get: {
      description:
        'Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run',
      },
      operationId: 'actions/get-job-for-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/job-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job',
                },
              },
              schema: {
                $ref: '#/components/schemas/job',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a job for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-jobs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs': {
    get: {
      description:
        'Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can\nuse this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must\nhave the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run',
      },
      operationId: 'actions/download-job-logs-for-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/job-id',
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Download job logs for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-jobs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun': {
    post: {
      description:
        'Re-run a job and its dependent jobs in a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#re-run-job-for-workflow-run',
      },
      operationId: 'actions/re-run-job-for-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/job-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null,
              },
            },
            schema: {
              nullable: true,
              properties: {
                enable_debug_logging: {
                  default: false,
                  description: 'Whether to enable debug logging for the re-run.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Re-run a job from a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/oidc/customization/sub': {
    get: {
      description:
        'Gets the customization template for an OpenID Connect (OIDC) subject claim.\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint. GitHub Apps must have the `organization_administration:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository',
      },
      operationId: 'actions/get-custom-oidc-sub-claim-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/oidc-custom-sub-repo',
                },
              },
              schema: {
                $ref: '#/components/schemas/oidc-custom-sub-repo',
              },
            },
          },
          description: 'Status response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get the customization template for an OIDC subject claim for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        previews: [],
        subcategory: 'oidc',
      },
    },
    put: {
      description:
        'Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a repository.\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository',
      },
      operationId: 'actions/set-custom-oidc-sub-claim-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  include_claim_keys: ['repo', 'context'],
                  use_default: false,
                },
              },
            },
            schema: {
              description: 'Actions OIDC subject customization for a repository',
              properties: {
                include_claim_keys: {
                  description:
                    'Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                use_default: {
                  description:
                    'Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.',
                  type: 'boolean',
                },
              },
              required: ['use_default'],
              title: 'Actions OIDC subject customization for a repository',
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Empty response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Set the customization template for an OIDC subject claim for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        previews: [],
        subcategory: 'oidc',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/permissions': {
    get: {
      description:
        'Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository',
      },
      operationId: 'actions/get-github-actions-permissions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-repository-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-repository-permissions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Actions permissions for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository',
      },
      operationId: 'actions/set-github-actions-permissions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allowed_actions: 'selected',
                  enabled: true,
                },
              },
            },
            schema: {
              properties: {
                allowed_actions: {
                  $ref: '#/components/schemas/allowed-actions',
                },
                enabled: {
                  $ref: '#/components/schemas/actions-enabled',
                },
              },
              required: ['enabled'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set GitHub Actions permissions for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/permissions/access': {
    get: {
      description:
        'Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the\nrepository `administration` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-access-level-to-a-repository',
      },
      operationId: 'actions/get-workflow-access-to-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-workflow-access-to-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-workflow-access-to-repository',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the level of access for workflows outside of the repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.\nThis endpoint only applies to private repositories.\nFor more information, see "[Allowing access to components in a private repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the\nrepository `administration` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-workflow-access-to-a-repository',
      },
      operationId: 'actions/set-workflow-access-to-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-workflow-access-to-repository',
              },
            },
            schema: {
              $ref: '#/components/schemas/actions-workflow-access-to-repository',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set the level of access for workflows outside of the repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'permissions',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/permissions/selected-actions': {
    get: {
      description:
        'Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository',
      },
      operationId: 'actions/get-allowed-actions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/selected-actions',
                },
              },
              schema: {
                $ref: '#/components/schemas/selected-actions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get allowed actions and reusable workflows for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository',
      },
      operationId: 'actions/set-allowed-actions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              selected_actions: {
                $ref: '#/components/examples/selected-actions',
              },
            },
            schema: {
              $ref: '#/components/schemas/selected-actions',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Set allowed actions and reusable workflows for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/permissions/workflow': {
    get: {
      description:
        'Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,\nas well as if GitHub Actions can submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-default-workflow-permissions-for-a-repository',
      },
      operationId: 'actions/get-github-actions-default-workflow-permissions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-default-workflow-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-get-default-workflow-permissions',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get default workflow permissions for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
    put: {
      description:
        'Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if GitHub Actions\ncan submit approving pull request reviews.\nFor more information, see "[Setting the permissions of the GITHUB_TOKEN for your repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the repository `administration` permission to use this API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-default-workflow-permissions-for-a-repository',
      },
      operationId: 'actions/set-github-actions-default-workflow-permissions-repository',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                $ref: '#/components/examples/actions-default-workflow-permissions',
              },
            },
            schema: {
              $ref: '#/components/schemas/actions-set-default-workflow-permissions',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Success response',
        },
        '409': {
          description: 'Conflict response when changing a setting is prevented by the owning organization',
        },
      },
      summary: 'Set default workflow permissions for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'permissions',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs': {
    get: {
      description:
        'List all workflow runs for a required workflow. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. For more information, see "[Required Workflows](https://docs.github.com/actions/using-workflows/required-workflows)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-required-workflow-runs',
      },
      operationId: 'actions/list-required-workflow-runs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/repo-required-workflow-id',
        },
        {
          $ref: '#/components/parameters/actor',
        },
        {
          $ref: '#/components/parameters/workflow-run-branch',
        },
        {
          $ref: '#/components/parameters/event',
        },
        {
          $ref: '#/components/parameters/workflow-run-status',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/created',
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests',
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id',
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'workflow_runs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List workflow runs for a required workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners': {
    get: {
      description:
        'Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository',
      },
      operationId: 'actions/list-self-hosted-runners-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-paginated',
                },
              },
              schema: {
                properties: {
                  runners: {
                    items: {
                      $ref: '#/components/schemas/runner',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'runners'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List self-hosted runners for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/downloads': {
    get: {
      description:
        'Lists binaries for the runner application that you can download and run.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository',
      },
      operationId: 'actions/list-runner-applications-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner-application-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/runner-application',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List runner applications for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/registration-token': {
    post: {
      description:
        'Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate\nusing an access token with the `repo` scope to use this endpoint.\n\n#### Example using registration token\n \nConfigure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.\n\n```\n./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository',
      },
      operationId: 'actions/create-registration-token-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token',
                },
              },
              schema: {
                $ref: '#/components/schemas/authentication-token',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a registration token for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/remove-token': {
    post: {
      description:
        'Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\n\n#### Example using remove token\n \nTo remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.\n\n```\n./config.sh remove --token TOKEN\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository',
      },
      operationId: 'actions/create-remove-token-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/authentication-token-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/authentication-token',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a remove token for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/{runner_id}': {
    delete: {
      description:
        'Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.\n\nYou must authenticate using an access token with the `repo`\nscope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository',
      },
      operationId: 'actions/delete-self-hosted-runner-from-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a self-hosted runner from a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    get: {
      description:
        'Gets a specific self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/get-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/runner',
                },
              },
              schema: {
                $ref: '#/components/schemas/runner',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels': {
    delete: {
      description:
        'Remove all custom labels from a self-hosted runner configured in a\nrepository. Returns the remaining read-only labels from the runner.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/remove-all-custom-labels-from-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels_readonly',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Remove all custom labels from a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    get: {
      description:
        'Lists all labels for a self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-labels-for-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/list-labels-for-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List labels for a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    post: {
      description:
        'Add custom labels to a self-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/add-custom-labels-to-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'],
                },
              },
            },
            schema: {
              properties: {
                labels: {
                  description: 'The names of the custom labels to add to the runner.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  minItems: 1,
                  type: 'array',
                },
              },
              required: ['labels'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Add custom labels to a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
    put: {
      description:
        'Remove all previous custom labels and set the new custom labels for a specific\nself-hosted runner configured in a repository.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/set-custom-labels-for-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['gpu', 'accelerated'],
                },
              },
            },
            schema: {
              properties: {
                labels: {
                  description:
                    'The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.',
                  items: {
                    type: 'string',
                  },
                  maxItems: 100,
                  minItems: 0,
                  type: 'array',
                },
              },
              required: ['labels'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Set custom labels for a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}': {
    delete: {
      description:
        'Remove a custom label from a self-hosted runner configured\nin a repository. Returns the remaining labels from the runner.\n\nThis endpoint returns a `404 Not Found` status if the custom label is not\npresent on the runner.\n\nYou must authenticate using an access token with the `repo` scope to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository',
      },
      operationId: 'actions/remove-custom-label-from-self-hosted-runner-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/runner-id',
        },
        {
          $ref: '#/components/parameters/runner-label-name',
        },
      ],
      responses: {
        '200': {
          $ref: '#/components/responses/actions_runner_labels',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Remove a custom label from a self-hosted runner for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'self-hosted-runners',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs': {
    get: {
      description:
        'Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository',
      },
      operationId: 'actions/list-workflow-runs-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/actor',
        },
        {
          $ref: '#/components/parameters/workflow-run-branch',
        },
        {
          $ref: '#/components/parameters/event',
        },
        {
          $ref: '#/components/parameters/workflow-run-status',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/created',
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests',
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id',
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'workflow_runs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List workflow runs for a repository',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}': {
    delete: {
      description:
        'Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\nprivate you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use\nthis endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-a-workflow-run',
      },
      operationId: 'actions/delete-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
    get: {
      description:
        'Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow-run',
      },
      operationId: 'actions/get-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow-run',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals': {
    get: {
      description:
        'Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run',
      },
      operationId: 'actions/get-reviews-for-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment-approvals-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/environment-approvals',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the review history for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/approve': {
    post: {
      description:
        'Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request',
      },
      operationId: 'actions/approve-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Approve a workflow run for a fork pull request',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts': {
    get: {
      description:
        'Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts',
      },
      operationId: 'actions/list-workflow-run-artifacts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/artifact-paginated',
                },
              },
              schema: {
                properties: {
                  artifacts: {
                    items: {
                      $ref: '#/components/schemas/artifact',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'artifacts'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List workflow run artifacts',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'artifacts',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}': {
    get: {
      description:
        'Gets a specific workflow run attempt. Anyone with read access to the repository\ncan use this endpoint. If the repository is private you must use an access token\nwith the `repo` scope. GitHub Apps must have the `actions:read` permission to\nuse this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow-run-attempt',
      },
      operationId: 'actions/get-workflow-run-attempt',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          $ref: '#/components/parameters/attempt-number',
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow-run',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a workflow run attempt',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs': {
    get: {
      description:
        'Lists jobs for a specific workflow run attempt. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run-attempt',
      },
      operationId: 'actions/list-jobs-for-workflow-run-attempt',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          $ref: '#/components/parameters/attempt-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job-paginated',
                },
              },
              schema: {
                properties: {
                  jobs: {
                    items: {
                      $ref: '#/components/schemas/job',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'jobs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List jobs for a workflow run attempt',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-jobs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs': {
    get: {
      description:
        'Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after\n1 minute. Look for `Location:` in the response header to find the URL for the download. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.\nGitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#download-workflow-run-attempt-logs',
      },
      operationId: 'actions/download-workflow-run-attempt-logs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          $ref: '#/components/parameters/attempt-number',
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Download workflow run attempt logs',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel': {
    post: {
      description:
        'Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#cancel-a-workflow-run',
      },
      operationId: 'actions/cancel-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
      },
      summary: 'Cancel a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs': {
    get: {
      description:
        'Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run',
      },
      operationId: 'actions/list-jobs-for-workflow-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
        {
          description:
            'Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.',
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'latest',
            enum: ['latest', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/job-paginated',
                },
              },
              schema: {
                properties: {
                  jobs: {
                    items: {
                      $ref: '#/components/schemas/job',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'jobs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List jobs for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-jobs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/logs': {
    delete: {
      description:
        'Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-workflow-run-logs',
      },
      operationId: 'actions/delete-workflow-run-logs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Delete workflow run logs',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
    get: {
      description:
        'Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use\nthis endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have\nthe `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#download-workflow-run-logs',
      },
      operationId: 'actions/download-workflow-run-logs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Download workflow run logs',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments': {
    get: {
      description:
        'Get all deployment environments for a workflow run that are waiting for protection rules to pass.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run',
      },
      operationId: 'actions/get-pending-deployments-for-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pending-deployment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pending-deployment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get pending deployments for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
    post: {
      description:
        'Approve or reject pending deployments that are waiting on approval by a required reviewer.\n\nRequired reviewers with read access to the repository contents and deployments can use this endpoint. Required reviewers must authenticate using an access token with the `repo` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run',
      },
      operationId: 'actions/review-pending-deployments-for-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  comment: 'Ship it!',
                  environment_ids: [161171787],
                  state: 'approved',
                },
              },
            },
            schema: {
              properties: {
                comment: {
                  description: 'A comment to accompany the deployment review',
                  example: 'Ship it!',
                  type: 'string',
                },
                environment_ids: {
                  description: 'The list of environment ids to approve or reject',
                  example: [161171787, 161171795],
                  items: {
                    example: 161171787,
                    type: 'integer',
                  },
                  type: 'array',
                },
                state: {
                  description: 'Whether to approve or reject deployment to the specified environments.',
                  enum: ['approved', 'rejected'],
                  example: 'approved',
                  type: 'string',
                },
              },
              required: ['environment_ids', 'state', 'comment'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Review pending deployments for a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun': {
    post: {
      description:
        'Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#re-run-a-workflow',
      },
      operationId: 'actions/re-run-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null,
              },
            },
            schema: {
              nullable: true,
              properties: {
                enable_debug_logging: {
                  default: false,
                  description: 'Whether to enable debug logging for the re-run.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Re-run a workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs': {
    post: {
      description:
        'Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#re-run-workflow-failed-jobs',
      },
      operationId: 'actions/re-run-workflow-failed-jobs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: null,
              },
            },
            schema: {
              nullable: true,
              properties: {
                enable_debug_logging: {
                  default: false,
                  description: 'Whether to enable debug logging for the re-run.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Re-run failed jobs from a workflow run',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/runs/{run_id}/timing': {
    get: {
      description:
        'Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-run-usage',
      },
      operationId: 'actions/get-workflow-run-usage',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/run-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow-run-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get workflow run usage',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/secrets': {
    get: {
      description:
        'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-repository-secrets',
      },
      operationId: 'actions/list-repo-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/actions-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository secrets',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-repository-public-key',
      },
      operationId: 'actions/get-repo-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository public key',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-a-repository-secret',
      },
      operationId: 'actions/delete-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-repository-secret',
      },
      operationId: 'actions/get-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret',
      },
      operationId: 'actions/create-or-update-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update a repository secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/variables': {
    get: {
      description:
        'Lists all repository variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#list-repository-variables',
      },
      operationId: 'actions/list-repo-variables',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/variables-per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variables-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  variables: {
                    items: {
                      $ref: '#/components/schemas/actions-variable',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'variables'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository variables',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    post: {
      description:
        'Creates a repository variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#create-a-repository-variable',
      },
      operationId: 'actions/create-repo-variable',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  value: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
              },
              required: ['name', 'value'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a repository variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/variables/{name}': {
    delete: {
      description:
        'Deletes a repository variable using the variable name.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#delete-a-repository-variable',
      },
      operationId: 'actions/delete-repo-variable',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    get: {
      description:
        'Gets a specific variable in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions_variables:read` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#get-a-repository-variable',
      },
      operationId: 'actions/get-repo-variable',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variable',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-variable',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    patch: {
      description:
        'Updates a repository variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `actions_variables:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#update-a-repository-variable',
      },
      operationId: 'actions/update-repo-variable',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  value: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Update a repository variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows': {
    get: {
      description:
        'Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-repository-workflows',
      },
      operationId: 'actions/list-repo-workflows',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  workflows: {
                    items: {
                      $ref: '#/components/schemas/workflow',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'workflows'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository workflows',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}': {
    get: {
      description:
        'Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-a-workflow',
      },
      operationId: 'actions/get-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable': {
    put: {
      description:
        'Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#disable-a-workflow',
      },
      operationId: 'actions/disable-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Disable a workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches': {
    post: {
      description:
        'You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event',
      },
      operationId: 'actions/create-workflow-dispatch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  inputs: {
                    home: 'San Francisco, CA',
                    name: 'Mona the Octocat',
                  },
                  ref: 'topic-branch',
                },
              },
            },
            schema: {
              properties: {
                inputs: {
                  additionalProperties: {
                    type: 'string',
                  },
                  description:
                    'Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.',
                  maxProperties: 10,
                  type: 'object',
                },
                ref: {
                  description: 'The git reference for the workflow. The reference can be a branch or tag name.',
                  type: 'string',
                },
              },
              required: ['ref'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Create a workflow dispatch event',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable': {
    put: {
      description:
        'Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#enable-a-workflow',
      },
      operationId: 'actions/enable-workflow',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Enable a workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs': {
    get: {
      description:
        'List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).\n\nAnyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-workflow-runs',
      },
      operationId: 'actions/list-workflow-runs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
        {
          $ref: '#/components/parameters/actor',
        },
        {
          $ref: '#/components/parameters/workflow-run-branch',
        },
        {
          $ref: '#/components/parameters/event',
        },
        {
          $ref: '#/components/parameters/workflow-run-status',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/created',
        },
        {
          $ref: '#/components/parameters/exclude-pull-requests',
        },
        {
          $ref: '#/components/parameters/workflow-run-check-suite-id',
        },
        {
          $ref: '#/components/parameters/workflow-run-head-sha',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-run-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  workflow_runs: {
                    items: {
                      $ref: '#/components/schemas/workflow-run',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'workflow_runs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List workflow runs for a workflow',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'workflow-runs',
      },
    },
  },
  '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing': {
    get: {
      description:
        'Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nYou can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-workflow-usage',
      },
      operationId: 'actions/get-workflow-usage',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/workflow-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/workflow-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/workflow-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get workflow usage',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'workflows',
      },
    },
  },
  '/repos/{owner}/{repo}/assignees': {
    get: {
      description:
        'Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-assignees',
      },
      operationId: 'issues/list-assignees',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List assignees',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'assignees',
      },
    },
  },
  '/repos/{owner}/{repo}/assignees/{assignee}': {
    get: {
      description:
        'Checks if a user has permission to be assigned to an issue in this repository.\n\nIf the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.\n\nOtherwise a `404` status code is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned',
      },
      operationId: 'issues/check-user-can-be-assigned',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'assignee',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description:
            'If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Otherwise a `404` status code is returned.',
        },
      },
      summary: 'Check if a user can be assigned',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'assignees',
      },
    },
  },
  '/repos/{owner}/{repo}/autolinks': {
    get: {
      description:
        'This returns a list of autolinks configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/repos/autolinks#list-all-autolinks-of-a-repository',
      },
      operationId: 'repos/list-autolinks',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/autolink',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List all autolinks of a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'autolinks',
      },
    },
    post: {
      description: 'Users with admin access to the repository can create an autolink.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository',
      },
      operationId: 'repos/create-autolink',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  is_alphanumeric: true,
                  key_prefix: 'TICKET-',
                  url_template: 'https://example.com/TICKET?query=<num>',
                },
              },
            },
            schema: {
              properties: {
                is_alphanumeric: {
                  default: 'true',
                  description:
                    'Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.',
                  type: 'boolean',
                },
                key_prefix: {
                  description:
                    'This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.',
                  type: 'string',
                },
                url_template: {
                  description:
                    'The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.',
                  type: 'string',
                },
              },
              required: ['key_prefix', 'url_template'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink',
                },
              },
              schema: {
                $ref: '#/components/schemas/autolink',
              },
            },
          },
          description: 'response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/autolinks/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an autolink reference for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'autolinks',
      },
    },
  },
  '/repos/{owner}/{repo}/autolinks/{autolink_id}': {
    delete: {
      description:
        'This deletes a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository',
      },
      operationId: 'repos/delete-autolink',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/autolink-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an autolink reference from a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'autolinks',
      },
    },
    get: {
      description:
        'This returns a single autolink reference by ID that was configured for the given repository.\n\nInformation about autolinks are only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository',
      },
      operationId: 'repos/get-autolink',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/autolink-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/autolink',
                },
              },
              schema: {
                $ref: '#/components/schemas/autolink',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an autolink reference of a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'autolinks',
      },
    },
  },
  '/repos/{owner}/{repo}/automated-security-fixes': {
    delete: {
      description:
        'Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#disable-automated-security-fixes',
      },
      operationId: 'repos/disable-automated-security-fixes',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Disable automated security fixes',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#enable-automated-security-fixes',
      },
      operationId: 'repos/enable-automated-security-fixes',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Enable automated security fixes',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/branches': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branches#list-branches',
      },
      operationId: 'repos/list-branches',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.',
          in: 'query',
          name: 'protected',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/short-branch-with-protection-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/short-branch',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List branches',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branches#get-a-branch',
      },
      operationId: 'repos/get-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-get',
                },
              },
              schema: {
                $ref: '#/components/schemas/branch-with-protection',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-branch-protection',
      },
      operationId: 'repos/delete-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Delete branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-branch-protection',
      },
      operationId: 'repos/get-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-protection',
                },
              },
              schema: {
                $ref: '#/components/schemas/branch-protection',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    put: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nProtecting a branch requires admin or owner permissions to the repository.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.\n\n**Note**: The list of users, apps, and teams in total is limited to 100 items.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#update-branch-protection',
      },
      operationId: 'repos/update-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  allow_deletions: true,
                  allow_force_pushes: true,
                  allow_fork_syncing: true,
                  block_creations: true,
                  enforce_admins: true,
                  lock_branch: true,
                  required_conversation_resolution: true,
                  required_linear_history: true,
                  required_pull_request_reviews: {
                    bypass_pull_request_allowances: {
                      teams: ['justice-league'],
                      users: ['octocat'],
                    },
                    dismiss_stale_reviews: true,
                    dismissal_restrictions: {
                      teams: ['justice-league'],
                      users: ['octocat'],
                    },
                    require_code_owner_reviews: true,
                    require_last_push_approval: true,
                    required_approving_review_count: 2,
                  },
                  required_status_checks: {
                    contexts: ['continuous-integration/travis-ci'],
                    strict: true,
                  },
                  restrictions: {
                    apps: ['super-ci'],
                    teams: ['justice-league'],
                    users: ['octocat'],
                  },
                },
              },
            },
            schema: {
              properties: {
                allow_deletions: {
                  description:
                    'Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.',
                  type: 'boolean',
                },
                allow_force_pushes: {
                  description:
                    'Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."',
                  nullable: true,
                  type: 'boolean',
                },
                allow_fork_syncing: {
                  default: false,
                  description:
                    'Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.',
                  type: 'boolean',
                },
                block_creations: {
                  description:
                    'If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.',
                  type: 'boolean',
                },
                enforce_admins: {
                  description:
                    'Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.',
                  nullable: true,
                  type: 'boolean',
                },
                lock_branch: {
                  default: false,
                  description:
                    'Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.',
                  type: 'boolean',
                },
                required_conversation_resolution: {
                  description:
                    'Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.',
                  type: 'boolean',
                },
                required_linear_history: {
                  description:
                    'Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.',
                  type: 'boolean',
                },
                required_pull_request_reviews: {
                  description:
                    'Require at least one approving review on a pull request, before merging. Set to `null` to disable.',
                  nullable: true,
                  properties: {
                    bypass_pull_request_allowances: {
                      description: 'Allow specific users, teams, or apps to bypass pull request requirements.',
                      properties: {
                        apps: {
                          description: 'The list of app `slug`s allowed to bypass pull request requirements.',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                        teams: {
                          description: 'The list of team `slug`s allowed to bypass pull request requirements.',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                        users: {
                          description: 'The list of user `login`s allowed to bypass pull request requirements.',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                      },
                      type: 'object',
                    },
                    dismiss_stale_reviews: {
                      description:
                        'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.',
                      type: 'boolean',
                    },
                    dismissal_restrictions: {
                      description:
                        'Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.',
                      properties: {
                        apps: {
                          description: 'The list of app `slug`s with dismissal access',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                        teams: {
                          description: 'The list of team `slug`s with dismissal access',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                        users: {
                          description: 'The list of user `login`s with dismissal access',
                          items: {
                            type: 'string',
                          },
                          type: 'array',
                        },
                      },
                      type: 'object',
                    },
                    require_code_owner_reviews: {
                      description:
                        'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.',
                      type: 'boolean',
                    },
                    require_last_push_approval: {
                      default: false,
                      description:
                        'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.',
                      type: 'boolean',
                    },
                    required_approving_review_count: {
                      description:
                        'Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.',
                      type: 'integer',
                    },
                  },
                  type: 'object',
                },
                required_status_checks: {
                  description: 'Require status checks to pass before merging. Set to `null` to disable.',
                  nullable: true,
                  properties: {
                    checks: {
                      description: 'The list of status checks to require in order to merge into this branch.',
                      items: {
                        properties: {
                          app_id: {
                            description:
                              'The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.',
                            type: 'integer',
                          },
                          context: {
                            description: 'The name of the required check',
                            type: 'string',
                          },
                        },
                        required: ['context'],
                        type: 'object',
                      },
                      type: 'array',
                    },
                    contexts: {
                      deprecated: true,
                      description:
                        '**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    strict: {
                      description: 'Require branches to be up to date before merging.',
                      type: 'boolean',
                    },
                  },
                  required: ['strict', 'contexts'],
                  type: 'object',
                },
                restrictions: {
                  description:
                    'Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.',
                  nullable: true,
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s with push access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    teams: {
                      description: 'The list of team `slug`s with push access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    users: {
                      description: 'The list of user `login`s with push access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['users', 'teams'],
                  type: 'object',
                },
              },
              required: ['required_status_checks', 'enforce_admins', 'required_pull_request_reviews', 'restrictions'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-protection-update',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoving admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection',
      },
      operationId: 'repos/delete-admin-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete admin branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection',
      },
      operationId: 'repos/get-admin-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get admin branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nAdding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection',
      },
      operationId: 'repos/set-admin-branch-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Set admin branch protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection',
      },
      operationId: 'repos/delete-pull-request-review-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete pull request review protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection',
      },
      operationId: 'repos/get-pull-request-review-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-pull-request-review',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-pull-request-review',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get pull request review protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    patch: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.\n\n**Note**: Passing new arrays of `users` and `teams` replaces their previous values.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection',
      },
      operationId: 'repos/update-pull-request-review-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  bypass_pull_request_allowances: {
                    apps: ['octoapp'],
                    teams: ['justice-league'],
                    users: ['octocat'],
                  },
                  dismiss_stale_reviews: true,
                  dismissal_restrictions: {
                    apps: ['octoapp'],
                    teams: ['justice-league'],
                    users: ['octocat'],
                  },
                  require_code_owner_reviews: true,
                  require_last_push_approval: true,
                  required_approving_review_count: 2,
                },
              },
            },
            schema: {
              properties: {
                bypass_pull_request_allowances: {
                  description: 'Allow specific users, teams, or apps to bypass pull request requirements.',
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s allowed to bypass pull request requirements.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    teams: {
                      description: 'The list of team `slug`s allowed to bypass pull request requirements.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    users: {
                      description: 'The list of user `login`s allowed to bypass pull request requirements.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                dismiss_stale_reviews: {
                  description:
                    'Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.',
                  type: 'boolean',
                },
                dismissal_restrictions: {
                  description:
                    'Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.',
                  properties: {
                    apps: {
                      description: 'The list of app `slug`s with dismissal access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    teams: {
                      description: 'The list of team `slug`s with dismissal access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                    users: {
                      description: 'The list of user `login`s with dismissal access',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                require_code_owner_reviews: {
                  description:
                    'Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.',
                  type: 'boolean',
                },
                require_last_push_approval: {
                  default: false,
                  description:
                    'Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`',
                  type: 'boolean',
                },
                required_approving_review_count: {
                  description:
                    'Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.',
                  type: 'integer',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-pull-request-review',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update pull request review protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection',
      },
      operationId: 'repos/delete-commit-signature-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete commit signature protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.\n\n**Note**: You must enable branch protection to require signed commits.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection',
      },
      operationId: 'repos/get-commit-signature-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get commit signature protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nWhen authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection',
      },
      operationId: 'repos/create-commit-signature-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/protected-branch-admin-enforced',
                },
              },
              schema: {
                $ref: '#/components/schemas/protected-branch-admin-enforced',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Create commit signature protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection',
      },
      operationId: 'repos/remove-status-check-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove status check protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection',
      },
      operationId: 'repos/get-status-checks-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-check-policy',
                },
              },
              schema: {
                $ref: '#/components/schemas/status-check-policy',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get status checks protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    patch: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nUpdating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#update-status-check-protection',
      },
      operationId: 'repos/update-status-check-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  contexts: ['continuous-integration/travis-ci'],
                  strict: true,
                },
              },
            },
            schema: {
              properties: {
                checks: {
                  description: 'The list of status checks to require in order to merge into this branch.',
                  items: {
                    properties: {
                      app_id: {
                        description:
                          'The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.',
                        type: 'integer',
                      },
                      context: {
                        description: 'The name of the required check',
                        type: 'string',
                      },
                    },
                    required: ['context'],
                    type: 'object',
                  },
                  type: 'array',
                },
                contexts: {
                  deprecated: true,
                  description:
                    '**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                strict: {
                  description: 'Require branches to be up to date before merging.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-check-policy',
                },
              },
              schema: {
                $ref: '#/components/schemas/status-check-policy',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update status check protection',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts',
      },
      operationId: 'repos/remove-status-check-contexts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing status checks from a branch protection rule',
                value: {
                  contexts: ['continuous-integration/jenkins'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'],
                  },
                  properties: {
                    contexts: {
                      description: 'The name of the status checks',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['contexts'],
                  type: 'object',
                },
                {
                  description: 'The name of the status checks',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'],
                },
              },
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove status check contexts',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'contexts',
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts',
      },
      operationId: 'repos/get-all-status-check-contexts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'],
                },
              },
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get all status check contexts',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts',
      },
      operationId: 'repos/add-status-check-contexts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding status checks to a branch protection rule',
                value: {
                  contexts: ['continuous-integration/travis-ci', 'continuous-integration/jenkins'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'],
                  },
                  properties: {
                    contexts: {
                      description: 'The name of the status checks',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['contexts'],
                  type: 'object',
                },
                {
                  description: 'The name of the status checks',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci', 'continuous-integration/jenkins'],
                },
              },
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add status check contexts',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'contexts',
        subcategory: 'branch-protection',
      },
    },
    put: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts',
      },
      operationId: 'repos/set-status-check-contexts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example updating status checks for a branch protection rule',
                value: {
                  contexts: ['continuous-integration/travis-ci'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    contexts: ['contexts'],
                  },
                  properties: {
                    contexts: {
                      description: 'The name of the status checks',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['contexts'],
                  type: 'object',
                },
                {
                  description: 'The name of the status checks',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['continuous-integration/travis-ci'],
                },
              },
              schema: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set status check contexts',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'contexts',
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nDisables the ability to restrict who can push to this branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions',
      },
      operationId: 'repos/delete-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists who has access to this protected branch.\n\n**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#get-access-restrictions',
      },
      operationId: 'repos/get-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-restriction-policy',
                },
              },
              schema: {
                $ref: '#/components/schemas/branch-restriction-policy',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions',
      },
      operationId: 'repos/remove-app-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['my-app'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'],
                  },
                  properties: {
                    apps: {
                      description:
                        'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['apps'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/integration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove app access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'apps',
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#list-apps-with-access-to-the-protected-branch',
      },
      operationId: 'repos/get-apps-with-access-to-protected-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/integration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get apps with access to the protected branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions',
      },
      operationId: 'repos/add-app-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['octoapp'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'],
                  },
                  properties: {
                    apps: {
                      description:
                        'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['apps'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/integration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add app access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'apps',
        subcategory: 'branch-protection',
      },
    },
    put: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions',
      },
      operationId: 'repos/set-app-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  apps: ['octoapp'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    apps: ['my-app'],
                  },
                  properties: {
                    apps: {
                      description:
                        'The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['apps'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/integration-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/integration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set app access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'apps',
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a team to push to this branch. You can also remove push access for child teams.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions',
      },
      operationId: 'repos/remove-team-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing a team in a branch protection rule',
                value: {
                  teams: ['octocats'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['my-team'],
                  },
                  properties: {
                    teams: {
                      description: 'The slug values for teams',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['teams'],
                  type: 'object',
                },
                {
                  description: 'The slug values for teams',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove team access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'teams',
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the teams who have push access to this branch. The list includes child teams.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#list-teams-with-access-to-the-protected-branch',
      },
      operationId: 'repos/get-teams-with-access-to-protected-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get teams with access to the protected branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified teams push access for this branch. You can also give push access to child teams.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions',
      },
      operationId: 'repos/add-team-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding a team in a branch protection rule',
                value: {
                  teams: ['justice-league'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['my-team'],
                  },
                  properties: {
                    teams: {
                      description: 'The slug values for teams',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['teams'],
                  type: 'object',
                },
                {
                  description: 'The slug values for teams',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add team access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'teams',
        subcategory: 'branch-protection',
      },
    },
    put: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions',
      },
      operationId: 'repos/set-team-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example replacing a team in a branch protection rule',
                value: {
                  teams: ['justice-league'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    teams: ['justice-league'],
                  },
                  properties: {
                    teams: {
                      description: 'The slug values for teams',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['teams'],
                  type: 'object',
                },
                {
                  description: 'The slug values for teams',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set team access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'teams',
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users': {
    delete: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nRemoves the ability of a user to push to this branch.\n\n| Type    | Description                                                                                                                                   |\n| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions',
      },
      operationId: 'repos/remove-user-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example removing a user in a branch protection rule',
                value: {
                  users: ['octocat'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'],
                  },
                  properties: {
                    users: {
                      description: 'The username for users',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['users'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove user access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'users',
        subcategory: 'branch-protection',
      },
    },
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists the people who have push access to this branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#list-users-with-access-to-the-protected-branch',
      },
      operationId: 'repos/get-users-with-access-to-protected-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get users with access to the protected branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-protection',
      },
    },
    post: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nGrants the specified people push access for this branch.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions',
      },
      operationId: 'repos/add-user-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding a user in a branch protection rule',
                value: {
                  users: ['octocat'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'],
                  },
                  properties: {
                    users: {
                      description: 'The username for users',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['users'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add user access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'users',
        subcategory: 'branch-protection',
      },
    },
    put: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReplaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.\n\n| Type    | Description                                                                                                                   |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions',
      },
      operationId: 'repos/set-user-access-restrictions',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example replacing a user in a branch protection rule',
                value: {
                  users: ['octocat'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    users: ['mona'],
                  },
                  properties: {
                    users: {
                      description: 'The username for users',
                      items: {
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['users'],
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set user access restrictions',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        requestBodyParameterName: 'users',
        subcategory: 'branch-protection',
      },
    },
  },
  '/repos/{owner}/{repo}/branches/{branch}/rename': {
    post: {
      description:
        'Renames a branch in a repository.\n\n**Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won\'t be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".\n\nThe permissions required to use this endpoint depends on whether you are renaming the default branch.\n\nTo rename a non-default branch:\n\n* Users must have push access.\n* GitHub Apps must have the `contents:write` repository permission.\n\nTo rename the default branch:\n\n* Users must have admin or owner permissions.\n* GitHub Apps must have the `administration:write` repository permission.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branches#rename-a-branch',
      },
      operationId: 'repos/rename-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/branch',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  new_name: 'my_renamed_branch',
                },
              },
            },
            schema: {
              properties: {
                new_name: {
                  description: 'The new name of the branch.',
                  type: 'string',
                },
              },
              required: ['new_name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-with-protection',
                },
              },
              schema: {
                $ref: '#/components/schemas/branch-with-protection',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Rename a branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/check-runs': {
    post: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nCreates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.\n\nIn a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#create-a-check-run',
      },
      operationId: 'checks/create',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-of-completed-conclusion': {
                summary: 'Example of a completed conclusion',
                value: {
                  actions: [
                    {
                      description: 'Allow us to fix these errors for you',
                      identifier: 'fix_errors',
                      label: 'Fix',
                    },
                  ],
                  completed_at: '2017-11-30T19:49:10Z',
                  conclusion: 'success',
                  head_sha: 'ce587453ced02b1526dfb4cb910479d431683101',
                  name: 'mighty_readme',
                  output: {
                    annotations: [
                      {
                        annotation_level: 'warning',
                        end_line: 2,
                        message: "Check your spelling for 'banaas'.",
                        path: 'README.md',
                        raw_details: "Do you mean 'bananas' or 'banana'?",
                        start_line: 2,
                        title: 'Spell Checker',
                      },
                      {
                        annotation_level: 'warning',
                        end_line: 4,
                        message: "Check your spelling for 'aples'",
                        path: 'README.md',
                        raw_details: "Do you mean 'apples' or 'Naples'",
                        start_line: 4,
                        title: 'Spell Checker',
                      },
                    ],
                    images: [
                      {
                        alt: 'Super bananas',
                        image_url: 'http://example.com/images/42',
                      },
                    ],
                    summary: 'There are 0 failures, 2 warnings, and 1 notices.',
                    text: 'You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.',
                    title: 'Mighty Readme report',
                  },
                  started_at: '2017-11-30T19:39:10Z',
                  status: 'completed',
                },
              },
              'example-of-in-progress-conclusion': {
                summary: 'Example of an in_progress conclusion',
                value: {
                  external_id: '42',
                  head_sha: 'ce587453ced02b1526dfb4cb910479d431683101',
                  name: 'mighty_readme',
                  output: {
                    summary: '',
                    text: '',
                    title: 'Mighty Readme report',
                  },
                  started_at: '2018-05-04T01:14:52Z',
                  status: 'in_progress',
                },
              },
            },
            schema: {
              oneOf: [
                {
                  additionalProperties: true,
                  properties: {
                    status: {
                      enum: ['completed'],
                    },
                  },
                  required: ['status', 'conclusion'],
                },
                {
                  additionalProperties: true,
                  properties: {
                    status: {
                      enum: ['queued', 'in_progress'],
                    },
                  },
                },
              ],
              properties: {
                actions: {
                  description:
                    'Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."',
                  items: {
                    properties: {
                      description: {
                        description:
                          'A short explanation of what this action would do. The maximum size is 40 characters.',
                        maxLength: 40,
                        type: 'string',
                      },
                      identifier: {
                        description:
                          "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                        maxLength: 20,
                        type: 'string',
                      },
                      label: {
                        description:
                          'The text to be displayed on a button in the web UI. The maximum size is 20 characters.',
                        maxLength: 20,
                        type: 'string',
                      },
                    },
                    required: ['label', 'description', 'identifier'],
                    type: 'object',
                  },
                  maxItems: 3,
                  type: 'array',
                },
                completed_at: {
                  description:
                    'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                conclusion: {
                  description:
                    '**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
                  enum: [
                    'action_required',
                    'cancelled',
                    'failure',
                    'neutral',
                    'success',
                    'skipped',
                    'stale',
                    'timed_out',
                  ],
                  type: 'string',
                },
                details_url: {
                  description:
                    "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
                  type: 'string',
                },
                external_id: {
                  description: "A reference for the run on the integrator's system.",
                  type: 'string',
                },
                head_sha: {
                  description: 'The SHA of the commit.',
                  type: 'string',
                },
                name: {
                  description: 'The name of the check. For example, "code-coverage".',
                  type: 'string',
                },
                output: {
                  description:
                    'Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.',
                  properties: {
                    annotations: {
                      description:
                        'Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".',
                      items: {
                        properties: {
                          annotation_level: {
                            description: 'The level of the annotation.',
                            enum: ['notice', 'warning', 'failure'],
                            type: 'string',
                          },
                          end_column: {
                            description:
                              'The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
                            type: 'integer',
                          },
                          end_line: {
                            description: 'The end line of the annotation.',
                            type: 'integer',
                          },
                          message: {
                            description:
                              'A short description of the feedback for these lines of code. The maximum size is 64 KB.',
                            type: 'string',
                          },
                          path: {
                            description:
                              'The path of the file to add an annotation to. For example, `assets/css/main.css`.',
                            type: 'string',
                          },
                          raw_details: {
                            description: 'Details about this annotation. The maximum size is 64 KB.',
                            type: 'string',
                          },
                          start_column: {
                            description:
                              'The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.',
                            type: 'integer',
                          },
                          start_line: {
                            description: 'The start line of the annotation. Line numbers start at 1.',
                            type: 'integer',
                          },
                          title: {
                            description:
                              'The title that represents the annotation. The maximum size is 255 characters.',
                            type: 'string',
                          },
                        },
                        required: ['path', 'start_line', 'end_line', 'annotation_level', 'message'],
                        type: 'object',
                      },
                      maxItems: 50,
                      type: 'array',
                    },
                    images: {
                      description: 'Adds images to the output displayed in the GitHub pull request UI.',
                      items: {
                        properties: {
                          alt: {
                            description: 'The alternative text for the image.',
                            type: 'string',
                          },
                          caption: {
                            description: 'A short image description.',
                            type: 'string',
                          },
                          image_url: {
                            description: 'The full URL of the image.',
                            type: 'string',
                          },
                        },
                        required: ['alt', 'image_url'],
                        type: 'object',
                      },
                      type: 'array',
                    },
                    summary: {
                      description:
                        'The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.',
                      maxLength: 65535,
                      type: 'string',
                    },
                    text: {
                      description:
                        'The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.',
                      maxLength: 65535,
                      type: 'string',
                    },
                    title: {
                      description: 'The title of the check run.',
                      type: 'string',
                    },
                  },
                  required: ['title', 'summary'],
                  type: 'object',
                },
                started_at: {
                  description:
                    'The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                status: {
                  default: 'queued',
                  description: 'The current status.',
                  enum: ['queued', 'in_progress', 'completed'],
                  type: 'string',
                },
              },
              required: ['name', 'head_sha'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-of-completed-conclusion': {
                  $ref: '#/components/examples/check-run-example-of-completed-conclusion',
                },
                'example-of-in-progress-conclusion': {
                  $ref: '#/components/examples/check-run-example-of-in-progress-conclusion',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-run',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a check run',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/check-runs/{check_run_id}': {
    get: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nGets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#get-a-check-run',
      },
      operationId: 'checks/get',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-run-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-run',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a check run',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
    patch: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nUpdates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#update-a-check-run',
      },
      operationId: 'checks/update',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-run-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  completed_at: '2018-05-04T01:14:52Z',
                  conclusion: 'success',
                  name: 'mighty_readme',
                  output: {
                    annotations: [
                      {
                        annotation_level: 'warning',
                        end_line: 2,
                        message: "Check your spelling for 'banaas'.",
                        path: 'README.md',
                        raw_details: "Do you mean 'bananas' or 'banana'?",
                        start_line: 2,
                        title: 'Spell Checker',
                      },
                      {
                        annotation_level: 'warning',
                        end_line: 4,
                        message: "Check your spelling for 'aples'",
                        path: 'README.md',
                        raw_details: "Do you mean 'apples' or 'Naples'",
                        start_line: 4,
                        title: 'Spell Checker',
                      },
                    ],
                    images: [
                      {
                        alt: 'Super bananas',
                        image_url: 'http://example.com/images/42',
                      },
                    ],
                    summary: 'There are 0 failures, 2 warnings, and 1 notices.',
                    text: 'You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.',
                    title: 'Mighty Readme report',
                  },
                  started_at: '2018-05-04T01:14:52Z',
                  status: 'completed',
                },
              },
            },
            schema: {
              anyOf: [
                {
                  additionalProperties: true,
                  properties: {
                    status: {
                      enum: ['completed'],
                    },
                  },
                  required: ['conclusion'],
                },
                {
                  additionalProperties: true,
                  properties: {
                    status: {
                      enum: ['queued', 'in_progress'],
                    },
                  },
                },
              ],
              properties: {
                actions: {
                  description:
                    'Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."',
                  items: {
                    properties: {
                      description: {
                        description:
                          'A short explanation of what this action would do. The maximum size is 40 characters.',
                        maxLength: 40,
                        type: 'string',
                      },
                      identifier: {
                        description:
                          "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                        maxLength: 20,
                        type: 'string',
                      },
                      label: {
                        description:
                          'The text to be displayed on a button in the web UI. The maximum size is 20 characters.',
                        maxLength: 20,
                        type: 'string',
                      },
                    },
                    required: ['label', 'description', 'identifier'],
                    type: 'object',
                  },
                  maxItems: 3,
                  type: 'array',
                },
                completed_at: {
                  description:
                    'The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                conclusion: {
                  description:
                    '**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.',
                  enum: [
                    'action_required',
                    'cancelled',
                    'failure',
                    'neutral',
                    'success',
                    'skipped',
                    'stale',
                    'timed_out',
                  ],
                  type: 'string',
                },
                details_url: {
                  description: "The URL of the integrator's site that has the full details of the check.",
                  type: 'string',
                },
                external_id: {
                  description: "A reference for the run on the integrator's system.",
                  type: 'string',
                },
                name: {
                  description: 'The name of the check. For example, "code-coverage".',
                  type: 'string',
                },
                output: {
                  description:
                    'Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run.',
                  properties: {
                    annotations: {
                      description:
                        'Adds information from your analysis to specific lines of code. Annotations are visible in GitHub\'s pull request UI. Annotations are visible in GitHub\'s pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".',
                      items: {
                        properties: {
                          annotation_level: {
                            description: 'The level of the annotation.',
                            enum: ['notice', 'warning', 'failure'],
                            type: 'string',
                          },
                          end_column: {
                            description:
                              'The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.',
                            type: 'integer',
                          },
                          end_line: {
                            description: 'The end line of the annotation.',
                            type: 'integer',
                          },
                          message: {
                            description:
                              'A short description of the feedback for these lines of code. The maximum size is 64 KB.',
                            type: 'string',
                          },
                          path: {
                            description:
                              'The path of the file to add an annotation to. For example, `assets/css/main.css`.',
                            type: 'string',
                          },
                          raw_details: {
                            description: 'Details about this annotation. The maximum size is 64 KB.',
                            type: 'string',
                          },
                          start_column: {
                            description:
                              'The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1.',
                            type: 'integer',
                          },
                          start_line: {
                            description: 'The start line of the annotation. Line numbers start at 1.',
                            type: 'integer',
                          },
                          title: {
                            description:
                              'The title that represents the annotation. The maximum size is 255 characters.',
                            type: 'string',
                          },
                        },
                        required: ['path', 'start_line', 'end_line', 'annotation_level', 'message'],
                        type: 'object',
                      },
                      maxItems: 50,
                      type: 'array',
                    },
                    images: {
                      description: 'Adds images to the output displayed in the GitHub pull request UI.',
                      items: {
                        properties: {
                          alt: {
                            description: 'The alternative text for the image.',
                            type: 'string',
                          },
                          caption: {
                            description: 'A short image description.',
                            type: 'string',
                          },
                          image_url: {
                            description: 'The full URL of the image.',
                            type: 'string',
                          },
                        },
                        required: ['alt', 'image_url'],
                        type: 'object',
                      },
                      type: 'array',
                    },
                    summary: {
                      description: 'Can contain Markdown.',
                      maxLength: 65535,
                      type: 'string',
                    },
                    text: {
                      description: 'Can contain Markdown.',
                      maxLength: 65535,
                      type: 'string',
                    },
                    title: {
                      description: '**Required**.',
                      type: 'string',
                    },
                  },
                  required: ['summary'],
                  type: 'object',
                },
                started_at: {
                  description:
                    'This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                status: {
                  description: 'The current status.',
                  enum: ['queued', 'in_progress', 'completed'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-run',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a check run',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations': {
    get: {
      description:
        'Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#list-check-run-annotations',
      },
      operationId: 'checks/list-annotations',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-run-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-annotation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/check-annotation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List check run annotations',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest': {
    post: {
      description:
        'Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check run, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#rerequest-a-check-run',
      },
      operationId: 'checks/rerequest-run',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-run-id',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description:
            "Forbidden if the check run is not rerequestable or doesn't belong to the authenticated GitHub App",
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Validation error if the check run is not rerequestable',
        },
      },
      summary: 'Rerequest a check run',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/check-suites': {
    post: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nBy default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you\'ve disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#create-a-check-suite',
      },
      operationId: 'checks/create-suite',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  head_sha: 'd6fde92930d4715a2b49857d24b940956b26d2d3',
                },
              },
            },
            schema: {
              properties: {
                head_sha: {
                  description: 'The sha of the head commit.',
                  type: 'string',
                },
              },
              required: ['head_sha'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-suite',
              },
            },
          },
          description: 'Response when the suite already exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-suite',
              },
            },
          },
          description: 'Response when the suite was created',
        },
      },
      summary: 'Create a check suite',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'suites',
      },
    },
  },
  '/repos/{owner}/{repo}/check-suites/preferences': {
    patch: {
      description:
        'Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites',
      },
      operationId: 'checks/set-suites-preferences',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  auto_trigger_checks: [
                    {
                      app_id: 4,
                      setting: false,
                    },
                  ],
                },
              },
            },
            schema: {
              properties: {
                auto_trigger_checks: {
                  description:
                    'Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.',
                  items: {
                    properties: {
                      app_id: {
                        description: 'The `id` of the GitHub App.',
                        type: 'integer',
                      },
                      setting: {
                        default: true,
                        description:
                          'Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.',
                        type: 'boolean',
                      },
                    },
                    required: ['app_id', 'setting'],
                    type: 'object',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite-preference',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-suite-preference',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update repository preferences for check suites',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'suites',
      },
    },
  },
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}': {
    get: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nGets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#get-a-check-suite',
      },
      operationId: 'checks/get-suite',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-suite-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite',
                },
              },
              schema: {
                $ref: '#/components/schemas/check-suite',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a check suite',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'suites',
      },
    },
  },
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs': {
    get: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite',
      },
      operationId: 'checks/list-for-suite',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-suite-id',
        },
        {
          $ref: '#/components/parameters/check-name',
        },
        {
          $ref: '#/components/parameters/status',
        },
        {
          description:
            'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.',
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'latest',
            enum: ['latest', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run-paginated',
                },
              },
              schema: {
                properties: {
                  check_runs: {
                    items: {
                      $ref: '#/components/schemas/check-run',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'check_runs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List check runs in a check suite',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest': {
    post: {
      description:
        'Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.\n\nTo rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#rerequest-a-check-suite',
      },
      operationId: 'checks/rerequest-suite',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/check-suite-id',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Rerequest a check suite',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'suites',
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/alerts': {
    get: {
      description:
        'Lists code scanning alerts.\n\nTo use this endpoint, you must use an access token with the `security_events` scope or, for alerts from public repositories only, an access token with the `public_repo` scope.\n\nGitHub Apps must have the `security_events` read\npermission to use this endpoint.\n\nThe response includes a `most_recent_instance` object.\nThis provides details of the most recent instance of this alert\nfor the default branch (or for the specified Git reference if you used `ref` in the request).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository',
      },
      operationId: 'code-scanning/list-alerts-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/tool-name',
        },
        {
          $ref: '#/components/parameters/tool-guid',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/git-ref',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          description: 'The property by which to sort the results.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated'],
            type: 'string',
          },
        },
        {
          description: 'If specified, only code scanning alerts with this state will be returned.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-state',
          },
        },
        {
          description: 'If specified, only code scanning alerts with this severity will be returned.',
          in: 'query',
          name: 'severity',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-alert-severity',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-alert-items',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List code scanning alerts for a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}': {
    get: {
      description:
        'Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert',
      },
      operationId: 'code-scanning/get-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-alert',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a code scanning alert',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        'Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint with private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert',
      },
      operationId: 'code-scanning/update-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  dismissed_comment:
                    "This alert is not actually correct, because there's a sanitizer included in the library.",
                  dismissed_reason: 'false positive',
                  state: 'dismissed',
                },
              },
            },
            schema: {
              properties: {
                dismissed_comment: {
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-comment',
                },
                dismissed_reason: {
                  $ref: '#/components/schemas/code-scanning-alert-dismissed-reason',
                },
                state: {
                  $ref: '#/components/schemas/code-scanning-alert-set-state',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-dismissed',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-alert',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Update a code scanning alert',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances': {
    get: {
      description:
        'Lists all instances of the specified code scanning alert.\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert',
      },
      operationId: 'code-scanning/list-alert-instances',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/git-ref',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-alert-instances',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-alert-instance',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List instances of a code scanning alert',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/analyses': {
    get: {
      description:
        "Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the `page` and `per_page` parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.\n\nThe `rules_count` field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\n**Deprecation notice**:\nThe `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository',
      },
      operationId: 'code-scanning/list-recent-analyses',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/tool-name',
        },
        {
          $ref: '#/components/parameters/tool-guid',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          description:
            'The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.',
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-ref',
          },
        },
        {
          description: 'Filter analyses belonging to the same SARIF upload.',
          in: 'query',
          name: 'sarif_id',
          required: false,
          schema: {
            $ref: '#/components/schemas/code-scanning-analysis-sarif-id',
          },
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          description: 'The property by which to sort the results.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-analysis-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-analysis',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List code scanning analyses for a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}': {
    delete: {
      description:
        "Deletes a specified code scanning analysis from a repository. For\nprivate repositories, you must use an access token with the `repo` scope. For public repositories,\nyou must use an access token with `public_repo` scope.\nGitHub Apps must have the `security_events` write permission to use this endpoint.\n\nYou can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.\n\nWhen you list the analyses for a repository,\none or more will be identified as deletable in the response:\n\n```\n\"deletable\": true\n```\n\nAn analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:\n\n* `ref`\n* `tool`\n* `category`\n\nIf you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:\n\n```\nAnalysis specified is not deletable.\n```\n\nThe response from a successful `DELETE` operation provides you with\ntwo alternative URLs for deleting the next analysis in the set:\n`next_analysis_url` and `confirm_delete_url`.\nUse the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis\nin a set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the `confirm_delete_url` URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set, the value of `next_analysis_url` and `confirm_delete_url`\nin the 200 response is `null`.\n\nAs an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find an analysis that's identified as deletable.\nEach set of analyses always has one that's identified as deletable.\nHaving found the deletable analysis for one of the two sets,\ndelete this analysis and then continue deleting the next analysis in the set until they're all deleted.\nThen repeat the process for the second set.\nThe procedure therefore consists of a nested loop:\n\n**Outer loop**:\n* List the analyses for the repository, filtered by tool.\n* Parse this list to find a deletable analysis. If found:\n\n  **Inner loop**:\n  * Delete the identified analysis.\n  * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.\n\nThe above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository',
      },
      operationId: 'code-scanning/delete-analysis',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.',
          in: 'path',
          name: 'analysis_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
        {
          description:
            "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`",
          in: 'query',
          name: 'confirm_delete',
          required: false,
          schema: {
            nullable: true,
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/code-scanning-analysis-deletion',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-analysis-deletion',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Delete a code scanning analysis from a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    get: {
      description:
        'Gets a specified code scanning analysis for a repository.\nYou must use an access token with the `security_events` scope to use this endpoint with private repos,\nthe `public_repo` scope also grants permission to read security events on public repos only.\nGitHub Apps must have the `security_events` read permission to use this endpoint.\n\nThe default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.\n\nThe `rules_count` field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand `0` is returned in this field.\n\nIf you use the Accept header `application/sarif+json`,\nthe response contains the analysis data that was uploaded.\nThis is formatted as\n[SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository',
      },
      operationId: 'code-scanning/get-analysis',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.',
          in: 'path',
          name: 'analysis_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                response: {
                  $ref: '#/components/examples/code-scanning-analysis-default',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-analysis',
              },
            },
            'application/json+sarif': {
              examples: {
                response: {
                  $ref: '#/components/examples/code-scanning-analysis-sarif',
                },
              },
              schema: {
                additionalProperties: true,
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a code scanning analysis for a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/codeql/databases': {
    get: {
      description:
        'Lists the CodeQL databases that are available in a repository.\n\nFor private repositories, you must use an access token with the `security_events` scope.\nFor public repositories, you can use tokens with the `security_events` or `public_repo` scope.\nGitHub Apps must have the `contents` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-codeql-databases',
      },
      operationId: 'code-scanning/list-codeql-databases',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-codeql-databases',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-scanning-codeql-database',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List CodeQL databases for a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}': {
    get: {
      description:
        'Gets a CodeQL database for a language in a repository.\n\nBy default this endpoint returns JSON metadata about the CodeQL database. To\ndownload the CodeQL database binary content, set the `Accept` header of the request\nto [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure\nyour HTTP client is configured to follow redirects or use the `Location` header\nto make a second request to get the redirect URL.\n\nFor private repositories, you must use an access token with the `security_events` scope.\nFor public repositories, you can use tokens with the `security_events` or `public_repo` scope.\nGitHub Apps must have the `contents` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#get-codeql-database',
      },
      operationId: 'code-scanning/get-codeql-database',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The language of the CodeQL database.',
          in: 'path',
          name: 'language',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-codeql-database',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-codeql-database',
              },
            },
          },
          description: 'Response',
        },
        '302': {
          $ref: '#/components/responses/found',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a CodeQL database for a repository',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/sarifs': {
    post: {
      description:
        'Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint for private repositories. You can also use tokens with the `public_repo` scope for public repositories only. GitHub Apps must have the `security_events` write permission to use this endpoint.\n\nThere are two places where you can upload code scanning results.\n - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."\n - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."\n\nYou must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:\n\n```\ngzip -c analysis-data.sarif | base64 -w0\n```\n<br>\nSARIF upload supports a maximum number of entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum value. For some objects, there are additional values over which the entries will be ignored while keeping the most important entries whenever applicable.\nTo get the most out of your analysis when it includes data above the supported limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy queries.\n\n\n| **SARIF data**                   | **Maximum values** | **Additional limits**                                                            |\n|----------------------------------|:------------------:|----------------------------------------------------------------------------------|\n| Runs per file                    |         20         |                                                                                  |\n| Results per run                  |       25,000       | Only the top 5,000 results will be included, prioritized by severity.            |\n| Rules per run                    |       25,000       |                                                                                  |\n| Tool extensions per run          |        100         |                                                                                  |\n| Thread Flow Locations per result |       10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |\n| Location per result\t             |       1,000        | Only 100 locations will be included.                                             |\n| Tags per rule\t                   |         20         | Only 10 tags will be included.                                                   |\n\n\nThe `202 Accepted` response includes an `id` value.\nYou can use this ID to check the status of the upload by using it in the `/sarifs/{sarif_id}` endpoint.\nFor more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file',
      },
      operationId: 'code-scanning/upload-sarif',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  commit_sha: '4b6472266afd7b471e86085a6659e8c7f2b119da',
                  ref: 'refs/heads/master',
                  sarif:
                    'H4sICMLGdF4AA2V4YW1wbGUuc2FyaWYAvVjdbts2FL7PUxDCijaA/CM7iRNfLkPXYgHSNstumlzQ0pHFVCI1korjFgH2ONtr7Ul2KFmy/mOn6QIkjsjDw0/nfN85NL8dEGL9pNwAImqRObECrWM1H40kXQ2XTAfJIlEgXcE1cD10RTQSVDE10K4aKSqZP1AxuKOIKg1ydJU60jSfSh8Hk6EzHA/vlOCWbfa7B6kYPpj90rlsWCZcmbHP5Bs+4oAWIjQD2SMOeJLh2vIQDnIaQerqXHjw8YIgxohybxAyDsS4cAPKsp03K4RcUs6+Up2D+JXpd8mibKIQN9fM/aMCdbyBujGSSQgVxJtx5qX2d2qUcIweQhEuDQf3GBO6CKHkogx/N3MVCKl/AeVKFuf4y5ubsMGDTj1ep+5I7sgmLIpxtU38hLtmMRGSuCFVyip5eKzs5ydh+LztVL6f2m6oih1BkYiuyQIIJWodxVpERPj4sEiWBNNH8EWT0DMG8EAjzKVHXCrB4FkPu/F64NMk1OeC+2yZSNoBOoR7CC0EzYWGbm+xFDFIzbI011+cLjfZtyJkmMZfumAh02uL3NpV2y+MZ6RAjxibyKrNxxJcVjANSb4eBGwZ1M0KsuyR2poLr5rMl8vaDSeVn6eTWEO2j2xIEcmhwlTKNOi4GMOI8gfuZYkvJ7b4v5Tiumyz7RnHeodFzpS8ASIZCH/AYdWi2z3sG8JtFxJ6fF9yR9CdifBr9Pd6d5V2+zbJKjjCFGGmsHuYFy2ytJq9tUxcLSRSQecppOGKrpUxYfxefMEFK+wOGa4hudQByBVT0L+EKtyACxnRsABhEx1QjVDs1KNI9MbpnhqfE45B6FJvu3hRu5VRU9MhZLmK7fqkKyQSTHNoyMqUFMqXCV3CwAeqEwmVokraK8IuBaGvHjQ0gMYrKjnjyw7uk9uD8tgmsBbFMPnU1bV2ZhkJNkuolUiWys3UPWzs5aaIUz9TBe8zMb+6+nT+6fLy91dlE3xzeDDT4zYszb0bW6NjJd0Rvn2EnLvWLFSdKPpBzInzfRgu8ETyMcH8nIfMnJCeC2PyfTA+UKngcnGH7Hw2hGkVQs5YlIRCtdWZYQ4/73es2JlxkfViOEIhoWJq5Oo6UBBfiKIqFBWhiE3jJGbFwVoxBHTRSuIS67sMeplei24X20shLjG+8gqbKC/bESiNMC+wd5q5id0yeS7CJEqXzmrTWNq3k05l84P6f4/bEmXFJjI0fIt1BGQssUnUDkBYeVhE5TqPnMH3jqogDcP0zKcTgLPTMSzOjhbjuVOmW23l1fYNStulfo6sXlFsGLhbDy5RECPRYGCTgOj2bd4nUQEivEd0H7KKYxqnEhFohuur3a3UPskbH/+Yg0+M5P2MHRJu3ziHh3Z2NCrWt3XF1rWTw8Ne/pfbWYXnDSE0SNZQQt1i18q7te2vOhu7ehWuvVyeu0wbLZi24mhoo6aOOTltzG/lgdVvVoXQq5V+pewkFIzL8fjEcadT55jOjpzFzHuOTtDNrMkJPMVQDd7F09RID72O/UPZ0tmctqZ7kWX6EmSZnDpP8GU67SXM8XE3YSrxbKsx6UReZ4y6n/FVZfJjs9Z7stma75W5yQtkzjk5eSJxk1lv4o7+j8TlhaJ2lsKWZO6lruDPBLib3x5ZN/KGWzZ+pn///evv7OOf4iIBv3oY9L/l1wiJ9p0Tc+F1zZnOE9NxXWEus6IQhr5pMfoqxi8WPsuu0azsns4UC6WzNzHIzbeEx4P/AJ3SefgcFAAA',
                },
              },
            },
            schema: {
              properties: {
                checkout_uri: {
                  description:
                    'The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.',
                  example: 'file:///github/workspace/',
                  format: 'uri',
                  type: 'string',
                },
                commit_sha: {
                  $ref: '#/components/schemas/code-scanning-analysis-commit-sha',
                },
                ref: {
                  $ref: '#/components/schemas/code-scanning-ref',
                },
                sarif: {
                  $ref: '#/components/schemas/code-scanning-analysis-sarif-file',
                },
                started_at: {
                  description:
                    'The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                tool_name: {
                  description:
                    'The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.',
                  type: 'string',
                },
                validate: {
                  description:
                    'Whether the SARIF file will be validated according to the code scanning specifications.\nThis parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.',
                  type: 'boolean',
                },
              },
              required: ['commit_sha', 'ref', 'sarif'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-sarif-upload',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-sarifs-receipt',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          description: 'Bad Request if the sarif field is invalid',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_write',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '413': {
          description: 'Payload Too Large if the sarif field is too large',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Upload an analysis as SARIF data',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}': {
    get: {
      description:
        'Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint with private repos, the `public_repo` scope also grants permission to read security events on public repos only. GitHub Apps must have the `security_events` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository',
      },
      operationId: 'code-scanning/get-sarif',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The SARIF ID obtained after uploading.',
          in: 'path',
          name: 'sarif_id',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-scanning-sarif-upload-status',
                },
              },
              schema: {
                $ref: '#/components/schemas/code-scanning-sarifs-status',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/code_scanning_forbidden_read',
        },
        '404': {
          description: 'Not Found if the sarif id does not match any upload',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get information about a SARIF upload',
      tags: ['code-scanning'],
      'x-github': {
        category: 'code-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/codeowners/errors': {
    get: {
      description:
        'List any syntax errors that are detected in the CODEOWNERS\nfile.\n\nFor more information about the correct CODEOWNERS syntax,\nsee "[About code owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-codeowners-errors',
      },
      operationId: 'repos/codeowners-errors',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)",
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codeowners-errors',
                },
              },
              schema: {
                $ref: '#/components/schemas/codeowners-errors',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          description: 'Resource not found',
        },
      },
      summary: 'List CODEOWNERS errors',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces': {
    get: {
      description:
        'Lists the codespaces associated to a specified repository and the authenticated user.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user',
      },
      operationId: 'codespaces/list-in-repository-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-for-repository',
                },
              },
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'codespaces'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List codespaces in a repository for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates a codespace owned by the authenticated user in the specified repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-in-a-repository',
      },
      operationId: 'codespaces/create-with-repo-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  machine: 'standardLinux32gb',
                  ref: 'main',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                client_ip: {
                  description: 'IP for location auto-detection when proxying a request',
                  type: 'string',
                },
                devcontainer_path: {
                  description: 'Path to devcontainer.json config to use for this codespace',
                  type: 'string',
                },
                display_name: {
                  description: 'Display name for this codespace',
                  type: 'string',
                },
                idle_timeout_minutes: {
                  description: 'Time in minutes before codespace stops from inactivity',
                  type: 'integer',
                },
                location: {
                  description: 'Location for this codespace. Assigned by IP if not provided',
                  type: 'string',
                },
                machine: {
                  description: 'Machine type to use for this codespace',
                  type: 'string',
                },
                multi_repo_permissions_opt_out: {
                  description: 'Whether to authorize requested permissions from devcontainer.json',
                  type: 'boolean',
                },
                ref: {
                  description: 'Git ref (typically a branch name) for this codespace',
                  type: 'string',
                },
                retention_period_minutes: {
                  description:
                    'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).',
                  type: 'integer',
                },
                working_directory: {
                  description: 'Working directory for this codespace',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace was successfully created',
        },
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace creation partially failed but is being retried in the background',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Create a codespace in a repository',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/devcontainers': {
    get: {
      description:
        'Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files\nspecify launchpoint configurations for codespaces created within the repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-devcontainers-in-a-repository-for-the-authenticated-user',
      },
      operationId: 'codespaces/list-devcontainers-in-repository-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-devcontainers-for-repository',
                },
              },
              schema: {
                properties: {
                  devcontainers: {
                    items: {
                      properties: {
                        name: {
                          type: 'string',
                        },
                        path: {
                          type: 'string',
                        },
                      },
                      required: ['path'],
                      type: 'object',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'devcontainers'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List devcontainer configurations in a repository for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/machines': {
    get: {
      description:
        'List the machine types available for a given repository based on its configuration.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_metadata` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-available-machine-types-for-a-repository',
      },
      operationId: 'codespaces/repo-machines-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The location to check for available machines. Assigned by IP if not provided.',
          in: 'query',
          name: 'location',
          schema: {
            example: 'WestUs2',
            type: 'string',
          },
        },
        {
          description: 'IP for location auto-detection when proxying a request',
          in: 'query',
          name: 'client_ip',
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-machines-list',
                },
              },
              schema: {
                properties: {
                  machines: {
                    items: {
                      $ref: '#/components/schemas/codespace-machine',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'machines'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List available machine types for a repository',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'machines',
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/new': {
    get: {
      description:
        'Gets the default attributes for codespaces created by the user with the repository.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#preview-attributes-for-a-new-codespace',
      },
      operationId: 'codespaces/pre-flight-with-repo-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.',
          in: 'query',
          name: 'ref',
          schema: {
            example: 'main',
            type: 'string',
          },
        },
        {
          description: 'An alternative IP for default location auto-detection, such as when proxying a request.',
          in: 'query',
          name: 'client_ip',
          schema: {
            example: '1.2.3.4',
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list-devcontainers-for-repository',
                },
              },
              schema: {
                properties: {
                  billable_owner: {
                    $ref: '#/components/schemas/simple-user',
                  },
                  defaults: {
                    properties: {
                      devcontainer_path: {
                        nullable: true,
                        type: 'string',
                      },
                      location: {
                        type: 'string',
                      },
                    },
                    required: ['location', 'devcontainer_path'],
                    type: 'object',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response when a user is able to create codespaces from the repository.',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get default attributes for a codespace',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/secrets': {
    get: {
      description:
        'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-repository-secrets',
      },
      operationId: 'codespaces/list-repo-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/repo-codespaces-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository secrets',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repository-secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key',
      },
      operationId: 'codespaces/get-repo-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespaces-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository public key',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'repository-secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-repository-secret',
      },
      operationId: 'codespaces/delete-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repository-secrets',
      },
    },
    get: {
      description:
        'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-repository-secret',
      },
      operationId: 'codespaces/get-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/repo-codespaces-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repository-secrets',
      },
    },
    put: {
      description:
        'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have write access to the `codespaces_secrets`\nrepository permission to use this endpoint.\n\n#### Example of encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example of encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example of encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example of encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-a-repository-secret',
      },
      operationId: 'codespaces/create-or-update-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update a repository secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repository-secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/collaborators': {
    get: {
      description:
        'For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators',
      },
      operationId: 'repos/list-collaborators',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.',
          in: 'query',
          name: 'affiliation',
          required: false,
          schema: {
            default: 'all',
            enum: ['outside', 'direct', 'all'],
            type: 'string',
          },
        },
        {
          description:
            'Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.',
          in: 'query',
          name: 'permission',
          required: false,
          schema: {
            enum: ['pull', 'triage', 'push', 'maintain', 'admin'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/collaborator-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/collaborator',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repository collaborators',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/collaborators/{username}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator',
      },
      operationId: 'repos/remove-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove a repository collaborator',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    get: {
      description:
        'For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\n\nTeam members will include the members of child teams.\n\nYou must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this\nendpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this\nendpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator',
      },
      operationId: 'repos/check-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response if user is a collaborator',
        },
        '404': {
          description: 'Not Found if user is not a collaborator',
        },
      },
      summary: 'Check if a user is a repository collaborator',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    put: {
      description:
        'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\nAdding an outside collaborator may be restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."\n\nFor more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:\n\n```\nCannot assign {member} permission of {role name}\n```\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\nThe invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).\n\n**Updating an existing collaborator\'s permission level**\n\nThe endpoint can also be used to change the permissions of an existing collaborator without first removing and re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission` parameter. The response will be a `204`, with no other indication that the permission level changed.\n\n**Rate limits**\n\nYou are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator',
      },
      operationId: 'repos/add-collaborator',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'new-invitation-is-created': {
                summary: 'Add a collaborator with triage permissions',
                value: {
                  permission: 'triage',
                },
              },
            },
            schema: {
              properties: {
                permission: {
                  default: 'push',
                  description:
                    'The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'new-invitation-is-created': {
                  $ref: '#/components/examples/repository-invitation-response-when-a-new-invitation-is-created',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository-invitation',
              },
            },
          },
          description: 'Response when a new invitation is created',
        },
        '204': {
          description:
            'Response when:\n- an existing collaborator is added as a collaborator\n- an organization member is added as an individual collaborator\n- an existing team member (whose team is also a repository collaborator) is added as an individual collaborator',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add a repository collaborator',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/collaborators/{username}/permission': {
    get: {
      description:
        'Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user',
      },
      operationId: 'repos/get-collaborator-permission-level',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-has-admin-permissions': {
                  $ref: '#/components/examples/repository-collaborator-permission-response-if-user-has-admin-permissions',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository-collaborator-permission',
              },
            },
          },
          description: 'if user has admin permissions',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get repository permissions for a user',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/comments': {
    get: {
      description:
        'Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).\n\nComments are ordered by ascending ID.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository',
      },
      operationId: 'repos/list-commit-comments-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List commit comments for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/comments/{comment_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#delete-a-commit-comment',
      },
      operationId: 'repos/delete-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a commit comment',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#get-a-commit-comment',
      },
      operationId: 'repos/get-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit-comment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a commit comment',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#update-a-commit-comment',
      },
      operationId: 'repos/update-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Nice change',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit-comment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Update a commit comment',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/comments/{comment_id}/reactions': {
    get: {
      description: 'List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment',
      },
      operationId: 'reactions/list-for-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List reactions for a commit comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment',
      },
      operationId: 'reactions/create-for-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction created',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create reaction for a commit comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction',
      },
      operationId: 'reactions/delete-for-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a commit comment reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/commits': {
    get: {
      description:
        '**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/commits#list-commits',
      },
      operationId: 'repos/list-commits',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`).',
          in: 'query',
          name: 'sha',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Only commits containing this file path will be returned.',
          in: 'query',
          name: 'path',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'GitHub login or email address by which to filter by commit author.',
          in: 'query',
          name: 'author',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          description:
            'Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
          in: 'query',
          name: 'until',
          required: false,
          schema: {
            format: 'date-time',
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/commit',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List commits',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head': {
    get: {
      description:
        "Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nReturns all branches where the given commit SHA is the HEAD, or latest commit for the branch.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/commits#list-branches-for-head-commit',
      },
      operationId: 'repos/list-branches-for-head-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/commit-sha',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/branch-short-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/branch-short',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List branches for HEAD commit',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{commit_sha}/comments': {
    get: {
      description: 'Use the `:commit_sha` to specify the commit that will have its comments listed.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#list-commit-comments',
      },
      operationId: 'repos/list-comments-for-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/commit-sha',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List commit comments',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    post: {
      description:
        'Create a comment for a commit using its `:commit_sha`.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/comments#create-a-commit-comment',
      },
      operationId: 'repos/create-commit-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/commit-sha',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Great stuff',
                  line: 1,
                  path: 'file1.txt',
                  position: 4,
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.',
                  type: 'string',
                },
                line: {
                  description:
                    '**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.',
                  type: 'integer',
                },
                path: {
                  description: 'Relative path of the file to comment on.',
                  type: 'string',
                },
                position: {
                  description: 'Line index in the diff to comment on.',
                  type: 'integer',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit-comment',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/comments/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a commit comment',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{commit_sha}/pulls': {
    get: {
      description:
        'Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, will only return open pull requests associated with the commit.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit',
      },
      operationId: 'repos/list-pull-requests-associated-with-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/commit-sha',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List pull requests associated with a commit',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{ref}': {
    get: {
      description:
        "Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.\n\n**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.\n\nYou can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.\n\nTo return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The \"signing\" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user's account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/commits#get-a-commit',
      },
      operationId: 'repos/get-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a commit',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{ref}/check-runs': {
    get: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.\n\nLists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference',
      },
      operationId: 'checks/list-for-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          $ref: '#/components/parameters/check-name',
        },
        {
          $ref: '#/components/parameters/status',
        },
        {
          description:
            'Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.',
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'latest',
            enum: ['latest', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          in: 'query',
          name: 'app_id',
          required: false,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-run-paginated',
                },
              },
              schema: {
                properties: {
                  check_runs: {
                    items: {
                      $ref: '#/components/schemas/check-run',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'check_runs'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List check runs for a Git reference',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'runs',
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{ref}/check-suites': {
    get: {
      description:
        '**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.\n\nLists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference',
      },
      operationId: 'checks/list-suites-for-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          description: 'Filters check suites by GitHub App `id`.',
          example: 1,
          in: 'query',
          name: 'app_id',
          required: false,
          schema: {
            type: 'integer',
          },
        },
        {
          $ref: '#/components/parameters/check-name',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/check-suite-paginated',
                },
              },
              schema: {
                properties: {
                  check_suites: {
                    items: {
                      $ref: '#/components/schemas/check-suite',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'check_suites'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List check suites for a Git reference',
      tags: ['checks'],
      'x-github': {
        category: 'checks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'suites',
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{ref}/status': {
    get: {
      description:
        'Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.\n\n\nAdditionally, a combined `state` is returned. The `state` is one of:\n\n*   **failure** if any of the contexts report as `error` or `failure`\n*   **pending** if there are no statuses or a context is `pending`\n*   **success** if the latest status for all contexts is `success`',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference',
      },
      operationId: 'repos/get-combined-status-for-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-commit-status',
                },
              },
              schema: {
                $ref: '#/components/schemas/combined-commit-status',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get the combined status for a specific reference',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
  },
  '/repos/{owner}/{repo}/commits/{ref}/statuses': {
    get: {
      description:
        'Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.\n\nThis resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference',
      },
      operationId: 'repos/list-commit-statuses-for-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/status',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
      },
      summary: 'List commit statuses for a reference',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
  },
  '/repos/{owner}/{repo}/community/profile': {
    get: {
      description:
        'Returns all community profile metrics for a repository. The repository cannot be a fork.\n\nThe returned metrics include an overall health score, the repository description, the presence of documentation, the\ndetected code of conduct, the detected license, and the presence of ISSUE\\_TEMPLATE, PULL\\_REQUEST\\_TEMPLATE,\nREADME, and CONTRIBUTING files.\n\nThe `health_percentage` score is defined as a percentage of how many of\nthese four documents are present: README, CONTRIBUTING, LICENSE, and\nCODE_OF_CONDUCT. For example, if all four documents are present, then\nthe `health_percentage` is `100`. If only one is present, then the\n`health_percentage` is `25`.\n\n`content_reports_enabled` is only returned for organization-owned repositories.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/community#get-community-profile-metrics',
      },
      operationId: 'repos/get-community-profile-metrics',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/community-profile',
                },
              },
              schema: {
                $ref: '#/components/schemas/community-profile',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get community profile metrics',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'community',
      },
    },
  },
  '/repos/{owner}/{repo}/compare/{basehead}': {
    get: {
      description:
        'Compares two commits against one another. You can compare branches in the same repository, or you can compare branches that exist in different repositories within the same repository network, including fork branches. For more information about how to view a repository\'s network, see "[Understanding connections between repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."\n\nThis endpoint is equivalent to running the `git log BASE...HEAD` command, but it returns commits in a different order. The `git log BASE...HEAD` command returns commits in reverse chronological order, whereas the API returns commits in chronological order. You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.\n\nThe API response includes details about the files that were changed between the two commits. This includes the status of the change (if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.\n\nWhen calling this endpoint without any paging parameter (`per_page` or `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire comparison.\n\n**Working with large comparisons**\n\nTo process a response with a large number of commits, use a query parameter (`per_page` or `page`) to paginate the results. When using pagination:\n\n- The list of changed files is only shown on the first page of results, but it includes all changed files for the entire comparison.\n- The results are returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire set if there are more pages of results.\n\nFor more information on working with pagination, see "[Using pagination in the REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The `verification` object includes the following fields:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/commits#compare-two-commits',
      },
      operationId: 'repos/compare-commits',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          description:
            'The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.',
          in: 'path',
          name: 'basehead',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-comparison',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit-comparison',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Compare two commits',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/contents/{path}': {
    delete: {
      description:
        'Deletes a file in a repository.\n\nYou can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.\n\nThe `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user\'s information is used.\n\nYou must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you\'ll receive a `422` status code.\n\n**Note:** If you use this endpoint and the "[Create or update file contents](https://docs.github.com/rest/reference/repos/#create-or-update-file-contents)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#delete-a-file',
      },
      operationId: 'repos/delete-file',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'path parameter',
          in: 'path',
          name: 'path',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  committer: {
                    email: 'octocat@github.com',
                    name: 'Monalisa Octocat',
                  },
                  message: 'my commit message',
                  sha: '329688480d39049927147c162b9d2deaf885005f',
                },
              },
            },
            schema: {
              properties: {
                author: {
                  description: 'object containing information about the author.',
                  properties: {
                    email: {
                      description: 'The email of the author (or committer) of the commit',
                      type: 'string',
                    },
                    name: {
                      description: 'The name of the author (or committer) of the commit',
                      type: 'string',
                    },
                  },
                  type: 'object',
                },
                branch: {
                  description: 'The branch name. Default: the repository’s default branch (usually `master`)',
                  type: 'string',
                },
                committer: {
                  description: 'object containing information about the committer.',
                  properties: {
                    email: {
                      description: 'The email of the author (or committer) of the commit',
                      type: 'string',
                    },
                    name: {
                      description: 'The name of the author (or committer) of the commit',
                      type: 'string',
                    },
                  },
                  type: 'object',
                },
                message: {
                  description: 'The commit message.',
                  type: 'string',
                },
                sha: {
                  description: 'The blob SHA of the file being deleted.',
                  type: 'string',
                },
              },
              required: ['message', 'sha'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/file-commit',
                },
              },
              schema: {
                $ref: '#/components/schemas/file-commit',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Delete a file',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
    get: {
      description:
        'Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit\n`:path`, you will receive the contents of the repository\'s root directory. See the description below regarding what the API response includes for directories. \n\nFiles and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for\nretrieving the raw content or rendered HTML (when supported). All content types support [a custom media\ntype](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent\nobject format.\n\n**Notes**:\n*   To get a repository\'s contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).\n*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees\nAPI](https://docs.github.com/rest/reference/git#get-a-tree).\n *  Download URLs expire and are meant to be used just once. To ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.\n#### Size limits\nIf the requested file\'s size is:\n* 1 MB or smaller: All features of this endpoint are supported.\n* Between 1-100 MB: Only the `raw` or `object` [custom media types](https://docs.github.com/rest/repos/contents#custom-media-types-for-repository-contents) are supported. Both will work as normal, except that when using the `object` media type, the `content` field will be an empty string and the `encoding` field will be `"none"`. To get the contents of these larger files, use the `raw` media type.\n * Greater than 100 MB: This endpoint is not supported.\n\n#### If the content is a directory\nThe response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value\n_should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).\nIn the next major version of the API, the type will be returned as "submodule".\n\n#### If the content is a symlink \nIf the requested `:path` points to a symlink, and the symlink\'s target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object \ndescribing the symlink itself.\n\n#### If the content is a submodule\nThe `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.\n\nIf the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the\ngithub.com URLs (`html_url` and `_links["html"]`) will have null values.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-repository-content',
      },
      operationId: 'repos/get-content',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'path parameter',
          in: 'path',
          name: 'path',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)',
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-content-is-a-directory': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-directory',
                },
                'response-if-content-is-a-file': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-file',
                },
                'response-if-content-is-a-submodule': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-submodule',
                },
                'response-if-content-is-a-symlink': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-symlink',
                },
              },
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/content-directory',
                  },
                  {
                    $ref: '#/components/schemas/content-file',
                  },
                  {
                    $ref: '#/components/schemas/content-symlink',
                  },
                  {
                    $ref: '#/components/schemas/content-submodule',
                  },
                ],
              },
            },
            'application/vnd.github.object': {
              examples: {
                'response-if-content-is-a-directory': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-directory-object',
                },
                'response-if-content-is-a-file': {
                  $ref: '#/components/examples/content-file-response-if-content-is-a-file',
                },
              },
              schema: {
                $ref: '#/components/schemas/content-tree',
              },
            },
          },
          description: 'Response',
        },
        '302': {
          $ref: '#/components/responses/found',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get repository content',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
    put: {
      description:
        'Creates a new file or replaces an existing file in a repository. You must authenticate using an access token with the `workflow` scope to use this endpoint.\n\n**Note:** If you use this endpoint and the "[Delete a file](https://docs.github.com/rest/reference/repos/#delete-file)" endpoint in parallel, the concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-or-update-file-contents',
      },
      operationId: 'repos/create-or-update-file-contents',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'path parameter',
          in: 'path',
          name: 'path',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-for-creating-a-file': {
                summary: 'Example for creating a file',
                value: {
                  committer: {
                    email: 'octocat@github.com',
                    name: 'Monalisa Octocat',
                  },
                  content: 'bXkgbmV3IGZpbGUgY29udGVudHM=',
                  message: 'my commit message',
                },
              },
              'example-for-updating-a-file': {
                summary: 'Example for updating a file',
                value: {
                  committer: {
                    email: 'octocat@github.com',
                    name: 'Monalisa Octocat',
                  },
                  content: 'bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz',
                  message: 'a new commit message',
                  sha: '95b966ae1c166bd92f8ae7d1c313e738c731dfc3',
                },
              },
            },
            schema: {
              properties: {
                author: {
                  description:
                    'The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.',
                  properties: {
                    date: {
                      example: '"2013-01-15T17:13:22+05:00"',
                      type: 'string',
                    },
                    email: {
                      description:
                        "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                      type: 'string',
                    },
                    name: {
                      description:
                        "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                      type: 'string',
                    },
                  },
                  required: ['name', 'email'],
                  type: 'object',
                },
                branch: {
                  description: 'The branch name. Default: the repository’s default branch (usually `master`)',
                  type: 'string',
                },
                committer: {
                  description: 'The person that committed the file. Default: the authenticated user.',
                  properties: {
                    date: {
                      example: '"2013-01-05T13:13:22+05:00"',
                      type: 'string',
                    },
                    email: {
                      description:
                        "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                      type: 'string',
                    },
                    name: {
                      description:
                        "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                      type: 'string',
                    },
                  },
                  required: ['name', 'email'],
                  type: 'object',
                },
                content: {
                  description: 'The new file content, using Base64 encoding.',
                  type: 'string',
                },
                message: {
                  description: 'The commit message.',
                  type: 'string',
                },
                sha: {
                  description: '**Required if you are updating a file**. The blob SHA of the file being replaced.',
                  type: 'string',
                },
              },
              required: ['message', 'content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-for-updating-a-file': {
                  $ref: '#/components/examples/file-commit-example-for-updating-a-file',
                },
              },
              schema: {
                $ref: '#/components/schemas/file-commit',
              },
            },
          },
          description: 'Response',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-for-creating-a-file': {
                  $ref: '#/components/examples/file-commit-example-for-creating-a-file',
                },
              },
              schema: {
                $ref: '#/components/schemas/file-commit',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create or update file contents',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
  },
  '/repos/{owner}/{repo}/contributors': {
    get: {
      description:
        'Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data to improve performance.\n\nGitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repository-contributors',
      },
      operationId: 'repos/list-contributors',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'Set to `1` or `true` to include anonymous contributors in results.',
          in: 'query',
          name: 'anon',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-repository-contains-content': {
                  $ref: '#/components/examples/contributor-items-response-if-repository-contains-content',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/contributor',
                },
                type: 'array',
              },
            },
          },
          description: 'if repository contains content',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '204': {
          description: 'Response if repository is empty',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repository contributors',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/dependabot/alerts': {
    get: {
      description:
        'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#list-dependabot-alerts-for-a-repository',
      },
      operationId: 'dependabot/list-alerts-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-states',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-severities',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-ecosystems',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-packages',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-comma-separated-manifests',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-scope',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          deprecated: true,
          description:
            '**Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead.',
          in: 'query',
          name: 'page',
          schema: {
            default: 1,
            type: 'integer',
          },
        },
        {
          deprecated: true,
          description: 'The number of results per page (max 100).',
          in: 'query',
          name: 'per_page',
          schema: {
            default: 30,
            type: 'integer',
          },
        },
        {
          $ref: '#/components/parameters/pagination-before',
        },
        {
          $ref: '#/components/parameters/pagination-after',
        },
        {
          $ref: '#/components/parameters/pagination-first',
        },
        {
          $ref: '#/components/parameters/pagination-last',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alerts-for-repository',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/dependabot-alert',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'List Dependabot alerts for a repository',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'alerts',
      },
    },
  },
  '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}': {
    get: {
      description:
        'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-dependabot-alert',
      },
      operationId: 'dependabot/get-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alert-open',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependabot-alert',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a Dependabot alert',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'alerts',
      },
    },
    patch: {
      description:
        'You must use an access token with the `security_events` scope to use this endpoint with private repositories.\nYou can also use tokens with the `public_repo` scope for public repositories only.\nGitHub Apps must have **Dependabot alerts** write permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#update-a-dependabot-alert',
      },
      operationId: 'dependabot/update-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/dependabot-alert-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  dismissed_comment: 'This alert is accurate but we use a sanitizer.',
                  dismissed_reason: 'tolerable_risk',
                  state: 'dismissed',
                },
              },
            },
            schema: {
              additionalProperties: false,
              properties: {
                dismissed_comment: {
                  description: 'An optional comment associated with dismissing the alert.',
                  maxLength: 280,
                  type: 'string',
                },
                dismissed_reason: {
                  description: '**Required when `state` is `dismissed`.** A reason for dismissing the alert.',
                  enum: ['fix_started', 'inaccurate', 'no_bandwidth', 'not_used', 'tolerable_risk'],
                  type: 'string',
                },
                state: {
                  description:
                    'The state of the Dependabot alert.\nA `dismissed_reason` must be provided when setting the state to `dismissed`.',
                  enum: ['dismissed', 'open'],
                  type: 'string',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-alert-dismissed',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependabot-alert',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update a Dependabot alert',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'alerts',
      },
    },
  },
  '/repos/{owner}/{repo}/dependabot/secrets': {
    get: {
      description:
        'Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#list-repository-secrets',
      },
      operationId: 'dependabot/list-repo-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/dependabot-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository secrets',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/dependabot/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key',
      },
      operationId: 'dependabot/get-repo-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependabot-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository public key',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#delete-a-repository-secret',
      },
      operationId: 'dependabot/delete-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        'Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#get-a-repository-secret',
      },
      operationId: 'dependabot/get-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/dependabot-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependabot-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a repository secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `dependabot_secrets` repository\npermission to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependabot#create-or-update-a-repository-secret',
      },
      operationId: 'dependabot/create-or-update-repo-secret',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update a repository secret',
      tags: ['dependabot'],
      'x-github': {
        category: 'dependabot',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}': {
    get: {
      description:
        'Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency manifests made in those commits.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependency-graph#get-a-diff-of-the-dependencies-between-commits',
      },
      operationId: 'dependency-graph/diff-range',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.',
          in: 'path',
          name: 'basehead',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/manifest-path',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/diff-range-response',
                },
              },
              schema: {
                $ref: '#/components/schemas/dependency-graph-diff',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a diff of the dependencies between commits',
      tags: ['dependency-graph'],
      'x-github': {
        category: 'dependency-graph',
        githubCloudOnly: false,
        subcategory: 'dependency-review',
      },
    },
  },
  '/repos/{owner}/{repo}/dependency-graph/snapshots': {
    post: {
      description:
        "Create a new snapshot of a repository's dependencies. You must authenticate using an access token with the `repo` scope to use this endpoint for a repository that the requesting user has access to.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/dependency-graph#create-a-snapshot-of-dependencies-for-a-repository',
      },
      operationId: 'dependency-graph/create-repository-snapshot',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-of-a-dependency-submission': {
                $ref: '#/components/examples/dependency-graph-create-snapshot-request',
              },
            },
            schema: {
              $ref: '#/components/schemas/snapshot',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-of-a-dependency-submission': {
                  $ref: '#/components/examples/dependency-graph-create-snapshot-success',
                },
              },
              schema: {
                properties: {
                  created_at: {
                    description: 'The time at which the snapshot was created.',
                    type: 'string',
                  },
                  id: {
                    description: 'ID of the created snapshot.',
                    type: 'integer',
                  },
                  message: {
                    description:
                      'A message providing further details about the result, such as why the dependencies were not updated.',
                    type: 'string',
                  },
                  result: {
                    description:
                      'Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository\'s dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository\'s dependencies were not updated. "INVALID" indicates that the snapshot was malformed.',
                    type: 'string',
                  },
                },
                required: ['id', 'created_at', 'result', 'message'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a snapshot of dependencies for a repository',
      tags: ['dependency-graph'],
      'x-github': {
        category: 'dependency-graph',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'dependency-submission',
      },
    },
  },
  '/repos/{owner}/{repo}/deployments': {
    get: {
      description: 'Simple filtering of deployments is available via query parameters:',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/deployments#list-deployments',
      },
      operationId: 'repos/list-deployments',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The SHA recorded at creation time.',
          in: 'query',
          name: 'sha',
          required: false,
          schema: {
            default: 'none',
            type: 'string',
          },
        },
        {
          description: 'The name of the ref. This can be a branch, tag, or SHA.',
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            default: 'none',
            type: 'string',
          },
        },
        {
          description: 'The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).',
          in: 'query',
          name: 'task',
          required: false,
          schema: {
            default: 'none',
            type: 'string',
          },
        },
        {
          description: 'The name of the environment that was deployed to (e.g., `staging` or `production`).',
          in: 'query',
          name: 'environment',
          required: false,
          schema: {
            default: 'none',
            nullable: true,
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List deployments',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    post: {
      description:
        "Deployments offer a few configurable parameters with certain defaults.\n\nThe `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them\nbefore we merge a pull request.\n\nThe `environment` parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is `production`.\n\nThe `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.\n\nBy default, [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a `success`\nstate. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.\n\nThe `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.\n\nThe `task` parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.\n\nUsers with `repo` or `repo_deployment` scopes can create a deployment for a given ref.\n\n#### Merged branch response\nYou will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:\n*   Auto-merge option is enabled in the repository\n*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example\n*   There are no merge conflicts\n\nIf there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.\n\n#### Merge conflict response\nThis error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't\nbe merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.\n\n#### Failed commit status checks\nThis error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/deployments#create-a-deployment',
      },
      operationId: 'repos/create-deployment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'advanced-example': {
                summary: 'Advanced example',
                value: {
                  auto_merge: false,
                  description: 'Deploy request from hubot',
                  payload: '{ "deploy": "migrate" }',
                  ref: 'topic-branch',
                  required_contexts: ['ci/janky', 'security/brakeman'],
                },
              },
              'simple-example': {
                summary: 'Simple example',
                value: {
                  description: 'Deploy request from hubot',
                  payload: '{ "deploy": "migrate" }',
                  ref: 'topic-branch',
                },
              },
            },
            schema: {
              properties: {
                auto_merge: {
                  default: true,
                  description:
                    "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
                  type: 'boolean',
                },
                description: {
                  default: '',
                  description: 'Short description of the deployment.',
                  nullable: true,
                  type: 'string',
                },
                environment: {
                  default: 'production',
                  description: 'Name for the target deployment environment (e.g., `production`, `staging`, `qa`).',
                  type: 'string',
                },
                payload: {
                  oneOf: [
                    {
                      additionalProperties: true,
                      type: 'object',
                    },
                    {
                      default: '',
                      description: 'JSON payload with extra information about the deployment.',
                      type: 'string',
                    },
                  ],
                },
                production_environment: {
                  description:
                    'Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.',
                  type: 'boolean',
                },
                ref: {
                  description: 'The ref to deploy. This can be a branch, tag, or SHA.',
                  type: 'string',
                },
                required_contexts: {
                  description:
                    'The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                task: {
                  default: 'deploy',
                  description: 'Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).',
                  type: 'string',
                },
                transient_environment: {
                  default: false,
                  description:
                    'Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`',
                  type: 'boolean',
                },
              },
              required: ['ref'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'simple-example': {
                  $ref: '#/components/examples/deployment-simple-example',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment',
              },
            },
          },
          description: 'Response',
        },
        '202': {
          content: {
            'application/json': {
              examples: {
                'merged-branch-response': {
                  value: {
                    message: 'Auto-merged master into topic-branch on deployment.',
                  },
                },
              },
              schema: {
                properties: {
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Merged branch response',
        },
        '409': {
          description: "Conflict when there is a merge conflict or the commit's status checks failed",
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a deployment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/deployments/{deployment_id}': {
    delete: {
      description:
        'If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.\n\nTo set a deployment as inactive, you must:\n\n*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.\n*   Mark the active deployment as inactive by adding any non-successful deployment status.\n\nFor more information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/deployments/deployment-statuses#create-a-deployment-status)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/deployments#delete-a-deployment',
      },
      operationId: 'repos/delete-deployment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/deployment-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Delete a deployment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/deployments#get-a-deployment',
      },
      operationId: 'repos/get-deployment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/deployment-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a deployment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses': {
    get: {
      description: 'Users with pull access can view deployment statuses for a deployment:',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/statuses#list-deployment-statuses',
      },
      operationId: 'repos/list-deployment-statuses',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/deployment-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/deployment-status',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List deployment statuses',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
    post: {
      description:
        'Users with `push` access can create deployment statuses for a given deployment.\n\nGitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/statuses#create-a-deployment-status',
      },
      operationId: 'repos/create-deployment-status',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/deployment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Deployment finished successfully.',
                  environment: 'production',
                  log_url: 'https://example.com/deployment/42/output',
                  state: 'success',
                },
              },
            },
            schema: {
              properties: {
                auto_inactive: {
                  description:
                    "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`",
                  type: 'boolean',
                },
                description: {
                  default: '',
                  description: 'A short description of the status. The maximum description length is 140 characters.',
                  type: 'string',
                },
                environment: {
                  description:
                    'Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.',
                  enum: ['production', 'staging', 'qa'],
                  type: 'string',
                },
                environment_url: {
                  default: '',
                  description: 'Sets the URL for accessing your environment. Default: `""`',
                  type: 'string',
                },
                log_url: {
                  default: '',
                  description:
                    'The full URL of the deployment\'s output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`',
                  type: 'string',
                },
                state: {
                  description:
                    'The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.',
                  enum: ['error', 'failure', 'inactive', 'in_progress', 'queued', 'pending', 'success'],
                  type: 'string',
                },
                target_url: {
                  default: '',
                  description:
                    "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
                  type: 'string',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment-status',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/example/deployments/42/statuses/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a deployment status',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
  },
  '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}': {
    get: {
      description: 'Users with pull access can view a deployment status for a deployment:',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/statuses#get-a-deployment-status',
      },
      operationId: 'repos/get-deployment-status',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/deployment-id',
        },
        {
          in: 'path',
          name: 'status_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-status',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment-status',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a deployment status',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
  },
  '/repos/{owner}/{repo}/dispatches': {
    post: {
      description:
        'You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."\n\nThe `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.\n\nThis endpoint requires write access to the repository by providing either:\n\n  - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.\n  - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.\n\nThis input example shows how you can use the `client_payload` as a test to debug your workflow.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event',
      },
      operationId: 'repos/create-dispatch-event',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  client_payload: {
                    integration: true,
                    unit: false,
                  },
                  event_type: 'on-demand-test',
                },
              },
            },
            schema: {
              properties: {
                client_payload: {
                  additionalProperties: true,
                  description:
                    'JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.',
                  maxProperties: 10,
                  type: 'object',
                },
                event_type: {
                  description: 'A custom webhook event name. Must be 100 characters or fewer.',
                  maxLength: 100,
                  minLength: 1,
                  type: 'string',
                },
              },
              required: ['event_type'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a repository dispatch event',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/environments': {
    get: {
      description:
        'Lists the environments for a repository.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/environments#list-environments',
      },
      operationId: 'repos/get-all-environments',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environments',
                },
              },
              schema: {
                properties: {
                  environments: {
                    items: {
                      $ref: '#/components/schemas/environment',
                    },
                    type: 'array',
                  },
                  total_count: {
                    description: 'The number of environments in this repository',
                    example: 5,
                    type: 'integer',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List environments',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'environments',
      },
    },
  },
  '/repos/{owner}/{repo}/environments/{environment_name}': {
    delete: {
      description: 'You must authenticate using an access token with the repo scope to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/environments#delete-an-environment',
      },
      operationId: 'repos/delete-an-environment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      responses: {
        '204': {
          description: 'Default response',
        },
      },
      summary: 'Delete an environment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'environments',
      },
    },
    get: {
      description:
        '**Note:** To get information about name patterns that branches must match in order to deploy to this environment, see "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."\n\nAnyone with read access to the repository can use this endpoint. If the\nrepository is private, you must use an access token with the `repo` scope. GitHub\nApps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/environments#get-an-environment',
      },
      operationId: 'repos/get-environment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment',
                },
              },
              schema: {
                $ref: '#/components/schemas/environment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an environment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'environments',
      },
    },
    put: {
      description:
        'Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."\n\n**Note:** To create or update name patterns that branches must match in order to deploy to this environment, see "[Deployment branch policies](/rest/deployments/branch-policies)."\n\n**Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/environments#create-or-update-an-environment',
      },
      operationId: 'repos/create-or-update-environment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  deployment_branch_policy: {
                    custom_branch_policies: true,
                    protected_branches: false,
                  },
                  reviewers: [
                    {
                      id: 1,
                      type: 'User',
                    },
                    {
                      id: 1,
                      type: 'Team',
                    },
                  ],
                  wait_timer: 30,
                },
              },
            },
            schema: {
              additionalProperties: false,
              nullable: true,
              properties: {
                deployment_branch_policy: {
                  $ref: '#/components/schemas/deployment-branch-policy-settings',
                },
                reviewers: {
                  description:
                    'The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.',
                  items: {
                    properties: {
                      id: {
                        description: 'The id of the user or team who can review the deployment',
                        example: 4532992,
                        type: 'integer',
                      },
                      type: {
                        $ref: '#/components/schemas/deployment-reviewer-type',
                      },
                    },
                    type: 'object',
                  },
                  nullable: true,
                  type: 'array',
                },
                wait_timer: {
                  $ref: '#/components/schemas/wait-timer',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/environment',
                },
              },
              schema: {
                $ref: '#/components/schemas/environment',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description:
            'Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value',
        },
      },
      summary: 'Create or update an environment',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'environments',
      },
    },
  },
  '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies': {
    get: {
      description:
        'Lists the deployment branch policies for an environment.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies',
      },
      operationId: 'repos/list-deployment-branch-policies',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policies-list',
                },
              },
              schema: {
                properties: {
                  branch_policies: {
                    items: {
                      $ref: '#/components/schemas/deployment-branch-policy',
                    },
                    type: 'array',
                  },
                  total_count: {
                    description: 'The number of deployment branch policies for the environment.',
                    example: 2,
                    type: 'integer',
                  },
                },
                required: ['total_count', 'branch_policies'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List deployment branch policies',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-policies',
      },
    },
    post: {
      description:
        'Creates a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/branch-policies#create-deployment-branch-policy',
      },
      operationId: 'repos/create-deployment-branch-policy',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-single-branch': {
                summary: 'Example of a single branch name pattern',
                value: {
                  name: 'main',
                },
              },
              'example-wildcard': {
                summary: 'Example of a wildcard name pattern',
                value: {
                  name: 'release/*',
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/deployment-branch-policy-name-pattern',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-single-branch': {
                  $ref: '#/components/examples/deployment-branch-policy-single-branch',
                },
                'example-wildcard': {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy',
              },
            },
          },
          description: 'Response',
        },
        '303': {
          description: 'Response if the same branch name pattern already exists',
        },
        '404': {
          description:
            'Not Found or `deployment_branch_policy.custom_branch_policies` property for the environment is set to false',
        },
      },
      summary: 'Create a deployment branch policy',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-policies',
      },
    },
  },
  '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}': {
    delete: {
      description:
        'Deletes a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/branch-policies#delete-deployment-branch-policy',
      },
      operationId: 'repos/delete-deployment-branch-policy',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/branch-policy-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a deployment branch policy',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-policies',
      },
    },
    get: {
      description:
        'Gets a deployment branch policy for an environment.\n\nAnyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/branch-policies#get-deployment-branch-policy',
      },
      operationId: 'repos/get-deployment-branch-policy',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/branch-policy-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a deployment branch policy',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-policies',
      },
    },
    put: {
      description:
        'Updates a deployment branch policy for an environment.\n\nYou must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration:write` permission for the repository to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deployments/branch-policies#update-deployment-branch-policy',
      },
      operationId: 'repos/update-deployment-branch-policy',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/branch-policy-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'release/*',
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/deployment-branch-policy-name-pattern',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deployment-branch-policy-wildcard',
                },
              },
              schema: {
                $ref: '#/components/schemas/deployment-branch-policy',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a deployment branch policy',
      tags: ['repos'],
      'x-github': {
        category: 'deployments',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'branch-policies',
      },
    },
  },
  '/repos/{owner}/{repo}/events': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repository-events',
      },
      operationId: 'activity/list-repo-events',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                '200-response': {
                  $ref: '#/components/examples/repo-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List repository events',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/repos/{owner}/{repo}/forks': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-forks',
      },
      operationId: 'repos/list-forks',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The sort order. `stargazers` will sort by star count.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'newest',
            enum: ['newest', 'oldest', 'stargazers', 'watchers'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
      },
      summary: 'List forks',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'forks',
      },
    },
    post: {
      description:
        'Create a fork for the authenticated user.\n\n**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-a-fork',
      },
      operationId: 'repos/create-fork',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  default_branch_only: true,
                  name: 'Hello-World',
                  organization: 'octocat',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                default_branch_only: {
                  description: 'When forking from an existing repository, fork with only the default branch.',
                  type: 'boolean',
                },
                name: {
                  description: 'When forking from an existing repository, a new name for the fork.',
                  type: 'string',
                },
                organization: {
                  description: 'Optional parameter to specify the organization name if forking into an organization.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/full-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/full-repository',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a fork',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'forks',
      },
    },
  },
  '/repos/{owner}/{repo}/git/blobs': {
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#create-a-blob',
      },
      operationId: 'git/create-blob',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'Content of the blob',
                  encoding: 'utf-8',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description: "The new blob's content.",
                  type: 'string',
                },
                encoding: {
                  default: 'utf-8',
                  description: 'The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.',
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/short-blob',
                },
              },
              schema: {
                $ref: '#/components/schemas/short-blob',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a blob',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blobs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/blobs/{file_sha}': {
    get: {
      description:
        'The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#get-a-blob',
      },
      operationId: 'git/get-blob',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'file_sha',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/blob',
                },
              },
              schema: {
                $ref: '#/components/schemas/blob',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a blob',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'blobs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/commits': {
    post: {
      description:
        'Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#create-a-commit',
      },
      operationId: 'git/create-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  author: {
                    date: '2008-07-09T16:13:30+12:00',
                    email: 'octocat@github.com',
                    name: 'Mona Octocat',
                  },
                  message: 'my commit message',
                  parents: ['7d1b31e74ee336d15cbd21741bc88a537ed063a0'],
                  signature:
                    '-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n',
                  tree: '827efc6d56897b048c772eb4087f854f46256132',
                },
              },
            },
            schema: {
              properties: {
                author: {
                  description:
                    'Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.',
                  properties: {
                    date: {
                      description:
                        'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                      format: 'date-time',
                      type: 'string',
                    },
                    email: {
                      description: 'The email of the author (or committer) of the commit',
                      type: 'string',
                    },
                    name: {
                      description: 'The name of the author (or committer) of the commit',
                      type: 'string',
                    },
                  },
                  required: ['name', 'email'],
                  type: 'object',
                },
                committer: {
                  description:
                    'Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.',
                  properties: {
                    date: {
                      description:
                        'Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                      format: 'date-time',
                      type: 'string',
                    },
                    email: {
                      description: 'The email of the author (or committer) of the commit',
                      type: 'string',
                    },
                    name: {
                      description: 'The name of the author (or committer) of the commit',
                      type: 'string',
                    },
                  },
                  type: 'object',
                },
                message: {
                  description: 'The commit message',
                  type: 'string',
                },
                parents: {
                  description:
                    'The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                signature: {
                  description:
                    'The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.',
                  type: 'string',
                },
                tree: {
                  description: 'The SHA of the tree object this commit points to',
                  type: 'string',
                },
              },
              required: ['message', 'tree'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-commit',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-commit',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a commit',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'commits',
      },
    },
  },
  '/repos/{owner}/{repo}/git/commits/{commit_sha}': {
    get: {
      description:
        'Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in the table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#get-a-commit',
      },
      operationId: 'git/get-commit',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/commit-sha',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-commit-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-commit',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a commit',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'commits',
      },
    },
  },
  '/repos/{owner}/{repo}/git/matching-refs/{ref}': {
    get: {
      description:
        'Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t exist in the repository, but existing refs start with `:ref`, they will be returned as an array.\n\nWhen you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nIf you request matching references for a branch named `feature` but the branch `feature` doesn\'t exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#list-matching-references',
      },
      operationId: 'git/list-matching-refs',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/git-ref',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List matching references',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'refs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/ref/{ref}': {
    get: {
      description:
        'Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn\'t match an existing ref, a `404` is returned.\n\n**Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#get-a-reference',
      },
      operationId: 'git/get-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-ref',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a reference',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'refs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/refs': {
    post: {
      description:
        'Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#create-a-reference',
      },
      operationId: 'git/create-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ref: 'refs/heads/featureA',
                  sha: 'aa218f56b14c9653891f9e74264a383fa43fefbd',
                },
              },
            },
            schema: {
              properties: {
                key: {
                  example: '"refs/heads/newbranch"',
                  type: 'string',
                },
                ref: {
                  description:
                    "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
                  type: 'string',
                },
                sha: {
                  description: 'The SHA1 value for this reference.',
                  type: 'string',
                },
              },
              required: ['ref', 'sha'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-ref',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a reference',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'refs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/refs/{ref}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#delete-a-reference',
      },
      operationId: 'git/delete-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'ref parameter',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete a reference',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'refs',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#update-a-reference',
      },
      operationId: 'git/update-ref',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            "The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected.",
          example: 'refs/head/master',
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  force: true,
                  sha: 'aa218f56b14c9653891f9e74264a383fa43fefbd',
                },
              },
            },
            schema: {
              properties: {
                force: {
                  default: false,
                  description:
                    "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
                  type: 'boolean',
                },
                sha: {
                  description: 'The SHA1 value to set this reference to',
                  type: 'string',
                },
              },
              required: ['sha'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-ref',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-ref',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a reference',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'refs',
      },
    },
  },
  '/repos/{owner}/{repo}/git/tags': {
    post: {
      description:
        'Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.\n\n**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#create-a-tag-object',
      },
      operationId: 'git/create-tag',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  message: 'initial version',
                  object: 'c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c',
                  tag: 'v0.0.1',
                  tagger: {
                    date: '2011-06-17T14:53:35-07:00',
                    email: 'octocat@github.com',
                    name: 'Monalisa Octocat',
                  },
                  type: 'commit',
                },
              },
            },
            schema: {
              properties: {
                message: {
                  description: 'The tag message.',
                  type: 'string',
                },
                object: {
                  description: 'The SHA of the git object this is tagging.',
                  type: 'string',
                },
                tag: {
                  description: 'The tag\'s name. This is typically a version (e.g., "v0.0.1").',
                  type: 'string',
                },
                tagger: {
                  description: 'An object with information about the individual creating the tag.',
                  properties: {
                    date: {
                      description:
                        'When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                      format: 'date-time',
                      type: 'string',
                    },
                    email: {
                      description: 'The email of the author of the tag',
                      type: 'string',
                    },
                    name: {
                      description: 'The name of the author of the tag',
                      type: 'string',
                    },
                  },
                  required: ['name', 'email'],
                  type: 'object',
                },
                type: {
                  description:
                    "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
                  enum: ['commit', 'tree', 'blob'],
                  type: 'string',
                },
              },
              required: ['tag', 'message', 'object', 'type'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tag',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-tag',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a tag object',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'tags',
      },
    },
  },
  '/repos/{owner}/{repo}/git/tags/{tag_sha}': {
    get: {
      description:
        '**Signature verification object**\n\nThe response will include a `verification` object that describes the result of verifying the commit\'s signature. The following fields are included in the `verification` object:\n\n| Name | Type | Description |\n| ---- | ---- | ----------- |\n| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |\n| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |\n| `signature` | `string` | The signature that was extracted from the commit. |\n| `payload` | `string` | The value that was signed. |\n\nThese are the possible values for `reason` in the `verification` object:\n\n| Value | Description |\n| ----- | ----------- |\n| `expired_key` | The key that made the signature is expired. |\n| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |\n| `gpgverify_error` | There was an error communicating with the signature verification service. |\n| `gpgverify_unavailable` | The signature verification service is currently unavailable. |\n| `unsigned` | The object does not include a signature. |\n| `unknown_signature_type` | A non-PGP signature was found in the commit. |\n| `no_user` | No user was associated with the `committer` email address in the commit. |\n| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |\n| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |\n| `unknown_key` | The key that made the signature has not been registered with any user\'s account. |\n| `malformed_signature` | There was an error parsing the signature. |\n| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |\n| `valid` | None of the above errors applied, so the signature is considered to be verified. |',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#get-a-tag',
      },
      operationId: 'git/get-tag',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'tag_sha',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tag',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-tag',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a tag',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'tags',
      },
    },
  },
  '/repos/{owner}/{repo}/git/trees': {
    post: {
      description:
        'The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.\n\nIf you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."\n\nReturns an error if you try to delete a file that does not exist.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#create-a-tree',
      },
      operationId: 'git/create-tree',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base_tree: '9fb037999f264ba9a7fc6274d15fa3ae2ab98312',
                  tree: [
                    {
                      mode: '100644',
                      path: 'file.rb',
                      sha: '44b4fc6d56897b048c772eb4087f854f46256132',
                      type: 'blob',
                    },
                  ],
                },
              },
            },
            schema: {
              properties: {
                base_tree: {
                  description:
                    "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n",
                  type: 'string',
                },
                tree: {
                  description: 'Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.',
                  items: {
                    properties: {
                      content: {
                        description:
                          'The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.',
                        type: 'string',
                      },
                      mode: {
                        description:
                          'The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.',
                        enum: ['100644', '100755', '040000', '160000', '120000'],
                        type: 'string',
                      },
                      path: {
                        description: 'The file referenced in the tree.',
                        type: 'string',
                      },
                      sha: {
                        description:
                          'The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.',
                        nullable: true,
                        type: 'string',
                      },
                      type: {
                        description: 'Either `blob`, `tree`, or `commit`.',
                        enum: ['blob', 'tree', 'commit'],
                        type: 'string',
                      },
                    },
                    type: 'object',
                  },
                  type: 'array',
                },
              },
              required: ['tree'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/git-tree',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-tree',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a tree',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'trees',
      },
    },
  },
  '/repos/{owner}/{repo}/git/trees/{tree_sha}': {
    get: {
      description:
        'Returns a single tree using the SHA1 value for that tree.\n\nIf `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.\n\n\n**Note**: The limit for the `tree` array is 100,000 entries with a maximum size of 7 MB when using the `recursive` parameter.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/git#get-a-tree',
      },
      operationId: 'git/get-tree',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'tree_sha',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          description:
            'Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.',
          in: 'query',
          name: 'recursive',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/git-tree-default-response',
                },
                'response-recursively-retrieving-a-tree': {
                  $ref: '#/components/examples/git-tree-response-recursively-retrieving-a-tree',
                },
              },
              schema: {
                $ref: '#/components/schemas/git-tree',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a tree',
      tags: ['git'],
      'x-github': {
        category: 'git',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'trees',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks': {
    get: {
      description:
        'Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#list-repository-webhooks',
      },
      operationId: 'repos/list-webhooks',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/hook',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repository webhooks',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
    post: {
      description:
        'Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can\nshare the same `config` as long as those webhooks do not have any `events` that overlap.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#create-a-repository-webhook',
      },
      operationId: 'repos/create-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true,
                  config: {
                    content_type: 'json',
                    insecure_ssl: '0',
                    url: 'https://example.com/webhook',
                  },
                  events: ['push', 'pull_request'],
                  name: 'web',
                },
              },
            },
            schema: {
              additionalProperties: false,
              nullable: true,
              properties: {
                active: {
                  default: true,
                  description:
                    'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
                  type: 'boolean',
                },
                config: {
                  description:
                    'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).',
                  properties: {
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type',
                    },
                    digest: {
                      example: '"sha256"',
                      type: 'string',
                    },
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl',
                    },
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret',
                    },
                    token: {
                      example: '"abc"',
                      type: 'string',
                    },
                    url: {
                      $ref: '#/components/schemas/webhook-config-url',
                    },
                  },
                  type: 'object',
                },
                events: {
                  default: ['push'],
                  description:
                    'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                name: {
                  description:
                    'Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/hooks/12345678',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#delete-a-repository-webhook',
      },
      operationId: 'repos/delete-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
    get: {
      description:
        'Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#get-a-repository-webhook',
      },
      operationId: 'repos/get-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
    patch: {
      description:
        'Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#update-a-repository-webhook',
      },
      operationId: 'repos/update-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  active: true,
                  add_events: ['pull_request'],
                },
              },
            },
            schema: {
              properties: {
                active: {
                  default: true,
                  description:
                    'Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.',
                  type: 'boolean',
                },
                add_events: {
                  description:
                    'Determines a list of events to be added to the list of events that the Hook triggers for.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                config: {
                  description:
                    'Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).',
                  properties: {
                    address: {
                      example: '"bar@example.com"',
                      type: 'string',
                    },
                    content_type: {
                      $ref: '#/components/schemas/webhook-config-content-type',
                    },
                    insecure_ssl: {
                      $ref: '#/components/schemas/webhook-config-insecure-ssl',
                    },
                    room: {
                      example: '"The Serious Room"',
                      type: 'string',
                    },
                    secret: {
                      $ref: '#/components/schemas/webhook-config-secret',
                    },
                    url: {
                      $ref: '#/components/schemas/webhook-config-url',
                    },
                  },
                  required: ['url'],
                  type: 'object',
                },
                events: {
                  default: ['push'],
                  description:
                    'Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                remove_events: {
                  description:
                    'Determines a list of events to be removed from the list of events that the Hook triggers for.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/config': {
    get: {
      description:
        'Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."\n\nAccess tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository',
      },
      operationId: 'repos/get-webhook-config-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a webhook configuration for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repo-config',
      },
    },
    patch: {
      description:
        'Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."\n\nAccess tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository',
      },
      operationId: 'repos/update-webhook-config-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of updating content type and URL',
                value: {
                  content_type: 'json',
                  url: 'https://example.com/webhook',
                },
              },
            },
            schema: {
              additionalProperties: false,
              properties: {
                content_type: {
                  $ref: '#/components/schemas/webhook-config-content-type',
                },
                insecure_ssl: {
                  $ref: '#/components/schemas/webhook-config-insecure-ssl',
                },
                secret: {
                  $ref: '#/components/schemas/webhook-config-secret',
                },
                url: {
                  $ref: '#/components/schemas/webhook-config-url',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/webhook-config',
                },
              },
              schema: {
                $ref: '#/components/schemas/webhook-config',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a webhook configuration for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repo-config',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries': {
    get: {
      description: 'Returns a list of webhook deliveries for a webhook configured in a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#list-deliveries-for-a-repository-webhook',
      },
      operationId: 'repos/list-webhook-deliveries',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/cursor',
        },
        {
          in: 'query',
          name: 'redelivery',
          required: false,
          schema: {
            type: 'boolean',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/hook-delivery-item',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List deliveries for a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repo-deliveries',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}': {
    get: {
      description: 'Returns a delivery for a webhook configured in a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#get-a-delivery-for-a-repository-webhook',
      },
      operationId: 'repos/get-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hook-delivery',
                },
              },
              schema: {
                $ref: '#/components/schemas/hook-delivery',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a delivery for a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repo-deliveries',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts': {
    post: {
      description: 'Redeliver a webhook delivery for a webhook configured in a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repo-deliveries#redeliver-a-delivery-for-a-repository-webhook',
      },
      operationId: 'repos/redeliver-webhook-delivery',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
        {
          $ref: '#/components/parameters/delivery-id',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Redeliver a delivery for a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repo-deliveries',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/pings': {
    post: {
      description:
        'This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#ping-a-repository-webhook',
      },
      operationId: 'repos/ping-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Ping a repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
  },
  '/repos/{owner}/{repo}/hooks/{hook_id}/tests': {
    post: {
      description:
        'This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.\n\n**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/webhooks/repos#test-the-push-repository-webhook',
      },
      operationId: 'repos/test-push-webhook',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/hook-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Test the push repository webhook',
      tags: ['repos'],
      'x-github': {
        category: 'webhooks',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
  },
  '/repos/{owner}/{repo}/import': {
    delete: {
      description: 'Stop an import for a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#cancel-an-import',
      },
      operationId: 'migrations/cancel-import',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Cancel an import',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
    get: {
      description:
        'View the progress of an import.\n\n**Import status**\n\nThis section includes details about the possible values of the `status` field of the Import Progress response.\n\nAn import that does not have errors will progress through these steps:\n\n*   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.\n*   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).\n*   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.\n*   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".\n*   `complete` - the import is complete, and the repository is ready on GitHub.\n\nIf there are problems, you will see one of these in the `status` field:\n\n*   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.\n*   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n*   `detection_found_nothing` - the importer didn\'t recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.\n*   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.\n\n**The project_choices field**\n\nWhen multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.\n\n**Git LFS related fields**\n\nThis section includes details about Git LFS related fields that may be present in the Import Progress response.\n\n*   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.\n*   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.\n*   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.\n*   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#get-an-import-status',
      },
      operationId: 'migrations/get-import-status',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import',
                },
              },
              schema: {
                $ref: '#/components/schemas/import',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Get an import status',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
    patch: {
      description:
        'An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API\nrequest. If no parameters are provided, the import will be restarted.\n\nSome servers (e.g. TFS servers) can have several projects at a single URL. In those cases the import progress will\nhave the status `detection_found_multiple` and the Import Progress response will include a `project_choices` array.\nYou can select the project to import by providing one of the objects in the `project_choices` array in the update request.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#update-an-import',
      },
      operationId: 'migrations/update-import',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-1': {
                summary: 'Update authentication for an import',
                value: {
                  vcs_password: 'secret',
                  vcs_username: 'octocat',
                },
              },
              'example-2': {
                summary: 'Updating the project choice',
                value: {
                  human_name: 'project1 (tfs)',
                  tfvc_project: 'project1',
                  vcs: 'tfvc',
                },
              },
              'example-3': {
                summary: 'Restarting an import',
              },
            },
            schema: {
              nullable: true,
              properties: {
                tfvc_project: {
                  description: 'For a tfvc import, the name of the project that is being imported.',
                  example: '"project1"',
                  type: 'string',
                },
                vcs: {
                  description: 'The type of version control system you are migrating from.',
                  enum: ['subversion', 'tfvc', 'git', 'mercurial'],
                  example: '"git"',
                  type: 'string',
                },
                vcs_password: {
                  description: 'The password to provide to the originating repository.',
                  type: 'string',
                },
                vcs_username: {
                  description: 'The username to provide to the originating repository.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'example-1': {
                  $ref: '#/components/examples/import-example-1',
                },
                'example-2': {
                  $ref: '#/components/examples/import-example-2',
                },
                'example-3': {
                  $ref: '#/components/examples/import-response',
                },
              },
              schema: {
                $ref: '#/components/schemas/import',
              },
            },
          },
          description: 'Response',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Update an import',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
    put: {
      description:
        'Start a source import to a GitHub repository using GitHub Importer. Importing into a GitHub repository with GitHub Actions enabled is not supported and will return a status `422 Unprocessable Entity` response.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#start-an-import',
      },
      operationId: 'migrations/start-import',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  vcs: 'subversion',
                  vcs_password: 'secret',
                  vcs_url: 'http://svn.mycompany.com/svn/myproject',
                  vcs_username: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                tfvc_project: {
                  description: 'For a tfvc import, the name of the project that is being imported.',
                  type: 'string',
                },
                vcs: {
                  description:
                    'The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.',
                  enum: ['subversion', 'git', 'mercurial', 'tfvc'],
                  type: 'string',
                },
                vcs_password: {
                  description: 'If authentication is required, the password to provide to `vcs_url`.',
                  type: 'string',
                },
                vcs_url: {
                  description: 'The URL of the originating repository.',
                  type: 'string',
                },
                vcs_username: {
                  description: 'If authentication is required, the username to provide to `vcs_url`.',
                  type: 'string',
                },
              },
              required: ['vcs_url'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/import',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/spraints/socm/import',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Start an import',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
  },
  '/repos/{owner}/{repo}/import/authors': {
    get: {
      description:
        'Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.\n\nThis endpoint and the [Map a commit author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide correct Git author information.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#get-commit-authors',
      },
      operationId: 'migrations/get-commit-authors',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/since-user',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-author-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/porter-author',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Get commit authors',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
  },
  '/repos/{owner}/{repo}/import/authors/{author_id}': {
    patch: {
      description:
        "Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#map-a-commit-author',
      },
      operationId: 'migrations/map-commit-author',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'author_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  email: 'hubot@github.com',
                  name: 'Hubot the Robot',
                },
              },
            },
            schema: {
              additionalProperties: false,
              properties: {
                email: {
                  description: 'The new Git author email.',
                  type: 'string',
                },
                name: {
                  description: 'The new Git author name.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-author',
                },
              },
              schema: {
                $ref: '#/components/schemas/porter-author',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Map a commit author',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
  },
  '/repos/{owner}/{repo}/import/large_files': {
    get: {
      description: 'List files larger than 100MB found during the import',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#get-large-files',
      },
      operationId: 'migrations/get-large-files',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/porter-large-file-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/porter-large-file',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Get large files',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
  },
  '/repos/{owner}/{repo}/import/lfs': {
    patch: {
      description:
        'You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.com). You can learn more about our LFS feature and working with large files [on our help site](https://docs.github.com/repositories/working-with-files/managing-large-files).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference',
      },
      operationId: 'migrations/set-lfs-preference',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  use_lfs: 'opt_in',
                },
              },
            },
            schema: {
              properties: {
                use_lfs: {
                  description:
                    'Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.',
                  enum: ['opt_in', 'opt_out'],
                  type: 'string',
                },
              },
              required: ['use_lfs'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/import',
                },
              },
              schema: {
                $ref: '#/components/schemas/import',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/porter_maintenance',
        },
      },
      summary: 'Update Git LFS preference',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'source-imports',
      },
    },
  },
  '/repos/{owner}/{repo}/installation': {
    get: {
      description:
        "Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app',
      },
      operationId: 'apps/get-repo-installation',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation',
                },
              },
              schema: {
                $ref: '#/components/schemas/installation',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a repository installation for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/interaction-limits': {
    delete: {
      description:
        'Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository',
      },
      operationId: 'interactions/remove-restrictions-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '409': {
          description: 'Response',
        },
      },
      summary: 'Remove interaction restrictions for a repository',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
    get: {
      description:
        'Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository',
      },
      operationId: 'interactions/get-restrictions-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-2',
                },
              },
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response',
                  },
                  {
                    additionalProperties: false,
                    properties: {},
                    type: 'object',
                  },
                ],
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get interaction restrictions for a repository',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
    put: {
      description:
        'Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository',
      },
      operationId: 'interactions/set-restrictions-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example request body',
                value: {
                  expiry: 'one_day',
                  limit: 'collaborators_only',
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/interaction-limit',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/interaction-limit-response',
              },
            },
          },
          description: 'Response',
        },
        '409': {
          description: 'Response',
        },
      },
      summary: 'Set interaction restrictions for a repository',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'repos',
      },
    },
  },
  '/repos/{owner}/{repo}/invitations': {
    get: {
      description:
        'When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#list-repository-invitations',
      },
      operationId: 'repos/list-invitations',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/repository-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository invitations',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
  },
  '/repos/{owner}/{repo}/invitations/{invitation_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation',
      },
      operationId: 'repos/delete-invitation',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/invitation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository invitation',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation',
      },
      operationId: 'repos/update-invitation',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/invitation-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example request body',
                value: {
                  permissions: 'write',
                },
              },
            },
            schema: {
              properties: {
                permissions: {
                  description:
                    'The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.',
                  enum: ['read', 'write', 'maintain', 'triage', 'admin'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository-invitation',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a repository invitation',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
  },
  '/repos/{owner}/{repo}/issues': {
    get: {
      description:
        'List issues in a repository. Only open issues will be listed.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-repository-issues',
      },
      operationId: 'issues/list-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description:
            'If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.',
          in: 'query',
          name: 'milestone',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Indicates the state of the issues to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          description:
            'Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.',
          in: 'query',
          name: 'assignee',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'The user that created the issue.',
          in: 'query',
          name: 'creator',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: "A user that's mentioned in the issue.",
          in: 'query',
          name: 'mentioned',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/labels',
        },
        {
          description: 'What to sort results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'comments'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List repository issues',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#create-an-issue',
      },
      operationId: 'issues/create',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['octocat'],
                  body: "I'm having a problem with this.",
                  labels: ['bug'],
                  milestone: 1,
                  title: 'Found a bug',
                },
              },
            },
            schema: {
              properties: {
                assignee: {
                  description:
                    'Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_',
                  nullable: true,
                  type: 'string',
                },
                assignees: {
                  description:
                    'Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                body: {
                  description: 'The contents of the issue.',
                  type: 'string',
                },
                labels: {
                  description:
                    'Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._',
                  items: {
                    oneOf: [
                      {
                        type: 'string',
                      },
                      {
                        properties: {
                          color: {
                            nullable: true,
                            type: 'string',
                          },
                          description: {
                            nullable: true,
                            type: 'string',
                          },
                          id: {
                            type: 'integer',
                          },
                          name: {
                            type: 'string',
                          },
                        },
                        type: 'object',
                      },
                    ],
                  },
                  type: 'array',
                },
                milestone: {
                  nullable: true,
                  oneOf: [
                    {
                      type: 'string',
                    },
                    {
                      description:
                        'The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._',
                      type: 'integer',
                    },
                  ],
                },
                title: {
                  description: 'The title of the issue.',
                  oneOf: [
                    {
                      type: 'string',
                    },
                    {
                      type: 'integer',
                    },
                  ],
                },
              },
              required: ['title'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/issues/1347',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Create an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/comments': {
    get: {
      description: 'By default, Issue Comments are ordered by ascending ID.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository',
      },
      operationId: 'issues/list-comments-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/sort',
        },
        {
          description: 'Either `asc` or `desc`. Ignored without the `sort` parameter.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List issue comments for a repository',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/comments/{comment_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#delete-an-issue-comment',
      },
      operationId: 'issues/delete-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an issue comment',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue-comment',
      },
      operationId: 'issues/get-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue-comment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an issue comment',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#update-an-issue-comment',
      },
      operationId: 'issues/update-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Me too',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue-comment',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update an issue comment',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions': {
    get: {
      description: 'List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment',
      },
      operationId: 'reactions/list-for-issue-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List reactions for an issue comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment',
      },
      operationId: 'reactions/create-for-issue-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction created',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create reaction for an issue comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.\n\nDelete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction',
      },
      operationId: 'reactions/delete-for-issue-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an issue comment reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/events': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository',
      },
      operationId: 'issues/list-events-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List issue events for a repository',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/events/{event_id}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue-event',
      },
      operationId: 'issues/get-event',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'event_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue-event',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Get an issue event',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}': {
    get: {
      description:
        'The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was\n[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe\nto the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#get-an-issue',
      },
      operationId: 'issues/get',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Get an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description: 'Issue owners and users with push access can edit an issue.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#update-an-issue',
      },
      operationId: 'issues/update',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['octocat'],
                  body: "I'm having a problem with this.",
                  labels: ['bug'],
                  milestone: 1,
                  state: 'open',
                  title: 'Found a bug',
                },
              },
            },
            schema: {
              properties: {
                assignee: {
                  description: 'Username to assign to this issue. **This field is deprecated.**',
                  nullable: true,
                  type: 'string',
                },
                assignees: {
                  description:
                    'Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                body: {
                  description: 'The contents of the issue.',
                  nullable: true,
                  type: 'string',
                },
                labels: {
                  description:
                    'Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.',
                  items: {
                    oneOf: [
                      {
                        type: 'string',
                      },
                      {
                        properties: {
                          color: {
                            nullable: true,
                            type: 'string',
                          },
                          description: {
                            nullable: true,
                            type: 'string',
                          },
                          id: {
                            type: 'integer',
                          },
                          name: {
                            type: 'string',
                          },
                        },
                        type: 'object',
                      },
                    ],
                  },
                  type: 'array',
                },
                milestone: {
                  nullable: true,
                  oneOf: [
                    {
                      type: 'string',
                    },
                    {
                      description:
                        'The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped.',
                      type: 'integer',
                    },
                  ],
                },
                state: {
                  description: 'The open or closed state of the issue.',
                  enum: ['open', 'closed'],
                  type: 'string',
                },
                state_reason: {
                  description: 'The reason for the state change. Ignored unless `state` is changed.',
                  enum: ['completed', 'not_planned', 'reopened'],
                  example: 'not_planned',
                  nullable: true,
                  type: 'string',
                },
                title: {
                  description: 'The title of the issue.',
                  nullable: true,
                  oneOf: [
                    {
                      type: 'string',
                    },
                    {
                      type: 'integer',
                    },
                  ],
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Update an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/assignees': {
    delete: {
      description: 'Removes one or more assignees from an issue.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue',
      },
      operationId: 'issues/remove-assignees',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['hubot', 'other_user'],
                },
              },
            },
            schema: {
              properties: {
                assignees: {
                  description:
                    'Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Remove assignees from an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'assignees',
      },
    },
    post: {
      description: 'Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue',
      },
      operationId: 'issues/add-assignees',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  assignees: ['hubot', 'other_user'],
                },
              },
            },
            schema: {
              properties: {
                assignees: {
                  description:
                    'Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Add assignees to an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'assignees',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}': {
    get: {
      description:
        'Checks if a user has permission to be assigned to a specific issue.\n\nIf the `assignee` can be assigned to this issue, a `204` status code with no content is returned.\n\nOtherwise a `404` status code is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned-to-a-issue',
      },
      operationId: 'issues/check-user-can-be-assigned-to-issue',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          in: 'path',
          name: 'assignee',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response if `assignee` can be assigned to `issue_number`',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Response if `assignee` can not be assigned to `issue_number`',
        },
      },
      summary: 'Check if a user can be assigned to a issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'assignees',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/comments': {
    get: {
      description: 'Issue Comments are ordered by ascending ID.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-issue-comments',
      },
      operationId: 'issues/list-comments',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'List issue comments',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    post: {
      description:
        'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#create-an-issue-comment',
      },
      operationId: 'issues/create-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Me too',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The contents of the comment.',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/issue-comment',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/issues/comments/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create an issue comment',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/events': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-issue-events',
      },
      operationId: 'issues/list-events',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-event-for-issue-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue-event-for-issue',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'List issue events',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/labels': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue',
      },
      operationId: 'issues/remove-all-labels',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Remove all labels from an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-an-issue',
      },
      operationId: 'issues/list-labels-on-issue',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'List labels for an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#add-labels-to-an-issue',
      },
      operationId: 'issues/add-labels',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['bug', 'enhancement'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  properties: {
                    labels: {
                      description:
                        'The names of the labels to add to the issue\'s existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."',
                      items: {
                        type: 'string',
                      },
                      minItems: 1,
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  minItems: 1,
                  type: 'array',
                },
                {
                  properties: {
                    labels: {
                      items: {
                        properties: {
                          name: {
                            type: 'string',
                          },
                        },
                        required: ['name'],
                        type: 'object',
                      },
                      minItems: 1,
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                {
                  items: {
                    properties: {
                      name: {
                        type: 'string',
                      },
                    },
                    required: ['name'],
                    type: 'object',
                  },
                  minItems: 1,
                  type: 'array',
                },
                {
                  type: 'string',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add labels to an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    put: {
      description: 'Removes any previous labels and sets the new labels for an issue.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#set-labels-for-an-issue',
      },
      operationId: 'issues/set-labels',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  labels: ['bug', 'enhancement'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  properties: {
                    labels: {
                      description:
                        'The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."',
                      items: {
                        type: 'string',
                      },
                      minItems: 1,
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                {
                  items: {
                    type: 'string',
                  },
                  minItems: 1,
                  type: 'array',
                },
                {
                  properties: {
                    labels: {
                      items: {
                        properties: {
                          name: {
                            type: 'string',
                          },
                        },
                        required: ['name'],
                        type: 'object',
                      },
                      minItems: 1,
                      type: 'array',
                    },
                  },
                  type: 'object',
                },
                {
                  items: {
                    properties: {
                      name: {
                        type: 'string',
                      },
                    },
                    required: ['name'],
                    type: 'object',
                  },
                  minItems: 1,
                  type: 'array',
                },
                {
                  type: 'string',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set labels for an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}': {
    delete: {
      description:
        'Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue',
      },
      operationId: 'issues/remove-label',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          in: 'path',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '301': {
          $ref: '#/components/responses/moved_permanently',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'Remove a label from an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/lock': {
    delete: {
      description: "Users with push access can unlock an issue's conversation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#unlock-an-issue',
      },
      operationId: 'issues/unlock',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unlock an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'Users with push access can lock an issue or pull request\'s conversation.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#lock-an-issue',
      },
      operationId: 'issues/lock',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of locking an issue as off-topic',
                value: {
                  lock_reason: 'off-topic',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                lock_reason: {
                  description:
                    "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n * `off-topic`  \n * `too heated`  \n * `resolved`  \n * `spam`",
                  enum: ['off-topic', 'too heated', 'resolved', 'spam'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Lock an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/reactions': {
    get: {
      description: 'List the reactions to an [issue](https://docs.github.com/rest/reference/issues).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue',
      },
      operationId: 'reactions/list-for-issue',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'List reactions for an issue',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue',
      },
      operationId: 'reactions/create-for-issue',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create reaction for an issue',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.\n\nDelete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction',
      },
      operationId: 'reactions/delete-for-issue',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an issue reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/issues/{issue_number}/timeline': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue',
      },
      operationId: 'issues/list-events-for-timeline',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/issue-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/timeline-issue-events',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/timeline-issue-events',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
      },
      summary: 'List timeline events for an issue',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'timeline',
      },
    },
  },
  '/repos/{owner}/{repo}/keys': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deploy-keys#list-deploy-keys',
      },
      operationId: 'repos/list-deploy-keys',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/deploy-key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List deploy keys',
      tags: ['repos'],
      'x-github': {
        category: 'deploy-keys',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    post: {
      description: 'You can create a read-only deploy key.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deploy-keys#create-a-deploy-key',
      },
      operationId: 'repos/create-deploy-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: 'ssh-rsa AAA...',
                  read_only: true,
                  title: 'octocat@octomac',
                },
              },
            },
            schema: {
              properties: {
                key: {
                  description: 'The contents of the key.',
                  type: 'string',
                },
                read_only: {
                  description:
                    'If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."',
                  type: 'boolean',
                },
                title: {
                  description: 'A name for the key.',
                  type: 'string',
                },
              },
              required: ['key'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/deploy-key',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/keys/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a deploy key',
      tags: ['repos'],
      'x-github': {
        category: 'deploy-keys',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/keys/{key_id}': {
    delete: {
      description:
        'Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deploy-keys#delete-a-deploy-key',
      },
      operationId: 'repos/delete-deploy-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/key-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a deploy key',
      tags: ['repos'],
      'x-github': {
        category: 'deploy-keys',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/deploy-keys#get-a-deploy-key',
      },
      operationId: 'repos/get-deploy-key',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/key-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/deploy-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/deploy-key',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a deploy key',
      tags: ['repos'],
      'x-github': {
        category: 'deploy-keys',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/labels': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-a-repository',
      },
      operationId: 'issues/list-labels-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List labels for a repository',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#create-a-label',
      },
      operationId: 'issues/create-label',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  color: 'f29513',
                  description: "Something isn't working",
                  name: 'bug',
                },
              },
            },
            schema: {
              properties: {
                color: {
                  description:
                    'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.',
                  type: 'string',
                },
                description: {
                  description: 'A short description of the label. Must be 100 characters or fewer.',
                  type: 'string',
                },
                name: {
                  description:
                    'The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label',
                },
              },
              schema: {
                $ref: '#/components/schemas/label',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/labels/bug',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a label',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
  },
  '/repos/{owner}/{repo}/labels/{name}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#delete-a-label',
      },
      operationId: 'issues/delete-label',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a label',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#get-a-label',
      },
      operationId: 'issues/get-label',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label',
                },
              },
              schema: {
                $ref: '#/components/schemas/label',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a label',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#update-a-label',
      },
      operationId: 'issues/update-label',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  color: 'b01f26',
                  description: 'Small bug fix required',
                  new_name: 'bug :bug:',
                },
              },
            },
            schema: {
              properties: {
                color: {
                  description:
                    'The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.',
                  type: 'string',
                },
                description: {
                  description: 'A short description of the label. Must be 100 characters or fewer.',
                  type: 'string',
                },
                new_name: {
                  description:
                    'The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/label',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a label',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
  },
  '/repos/{owner}/{repo}/languages': {
    get: {
      description:
        'Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repository-languages',
      },
      operationId: 'repos/list-languages',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/language',
                },
              },
              schema: {
                $ref: '#/components/schemas/language',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List repository languages',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/lfs': {
    delete: {
      description: 'Disables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#disable-git-lfs-for-a-repository',
      },
      operationId: 'repos/disable-lfs-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Disable Git LFS for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'lfs',
      },
    },
    put: {
      description: 'Enables Git LFS for a repository. Access tokens must have the `admin:enterprise` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#enable-git-lfs-for-a-repository',
      },
      operationId: 'repos/enable-lfs-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '403': {
          description:
            'We will return a 403 with one of the following messages:\n\n- Git LFS support not enabled because Git LFS is globally disabled.\n- Git LFS support not enabled because Git LFS is disabled for the root repository in the network.\n- Git LFS support not enabled because Git LFS is disabled for <owner>.',
        },
      },
      summary: 'Enable Git LFS for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'lfs',
      },
    },
  },
  '/repos/{owner}/{repo}/license': {
    get: {
      description:
        "This method returns the contents of the repository's license file, if one is detected.\n\nSimilar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository',
      },
      operationId: 'licenses/get-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/license-content',
                },
              },
              schema: {
                $ref: '#/components/schemas/license-content',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the license for a repository',
      tags: ['licenses'],
      'x-github': {
        category: 'licenses',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/merge-upstream': {
    post: {
      description: 'Sync a branch of a forked repository to keep it up-to-date with the upstream repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository',
      },
      operationId: 'repos/merge-upstream',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  branch: 'main',
                },
              },
            },
            schema: {
              properties: {
                branch: {
                  description: 'The name of the branch which should be updated to match upstream.',
                  type: 'string',
                },
              },
              required: ['branch'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/merged-upstream',
                },
              },
              schema: {
                $ref: '#/components/schemas/merged-upstream',
              },
            },
          },
          description: 'The branch has been successfully synced with the upstream repository',
        },
        '409': {
          description: 'The branch could not be synced because of a merge conflict',
        },
        '422': {
          description: 'The branch could not be synced for some other reason',
        },
      },
      summary: 'Sync a fork branch with the upstream repository',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/merges': {
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/branches/branches#merge-a-branch',
      },
      operationId: 'repos/merge',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master',
                  commit_message: 'Shipped cool_feature!',
                  head: 'cool_feature',
                },
              },
            },
            schema: {
              properties: {
                base: {
                  description: 'The name of the base branch that the head will be merged into.',
                  type: 'string',
                },
                commit_message: {
                  description:
                    'Commit message to use for the merge commit. If omitted, a default message will be used.',
                  type: 'string',
                },
                head: {
                  description: 'The head to merge. This can be a branch name or a commit SHA1.',
                  type: 'string',
                },
              },
              required: ['base', 'head'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit',
                },
              },
              schema: {
                $ref: '#/components/schemas/commit',
              },
            },
          },
          description: 'Successful Response (The resulting merge commit)',
        },
        '204': {
          description: 'Response when already merged',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          description: 'Not Found when the base or head does not exist',
        },
        '409': {
          description: 'Conflict when there is a merge conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Merge a branch',
      tags: ['repos'],
      'x-github': {
        category: 'branches',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/milestones': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-milestones',
      },
      operationId: 'issues/list-milestones',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The state of the milestone. Either `open`, `closed`, or `all`.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          description: 'What to sort results by. Either `due_on` or `completeness`.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'due_on',
            enum: ['due_on', 'completeness'],
            type: 'string',
          },
        },
        {
          description: 'The direction of the sort. Either `asc` or `desc`.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            default: 'asc',
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/milestone',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List milestones',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'milestones',
      },
    },
    post: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#create-a-milestone',
      },
      operationId: 'issues/create-milestone',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Tracking milestone for version 1.0',
                  due_on: '2012-10-09T23:39:01Z',
                  state: 'open',
                  title: 'v1.0',
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'A description of the milestone.',
                  type: 'string',
                },
                due_on: {
                  description:
                    'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                state: {
                  default: 'open',
                  description: 'The state of the milestone. Either `open` or `closed`.',
                  enum: ['open', 'closed'],
                  type: 'string',
                },
                title: {
                  description: 'The title of the milestone.',
                  type: 'string',
                },
              },
              required: ['title'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone',
                },
              },
              schema: {
                $ref: '#/components/schemas/milestone',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/milestones/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a milestone',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'milestones',
      },
    },
  },
  '/repos/{owner}/{repo}/milestones/{milestone_number}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#delete-a-milestone',
      },
      operationId: 'issues/delete-milestone',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/milestone-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a milestone',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'milestones',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#get-a-milestone',
      },
      operationId: 'issues/get-milestone',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/milestone-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone',
                },
              },
              schema: {
                $ref: '#/components/schemas/milestone',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a milestone',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'milestones',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#update-a-milestone',
      },
      operationId: 'issues/update-milestone',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/milestone-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'Tracking milestone for version 1.0',
                  due_on: '2012-10-09T23:39:01Z',
                  state: 'open',
                  title: 'v1.0',
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'A description of the milestone.',
                  type: 'string',
                },
                due_on: {
                  description:
                    'The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.',
                  format: 'date-time',
                  type: 'string',
                },
                state: {
                  default: 'open',
                  description: 'The state of the milestone. Either `open` or `closed`.',
                  enum: ['open', 'closed'],
                  type: 'string',
                },
                title: {
                  description: 'The title of the milestone.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/milestone',
                },
              },
              schema: {
                $ref: '#/components/schemas/milestone',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a milestone',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'milestones',
      },
    },
  },
  '/repos/{owner}/{repo}/milestones/{milestone_number}/labels': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone',
      },
      operationId: 'issues/list-labels-for-milestone',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/milestone-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/label',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List labels for issues in a milestone',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'labels',
      },
    },
  },
  '/repos/{owner}/{repo}/notifications': {
    get: {
      description: 'Lists all notifications for the current user in the specified repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user',
      },
      operationId: 'activity/list-repo-notifications-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/all',
        },
        {
          $ref: '#/components/parameters/participating',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/before',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/thread-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/thread',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository notifications for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
    put: {
      description:
        'Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read',
      },
      operationId: 'activity/mark-repo-notifications-as-read',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  last_read_at: '2019-01-01T00:00:00Z',
                },
              },
            },
            schema: {
              properties: {
                last_read_at: {
                  description:
                    'Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.',
                  format: 'date-time',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    message:
                      "Unread notifications couldn't be marked in a single request. Notifications are being marked as read in the background.",
                  },
                },
              },
              schema: {
                properties: {
                  message: {
                    type: 'string',
                  },
                  url: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '205': {
          description: 'Reset Content',
        },
      },
      summary: 'Mark repository notifications as read',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'notifications',
      },
    },
  },
  '/repos/{owner}/{repo}/pages': {
    delete: {
      description:
        "Deletes a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#delete-a-github-pages-site',
      },
      operationId: 'repos/delete-pages-site',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete a GitHub Pages site',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#get-a-github-pages-site',
      },
      operationId: 'repos/get-pages',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page',
                },
              },
              schema: {
                $ref: '#/components/schemas/page',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a GitHub Pages site',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    post: {
      description:
        'Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the \'manage GitHub Pages settings\' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#create-a-github-pages-site',
      },
      operationId: 'repos/create-pages-site',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  source: {
                    branch: 'main',
                    path: '/docs',
                  },
                },
              },
            },
            schema: {
              anyOf: [
                {
                  required: ['source'],
                },
                {
                  required: ['build_type'],
                },
              ],
              description: 'The source branch and directory used to publish your Pages site.',
              nullable: true,
              properties: {
                build_type: {
                  description:
                    'The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.',
                  enum: ['legacy', 'workflow'],
                  type: 'string',
                },
                source: {
                  description: 'The source branch and directory used to publish your Pages site.',
                  properties: {
                    branch: {
                      description: "The repository branch used to publish your site's source files.",
                      type: 'string',
                    },
                    path: {
                      default: '/',
                      description:
                        'The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`',
                      enum: ['/', '/docs'],
                      type: 'string',
                    },
                  },
                  required: ['branch'],
                  type: 'object',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page',
                },
              },
              schema: {
                $ref: '#/components/schemas/page',
              },
            },
          },
          description: 'Response',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a GitHub Pages site',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    put: {
      description:
        "Updates information for a GitHub Pages site. For more information, see \"[About GitHub Pages](/github/working-with-github-pages/about-github-pages).\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administration:write` and `pages:write` permissions.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#update-information-about-a-github-pages-site',
      },
      operationId: 'repos/update-information-about-pages-site',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  cname: 'octocatblog.com',
                  source: {
                    branch: 'main',
                    path: '/',
                  },
                },
              },
            },
            schema: {
              anyOf: [
                {
                  required: ['build_type'],
                },
                {
                  required: ['source'],
                },
                {
                  required: ['cname'],
                },
                {
                  required: ['public'],
                },
                {
                  required: ['https_enforced'],
                },
              ],
              properties: {
                build_type: {
                  description:
                    'The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.',
                  enum: ['legacy', 'workflow'],
                  type: 'string',
                },
                cname: {
                  description:
                    'Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."',
                  nullable: true,
                  type: 'string',
                },
                https_enforced: {
                  description: 'Specify whether HTTPS should be enforced for the repository.',
                  type: 'boolean',
                },
                source: {
                  anyOf: [
                    {
                      description:
                        'Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`.',
                      enum: ['gh-pages', 'master', 'master /docs'],
                      type: 'string',
                    },
                    {
                      description: 'Update the source for the repository. Must include the branch name and path.',
                      properties: {
                        branch: {
                          description: "The repository branch used to publish your site's source files.",
                          type: 'string',
                        },
                        path: {
                          description:
                            'The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.',
                          enum: ['/', '/docs'],
                          type: 'string',
                        },
                      },
                      required: ['branch', 'path'],
                      type: 'object',
                    },
                  ],
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update information about a GitHub Pages site',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/pages/builds': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#list-github-pages-builds',
      },
      operationId: 'repos/list-pages-builds',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/page-build',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List GitHub Pages builds',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
    post: {
      description:
        'You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.\n\nBuild requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#request-a-github-pages-build',
      },
      operationId: 'repos/request-pages-build',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build-status',
                },
              },
              schema: {
                $ref: '#/components/schemas/page-build-status',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Request a GitHub Pages build',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/pages/builds/latest': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#get-latest-pages-build',
      },
      operationId: 'repos/get-latest-pages-build',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build',
                },
              },
              schema: {
                $ref: '#/components/schemas/page-build',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get latest Pages build',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/pages/builds/{build_id}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#get-github-pages-build',
      },
      operationId: 'repos/get-pages-build',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'build_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-build',
                },
              },
              schema: {
                $ref: '#/components/schemas/page-build',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Pages build',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/pages/deployment': {
    post: {
      description:
        'Create a GitHub Pages deployment for a repository.\n\nUsers must have write permissions. GitHub Apps must have the `pages:write` permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#create-a-github-pages-deployment',
      },
      operationId: 'repos/create-pages-deployment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  artifact_url: 'https://downloadcontent/',
                  environment: 'github-pages',
                  oidc_token:
                    'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IlV2R1h4SUhlY0JFc1JCdEttemUxUEhfUERiVSIsImtpZCI6IjUyRjE5N0M0ODFERTcwMTEyQzQ0MUI0QTlCMzdCNTNDN0ZDRjBEQjUifQ.eyJqdGkiOiJhMWIwNGNjNy0zNzZiLTQ1N2QtOTMzNS05NTY5YmVjZDExYTIiLCJzdWIiOiJyZXBvOnBhcGVyLXNwYS9taW55aTplbnZpcm9ubWVudDpQcm9kdWN0aW9uIiwiYXVkIjoiaHR0cHM6Ly9naXRodWIuY29tL3BhcGVyLXNwYSIsInJlZiI6InJlZnMvaGVhZHMvbWFpbiIsInNoYSI6ImEyODU1MWJmODdiZDk3NTFiMzdiMmM0YjM3M2MxZjU3NjFmYWM2MjYiLCJyZXBvc2l0b3J5IjoicGFwZXItc3BhL21pbnlpIiwicmVwb3NpdG9yeV9vd25lciI6InBhcGVyLXNwYSIsInJ1bl9pZCI6IjE1NDY0NTkzNjQiLCJydW5fbnVtYmVyIjoiMzQiLCJydW5fYXR0ZW1wdCI6IjYiLCJhY3RvciI6IllpTXlzdHkiLCJ3b3JrZmxvdyI6IkNJIiwiaGVhZF9yZWYiOiIiLCJiYXNlX3JlZiI6IiIsImV2ZW50X25hbWUiOiJwdXNoIiwicmVmX3R5cGUiOiJicmFuY2giLCJlbnZpcm9ubWVudCI6IlByb2R1Y3Rpb24iLCJqb2Jfd29ya2Zsb3dfcmVmIjoicGFwZXItc3BhL21pbnlpLy5naXRodWIvd29ya2Zsb3dzL2JsYW5rLnltbEByZWZzL2hlYWRzL21haW4iLCJpc3MiOiJodHRwczovL3Rva2VuLmFjdGlvbnMuZ2l0aHVidXNlcmNvbnRlbnQuY29tIiwibmJmIjoxNjM5MDAwODU2LCJleHAiOjE2MzkwMDE3NTYsImlhdCI6MTYzOTAwMTQ1Nn0.VP8WictbQECKozE2SgvKb2FqJ9hisWsoMkYRTqfBrQfZTCXi5IcFEdgDMB2X7a99C2DeUuTvHh9RMKXLL2a0zg3-Sd7YrO7a2ll2kNlnvyIypcN6AeIc7BxHsTTnZN9Ud_xmEsTrSRGOEKmzCFkULQ6N4zlVD0sidypmXlMemmWEcv_ZHqhioEI_VMp5vwXQurketWH7qX4oDgG4okyYtPrv5RQHbfQcVo9izaPJ_jnsDd0CBA0QOx9InjPidtIkMYQLyUgJy33HLJy86EFNUnAf8UhBQuQi5mAsEpEzBBuKpG3PDiPtYCHOk64JZkZGd5mR888a5sbHRiaF8hm8YA',
                  pages_build_version: '4fd754f7e594640989b406850d0bc8f06a121251',
                  preview: false,
                },
              },
            },
            schema: {
              description: 'The object used to create GitHub Pages deployment',
              properties: {
                artifact_url: {
                  description:
                    'The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.',
                  type: 'string',
                },
                environment: {
                  default: 'github-pages',
                  description: 'The target environment for this GitHub Pages deployment.',
                  type: 'string',
                },
                oidc_token: {
                  description: 'The OIDC token issued by GitHub Actions certifying the origin of the deployment.',
                  type: 'string',
                },
                pages_build_version: {
                  default: 'GITHUB_SHA',
                  description: 'A unique string that represents the version of the build for this deployment.',
                  type: 'string',
                },
              },
              required: ['artifact_url', 'pages_build_version', 'oidc_token'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/page-deployment',
                },
              },
              schema: {
                $ref: '#/components/schemas/page-deployment',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a GitHub Pages deployment',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/pages/health': {
    get: {
      description:
        "Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.\n\nThe first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.\n\nTo use this endpoint, you must be a repository administrator, maintainer, or have the 'manage GitHub Pages settings' permission. A token with the `repo` scope or Pages write permission is required. GitHub Apps must have the `administrative:write` and `pages:write` permissions.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/pages#get-a-dns-health-check-for-github-pages',
      },
      operationId: 'repos/get-pages-health-check',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pages-health-check',
                },
              },
              schema: {
                $ref: '#/components/schemas/pages-health-check',
              },
            },
          },
          description: 'Response',
        },
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Empty response',
        },
        '400': {
          description: 'Custom domains are not available for GitHub Pages',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          description: "There isn't a CNAME for this page",
        },
      },
      summary: 'Get a DNS health check for GitHub Pages',
      tags: ['repos'],
      'x-github': {
        category: 'pages',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/projects': {
    get: {
      description:
        'Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-repository-projects',
      },
      operationId: 'projects/list-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'Indicates the state of the projects to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/project',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'List repository projects',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#create-a-repository-project',
      },
      operationId: 'projects/create-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Developer documentation project for the developer site.',
                  name: 'Projects Documentation',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The description of the project.',
                  type: 'string',
                },
                name: {
                  description: 'The name of the project.',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-3',
                },
              },
              schema: {
                $ref: '#/components/schemas/project',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '410': {
          $ref: '#/components/responses/gone',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a repository project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls': {
    get: {
      description:
        "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-pull-requests',
      },
      operationId: 'pulls/list',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'Either `open`, `closed`, or `all` to filter by state.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          description:
            'Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.',
          in: 'query',
          name: 'head',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description: 'Filter pulls by base branch name. Example: `gh-pages`.',
          in: 'query',
          name: 'base',
          required: false,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'popularity', 'long-running'],
            type: 'string',
          },
        },
        {
          description:
            'The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List pull requests',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#create-a-pull-request',
      },
      operationId: 'pulls/create',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master',
                  body: 'Please pull these awesome changes in!',
                  head: 'octocat:new-feature',
                  title: 'Amazing new feature',
                },
              },
            },
            schema: {
              properties: {
                base: {
                  description:
                    'The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.',
                  type: 'string',
                },
                body: {
                  description: 'The contents of the pull request.',
                  type: 'string',
                },
                draft: {
                  description:
                    'Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.',
                  type: 'boolean',
                },
                head: {
                  description:
                    'The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.',
                  type: 'string',
                },
                head_repo: {
                  description:
                    'The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.',
                  example: 'octo-org/octo-repo',
                  format: 'repo.nwo',
                  type: 'string',
                },
                issue: {
                  description:
                    'An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.',
                  example: 1,
                  type: 'integer',
                },
                maintainer_can_modify: {
                  description:
                    'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.',
                  type: 'boolean',
                },
                title: {
                  description: 'The title of the new pull request. Required unless `issue` is specified.',
                  type: 'string',
                },
              },
              required: ['head', 'base'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/1347',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/comments': {
    get: {
      description:
        'Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository',
      },
      operationId: 'pulls/list-review-comments-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['created', 'updated', 'created_at'],
            type: 'string',
          },
        },
        {
          description: 'The direction to sort results. Ignored without `sort` parameter.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List review comments in a repository',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}': {
    delete: {
      description: 'Deletes a review comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request',
      },
      operationId: 'pulls/delete-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a review comment for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    get: {
      description: 'Provides details for a review comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request',
      },
      operationId: 'pulls/get-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a review comment for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    patch: {
      description: 'Enables you to edit a review comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request',
      },
      operationId: 'pulls/update-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'I like this too!',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The text of the reply to the review comment.',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a review comment for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions': {
    get: {
      description:
        'List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment',
      },
      operationId: 'reactions/list-for-pull-request-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List reactions for a pull request review comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment',
      },
      operationId: 'reactions/create-for-pull-request-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction created',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create reaction for a pull request review comment',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`\n\nDelete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction',
      },
      operationId: 'reactions/delete-for-pull-request-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a pull request comment reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}': {
    get: {
      description:
        'Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nLists details of a pull request by providing its number.\n\nWhen you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".\n\nThe value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.\n\nThe value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:\n\n*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.\n*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.\n*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.\n\nPass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#get-a-pull-request',
      },
      operationId: 'pulls/get',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request',
              },
            },
          },
          description:
            'Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls/#update-a-pull-request',
      },
      operationId: 'pulls/update',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  base: 'master',
                  body: 'updated body',
                  state: 'open',
                  title: 'new title',
                },
              },
            },
            schema: {
              properties: {
                base: {
                  description:
                    'The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.',
                  type: 'string',
                },
                body: {
                  description: 'The contents of the pull request.',
                  type: 'string',
                },
                maintainer_can_modify: {
                  description:
                    'Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.',
                  type: 'boolean',
                },
                state: {
                  description: 'State of this Pull Request. Either `open` or `closed`.',
                  enum: ['open', 'closed'],
                  type: 'string',
                },
                title: {
                  description: 'The title of the pull request.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces': {
    post: {
      description:
        'Creates a codespace owned by the authenticated user for the specified pull request.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-from-a-pull-request',
      },
      operationId: 'codespaces/create-with-pr-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ref: 'main',
                  repository_id: 1,
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                client_ip: {
                  description: 'IP for location auto-detection when proxying a request',
                  type: 'string',
                },
                devcontainer_path: {
                  description: 'Path to devcontainer.json config to use for this codespace',
                  type: 'string',
                },
                display_name: {
                  description: 'Display name for this codespace',
                  type: 'string',
                },
                idle_timeout_minutes: {
                  description: 'Time in minutes before codespace stops from inactivity',
                  type: 'integer',
                },
                location: {
                  description: 'Location for this codespace. Assigned by IP if not provided',
                  type: 'string',
                },
                machine: {
                  description: 'Machine type to use for this codespace',
                  type: 'string',
                },
                multi_repo_permissions_opt_out: {
                  description: 'Whether to authorize requested permissions from devcontainer.json',
                  type: 'boolean',
                },
                retention_period_minutes: {
                  description:
                    'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).',
                  type: 'integer',
                },
                working_directory: {
                  description: 'Working directory for this codespace',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace was successfully created',
        },
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace creation partially failed but is being retried in the background',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Create a codespace from a pull request',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/comments': {
    get: {
      description:
        'Lists all review comments for a pull request. By default, review comments are in ascending order by ID.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request',
      },
      operationId: 'pulls/list-review-comments',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/sort',
        },
        {
          description: 'The direction to sort results. Ignored without `sort` parameter.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List review comments on a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
      },
    },
    post: {
      description:
        '\nCreates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.\n\nThe `position` parameter is deprecated. If you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required.\n\n**Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request',
      },
      operationId: 'pulls/create-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'example-for-a-multi-line-comment': {
                summary: 'Example for a multi-line comment',
                value: {
                  body: 'Great stuff!',
                  commit_id: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
                  line: 2,
                  path: 'file1.txt',
                  side: 'RIGHT',
                  start_line: 1,
                  start_side: 'RIGHT',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The text of the review comment.',
                  type: 'string',
                },
                commit_id: {
                  description:
                    'The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.',
                  type: 'string',
                },
                in_reply_to: {
                  description:
                    'The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.',
                  example: 2,
                  type: 'integer',
                },
                line: {
                  description:
                    'The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.',
                  type: 'integer',
                },
                path: {
                  description: 'The relative path to the file that necessitates a comment.',
                  type: 'string',
                },
                position: {
                  deprecated: true,
                  description:
                    '**This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.',
                  type: 'integer',
                  'x-github': {
                    deprecationDate: '2022-11-01',
                  },
                },
                side: {
                  description:
                    'In a split diff view, the side of the diff that the pull request\'s changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.',
                  enum: ['LEFT', 'RIGHT'],
                  type: 'string',
                },
                start_line: {
                  description:
                    '**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.',
                  type: 'integer',
                },
                start_side: {
                  description:
                    '**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.',
                  enum: ['LEFT', 'RIGHT', 'side'],
                  type: 'string',
                },
              },
              required: ['body', 'commit_id', 'path', 'line'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'example-for-a-multi-line-comment': {
                  $ref: '#/components/examples/pull-request-review-comment-example-for-a-multi-line-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a review comment for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'comments',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies': {
    post: {
      description:
        'Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment',
      },
      operationId: 'pulls/create-reply-for-review-comment',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/comment-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Great stuff!',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The text of the review comment.',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review-comment',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/pulls/comments/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Create a reply for a review comment',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'comments',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/commits': {
    get: {
      description:
        'Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request',
      },
      operationId: 'pulls/list-commits',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/commit',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List commits on a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/files': {
    get: {
      description:
        '**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-pull-requests-files',
      },
      operationId: 'pulls/list-files',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/diff-entry-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/diff-entry',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List pull requests files',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/merge': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged',
      },
      operationId: 'pulls/check-if-merged',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response if pull request has been merged',
        },
        '404': {
          description: 'Not Found if pull request has not been merged',
        },
      },
      summary: 'Check if a pull request has been merged',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#merge-a-pull-request',
      },
      operationId: 'pulls/merge',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              'response-if-merge-was-successful': {
                value: {
                  commit_message: 'Add a new value to the merge_method enum',
                  commit_title: 'Expand enum',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                commit_message: {
                  description: 'Extra detail to append to automatic commit message.',
                  type: 'string',
                },
                commit_title: {
                  description: 'Title for the automatic commit message.',
                  type: 'string',
                },
                merge_method: {
                  description: 'The merge method to use.',
                  enum: ['merge', 'squash', 'rebase'],
                  type: 'string',
                },
                sha: {
                  description: 'SHA that pull request head must match to allow merge.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-merge-was-successful': {
                  $ref: '#/components/examples/pull-request-merge-result-response-if-merge-was-successful',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-merge-result',
              },
            },
          },
          description: 'if merge was successful',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '405': {
          content: {
            'application/json': {
              examples: {
                'response-if-merge-cannot-be-performed': {
                  value: {
                    message: 'Pull Request is not mergeable',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Method Not Allowed if merge cannot be performed',
        },
        '409': {
          content: {
            'application/json': {
              examples: {
                'response-if-sha-was-provided-and-pull-request-head-did-not-match': {
                  value: {
                    message: 'Head branch was modified. Review and try the merge again.',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Conflict if sha was provided and pull request head did not match',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Merge a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request',
      },
      operationId: 'pulls/remove-requested-reviewers',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  reviewers: ['octocat', 'hubot', 'other_user'],
                  team_reviewers: ['justice-league'],
                },
              },
            },
            schema: {
              properties: {
                reviewers: {
                  description: 'An array of user `login`s that will be removed.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                team_reviewers: {
                  description: 'An array of team `slug`s that will be removed.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              required: ['reviewers'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-simple',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-simple',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove requested reviewers from a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'review-requests',
      },
    },
    get: {
      description:
        'Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#get-all-requested-reviewers-for-a-pull-request',
      },
      operationId: 'pulls/list-requested-reviewers',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-pull-request-review-request',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review-request',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'Get all requested reviewers for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'review-requests',
      },
    },
    post: {
      description:
        'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request',
      },
      operationId: 'pulls/request-reviewers',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  reviewers: ['octocat', 'hubot', 'other_user'],
                  team_reviewers: ['justice-league'],
                },
              },
            },
            schema: {
              anyOf: [
                {
                  required: ['reviewers'],
                },
                {
                  required: ['team_reviewers'],
                },
              ],
              properties: {
                reviewers: {
                  description: 'An array of user `login`s that will be requested.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
                team_reviewers: {
                  description: 'An array of team `slug`s that will be requested.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-request',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-simple',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          description: 'Unprocessable Entity if user is not a collaborator',
        },
      },
      summary: 'Request reviewers for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'review-requests',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews': {
    get: {
      description: 'The list of reviews returns in chronological order.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request',
      },
      operationId: 'pulls/list-reviews',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/pull-request-review',
                },
                type: 'array',
              },
            },
          },
          description: 'The list of reviews returns in chronological order.',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List reviews for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
    post: {
      description:
        'This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.\n\nPull request reviews created in the `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING` review, see "[Submit a review for a pull request](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request)."\n\n**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.\n\nThe `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request',
      },
      operationId: 'pulls/create-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'This is close to perfect! Please address the suggested inline change.',
                  comments: [
                    {
                      body: 'Please add more information here, and fix this typo.',
                      path: 'file.md',
                      position: 6,
                    },
                  ],
                  commit_id: 'ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091',
                  event: 'REQUEST_CHANGES',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description:
                    '**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.',
                  type: 'string',
                },
                comments: {
                  description:
                    'Use the following table to specify the location, destination, and contents of the draft review comment.',
                  items: {
                    properties: {
                      body: {
                        description: 'Text of the review comment.',
                        type: 'string',
                      },
                      line: {
                        example: 28,
                        type: 'integer',
                      },
                      path: {
                        description: 'The relative path to the file that necessitates a review comment.',
                        type: 'string',
                      },
                      position: {
                        description:
                          'The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.',
                        type: 'integer',
                      },
                      side: {
                        example: 'RIGHT',
                        type: 'string',
                      },
                      start_line: {
                        example: 26,
                        type: 'integer',
                      },
                      start_side: {
                        example: 'LEFT',
                        type: 'string',
                      },
                    },
                    required: ['path', 'body'],
                    type: 'object',
                  },
                  type: 'array',
                },
                commit_id: {
                  description:
                    'The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.',
                  type: 'string',
                },
                event: {
                  description:
                    'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.',
                  enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request',
      },
      operationId: 'pulls/delete-pending-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Delete a pending review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request',
      },
      operationId: 'pulls/get-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-4',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
    put: {
      description: 'Update the review summary comment with new text.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request',
      },
      operationId: 'pulls/update-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'This is close to perfect! Please address the suggested inline change. And add more about this.',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The body text of the pull request review.',
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-5',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Update a review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments': {
    get: {
      description: 'List comments for a specific pull request review.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review',
      },
      operationId: 'pulls/list-comments-for-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/review-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/review-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List comments for a pull request review',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals': {
    put: {
      description:
        '**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request',
      },
      operationId: 'pulls/dismiss-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  event: 'DISMISS',
                  message: 'You are dismissed',
                },
              },
            },
            schema: {
              properties: {
                event: {
                  enum: ['DISMISS'],
                  example: '"DISMISS"',
                  type: 'string',
                },
                message: {
                  description: 'The message for the pull request review dismissal',
                  type: 'string',
                },
              },
              required: ['message'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-3',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Dismiss a review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events': {
    post: {
      description:
        'Submits a pending review for a pull request. For more information about creating a pending review for a pull request, see "[Create a review for a pull request](https://docs.github.com/rest/pulls#create-a-review-for-a-pull-request)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request',
      },
      operationId: 'pulls/submit-review',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
        {
          $ref: '#/components/parameters/review-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Here is the body for the review.',
                  event: 'REQUEST_CHANGES',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'The body text of the pull request review',
                  type: 'string',
                },
                event: {
                  description:
                    'The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.',
                  enum: ['APPROVE', 'REQUEST_CHANGES', 'COMMENT'],
                  type: 'string',
                },
              },
              required: ['event'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/pull-request-review-4',
                },
              },
              schema: {
                $ref: '#/components/schemas/pull-request-review',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Submit a review for a pull request',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'reviews',
      },
    },
  },
  '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch': {
    put: {
      description:
        'Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch',
      },
      operationId: 'pulls/update-branch',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/pull-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expected_head_sha: '6dcb09b5b57875f334f61aebed695e2e4193db5e',
                },
              },
            },
            schema: {
              nullable: true,
              properties: {
                expected_head_sha: {
                  description:
                    "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/reference/repos#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: {
                    message: 'Updating pull request branch.',
                    url: 'https://github.com/repos/octocat/Hello-World/pulls/53',
                  },
                },
              },
              schema: {
                properties: {
                  message: {
                    type: 'string',
                  },
                  url: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a pull request branch',
      tags: ['pulls'],
      'x-github': {
        category: 'pulls',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/readme': {
    get: {
      description:
        'Gets the preferred README for a repository.\n\nREADMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository-readme',
      },
      operationId: 'repos/get-readme',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)',
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-file',
                },
              },
              schema: {
                $ref: '#/components/schemas/content-file',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a repository README',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
  },
  '/repos/{owner}/{repo}/readme/{dir}': {
    get: {
      description:
        'Gets the README from a repository directory.\n\nREADMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme',
      },
      operationId: 'repos/get-readme-in-directory',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'The alternate path to look for a README file',
          in: 'path',
          name: 'dir',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
        {
          description: 'The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)',
          in: 'query',
          name: 'ref',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-file',
                },
              },
              schema: {
                $ref: '#/components/schemas/content-file',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get a repository README for a directory',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
  },
  '/repos/{owner}/{repo}/releases': {
    get: {
      description:
        'This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).\n\nInformation about published releases are available to everyone. Only users with push access will receive listings for draft releases.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-releases',
      },
      operationId: 'repos/list-releases',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/release',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List releases',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    post: {
      description:
        'Users with push access to the repository can create a release.\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/releases/releases#create-a-release',
      },
      operationId: 'repos/create-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Description of the release',
                  draft: false,
                  generate_release_notes: false,
                  name: 'v1.0.0',
                  prerelease: false,
                  tag_name: 'v1.0.0',
                  target_commitish: 'master',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'Text describing the contents of the tag.',
                  type: 'string',
                },
                discussion_category_name: {
                  description:
                    'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."',
                  type: 'string',
                },
                draft: {
                  default: false,
                  description: '`true` to create a draft (unpublished) release, `false` to create a published one.',
                  type: 'boolean',
                },
                generate_release_notes: {
                  default: false,
                  description:
                    'Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.',
                  type: 'boolean',
                },
                make_latest: {
                  default: true,
                  description:
                    'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.',
                  enum: ['true', 'false', 'legacy'],
                  type: 'string',
                },
                name: {
                  description: 'The name of the release.',
                  type: 'string',
                },
                prerelease: {
                  default: false,
                  description:
                    '`true` to identify the release as a prerelease. `false` to identify the release as a full release.',
                  type: 'boolean',
                },
                tag_name: {
                  description: 'The name of the tag.',
                  type: 'string',
                },
                target_commitish: {
                  description:
                    "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
                  type: 'string',
                },
              },
              required: ['tag_name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release',
                },
              },
              schema: {
                $ref: '#/components/schemas/release',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World/releases/1',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Not Found if the discussion category name is invalid',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
        triggersNotification: true,
      },
    },
  },
  '/repos/{owner}/{repo}/releases/assets/{asset_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#delete-a-release-asset',
      },
      operationId: 'repos/delete-release-asset',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/asset-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a release asset',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    get: {
      description:
        "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-release-asset',
      },
      operationId: 'repos/get-release-asset',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/asset-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset',
                },
              },
              schema: {
                $ref: '#/components/schemas/release-asset',
              },
            },
          },
          description: 'Response',
        },
        '302': {
          $ref: '#/components/responses/found',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a release asset',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    patch: {
      description: 'Users with push access to the repository can edit a release asset.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#update-a-release-asset',
      },
      operationId: 'repos/update-release-asset',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/asset-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  label: 'Mac binary',
                  name: 'foo-1.0.0-osx.zip',
                },
              },
            },
            schema: {
              properties: {
                label: {
                  description: 'An alternate short description of the asset. Used in place of the filename.',
                  type: 'string',
                },
                name: {
                  description: 'The file name of the asset.',
                  type: 'string',
                },
                state: {
                  example: '"uploaded"',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset',
                },
              },
              schema: {
                $ref: '#/components/schemas/release-asset',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a release asset',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/generate-notes': {
    post: {
      description:
        'Generate a name and body describing a [release](https://docs.github.com/rest/reference/repos#releases). The body content will be markdown formatted and contain information like the changes since last release and users who contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when creating a new release.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#generate-release-notes',
      },
      operationId: 'repos/generate-release-notes',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  configuration_file_path: '.github/custom_release_config.yml',
                  previous_tag_name: 'v0.9.2',
                  tag_name: 'v1.0.0',
                  target_commitish: 'main',
                },
              },
            },
            schema: {
              properties: {
                configuration_file_path: {
                  description:
                    "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.",
                  type: 'string',
                },
                previous_tag_name: {
                  description:
                    'The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.',
                  type: 'string',
                },
                tag_name: {
                  description: 'The tag name for the release. This can be an existing tag or a new one.',
                  type: 'string',
                },
                target_commitish: {
                  description:
                    "Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.",
                  type: 'string',
                },
              },
              required: ['tag_name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-notes-content',
                },
              },
              schema: {
                $ref: '#/components/schemas/release-notes-content',
              },
            },
          },
          description: 'Name and body of generated release notes',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Generate release notes content for a release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/latest': {
    get: {
      description:
        'View the latest published full release for the repository.\n\nThe latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-the-latest-release',
      },
      operationId: 'repos/get-latest-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release',
                },
              },
              schema: {
                $ref: '#/components/schemas/release',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the latest release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/tags/{tag}': {
    get: {
      description: 'Get a published release with the specified tag.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name',
      },
      operationId: 'repos/get-release-by-tag',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          description: 'tag parameter',
          in: 'path',
          name: 'tag',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release',
                },
              },
              schema: {
                $ref: '#/components/schemas/release',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a release by tag name',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/{release_id}': {
    delete: {
      description: 'Users with push access to the repository can delete a release.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#delete-a-release',
      },
      operationId: 'repos/delete-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    get: {
      description:
        '**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-a-release',
      },
      operationId: 'repos/get-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release',
                },
              },
              schema: {
                $ref: '#/components/schemas/release',
              },
            },
          },
          description:
            '**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    patch: {
      description: 'Users with push access to the repository can edit a release.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#update-a-release',
      },
      operationId: 'repos/update-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Description of the release',
                  draft: false,
                  name: 'v1.0.0',
                  prerelease: false,
                  tag_name: 'v1.0.0',
                  target_commitish: 'master',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'Text describing the contents of the tag.',
                  type: 'string',
                },
                discussion_category_name: {
                  description:
                    'If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."',
                  type: 'string',
                },
                draft: {
                  description: '`true` makes the release a draft, and `false` publishes the release.',
                  type: 'boolean',
                },
                make_latest: {
                  default: true,
                  description:
                    'Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.',
                  enum: ['true', 'false', 'legacy'],
                  type: 'string',
                },
                name: {
                  description: 'The name of the release.',
                  type: 'string',
                },
                prerelease: {
                  description:
                    '`true` to identify the release as a prerelease, `false` to identify the release as a full release.',
                  type: 'boolean',
                },
                tag_name: {
                  description: 'The name of the tag.',
                  type: 'string',
                },
                target_commitish: {
                  description:
                    "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release',
                },
              },
              schema: {
                $ref: '#/components/schemas/release',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Not Found if the discussion category name is invalid',
        },
      },
      summary: 'Update a release',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/{release_id}/assets': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-release-assets',
      },
      operationId: 'repos/list-release-assets',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/release-asset-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/release-asset',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List release assets',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
    post: {
      description:
        'This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in\nthe response of the [Create a release endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.\n\nYou need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.\n\nMost libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example: \n\n`application/zip`\n\nGitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou\'ll still need to pass your authentication to be able to upload an asset.\n\nWhen an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.\n\n**Notes:**\n*   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"\nendpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).\n*   To find the `release_id` query the [`GET /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release). \n*   If you upload an asset with the same filename as another uploaded asset, you\'ll receive an error and must delete the old file before you can re-upload the new asset.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#upload-a-release-asset',
      },
      operationId: 'repos/upload-release-asset',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
        {
          in: 'query',
          name: 'name',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          in: 'query',
          name: 'label',
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/octet-stream': {
            examples: {
              default: {
                value: '@example.zip',
              },
            },
            schema: {
              description: 'The raw file data',
              format: 'binary',
              type: 'string',
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                'response-for-successful-upload': {
                  $ref: '#/components/examples/release-asset-response-for-successful-upload',
                },
              },
              schema: {
                $ref: '#/components/schemas/release-asset',
              },
            },
          },
          description: 'Response for successful upload',
        },
        '422': {
          description: 'Response if you upload an asset with the same filename as another uploaded asset',
        },
      },
      servers: [
        {
          description:
            'The URL origin (protocol + host name + port) is included in `upload_url` returned in the response of the "Create a release" endpoint',
          url: 'https://uploads.github.com',
        },
      ],
      summary: 'Upload a release asset',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'releases',
      },
    },
  },
  '/repos/{owner}/{repo}/releases/{release_id}/reactions': {
    get: {
      description: 'List the reactions to a [release](https://docs.github.com/rest/reference/repos#releases).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-release',
      },
      operationId: 'reactions/list-for-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', 'laugh', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List reactions for a release',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release',
      },
      operationId: 'reactions/create-for-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.',
                  enum: ['+1', 'laugh', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Reaction created',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create reaction for a release',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}': {
    delete: {
      description:
        '**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.\n\nDelete a reaction to a [release](https://docs.github.com/rest/reference/repos#releases).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#delete-a-release-reaction',
      },
      operationId: 'reactions/delete-for-release',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/release-id',
        },
        {
          $ref: '#/components/parameters/reaction-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a release reaction',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/secret-scanning/alerts': {
    get: {
      description:
        'Lists secret scanning alerts for an eligible repository, from newest to oldest.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository',
      },
      operationId: 'secret-scanning/list-alerts-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-state',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-secret-type',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-resolution',
        },
        {
          $ref: '#/components/parameters/secret-scanning-alert-sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-before-org-repo',
        },
        {
          $ref: '#/components/parameters/secret-scanning-pagination-after-org-repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-list',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/secret-scanning-alert',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          description: 'Repository is public or secret scanning is disabled for the repository',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List secret scanning alerts for a repository',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}': {
    get: {
      description:
        'Gets a single secret scanning alert detected in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert',
      },
      operationId: 'secret-scanning/get-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-open',
                },
              },
              schema: {
                $ref: '#/components/schemas/secret-scanning-alert',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          description:
            'Repository is public, or secret scanning is disabled for the repository, or the resource is not found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Get a secret scanning alert',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        'Updates the status of a secret scanning alert in an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert',
      },
      operationId: 'secret-scanning/update-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  resolution: 'false_positive',
                  state: 'resolved',
                },
              },
            },
            schema: {
              properties: {
                resolution: {
                  $ref: '#/components/schemas/secret-scanning-alert-resolution',
                },
                resolution_comment: {
                  $ref: '#/components/schemas/secret-scanning-alert-resolution-comment',
                },
                state: {
                  $ref: '#/components/schemas/secret-scanning-alert-state',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-alert-resolved',
                },
              },
              schema: {
                $ref: '#/components/schemas/secret-scanning-alert',
              },
            },
          },
          description: 'Response',
        },
        '400': {
          description: 'Bad request, resolution comment is invalid or the resolution was not changed.',
        },
        '404': {
          description:
            'Repository is public, or secret scanning is disabled for the repository, or the resource is not found',
        },
        '422': {
          description: 'State does not match the resolution or resolution comment',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Update a secret scanning alert',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
  '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations': {
    get: {
      description:
        'Lists all locations for a given secret scanning alert for an eligible repository.\nTo use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.\nFor public repositories, you may instead use the `public_repo` scope.\n\nGitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/secret-scanning#list-locations-for-a-secret-scanning-alert',
      },
      operationId: 'secret-scanning/list-locations-for-alert',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/alert-number',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/secret-scanning-location-list',
                },
              },
              schema: {
                description: 'List of locations where the secret was detected',
                items: {
                  $ref: '#/components/schemas/secret-scanning-location',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          description:
            'Repository is public, or secret scanning is disabled for the repository, or the resource is not found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'List locations for a secret scanning alert',
      tags: ['secret-scanning'],
      'x-github': {
        category: 'secret-scanning',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/stargazers': {
    get: {
      description:
        'Lists the people that have starred the repository.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-stargazers',
      },
      operationId: 'activity/list-stargazers-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-star-creation-timestamps': {
                  $ref: '#/components/examples/stargazer-items-alternative-response-with-star-creation-timestamps',
                },
                'default-response': {
                  $ref: '#/components/examples/simple-user-items-default-response',
                },
              },
              schema: {
                anyOf: [
                  {
                    items: {
                      $ref: '#/components/schemas/simple-user',
                    },
                    type: 'array',
                  },
                  {
                    items: {
                      $ref: '#/components/schemas/stargazer',
                    },
                    type: 'array',
                  },
                ],
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List stargazers',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
  },
  '/repos/{owner}/{repo}/stats/code_frequency': {
    get: {
      description: 'Returns a weekly aggregate of the number of additions and deletions pushed to a repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity',
      },
      operationId: 'repos/get-code-frequency-stats',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-frequency-stat-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-frequency-stat',
                },
                type: 'array',
              },
            },
          },
          description: 'Returns a weekly aggregate of the number of additions and deletions pushed to a repository.',
        },
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '204': {
          $ref: '#/components/responses/no_content',
        },
      },
      summary: 'Get the weekly commit activity',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statistics',
      },
    },
  },
  '/repos/{owner}/{repo}/stats/commit_activity': {
    get: {
      description:
        'Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity',
      },
      operationId: 'repos/get-commit-activity-stats',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-activity-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/commit-activity',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '204': {
          $ref: '#/components/responses/no_content',
        },
      },
      summary: 'Get the last year of commit activity',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statistics',
      },
    },
  },
  '/repos/{owner}/{repo}/stats/contributors': {
    get: {
      description:
        '\nReturns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:\n\n*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity',
      },
      operationId: 'repos/get-contributors-stats',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/contributor-activity-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/contributor-activity',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '204': {
          $ref: '#/components/responses/no_content',
        },
      },
      summary: 'Get all contributor commit activity',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statistics',
      },
    },
  },
  '/repos/{owner}/{repo}/stats/participation': {
    get: {
      description:
        "Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.\n\nThe array order is oldest week (index 0) to most recent week.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count',
      },
      operationId: 'repos/get-participation-stats',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/participation-stats',
                },
              },
              schema: {
                $ref: '#/components/schemas/participation-stats',
              },
            },
          },
          description: 'The array order is oldest week (index 0) to most recent week.',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get the weekly commit count',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statistics',
      },
    },
  },
  '/repos/{owner}/{repo}/stats/punch_card': {
    get: {
      description:
        'Each array contains the day number, hour number, and number of commits:\n\n*   `0-6`: Sunday - Saturday\n*   `0-23`: Hour of day\n*   Number of commits\n\nFor example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day',
      },
      operationId: 'repos/get-punch-card-stats',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-frequency-stat-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/code-frequency-stat',
                },
                type: 'array',
              },
            },
          },
          description:
            'For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.',
        },
        '204': {
          $ref: '#/components/responses/no_content',
        },
      },
      summary: 'Get the hourly commit count for each day',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statistics',
      },
    },
  },
  '/repos/{owner}/{repo}/statuses/{sha}': {
    post: {
      description:
        'Users with push access in a repository can create commit statuses for a given SHA.\n\nNote: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/commits/statuses#create-a-commit-status',
      },
      operationId: 'repos/create-commit-status',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'sha',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  context: 'continuous-integration/jenkins',
                  description: 'The build succeeded!',
                  state: 'success',
                  target_url: 'https://example.com/build/status',
                },
              },
            },
            schema: {
              properties: {
                context: {
                  default: 'default',
                  description:
                    'A string label to differentiate this status from the status of other systems. This field is case-insensitive.',
                  type: 'string',
                },
                description: {
                  description: 'A short description of the status.',
                  nullable: true,
                  type: 'string',
                },
                state: {
                  description: 'The state of the status.',
                  enum: ['error', 'failure', 'pending', 'success'],
                  type: 'string',
                },
                target_url: {
                  description:
                    'The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`',
                  nullable: true,
                  type: 'string',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/status',
                },
              },
              schema: {
                $ref: '#/components/schemas/status',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example:
                'https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Create a commit status',
      tags: ['repos'],
      'x-github': {
        category: 'commits',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'statuses',
      },
    },
  },
  '/repos/{owner}/{repo}/subscribers': {
    get: {
      description: 'Lists the people watching the specified repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-watchers',
      },
      operationId: 'activity/list-watchers-for-repo',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List watchers',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
  },
  '/repos/{owner}/{repo}/subscription': {
    delete: {
      description:
        "This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#delete-a-repository-subscription',
      },
      operationId: 'activity/delete-repo-subscription',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a repository subscription',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#get-a-repository-subscription',
      },
      operationId: 'activity/get-repo-subscription',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-you-subscribe-to-the-repository': {
                  $ref: '#/components/examples/repository-subscription-response-if-you-subscribe-to-the-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository-subscription',
              },
            },
          },
          description: 'if you subscribe to the repository',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          description: "Not Found if you don't subscribe to the repository",
        },
      },
      summary: 'Get a repository subscription',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
    put: {
      description:
        "If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#set-a-repository-subscription',
      },
      operationId: 'activity/set-repo-subscription',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  ignored: false,
                  subscribed: true,
                },
              },
            },
            schema: {
              properties: {
                ignored: {
                  description: 'Determines if all notifications should be blocked from this repository.',
                  type: 'boolean',
                },
                subscribed: {
                  description: 'Determines if notifications should be received from this repository.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-subscription',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository-subscription',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Set a repository subscription',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
  },
  '/repos/{owner}/{repo}/tags': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repository-tags',
      },
      operationId: 'repos/list-tags',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/tag',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository tags',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/tags/protection': {
    get: {
      description:
        'This returns the tag protection states of a repository.\n\nThis information is only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-tag-protection-state-of-a-repository',
      },
      operationId: 'repos/list-tag-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-protection-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/tag-protection',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List tag protection states for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'tags',
      },
    },
    post: {
      description:
        'This creates a tag protection state for a repository.\nThis endpoint is only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-tag-protection-state-for-a-repository',
      },
      operationId: 'repos/create-tag-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  pattern: 'v1.*',
                },
              },
            },
            schema: {
              properties: {
                pattern: {
                  description: 'An optional glob pattern to match against when enforcing tag protection.',
                  type: 'string',
                },
              },
              required: ['pattern'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/tag-protection',
                },
              },
              schema: {
                $ref: '#/components/schemas/tag-protection',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Create a tag protection state for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'tags',
      },
    },
  },
  '/repos/{owner}/{repo}/tags/protection/{tag_protection_id}': {
    delete: {
      description:
        'This deletes a tag protection state for a repository.\nThis endpoint is only available to repository administrators.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#delete-tag-protection-state-for-a-repository',
      },
      operationId: 'repos/delete-tag-protection',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/tag-protection-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a tag protection state for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'tags',
      },
    },
  },
  '/repos/{owner}/{repo}/tarball/{ref}': {
    get: {
      description:
        'Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n**Note**: For private repositories, these links are temporary and expire after five minutes.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#download-a-repository-archive',
      },
      operationId: 'repos/download-tarball-archive',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              example: 'https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Download a repository archive (tar)',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
  },
  '/repos/{owner}/{repo}/teams': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repository-teams',
      },
      operationId: 'repos/list-teams',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repository teams',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/topics': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#get-all-repository-topics',
      },
      operationId: 'repos/get-all-topics',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic',
                },
              },
              schema: {
                $ref: '#/components/schemas/topic',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get all repository topics',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#replace-all-repository-topics',
      },
      operationId: 'repos/replace-all-topics',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  names: ['octocat', 'atom', 'electron', 'api'],
                },
              },
            },
            schema: {
              properties: {
                names: {
                  description:
                    'An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              required: ['names'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic',
                },
              },
              schema: {
                $ref: '#/components/schemas/topic',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Replace all repository topics',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/traffic/clones': {
    get: {
      description:
        'Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/traffic#get-repository-clones',
      },
      operationId: 'repos/get-clones',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/clone-traffic',
                },
              },
              schema: {
                $ref: '#/components/schemas/clone-traffic',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get repository clones',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'traffic',
      },
    },
  },
  '/repos/{owner}/{repo}/traffic/popular/paths': {
    get: {
      description: 'Get the top 10 popular contents over the last 14 days.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/traffic#get-top-referral-paths',
      },
      operationId: 'repos/get-top-paths',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/content-traffic-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/content-traffic',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get top referral paths',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'traffic',
      },
    },
  },
  '/repos/{owner}/{repo}/traffic/popular/referrers': {
    get: {
      description: 'Get the top 10 referrers over the last 14 days.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/traffic#get-top-referral-sources',
      },
      operationId: 'repos/get-top-referrers',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/referrer-traffic-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/referrer-traffic',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get top referral sources',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'traffic',
      },
    },
  },
  '/repos/{owner}/{repo}/traffic/views': {
    get: {
      description:
        'Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/metrics/traffic#get-page-views',
      },
      operationId: 'repos/get-views',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          $ref: '#/components/parameters/per',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/view-traffic',
                },
              },
              schema: {
                $ref: '#/components/schemas/view-traffic',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get page views',
      tags: ['repos'],
      'x-github': {
        category: 'metrics',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'traffic',
      },
    },
  },
  '/repos/{owner}/{repo}/transfer': {
    post: {
      description:
        'A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#transfer-a-repository',
      },
      operationId: 'repos/transfer',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  new_name: 'octorepo',
                  new_owner: 'github',
                  team_ids: [12, 345],
                },
              },
            },
            schema: {
              properties: {
                new_name: {
                  description: 'The new name to be given to the repository.',
                  type: 'string',
                },
                new_owner: {
                  description: 'The username or organization name the repository will be transferred to.',
                  type: 'string',
                },
                team_ids: {
                  description:
                    'ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['new_owner'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/minimal-repository',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Transfer a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/vulnerability-alerts': {
    delete: {
      description:
        'Disables dependency alerts and the dependency graph for a repository.\nThe authenticated user must have admin access to the repository. For more information,\nsee "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts',
      },
      operationId: 'repos/disable-vulnerability-alerts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Disable vulnerability alerts',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository',
      },
      operationId: 'repos/check-vulnerability-alerts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response if repository is enabled with vulnerability alerts',
        },
        '404': {
          description: 'Not Found if repository is not enabled with vulnerability alerts',
        },
      },
      summary: 'Check if vulnerability alerts are enabled for a repository',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    put: {
      description:
        'Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts',
      },
      operationId: 'repos/enable-vulnerability-alerts',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Enable vulnerability alerts',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repos/{owner}/{repo}/zipball/{ref}': {
    get: {
      description:
        'Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually\n`main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe `Location` header to make a second `GET` request.\n\n**Note**: For private repositories, these links are temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the redirect.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#download-a-repository-archive',
      },
      operationId: 'repos/download-zipball-archive',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
        {
          in: 'path',
          name: 'ref',
          required: true,
          schema: {
            type: 'string',
          },
          'x-multi-segment': true,
        },
      ],
      responses: {
        '302': {
          description: 'Response',
          headers: {
            Location: {
              example: 'https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Download a repository archive (zip)',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'contents',
      },
    },
  },
  '/repos/{template_owner}/{template_repo}/generate': {
    post: {
      description:
        "Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template',
      },
      operationId: 'repos/create-using-template',
      parameters: [
        {
          in: 'path',
          name: 'template_owner',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          in: 'path',
          name: 'template_repo',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repository',
                  include_all_branches: false,
                  name: 'Hello-World',
                  owner: 'octocat',
                  private: false,
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'A short description of the new repository.',
                  type: 'string',
                },
                include_all_branches: {
                  default: false,
                  description:
                    'Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.',
                  type: 'boolean',
                },
                name: {
                  description: 'The name of the new repository.',
                  type: 'string',
                },
                owner: {
                  description:
                    'The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.',
                  type: 'string',
                },
                private: {
                  default: false,
                  description:
                    'Either `true` to create a new private repository or `false` to create a new public one.',
                  type: 'boolean',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-3',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World',
              schema: {
                type: 'string',
              },
            },
          },
        },
      },
      summary: 'Create a repository using a template',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repositories': {
    get: {
      description:
        'Lists all public repositories in the order that they were created.\n\nNote:\n- For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.\n- Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-public-repositories',
      },
      operationId: 'repos/list-public',
      parameters: [
        {
          $ref: '#/components/parameters/since-repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/public-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              example: '<https://api.github.com/repositories?since=364>; rel="next"',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List public repositories',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/repositories/{repository_id}/environments/{environment_name}/secrets': {
    get: {
      description:
        'Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#list-environment-secrets',
      },
      operationId: 'actions/list-environment-secrets',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/actions-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List environment secrets',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key': {
    get: {
      description:
        'Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-an-environment-public-key',
      },
      operationId: 'actions/get-environment-public-key',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an environment public key',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}': {
    delete: {
      description:
        'Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#delete-an-environment-secret',
      },
      operationId: 'actions/delete-environment-secret',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Default response',
        },
      },
      summary: 'Delete an environment secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        'Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#get-an-environment-secret',
      },
      operationId: 'actions/get-environment-secret',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an environment secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates an environment secret with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access\ntoken with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use\nthis endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret',
      },
      operationId: 'actions/create-or-update-environment-secret',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
              },
              required: ['encrypted_value', 'key_id'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response when creating a secret',
        },
        '204': {
          description: 'Response when updating a secret',
        },
      },
      summary: 'Create or update an environment secret',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/repositories/{repository_id}/environments/{environment_name}/variables': {
    get: {
      description:
        'Lists all environment variables. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#list-environment-variables',
      },
      operationId: 'actions/list-environment-variables',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/variables-per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variables-paginated',
                },
              },
              schema: {
                properties: {
                  total_count: {
                    type: 'integer',
                  },
                  variables: {
                    items: {
                      $ref: '#/components/schemas/actions-variable',
                    },
                    type: 'array',
                  },
                },
                required: ['total_count', 'variables'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List environment variables',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    post: {
      description:
        'Create an environment variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#create-an-environment-variable',
      },
      operationId: 'actions/create-environment-variable',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  value: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
              },
              required: ['name', 'value'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create an environment variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/repositories/{repository_id}/environments/{environment_name}/variables/{name}': {
    delete: {
      description:
        'Deletes an environment variable using the variable name.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#delete-an-environment-variable',
      },
      operationId: 'actions/delete-environment-variable',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete an environment variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    get: {
      description:
        'Gets a specific variable in an environment. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `environments:read` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#get-an-environment-variable',
      },
      operationId: 'actions/get-environment-variable',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-variable',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-variable',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get an environment variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
    patch: {
      description:
        'Updates an environment variable that you can reference in a GitHub Actions workflow.\nYou must authenticate using an access token with the `repo` scope to use this endpoint.\nGitHub Apps must have the `environment:write` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/actions/variables#update-an-environment-variable',
      },
      operationId: 'actions/update-environment-variable',
      parameters: [
        {
          $ref: '#/components/parameters/repository-id',
        },
        {
          $ref: '#/components/parameters/variable-name',
        },
        {
          $ref: '#/components/parameters/environment-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  name: 'USERNAME',
                  value: 'octocat',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'The name of the variable.',
                  type: 'string',
                },
                value: {
                  description: 'The value of the variable.',
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Update an environment variable',
      tags: ['actions'],
      'x-github': {
        category: 'actions',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'variables',
      },
    },
  },
  '/search/code': {
    get: {
      description:
        "Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:\n\n`q=addClass+in:file+language:js+repo:jquery/jquery`\n\nThis query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.\n\n#### Considerations for code search\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing\nlanguage:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-code',
      },
      operationId: 'search/code',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers.',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['indexed'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/code-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/code-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Search code',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/commits': {
    get: {
      description:
        'Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match\nmetadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:\n\n`q=repo:octocat/Spoon-Knife+css`',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-commits',
      },
      operationId: 'search/commits',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers.',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['author-date', 'committer-date'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/commit-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/commit-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Search commits',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/issues': {
    get: {
      description:
        'Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted\nsearch results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\n`q=windows+label:bug+language:python+state:open&sort=created&order=asc`\n\nThis query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.\n\n**Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can\'t retrieve a combination of issues and pull requests in a single query. Requests that don\'t include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-issues-and-pull-requests',
      },
      operationId: 'search/issues-and-pull-requests',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers.',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: [
              'comments',
              'reactions',
              'reactions-+1',
              'reactions--1',
              'reactions-smile',
              'reactions-thinking_face',
              'reactions-heart',
              'reactions-tada',
              'interactions',
              'created',
              'updated',
            ],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/issue-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Search issues and pull requests',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/labels': {
    get: {
      description:
        'Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\n`q=bug+defect+enhancement&repository_id=64778136`\n\nThe labels that best match the query appear first in the search results.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-labels',
      },
      operationId: 'search/labels',
      parameters: [
        {
          description: 'The id of the repository.',
          in: 'query',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
        {
          description:
            'The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['created', 'updated'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/label-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/label-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Search labels',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/repositories': {
    get: {
      description:
        'Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:\n\n`q=tetris+language:assembly&sort=stars&order=desc`\n\nThis query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-repositories',
      },
      operationId: 'search/repos',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers.',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['stars', 'forks', 'help-wanted-issues', 'updated'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/repo-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Search repositories',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/topics': {
    get: {
      description:
        'Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.\n\nWhen searching for topics, you can get text match metadata for the topic\'s **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:\n\n`q=ruby+is:featured`\n\nThis query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-topics',
      },
      operationId: 'search/topics',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query).',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/topic-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/topic-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'Search topics',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/search/users': {
    get: {
      description:
        "Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).\n\nFor example, if you're looking for a list of popular users, you might try this query:\n\n`q=tom+repos:%3E42+followers:%3E1000`\n\nThis query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/search#search-users',
      },
      operationId: 'search/users',
      parameters: [
        {
          description:
            'The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers.',
          in: 'query',
          name: 'q',
          required: true,
          schema: {
            type: 'string',
          },
        },
        {
          description:
            'Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results)',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            enum: ['followers', 'repositories', 'joined'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/order',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-search-result-item-paginated',
                },
              },
              schema: {
                properties: {
                  incomplete_results: {
                    type: 'boolean',
                  },
                  items: {
                    items: {
                      $ref: '#/components/schemas/user-search-result-item',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'incomplete_results', 'items'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Search users',
      tags: ['search'],
      'x-github': {
        category: 'search',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}': {
    delete: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.\n\nTo delete a team, the authenticated user must be an organization owner or team maintainer.\n\nIf you are an organization owner, deleting a parent team will delete all of its child teams as well.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#delete-a-team-legacy',
      },
      operationId: 'teams/delete-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete a team (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#get-a-team-legacy',
      },
      operationId: 'teams/get-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a team (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    patch: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.\n\nTo edit a team, the authenticated user must either be an organization owner or a team maintainer.\n\n**Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#update-a-team-legacy',
      },
      operationId: 'teams/update-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'new team description',
                  name: 'new team name',
                  privacy: 'closed',
                },
              },
            },
            schema: {
              properties: {
                description: {
                  description: 'The description of the team.',
                  type: 'string',
                },
                name: {
                  description: 'The name of the team.',
                  type: 'string',
                },
                parent_team_id: {
                  description: 'The ID of a team to set as the parent team.',
                  nullable: true,
                  type: 'integer',
                },
                permission: {
                  default: 'pull',
                  description:
                    '**Deprecated**. The permission that new repositories will be added to the team with when none is specified.',
                  enum: ['pull', 'push', 'admin'],
                  type: 'string',
                },
                privacy: {
                  description:
                    'The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n * `secret` - only visible to organization owners and members of this team.  \n * `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n * `closed` - visible to all members of this organization.',
                  enum: ['secret', 'closed'],
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response when the updated information already exists',
        },
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-full',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update a team (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/discussions': {
    get: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.\n\nList all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-discussions-legacy',
      },
      operationId: 'teams/list-discussions-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List discussions (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussions',
      },
    },
    post: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.\n\nCreates a new discussion post on a team\'s page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-legacy',
      },
      operationId: 'teams/create-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Hi! This is an area for us to collaborate as a team.',
                  title: 'Our first team post',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.",
                  type: 'string',
                },
                private: {
                  default: false,
                  description:
                    'Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.',
                  type: 'boolean',
                },
                title: {
                  description: "The discussion post's title.",
                  type: 'string',
                },
              },
              required: ['title', 'body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a discussion (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussions',
        triggersNotification: true,
      },
    },
  },
  '/teams/{team_id}/discussions/{discussion_number}': {
    delete: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.\n\nDelete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy',
      },
      operationId: 'teams/delete-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a discussion (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussions',
      },
    },
    get: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.\n\nGet a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-legacy',
      },
      operationId: 'teams/get-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a discussion (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussions',
      },
    },
    patch: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.\n\nEdits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-legacy',
      },
      operationId: 'teams/update-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  title: 'Welcome to our first team post',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion post's body text.",
                  type: 'string',
                },
                title: {
                  description: "The discussion post's title.",
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a discussion (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussions',
      },
    },
  },
  '/teams/{team_id}/discussions/{discussion_number}/comments': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.\n\nList all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy',
      },
      operationId: 'teams/list-discussion-comments-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-discussion-comment',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List discussion comments (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussion-comments',
      },
    },
    post: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.\n\nCreates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).\n\nThis endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy',
      },
      operationId: 'teams/create-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like apples?',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.",
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create a discussion comment (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussion-comments',
        triggersNotification: true,
      },
    },
  },
  '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}': {
    delete: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.\n\nDeletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy',
      },
      operationId: 'teams/delete-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a discussion comment (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussion-comments',
      },
    },
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.\n\nGet a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy',
      },
      operationId: 'teams/get-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a discussion comment (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussion-comments',
      },
    },
    patch: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.\n\nEdits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy',
      },
      operationId: 'teams/update-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  body: 'Do you like pineapples?',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: "The discussion comment's body text.",
                  type: 'string',
                },
              },
              required: ['body'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-discussion-comment-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-discussion-comment',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Update a discussion comment (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'discussion-comments',
      },
    },
  },
  '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.\n\nList the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy',
      },
      operationId: 'reactions/list-for-team-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List reactions for a team discussion comment (Legacy)',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        deprecationDate: '2020-02-26',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-21',
        subcategory: null,
      },
    },
    post: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.\n\nCreate a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy',
      },
      operationId: 'reactions/create-for-team-discussion-comment-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          $ref: '#/components/parameters/comment-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create reaction for a team discussion comment (Legacy)',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        deprecationDate: '2020-02-26',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-21',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/discussions/{discussion_number}/reactions': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.\n\nList the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy',
      },
      operationId: 'reactions/list-for-team-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
        {
          description:
            'Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.',
          in: 'query',
          name: 'content',
          required: false,
          schema: {
            enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/reaction',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List reactions for a team discussion (Legacy)',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        deprecationDate: '2020-02-26',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-21',
        subcategory: null,
      },
    },
    post: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.\n\nCreate a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy',
      },
      operationId: 'reactions/create-for-team-discussion-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/discussion-number',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  content: 'heart',
                },
              },
            },
            schema: {
              properties: {
                content: {
                  description:
                    'The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.',
                  enum: ['+1', '-1', 'laugh', 'confused', 'heart', 'hooray', 'rocket', 'eyes'],
                  type: 'string',
                },
              },
              required: ['content'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/reaction',
                },
              },
              schema: {
                $ref: '#/components/schemas/reaction',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Create reaction for a team discussion (Legacy)',
      tags: ['reactions'],
      'x-github': {
        category: 'reactions',
        deprecationDate: '2020-02-26',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        removalDate: '2021-02-21',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/invitations': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.\n\nThe return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy',
      },
      operationId: 'teams/list-pending-invitations-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List pending team invitations (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
  },
  '/teams/{team_id}/members': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.\n\nTeam members will include the members of child teams.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-team-members-legacy',
      },
      operationId: 'teams/list-members-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          description: 'Filters members returned by their role in the team.',
          in: 'query',
          name: 'role',
          required: false,
          schema: {
            default: 'all',
            enum: ['member', 'maintainer', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List team members (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
  },
  '/teams/{team_id}/members/{username}': {
    delete: {
      deprecated: true,
      description:
        "The \"Remove team member\" endpoint (described below) is deprecated.\n\nWe recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#remove-team-member-legacy',
      },
      operationId: 'teams/remove-member-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          description: 'Not Found if team synchronization is setup',
        },
      },
      summary: 'Remove team member (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
    get: {
      deprecated: true,
      description:
        'The "Get team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.\n\nTo list members in a team, the team must be visible to the authenticated user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-team-member-legacy',
      },
      operationId: 'teams/get-member-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'if user is a member',
        },
        '404': {
          description: 'if user is not a member',
        },
      },
      summary: 'Get team member (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
    put: {
      deprecated: true,
      description:
        'The "Add team member" endpoint (described below) is deprecated.\n\nWe recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they\'re changing. The person being added to the team must be a member of the team\'s organization.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nNote that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#add-team-member-legacy',
      },
      operationId: 'teams/add-member-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          description: 'Not Found if team synchronization is set up',
        },
        '422': {
          description:
            'Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization',
        },
      },
      summary: 'Add team member (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
  },
  '/teams/{team_id}/memberships/{username}': {
    delete: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nTo remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.\n\n**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/).\"",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy',
      },
      operationId: 'teams/remove-membership-for-user-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          description: 'if team synchronization is set up',
        },
      },
      summary: 'Remove team membership for a user (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
    get: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.\n\nTeam members will include the members of child teams.\n\nTo get a user's membership with a team, the team must be visible to the authenticated user.\n\n**Note:**\nThe response contains the `state` of the membership and the member's `role`.\n\nThe `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy',
      },
      operationId: 'teams/get-membership-for-user-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-user-is-a-team-maintainer': {
                  $ref: '#/components/examples/team-membership-response-if-user-is-a-team-maintainer',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-membership',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get team membership for a user (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
    put: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.\n\nTeam synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub\'s products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.\n\nIf the user is already a member of the team\'s organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.\n\n**Note:** When you have team synchronization set up for a team with your organization\'s identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team\'s membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."\n\nIf the user is unaffiliated with the team\'s organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.\n\nIf the user is already a member of the team, this endpoint will update the role of the team member\'s role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy',
      },
      operationId: 'teams/add-or-update-membership-for-user-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Assign the member role for a user in a team',
                value: {
                  role: 'member',
                },
              },
            },
            schema: {
              properties: {
                role: {
                  default: 'member',
                  description: 'The role that this user should have in the team.',
                  enum: ['member', 'maintainer'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-users-membership-with-team-is-now-pending': {
                  $ref: '#/components/examples/team-membership-response-if-users-membership-with-team-is-now-pending',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          description: 'Forbidden if team synchronization is set up',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          description: 'Unprocessable Entity if you attempt to add an organization to a team',
        },
      },
      summary: 'Add or update team membership for a user (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: 'members',
      },
    },
  },
  '/teams/{team_id}/projects': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.\n\nLists the organization projects for a team.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#list-team-projects-legacy',
      },
      operationId: 'teams/list-projects-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-project',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List team projects (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/projects/{project_id}': {
    delete: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.\n\nRemoves an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy',
      },
      operationId: 'teams/remove-project-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Remove a project from a team (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.\n\nChecks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy',
      },
      operationId: 'teams/check-permissions-for-project-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-project',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-project',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          description: 'Not Found if project is not managed by this team',
        },
      },
      summary: 'Check team permissions for a project (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    put: {
      deprecated: true,
      description:
        "**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.\n\nAdds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy',
      },
      operationId: 'teams/add-or-update-project-permissions-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/project-id',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of setting permission to read',
                value: {
                  permission: 'read',
                },
              },
            },
            schema: {
              properties: {
                permission: {
                  description:
                    'The permission to grant to the team for this project. Default: the team\'s `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
                  enum: ['read', 'write', 'admin'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          content: {
            'application/json': {
              examples: {
                'response-if-the-project-is-not-owned-by-the-organization': {
                  value: {
                    documentation_url:
                      'https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions',
                    message: 'Must have admin rights to Repository.',
                  },
                },
              },
              schema: {
                properties: {
                  documentation_url: {
                    type: 'string',
                  },
                  message: {
                    type: 'string',
                  },
                },
                type: 'object',
              },
            },
          },
          description: 'Forbidden if the project is not owned by the organization',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add or update team project permissions (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/repos': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy',
      },
      operationId: 'teams/list-repos-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List team repositories (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/repos/{owner}/{repo}': {
    delete: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.\n\nIf the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy',
      },
      operationId: 'teams/remove-repo-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove a repository from a team (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    get: {
      deprecated: true,
      description:
        '**Note**: Repositories inherited through a parent team will also be checked.\n\n**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.\n\nYou can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy',
      },
      operationId: 'teams/check-permissions-for-repo-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'alternative-response-with-extra-repository-information': {
                  $ref: '#/components/examples/team-repository-alternative-response-with-extra-repository-information',
                },
              },
              schema: {
                $ref: '#/components/schemas/team-repository',
              },
            },
          },
          description: 'Alternative response with extra repository information',
        },
        '204': {
          description: 'Response if repository is managed by this team',
        },
        '404': {
          description: 'Not Found if repository is not managed by this team',
        },
      },
      summary: 'Check team permissions for a repository (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
    put: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.\n\nTo add a repository to a team or update the team\'s permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.\n\nNote that, if you choose not to pass any parameters, you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions-legacy',
      },
      operationId: 'teams/add-or-update-repo-permissions-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of setting permission to pull',
                value: {
                  permission: 'push',
                },
              },
            },
            schema: {
              properties: {
                permission: {
                  description:
                    "The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
                  enum: ['pull', 'push', 'admin'],
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add or update team repository permissions (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/teams/{team_id}/teams': {
    get: {
      deprecated: true,
      description:
        '**Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams/#list-child-teams-legacy',
      },
      operationId: 'teams/list-child-legacy',
      parameters: [
        {
          $ref: '#/components/parameters/team-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-if-child-teams-exist': {
                  $ref: '#/components/examples/team-items-response-if-child-teams-exist',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team',
                },
                type: 'array',
              },
            },
          },
          description: 'if child teams exist',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List child teams (Legacy)',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        deprecationDate: '2020-01-21',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        removalDate: '2021-02-01',
        subcategory: null,
      },
    },
  },
  '/user': {
    get: {
      description:
        'If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.\n\nIf the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-the-authenticated-user',
      },
      operationId: 'users/get-authenticated',
      parameters: [],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'response-with-public-and-private-profile-information': {
                  $ref: '#/components/examples/private-user-response-with-public-and-private-profile-information',
                },
                'response-with-public-profile-information': {
                  $ref: '#/components/examples/private-user-response-with-public-profile-information',
                },
              },
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/private-user',
                  },
                  {
                    $ref: '#/components/schemas/public-user',
                  },
                ],
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Get the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        '**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users/#update-the-authenticated-user',
      },
      operationId: 'users/update-authenticated',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example of updating blog and name',
                value: {
                  blog: 'https://github.com/blog',
                  name: 'monalisa octocat',
                },
              },
            },
            schema: {
              properties: {
                bio: {
                  description: 'The new short biography of the user.',
                  type: 'string',
                },
                blog: {
                  description: 'The new blog URL of the user.',
                  example: 'blog.example.com',
                  type: 'string',
                },
                company: {
                  description: 'The new company of the user.',
                  example: 'Acme corporation',
                  type: 'string',
                },
                email: {
                  description: 'The publicly visible email address of the user.',
                  example: 'omar@example.com',
                  type: 'string',
                },
                hireable: {
                  description: 'The new hiring availability of the user.',
                  type: 'boolean',
                },
                location: {
                  description: 'The new location of the user.',
                  example: 'Berlin, Germany',
                  type: 'string',
                },
                name: {
                  description: 'The new name of the user.',
                  example: 'Omar Jahandar',
                  type: 'string',
                },
                twitter_username: {
                  description: 'The new Twitter username of the user.',
                  example: 'therealomarj',
                  nullable: true,
                  type: 'string',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/private-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/private-user',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/blocks': {
    get: {
      description: "List the users you've blocked on your personal account.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user',
      },
      operationId: 'users/list-blocked-by-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List users blocked by the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
  },
  '/user/blocks/{username}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#unblock-a-user',
      },
      operationId: 'users/unblock',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unblock a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user',
      },
      operationId: 'users/check-blocked',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'If the user is blocked',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'If the user is not blocked',
        },
      },
      summary: 'Check if a user is blocked by the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
    put: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#block-a-user',
      },
      operationId: 'users/block',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Block a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'blocking',
      },
    },
  },
  '/user/codespaces': {
    get: {
      description:
        "Lists the authenticated user's codespaces.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-codespaces-for-the-authenticated-user',
      },
      operationId: 'codespaces/list-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/repository-id-in-query',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-list',
                },
              },
              schema: {
                properties: {
                  codespaces: {
                    items: {
                      $ref: '#/components/schemas/codespace',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'codespaces'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List codespaces for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates a new codespace, owned by the authenticated user.\n\nThis endpoint requires either a `repository_id` OR a `pull_request` but not both.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/create-for-authenticated-user',
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  location: 'WestUs2',
                  ref: 'main',
                  repository_id: 1,
                },
              },
            },
            schema: {
              oneOf: [
                {
                  properties: {
                    client_ip: {
                      description: 'IP for location auto-detection when proxying a request',
                      type: 'string',
                    },
                    devcontainer_path: {
                      description: 'Path to devcontainer.json config to use for this codespace',
                      type: 'string',
                    },
                    display_name: {
                      description: 'Display name for this codespace',
                      type: 'string',
                    },
                    idle_timeout_minutes: {
                      description: 'Time in minutes before codespace stops from inactivity',
                      type: 'integer',
                    },
                    location: {
                      description: 'Location for this codespace. Assigned by IP if not provided',
                      type: 'string',
                    },
                    machine: {
                      description: 'Machine type to use for this codespace',
                      type: 'string',
                    },
                    multi_repo_permissions_opt_out: {
                      description: 'Whether to authorize requested permissions from devcontainer.json',
                      type: 'boolean',
                    },
                    ref: {
                      description: 'Git ref (typically a branch name) for this codespace',
                      type: 'string',
                    },
                    repository_id: {
                      description: 'Repository id for this codespace',
                      type: 'integer',
                    },
                    retention_period_minutes: {
                      description:
                        'Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).',
                      type: 'integer',
                    },
                    working_directory: {
                      description: 'Working directory for this codespace',
                      type: 'string',
                    },
                  },
                  required: ['repository_id'],
                  type: 'object',
                },
                {
                  properties: {
                    devcontainer_path: {
                      description: 'Path to devcontainer.json config to use for this codespace',
                      type: 'string',
                    },
                    idle_timeout_minutes: {
                      description: 'Time in minutes before codespace stops from inactivity',
                      type: 'integer',
                    },
                    location: {
                      description: 'Location for this codespace. Assigned by IP if not provided',
                      type: 'string',
                    },
                    machine: {
                      description: 'Machine type to use for this codespace',
                      type: 'string',
                    },
                    pull_request: {
                      description: 'Pull request number for this codespace',
                      properties: {
                        pull_request_number: {
                          description: 'Pull request number',
                          type: 'integer',
                        },
                        repository_id: {
                          description: 'Repository id for this codespace',
                          type: 'integer',
                        },
                      },
                      required: ['pull_request_number', 'repository_id'],
                      type: 'object',
                    },
                    working_directory: {
                      description: 'Working directory for this codespace',
                      type: 'string',
                    },
                  },
                  required: ['pull_request'],
                  type: 'object',
                },
              ],
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace was successfully created',
        },
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response when the codespace creation partially failed but is being retried in the background',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '503': {
          $ref: '#/components/responses/service_unavailable',
        },
      },
      summary: 'Create a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/secrets': {
    get: {
      description:
        "Lists all secrets available for a user's Codespaces without revealing their\nencrypted values.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-secrets-for-the-authenticated-user',
      },
      operationId: 'codespaces/list-secrets-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repo-codespaces-secret-paginated',
                },
              },
              schema: {
                properties: {
                  secrets: {
                    items: {
                      $ref: '#/components/schemas/codespaces-secret',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'secrets'],
                type: 'object',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List secrets for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/user/codespaces/secrets/public-key': {
    get: {
      description:
        'Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-public-key-for-the-authenticated-user',
      },
      operationId: 'codespaces/get-public-key-for-authenticated-user',
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespaces-user-public-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespaces-user-public-key',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get public key for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/user/codespaces/secrets/{secret_name}': {
    delete: {
      description:
        "Deletes a secret from a user's codespaces using the secret name. Deleting the secret will remove access from all codespaces that were allowed to access the secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-secret-for-the-authenticated-user',
      },
      operationId: 'codespaces/delete-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Delete a secret for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    get: {
      description:
        "Gets a secret available to a user's codespaces without revealing its encrypted value.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-secret-for-the-authenticated-user',
      },
      operationId: 'codespaces/get-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-codespaces-secret',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespaces-secret',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a secret for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        'Creates or updates a secret for a user\'s codespace with an encrypted value. Encrypt your secret using\n[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages).\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must also have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.\n\n#### Example encrypting a secret using Node.js\n\nEncrypt your secret using the [libsodium-wrappers](https://www.npmjs.com/package/libsodium-wrappers) library.\n\n```\nconst sodium = require(\'libsodium-wrappers\')\nconst secret = \'plain-text-secret\' // replace with the secret you want to encrypt\nconst key = \'base64-encoded-public-key\' // replace with the Base64 encoded public key\n\n//Check if libsodium is ready and then proceed.\nsodium.ready.then(() => {\n  // Convert Secret & Base64 key to Uint8Array.\n  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)\n  let binsec = sodium.from_string(secret)\n\n  //Encrypt the secret using LibSodium\n  let encBytes = sodium.crypto_box_seal(binsec, binkey)\n\n  // Convert encrypted Uint8Array to Base64\n  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)\n\n  console.log(output)\n});\n```\n\n#### Example encrypting a secret using Python\n\nEncrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.\n\n```\nfrom base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  """Encrypt a Unicode string using the public key."""\n  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))\n  return b64encode(encrypted).decode("utf-8")\n```\n\n#### Example encrypting a secret using C#\n\nEncrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.\n\n```\nvar secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");\nvar publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n```\n\n#### Example encrypting a secret using Ruby\n\nEncrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.\n\n```ruby\nrequire "rbnacl"\nrequire "base64"\n\nkey = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt("my_secret")\n\n# Print the base64 encoded secret\nputs Base64.strict_encode64(encrypted_secret)\n```',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#create-or-update-a-secret-for-the-authenticated-user',
      },
      operationId: 'codespaces/create-or-update-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  encrypted_value: 'c2VjcmV0',
                  key_id: '012345678912345678',
                  selected_repository_ids: ['1234567', '2345678'],
                },
              },
            },
            schema: {
              properties: {
                encrypted_value: {
                  description:
                    'Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.',
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$',
                  type: 'string',
                },
                key_id: {
                  description: 'ID of the key you used to encrypt the secret.',
                  type: 'string',
                },
                selected_repository_ids: {
                  description:
                    'An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.',
                  items: {
                    anyOf: [
                      {
                        type: 'integer',
                      },
                      {
                        type: 'string',
                      },
                    ],
                  },
                  type: 'array',
                },
              },
              required: ['key_id'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: null,
                },
              },
              schema: {
                $ref: '#/components/schemas/empty-object',
              },
            },
          },
          description: 'Response after successfully creating a secret',
        },
        '204': {
          description: 'Response after successfully updating a secret',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create or update a secret for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/user/codespaces/secrets/{secret_name}/repositories': {
    get: {
      description:
        "List the repositories that have been granted the ability to use a user's codespace secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret',
      },
      operationId: 'codespaces/list-repositories-for-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/minimal-repository',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List selected repositories for a user secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        "Select the repositories that will use a user's codespace secret.\n\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on all referenced repositories to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret',
      },
      operationId: 'codespaces/set-repositories-for-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  selected_repository_ids: ['1296269', '1296280'],
                },
              },
            },
            schema: {
              properties: {
                selected_repository_ids: {
                  description:
                    'An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.',
                  items: {
                    type: 'integer',
                  },
                  type: 'array',
                },
              },
              required: ['selected_repository_ids'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '204': {
          description: 'No Content when repositories were added to the selected list',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Set selected repositories for a user secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}': {
    delete: {
      description:
        "Removes a repository from the selected repositories for a user's codespace secret.\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret',
      },
      operationId: 'codespaces/remove-repository-for-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'No Content when repository was removed from the selected list',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Remove a selected repository from a user secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
    put: {
      description:
        "Adds a repository to the selected repositories for a user's codespace secret.\nYou must authenticate using an access token with the `codespace` or `codespace:secrets` scope to use this endpoint. User must have Codespaces access to use this endpoint.\nGitHub Apps must have write access to the `codespaces_user_secrets` user permission and write access to the `codespaces_secrets` repository permission on the referenced repository to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret',
      },
      operationId: 'codespaces/add-repository-for-secret-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/secret-name',
        },
        {
          in: 'path',
          name: 'repository_id',
          required: true,
          schema: {
            type: 'integer',
          },
        },
      ],
      responses: {
        '204': {
          description: 'No Content when repository was added to the selected list',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Add a selected repository to a user secret',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'secrets',
      },
    },
  },
  '/user/codespaces/{codespace_name}': {
    delete: {
      description:
        "Deletes a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#delete-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/delete-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '202': {
          $ref: '#/components/responses/accepted',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Delete a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        "Gets information about a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#get-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/get-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Get a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    patch: {
      description:
        "Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can be modified using this endpoint.\n\nIf you specify a new machine type it will be applied the next time your codespace is started.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#update-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/update-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  machine: 'standardLinux',
                },
              },
            },
            schema: {
              properties: {
                display_name: {
                  description: 'Display name for this codespace',
                  type: 'string',
                },
                machine: {
                  description: 'A valid machine to transition this codespace to.',
                  type: 'string',
                },
                recent_folders: {
                  description:
                    'Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.',
                  items: {
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              type: 'object',
            },
          },
        },
        required: false,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Update a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/{codespace_name}/exports': {
    post: {
      description:
        "Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be monitored.\n\nIf changes cannot be pushed to the codespace's repository, they will be pushed to a new or previously-existing fork instead.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/export-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '202': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-export-details',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace-export-details',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Export a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/{codespace_name}/exports/{export_id}': {
    get: {
      description:
        'Gets information about an export of a codespace.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export',
      },
      operationId: 'codespaces/get-export-details-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
        {
          $ref: '#/components/parameters/export-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-export-details',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace-export-details',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get details about a codespace export',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/{codespace_name}/machines': {
    get: {
      description:
        'List the machine types a codespace can transition to use.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have read access to the `codespaces_metadata` repository permission to use this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#list-machine-types-for-a-codespace',
      },
      operationId: 'codespaces/codespace-machines-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-machines-list',
                },
              },
              schema: {
                properties: {
                  machines: {
                    items: {
                      $ref: '#/components/schemas/codespace-machine',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'machines'],
                type: 'object',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'List machine types for a codespace',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'machines',
      },
    },
  },
  '/user/codespaces/{codespace_name}/publish': {
    post: {
      description:
        "Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.\n\nThe codespace's token is granted write permissions to the repository, allowing the user to push their changes.\n\nThis will fail for a codespace that is already published, meaning it has an associated repository.\n\nYou must authenticate using a personal access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace',
      },
      operationId: 'codespaces/publish-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  private: false,
                  repository: 'monalisa-octocat-hello-world-g4wpq6h95q',
                },
              },
            },
            schema: {
              properties: {
                name: {
                  description: 'A name for the new repository.',
                  type: 'string',
                },
                private: {
                  default: false,
                  description: 'Whether the new repository should be private.',
                  type: 'boolean',
                },
              },
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace-with-full-repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace-with-full-repository',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a repository from an unpublished codespace',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/{codespace_name}/start': {
    post: {
      description:
        "Starts a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#start-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/start-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '402': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Payment required',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Start a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/codespaces/{codespace_name}/stop': {
    post: {
      description:
        "Stops a user's codespace.\n\nYou must authenticate using an access token with the `codespace` scope to use this endpoint.\n\nGitHub Apps must have write access to the `codespaces_lifecycle_admin` repository permission to use this endpoint.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/codespaces#stop-a-codespace-for-the-authenticated-user',
      },
      operationId: 'codespaces/stop-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/codespace-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/codespace',
                },
              },
              schema: {
                $ref: '#/components/schemas/codespace',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '500': {
          $ref: '#/components/responses/internal_error',
        },
      },
      summary: 'Stop a codespace for the authenticated user',
      tags: ['codespaces'],
      'x-github': {
        category: 'codespaces',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/email/visibility': {
    patch: {
      description: 'Sets the visibility for your primary email addresses.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user',
      },
      operationId: 'users/set-primary-email-visibility-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example setting the primary email address to private',
                value: {
                  visibility: 'private',
                },
              },
            },
            schema: {
              properties: {
                visibility: {
                  description: 'Denotes whether an email is publicly visible.',
                  enum: ['public', 'private'],
                  type: 'string',
                },
              },
              required: ['visibility'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-3',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/email',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set primary email visibility for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'emails',
      },
    },
  },
  '/user/emails': {
    delete: {
      description: 'This endpoint is accessible with the `user` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user',
      },
      operationId: 'users/delete-email-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example deleting multiple email accounts',
                value: {
                  emails: ['octocat@github.com', 'mona@github.com'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  description:
                    'Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.',
                  example: {
                    emails: ['octocat@github.com', 'mona@github.com'],
                  },
                  properties: {
                    emails: {
                      description: 'Email addresses associated with the GitHub user account.',
                      items: {
                        example: 'username@example.com',
                        minItems: 1,
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['emails'],
                  type: 'object',
                },
                {
                  items: {
                    example: 'username@example.com',
                    minItems: 1,
                    type: 'string',
                  },
                  type: 'array',
                },
                {
                  type: 'string',
                },
              ],
            },
          },
        },
      },
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete an email address for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'emails',
      },
    },
    get: {
      description:
        'Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user',
      },
      operationId: 'users/list-emails-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/email',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List email addresses for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'emails',
      },
    },
    post: {
      description: 'This endpoint is accessible with the `user` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user',
      },
      operationId: 'users/add-email-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Example adding multiple email addresses',
                value: {
                  emails: ['octocat@github.com', 'mona@github.com', 'octocat@octocat.org'],
                },
              },
            },
            schema: {
              oneOf: [
                {
                  example: {
                    emails: ['octocat@github.com', 'mona@github.com'],
                  },
                  properties: {
                    emails: {
                      description:
                        'Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.',
                      example: [],
                      items: {
                        example: 'username@example.com',
                        minItems: 1,
                        type: 'string',
                      },
                      type: 'array',
                    },
                  },
                  required: ['emails'],
                  type: 'object',
                },
                {
                  items: {
                    example: 'username@example.com',
                    minItems: 1,
                    type: 'string',
                  },
                  type: 'array',
                },
                {
                  type: 'string',
                },
              ],
            },
          },
        },
        required: false,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/email',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Add an email address for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'emails',
      },
    },
  },
  '/user/followers': {
    get: {
      description: 'Lists the people following the authenticated user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user',
      },
      operationId: 'users/list-followers-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List followers of the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/user/following': {
    get: {
      description: 'Lists the people who the authenticated user follows.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows',
      },
      operationId: 'users/list-followed-by-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List the people the authenticated user follows',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/user/following/{username}': {
    delete: {
      description:
        'Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#unfollow-a-user',
      },
      operationId: 'users/unfollow',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unfollow a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user',
      },
      operationId: 'users/check-person-is-followed-by-authenticated',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'if the person is followed by the authenticated user',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'if the person is not followed by the authenticated user',
        },
      },
      summary: 'Check if a person is followed by the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
    put: {
      description:
        'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."\n\nFollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#follow-a-user',
      },
      operationId: 'users/follow',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Follow a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/user/gpg_keys': {
    get: {
      description:
        "Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user',
      },
      operationId: 'users/list-gpg-keys-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/gpg-key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List GPG keys for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'gpg-keys',
      },
    },
    post: {
      description:
        "Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user',
      },
      operationId: 'users/create-gpg-key-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  armored_public_key:
                    '-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1\n\nmQINBFnZ2ZIBEADQ2Z7Z7\n-----END PGP PUBLIC KEY BLOCK-----',
                  name: "Octocat's GPG Key",
                },
              },
            },
            schema: {
              properties: {
                armored_public_key: {
                  description: 'A GPG key in ASCII-armored format.',
                  type: 'string',
                },
                name: {
                  description: 'A descriptive name for the new key.',
                  type: 'string',
                },
              },
              required: ['armored_public_key'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/gpg-key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a GPG key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'gpg-keys',
      },
    },
  },
  '/user/gpg_keys/{gpg_key_id}': {
    delete: {
      description:
        "Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user',
      },
      operationId: 'users/delete-gpg-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/gpg-key-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Delete a GPG key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'gpg-keys',
      },
    },
    get: {
      description:
        'View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user',
      },
      operationId: 'users/get-gpg-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/gpg-key-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/gpg-key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a GPG key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'gpg-keys',
      },
    },
  },
  '/user/installations': {
    get: {
      description:
        'Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou can find the permissions for the installation under the `permissions` key.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token',
      },
      operationId: 'apps/list-installations-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-installation-for-auth-user-paginated',
                },
              },
              schema: {
                properties: {
                  installations: {
                    items: {
                      $ref: '#/components/schemas/installation',
                    },
                    type: 'array',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'installations'],
                type: 'object',
              },
            },
          },
          description: 'You can find the permissions for the installation under the `permissions` key.',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List app installations accessible to the user access token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
  },
  '/user/installations/{installation_id}/repositories': {
    get: {
      description:
        'List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.\n\nYou must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.\n\nThe access the user has to each repository is included in the hash under the `permissions` key.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token',
      },
      operationId: 'apps/list-installation-repos-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-paginated',
                },
              },
              schema: {
                properties: {
                  repositories: {
                    items: {
                      $ref: '#/components/schemas/repository',
                    },
                    type: 'array',
                  },
                  repository_selection: {
                    type: 'string',
                  },
                  total_count: {
                    type: 'integer',
                  },
                },
                required: ['total_count', 'repositories'],
                type: 'object',
              },
            },
          },
          description:
            'The access the user has to each repository is included in the hash under the `permissions` key.',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repositories accessible to the user access token',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
  },
  '/user/installations/{installation_id}/repositories/{repository_id}': {
    delete: {
      description:
        'Remove a single repository from an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation',
      },
      operationId: 'apps/remove-repo-from-installation-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Remove a repository from an app installation',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
    put: {
      description:
        'Add a single repository to an installation. The authenticated user must have admin access to the repository.\n\nYou must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation',
      },
      operationId: 'apps/add-repo-to-installation-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/installation-id',
        },
        {
          $ref: '#/components/parameters/repository-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Add a repository to an app installation',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'installations',
      },
    },
  },
  '/user/interaction-limits': {
    delete: {
      description: 'Removes any interaction restrictions from your public repositories.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories',
      },
      operationId: 'interactions/remove-restrictions-for-authenticated-user',
      responses: {
        '204': {
          description: 'Response',
        },
      },
      summary: 'Remove interaction restrictions from your public repositories',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'user',
      },
    },
    get: {
      description:
        'Shows which type of GitHub user can interact with your public repositories and when the restriction expires.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories',
      },
      operationId: 'interactions/get-restrictions-for-authenticated-user',
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-response',
                },
              },
              schema: {
                anyOf: [
                  {
                    $ref: '#/components/schemas/interaction-limit-response',
                  },
                  {
                    additionalProperties: false,
                    properties: {},
                    type: 'object',
                  },
                ],
              },
            },
          },
          description: 'Default response',
        },
        '204': {
          description: 'Response when there are no restrictions',
        },
      },
      summary: 'Get interaction restrictions for your public repositories',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'user',
      },
    },
    put: {
      description:
        'Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories',
      },
      operationId: 'interactions/set-restrictions-for-authenticated-user',
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  expiry: 'one_month',
                  limit: 'collaborators_only',
                },
              },
            },
            schema: {
              $ref: '#/components/schemas/interaction-limit',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/interaction-limit-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/interaction-limit-response',
              },
            },
          },
          description: 'Response',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Set interaction restrictions for your public repositories',
      tags: ['interactions'],
      'x-github': {
        category: 'interactions',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'user',
      },
    },
  },
  '/user/issues': {
    get: {
      description:
        'List issues across owned and member repositories assigned to the authenticated user.\n\n**Note**: GitHub\'s REST API considers every pull request an issue, but not every issue is a pull request. For this\nreason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull\nrequest id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user',
      },
      operationId: 'issues/list-for-authenticated-user',
      parameters: [
        {
          description:
            "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          in: 'query',
          name: 'filter',
          required: false,
          schema: {
            default: 'assigned',
            enum: ['assigned', 'created', 'mentioned', 'subscribed', 'repos', 'all'],
            type: 'string',
          },
        },
        {
          description: 'Indicates the state of the issues to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/labels',
        },
        {
          description: 'What to sort results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'created',
            enum: ['created', 'updated', 'comments'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/issue-with-repo-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/issue',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List user account issues assigned to the authenticated user',
      tags: ['issues'],
      'x-github': {
        category: 'issues',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/keys': {
    get: {
      description:
        "Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user',
      },
      operationId: 'users/list-public-ssh-keys-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List public SSH keys for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'keys',
      },
    },
    post: {
      description:
        "Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user',
      },
      operationId: 'users/create-public-ssh-key-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: '2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234',
                  title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
                },
              },
            },
            schema: {
              properties: {
                key: {
                  description: 'The public SSH key to add to your GitHub account.',
                  pattern: '^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ',
                  type: 'string',
                },
                title: {
                  description: 'A descriptive name for the new key.',
                  example: 'Personal MacBook Air',
                  type: 'string',
                },
              },
              required: ['key'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key',
                },
              },
              schema: {
                $ref: '#/components/schemas/key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a public SSH key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'keys',
      },
    },
  },
  '/user/keys/{key_id}': {
    delete: {
      description:
        "Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user',
      },
      operationId: 'users/delete-public-ssh-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/key-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a public SSH key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'keys',
      },
    },
    get: {
      description:
        'View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user',
      },
      operationId: 'users/get-public-ssh-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/key-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key',
                },
              },
              schema: {
                $ref: '#/components/schemas/key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a public SSH key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'keys',
      },
    },
  },
  '/user/marketplace_purchases': {
    get: {
      description:
        'Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user',
      },
      operationId: 'apps/list-subscriptions-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-marketplace-purchase-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/user-marketplace-purchase',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List subscriptions for the authenticated user',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/user/marketplace_purchases/stubbed': {
    get: {
      description:
        'Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed',
      },
      operationId: 'apps/list-subscriptions-for-authenticated-user-stubbed',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-marketplace-purchase-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/user-marketplace-purchase',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
      },
      summary: 'List subscriptions for the authenticated user (stubbed)',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'marketplace',
      },
    },
  },
  '/user/memberships/orgs': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user',
      },
      operationId: 'orgs/list-memberships-for-authenticated-user',
      parameters: [
        {
          description:
            'Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            enum: ['active', 'pending'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/org-membership',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List organization memberships for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/user/memberships/orgs/{org}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user',
      },
      operationId: 'orgs/get-membership-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an organization membership for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user',
      },
      operationId: 'orgs/update-membership-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/org',
        },
      ],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  state: 'active',
                },
              },
            },
            schema: {
              properties: {
                state: {
                  description: 'The state that the membership should be in. Only `"active"` will be accepted.',
                  enum: ['active'],
                  type: 'string',
                },
              },
              required: ['state'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/org-membership-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/org-membership',
              },
            },
          },
          description: 'Response',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Update an organization membership for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'members',
      },
    },
  },
  '/user/migrations': {
    get: {
      description: 'Lists all migrations a user has started.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#list-user-migrations',
      },
      operationId: 'migrations/list-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/migration',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List user migrations',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
    post: {
      description: 'Initiates the generation of a user migration archive.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#start-a-user-migration',
      },
      operationId: 'migrations/start-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  lock_repositories: true,
                  repositories: ['octocat/Hello-World'],
                },
              },
            },
            schema: {
              properties: {
                exclude: {
                  description: 'Exclude attributes from the API response to improve performance',
                  example: ['repositories'],
                  items: {
                    description: 'Allowed values that can be passed to the exclude param.',
                    enum: ['repositories'],
                    example: 'repositories',
                    type: 'string',
                  },
                  readOnly: false,
                  type: 'array',
                },
                exclude_attachments: {
                  description: 'Do not include attachments in the migration',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                exclude_git_data: {
                  description: 'Indicates whether the repository git data should be excluded from the migration.',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                exclude_metadata: {
                  description:
                    'Indicates whether metadata should be excluded and only git source should be included for the migration.',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                exclude_owner_projects: {
                  description: 'Indicates whether projects owned by the organization or users should be excluded.',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                exclude_releases: {
                  description: 'Do not include releases in the migration',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                lock_repositories: {
                  description: 'Lock the repositories being migrated at the start of the migration',
                  example: true,
                  readOnly: false,
                  type: 'boolean',
                },
                org_metadata_only: {
                  default: false,
                  description:
                    'Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).',
                  example: true,
                  type: 'boolean',
                },
                repositories: {
                  items: {
                    description: 'Repository path, owner and name',
                    example: 'acme/widgets',
                    type: 'string',
                  },
                  type: 'array',
                },
              },
              required: ['repositories'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration-2',
                },
              },
              schema: {
                $ref: '#/components/schemas/migration',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Start a user migration',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
  },
  '/user/migrations/{migration_id}': {
    get: {
      description:
        "Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:\n\n*   `pending` - the migration hasn't started yet.\n*   `exporting` - the migration is in progress.\n*   `exported` - the migration finished successfully.\n*   `failed` - the migration failed.\n\nOnce the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#get-a-user-migration-status',
      },
      operationId: 'migrations/get-status-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          in: 'query',
          name: 'exclude',
          required: false,
          schema: {
            items: {
              type: 'string',
            },
            type: 'array',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/migration',
                },
              },
              schema: {
                $ref: '#/components/schemas/migration',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a user migration status',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
  },
  '/user/migrations/{migration_id}/archive': {
    delete: {
      description:
        'Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive',
      },
      operationId: 'migrations/delete-archive-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/migration-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a user migration archive',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
    get: {
      description:
        "Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:\n\n*   attachments\n*   bases\n*   commit\\_comments\n*   issue\\_comments\n*   issue\\_events\n*   issues\n*   milestones\n*   organizations\n*   projects\n*   protected\\_branches\n*   pull\\_request\\_reviews\n*   pull\\_requests\n*   releases\n*   repositories\n*   review\\_comments\n*   schema\n*   users\n\nThe archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#download-a-user-migration-archive',
      },
      operationId: 'migrations/get-archive-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/migration-id',
        },
      ],
      responses: {
        '302': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'Download a user migration archive',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
  },
  '/user/migrations/{migration_id}/repos/{repo_name}/lock': {
    delete: {
      description:
        'Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#unlock-a-user-repository',
      },
      operationId: 'migrations/unlock-repo-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          $ref: '#/components/parameters/repo-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unlock a user repository',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
  },
  '/user/migrations/{migration_id}/repositories': {
    get: {
      description: 'Lists all the repositories for this user migration.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration',
      },
      operationId: 'migrations/list-repos-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/migration-id',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repositories for a user migration',
      tags: ['migrations'],
      'x-github': {
        category: 'migrations',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'users',
      },
    },
  },
  '/user/orgs': {
    get: {
      description:
        'List organizations for the authenticated user.\n\n**OAuth scope requirements**\n\nThis only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user',
      },
      operationId: 'orgs/list-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List organizations for the authenticated user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages': {
    get: {
      description:
        'Lists packages owned by the authenticated user within the user\'s namespace.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-the-authenticated-user',
      },
      operationId: 'packages/list-packages-for-authenticated-user',
      parameters: [
        {
          description:
            "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          in: 'query',
          name: 'package_type',
          required: true,
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/package-visibility',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-user',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: "List packages for the authenticated user's namespace",
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages/{package_type}/{package_name}': {
    delete: {
      description:
        'Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes.\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user',
      },
      operationId: 'packages/delete-package-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a package for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user',
      },
      operationId: 'packages/get-package-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/package',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages/{package_type}/{package_name}/restore': {
    post: {
      description:
        'Restores a package owned by the authenticated user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user',
      },
      operationId: 'packages/restore-package-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          description: 'package token',
          in: 'query',
          name: 'token',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore a package for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages/{package_type}/{package_name}/versions': {
    get: {
      description:
        'Lists package versions for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user',
      },
      operationId: 'packages/get-all-package-versions-for-package-owned-by-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          description: 'The state of the package, either active or deleted.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'active',
            enum: ['active', 'deleted'],
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-authenticated-user',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List package versions for a package owned by the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description:
        'Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `read:packages` and `delete:packages` scopes.\nIf the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user',
      },
      operationId: 'packages/delete-package-version-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a package version for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package version for a package owned by the authenticated user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user',
      },
      operationId: 'packages/get-package-version-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-authenticated-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/package-version',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package version for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description:
        'Restores a package version owned by the authenticated user.\n\nYou can restore a deleted package version under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user',
      },
      operationId: 'packages/restore-package-version-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore a package version for the authenticated user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/projects': {
    post: {
      description:
        'Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#create-a-user-project',
      },
      operationId: 'projects/create-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                summary: 'Create a new project',
                value: {
                  body: 'A board to manage my personal projects.',
                  name: 'My Projects',
                },
              },
            },
            schema: {
              properties: {
                body: {
                  description: 'Body of the project',
                  example: 'This project represents the sprint of the first week in January',
                  nullable: true,
                  type: 'string',
                },
                name: {
                  description: 'Name of the project',
                  example: 'Week One Sprint',
                  type: 'string',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project',
                },
              },
              schema: {
                $ref: '#/components/schemas/project',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed_simple',
        },
      },
      summary: 'Create a user project',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/public_emails': {
    get: {
      description:
        'Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user',
      },
      operationId: 'users/list-public-emails-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/email-items-2',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/email',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List public email addresses for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'emails',
      },
    },
  },
  '/user/repos': {
    get: {
      description:
        'Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.\n\nThe authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user',
      },
      operationId: 'repos/list-for-authenticated-user',
      parameters: [
        {
          description: 'Limit results to repositories with the specified visibility.',
          in: 'query',
          name: 'visibility',
          required: false,
          schema: {
            default: 'all',
            enum: ['all', 'public', 'private'],
            type: 'string',
          },
        },
        {
          description:
            'Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.',
          in: 'query',
          name: 'affiliation',
          required: false,
          schema: {
            default: 'owner,collaborator,organization_member',
            type: 'string',
          },
        },
        {
          description:
            'Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.',
          in: 'query',
          name: 'type',
          required: false,
          schema: {
            default: 'all',
            enum: ['all', 'owner', 'public', 'private', 'member'],
            type: 'string',
          },
        },
        {
          description: 'The property to sort the results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'full_name',
            enum: ['created', 'updated', 'pushed', 'full_name'],
            type: 'string',
          },
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/before',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-items-default-response',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List repositories for the authenticated user',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    post: {
      description:
        'Creates a new repository for the authenticated user.\n\n**OAuth scope requirements**\n\nWhen using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:\n\n*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.\n*   `repo` scope to create a private repository.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user',
      },
      operationId: 'repos/create-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  description: 'This is your first repo!',
                  homepage: 'https://github.com',
                  is_template: true,
                  name: 'Hello-World',
                  private: false,
                },
              },
            },
            schema: {
              properties: {
                allow_auto_merge: {
                  default: false,
                  description: 'Whether to allow Auto-merge to be used on pull requests.',
                  example: false,
                  type: 'boolean',
                },
                allow_merge_commit: {
                  default: true,
                  description: 'Whether to allow merge commits for pull requests.',
                  example: true,
                  type: 'boolean',
                },
                allow_rebase_merge: {
                  default: true,
                  description: 'Whether to allow rebase merges for pull requests.',
                  example: true,
                  type: 'boolean',
                },
                allow_squash_merge: {
                  default: true,
                  description: 'Whether to allow squash merges for pull requests.',
                  example: true,
                  type: 'boolean',
                },
                auto_init: {
                  default: false,
                  description: 'Whether the repository is initialized with a minimal README.',
                  type: 'boolean',
                },
                delete_branch_on_merge: {
                  default: false,
                  description: 'Whether to delete head branches when pull requests are merged',
                  example: false,
                  type: 'boolean',
                },
                description: {
                  description: 'A short description of the repository.',
                  type: 'string',
                },
                gitignore_template: {
                  description: 'The desired language or platform to apply to the .gitignore.',
                  example: 'Haskell',
                  type: 'string',
                },
                has_discussions: {
                  default: false,
                  description: 'Whether discussions are enabled.',
                  example: true,
                  type: 'boolean',
                },
                has_downloads: {
                  default: true,
                  description: 'Whether downloads are enabled.',
                  example: true,
                  type: 'boolean',
                },
                has_issues: {
                  default: true,
                  description: 'Whether issues are enabled.',
                  example: true,
                  type: 'boolean',
                },
                has_projects: {
                  default: true,
                  description: 'Whether projects are enabled.',
                  example: true,
                  type: 'boolean',
                },
                has_wiki: {
                  default: true,
                  description: 'Whether the wiki is enabled.',
                  example: true,
                  type: 'boolean',
                },
                homepage: {
                  description: 'A URL with more information about the repository.',
                  type: 'string',
                },
                is_template: {
                  default: false,
                  description:
                    'Whether this repository acts as a template that can be used to generate new repositories.',
                  example: true,
                  type: 'boolean',
                },
                license_template: {
                  description: 'The license keyword of the open source license for this repository.',
                  example: 'mit',
                  type: 'string',
                },
                merge_commit_message: {
                  description:
                    "The default value for a merge commit message.\n\n- `PR_TITLE` - default to the pull request's title.\n- `PR_BODY` - default to the pull request's body.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'PR_TITLE', 'BLANK'],
                  type: 'string',
                },
                merge_commit_title: {
                  description:
                    "The default value for a merge commit title.\n\n- `PR_TITLE` - default to the pull request's title.\n- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
                  enum: ['PR_TITLE', 'MERGE_MESSAGE'],
                  type: 'string',
                },
                name: {
                  description: 'The name of the repository.',
                  example: 'Team Environment',
                  type: 'string',
                },
                private: {
                  default: false,
                  description: 'Whether the repository is private.',
                  type: 'boolean',
                },
                squash_merge_commit_message: {
                  description:
                    "The default value for a squash merge commit message:\n\n- `PR_BODY` - default to the pull request's body.\n- `COMMIT_MESSAGES` - default to the branch's commit messages.\n- `BLANK` - default to a blank commit message.",
                  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'],
                  type: 'string',
                },
                squash_merge_commit_title: {
                  description:
                    "The default value for a squash merge commit title:\n\n- `PR_TITLE` - default to the pull request's title.\n- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
                  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'],
                  type: 'string',
                },
                team_id: {
                  description:
                    'The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.',
                  type: 'integer',
                },
              },
              required: ['name'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository',
                },
              },
              schema: {
                $ref: '#/components/schemas/repository',
              },
            },
          },
          description: 'Response',
          headers: {
            Location: {
              example: 'https://api.github.com/repos/octocat/Hello-World',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '400': {
          $ref: '#/components/responses/bad_request',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a repository for the authenticated user',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/user/repository_invitations': {
    get: {
      description:
        'When authenticating as a user, this endpoint will list all currently open repository invitations for that user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user',
      },
      operationId: 'repos/list-invitations-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/repository-invitation-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/repository-invitation',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List repository invitations for the authenticated user',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
  },
  '/user/repository_invitations/{invitation_id}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation',
      },
      operationId: 'repos/decline-invitation-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/invitation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
      },
      summary: 'Decline a repository invitation',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
    patch: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation',
      },
      operationId: 'repos/accept-invitation-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/invitation-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '409': {
          $ref: '#/components/responses/conflict',
        },
      },
      summary: 'Accept a repository invitation',
      tags: ['repos'],
      'x-github': {
        category: 'collaborators',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'invitations',
      },
    },
  },
  '/user/ssh_signing_keys': {
    get: {
      description:
        'Lists the SSH signing keys for the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-public-ssh-signing-keys-for-the-authenticated-user',
      },
      operationId: 'users/list-ssh-signing-keys-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/ssh-signing-key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List SSH signing keys for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        previews: [],
        subcategory: 'ssh-signing-keys',
      },
    },
    post: {
      description:
        'Creates an SSH signing key for the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `write:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#create-an-ssh-signing-key-for-the-authenticated-user',
      },
      operationId: 'users/create-ssh-signing-key-for-authenticated-user',
      parameters: [],
      requestBody: {
        content: {
          'application/json': {
            examples: {
              default: {
                value: {
                  key: '2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234',
                  title: 'ssh-rsa AAAAB3NzaC1yc2EAAA',
                },
              },
            },
            schema: {
              properties: {
                key: {
                  description:
                    'The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."',
                  pattern:
                    '^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com ',
                  type: 'string',
                },
                title: {
                  description: 'A descriptive name for the new key.',
                  example: 'Personal MacBook Air',
                  type: 'string',
                },
              },
              required: ['key'],
              type: 'object',
            },
          },
        },
        required: true,
      },
      responses: {
        '201': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/ssh-signing-key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Create a SSH signing key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'ssh-signing-keys',
      },
    },
  },
  '/user/ssh_signing_keys/{ssh_signing_key_id}': {
    delete: {
      description:
        'Deletes an SSH signing key from the authenticated user\'s GitHub account. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `admin:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#delete-a-ssh-signing-key-for-the-authenticated-user',
      },
      operationId: 'users/delete-ssh-signing-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/ssh-signing-key-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete an SSH signing key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'ssh-signing-keys',
      },
    },
    get: {
      description:
        'Gets extended details for an SSH signing key. You must authenticate with Basic Authentication, or you must authenticate with OAuth with at least `read:ssh_signing_key` scope. For more information, see "[Understanding scopes for OAuth apps](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-a-ssh-signing-key-for-the-authenticated-user',
      },
      operationId: 'users/get-ssh-signing-key-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/ssh-signing-key-id',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key',
                },
              },
              schema: {
                $ref: '#/components/schemas/ssh-signing-key',
              },
            },
          },
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get an SSH signing key for the authenticated user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'ssh-signing-keys',
      },
    },
  },
  '/user/starred': {
    get: {
      description:
        'Lists repositories the authenticated user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user',
      },
      operationId: 'activity/list-repos-starred-by-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/repository-items-default-response',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/repository',
                },
                type: 'array',
              },
            },
            'application/vnd.github.v3.star+json': {
              examples: {
                'alternative-response-with-star-creation-timestamps': {
                  $ref: '#/components/examples/starred-repository-items-alternative-response-with-star-creation-timestamps',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/starred-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List repositories starred by the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
  },
  '/user/starred/{owner}/{repo}': {
    delete: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user',
      },
      operationId: 'activity/unstar-repo-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Unstar a repository for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user',
      },
      operationId: 'activity/check-repo-is-starred-by-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response if this repository is starred by you',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/basic-error',
              },
            },
          },
          description: 'Not Found if this repository is not starred by you',
        },
      },
      summary: 'Check if a repository is starred by the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
    put: {
      description:
        'Note that you\'ll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user',
      },
      operationId: 'activity/star-repo-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/owner',
        },
        {
          $ref: '#/components/parameters/repo',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Star a repository for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
  },
  '/user/subscriptions': {
    get: {
      description: 'Lists repositories the authenticated user is watching.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user',
      },
      operationId: 'activity/list-watched-repos-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List repositories watched by the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
  },
  '/user/teams': {
    get: {
      description:
        'List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user',
      },
      operationId: 'teams/list-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/team-full-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/team-full',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List teams for the authenticated user',
      tags: ['teams'],
      'x-github': {
        category: 'teams',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users': {
    get: {
      description:
        'Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.\n\nNote: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-users',
      },
      operationId: 'users/list',
      parameters: [
        {
          $ref: '#/components/parameters/since-user',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              example: '<https://api.github.com/users?since=135>; rel="next"',
              schema: {
                type: 'string',
              },
            },
          },
        },
        '304': {
          $ref: '#/components/responses/not_modified',
        },
      },
      summary: 'List users',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}': {
    get: {
      description:
        'Provides publicly available information about someone with a GitHub account.\n\nGitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user\'s GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see \'Response with GitHub plan information\' below"\n\nThe `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).\n\nThe Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-a-user',
      },
      operationId: 'users/get-by-username',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/public-user-default-response',
                },
                'response-with-git-hub-plan-information': {
                  $ref: '#/components/examples/public-user-response-with-git-hub-plan-information',
                },
              },
              schema: {
                oneOf: [
                  {
                    $ref: '#/components/schemas/private-user',
                  },
                  {
                    $ref: '#/components/schemas/public-user',
                  },
                ],
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/events': {
    get: {
      description:
        "If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user',
      },
      operationId: 'activity/list-events-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List events for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/users/{username}/events/orgs/{org}': {
    get: {
      description: "This is the user's organization dashboard. You must be authenticated as the user to view this.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user',
      },
      operationId: 'activity/list-org-events-for-authenticated-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/org',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-org-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List organization events for the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/users/{username}/events/public': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-for-a-user',
      },
      operationId: 'activity/list-public-events-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-public-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List public events for a user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/users/{username}/followers': {
    get: {
      description: 'Lists the people following the specified user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-followers-of-a-user',
      },
      operationId: 'users/list-followers-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List followers of a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/users/{username}/following': {
    get: {
      description: 'Lists the people who the specified user follows.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-the-people-a-user-follows',
      },
      operationId: 'users/list-following-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/simple-user-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/simple-user',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List the people a user follows',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/users/{username}/following/{target_user}': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user',
      },
      operationId: 'users/check-following-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          in: 'path',
          name: 'target_user',
          required: true,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'if the user follows the target user',
        },
        '404': {
          description: 'if the user does not follow the target user',
        },
      },
      summary: 'Check if a user follows another user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'followers',
      },
    },
  },
  '/users/{username}/gists': {
    get: {
      description: 'Lists public gists for the specified user:',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/gists#list-gists-for-a-user',
      },
      operationId: 'gists/list-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/since',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/base-gist-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/base-gist',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List gists for a user',
      tags: ['gists'],
      'x-github': {
        category: 'gists',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/gpg_keys': {
    get: {
      description: 'Lists the GPG keys for a user. This information is accessible by anyone.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user',
      },
      operationId: 'users/list-gpg-keys-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/gpg-key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/gpg-key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List GPG keys for a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'gpg-keys',
      },
    },
  },
  '/users/{username}/hovercard': {
    get: {
      description:
        "Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.\n\nThe `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:\n\n```shell\n curl -u username:token\n  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192\n```",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user',
      },
      operationId: 'users/get-context-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          description:
            "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
          in: 'query',
          name: 'subject_type',
          required: false,
          schema: {
            enum: ['organization', 'repository', 'issue', 'pull_request'],
            type: 'string',
          },
        },
        {
          description: 'Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.',
          in: 'query',
          name: 'subject_id',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/hovercard',
                },
              },
              schema: {
                $ref: '#/components/schemas/hovercard',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'Get contextual information for a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/installation': {
    get: {
      description:
        'Enables an authenticated GitHub App to find the user’s installation information.\n\nYou must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app',
      },
      operationId: 'apps/get-user-installation',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/installation',
                },
              },
              schema: {
                $ref: '#/components/schemas/installation',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a user installation for the authenticated app',
      tags: ['apps'],
      'x-github': {
        category: 'apps',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/keys': {
    get: {
      description: 'Lists the _verified_ public SSH keys for a user. This is accessible by anyone.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-public-keys-for-a-user',
      },
      operationId: 'users/list-public-keys-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/key-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/key-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List public keys for a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'keys',
      },
    },
  },
  '/users/{username}/orgs': {
    get: {
      description:
        'List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.\n\nThis method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user',
      },
      operationId: 'orgs/list-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/organization-simple-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/organization-simple',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List organizations for a user',
      tags: ['orgs'],
      'x-github': {
        category: 'orgs',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages': {
    get: {
      description:
        'Lists all packages in a user\'s namespace for which the requesting user has access.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#list-packages-for-user',
      },
      operationId: 'packages/list-packages-for-user',
      parameters: [
        {
          description:
            "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          in: 'query',
          name: 'package_type',
          required: true,
          schema: {
            enum: ['npm', 'maven', 'rubygems', 'docker', 'nuget', 'container'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/package-visibility',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-for-user',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
      },
      summary: 'List packages for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages/{package_type}/{package_name}': {
    delete: {
      description:
        'Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-for-a-user',
      },
      operationId: 'packages/delete-package-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete a package for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package metadata for a public package owned by a user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-for-a-user',
      },
      operationId: 'packages/get-package-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/package',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages/{package_type}/{package_name}/restore': {
    post: {
      description:
        'Restores an entire package for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-for-a-user',
      },
      operationId: 'packages/restore-package-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
        {
          description: 'package token',
          in: 'query',
          name: 'token',
          required: false,
          schema: {
            type: 'string',
          },
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore a package for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages/{package_type}/{package_name}/versions': {
    get: {
      description:
        'Lists package versions for a public package owned by a specified user.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/packages#get-all-package-versions-for-a-package-owned-by-a-user',
      },
      operationId: 'packages/get-all-package-versions-for-package-owned-by-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-versions-for-user',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/package-version',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'List package versions for a package owned by a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}': {
    delete: {
      description:
        'Deletes a specific package version for a user. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `delete:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to delete. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#delete-a-package-version-for-a-user',
      },
      operationId: 'packages/delete-package-version-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Delete package version for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
    get: {
      description:
        'Gets a specific package version for a public package owned by a specified user.\n\nAt this time, to use this endpoint, you must authenticate using an access token with the `read:packages` scope. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of GitHub Packages registries that only support repository-scoped permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user',
      },
      operationId: 'packages/get-package-version-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/package-version-user',
                },
              },
              schema: {
                $ref: '#/components/schemas/package-version',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get a package version for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore': {
    post: {
      description:
        'Restores a specific package version for a user.\n\nYou can restore a deleted package under the following conditions:\n  - The package was deleted within the last 30 days.\n  - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package\'s namespace first.\n\nTo use this endpoint, you must authenticate using an access token with the `read:packages` and `write:packages` scopes. In addition:\n- If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, your token must also include the `repo` scope. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."\n- If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, you must have admin permissions to the package whose version you want to restore. For the list of these registries, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/packages#restore-a-package-version-for-a-user',
      },
      operationId: 'packages/restore-package-version-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/package-type',
        },
        {
          $ref: '#/components/parameters/package-name',
        },
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/package-version-id',
        },
      ],
      responses: {
        '204': {
          description: 'Response',
        },
        '401': {
          $ref: '#/components/responses/requires_authentication',
        },
        '403': {
          $ref: '#/components/responses/forbidden',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Restore package version for a user',
      tags: ['packages'],
      'x-github': {
        category: 'packages',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/projects': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/projects#list-user-projects',
      },
      operationId: 'projects/list-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          description: 'Indicates the state of the projects to return.',
          in: 'query',
          name: 'state',
          required: false,
          schema: {
            default: 'open',
            enum: ['open', 'closed', 'all'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/project-items-3',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/project',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
        '422': {
          $ref: '#/components/responses/validation_failed',
        },
      },
      summary: 'List user projects',
      tags: ['projects'],
      'x-github': {
        category: 'projects',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/received_events': {
    get: {
      description:
        "These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.",
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user',
      },
      operationId: 'activity/list-received-events-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-received-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List events received by the authenticated user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/users/{username}/received_events/public': {
    get: {
      description: '',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user',
      },
      operationId: 'activity/list-received-public-events-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/user-received-public-events-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/event',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'List public events received by a user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'events',
      },
    },
  },
  '/users/{username}/repos': {
    get: {
      description:
        'Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/repos#list-repositories-for-a-user',
      },
      operationId: 'repos/list-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          description: 'Limit results to repositories of the specified type.',
          in: 'query',
          name: 'type',
          required: false,
          schema: {
            default: 'owner',
            enum: ['all', 'owner', 'member'],
            type: 'string',
          },
        },
        {
          description: 'The property to sort the results by.',
          in: 'query',
          name: 'sort',
          required: false,
          schema: {
            default: 'full_name',
            enum: ['created', 'updated', 'pushed', 'full_name'],
            type: 'string',
          },
        },
        {
          description: 'The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.',
          in: 'query',
          name: 'direction',
          required: false,
          schema: {
            enum: ['asc', 'desc'],
            type: 'string',
          },
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repositories for a user',
      tags: ['repos'],
      'x-github': {
        category: 'repos',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/settings/billing/actions': {
    get: {
      description:
        'Gets the summary of the free and paid GitHub Actions minutes used.\n\nPaid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".\n\nAccess tokens must have the `user` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user',
      },
      operationId: 'billing/get-github-actions-billing-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/actions-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/actions-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Actions billing for a user',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/settings/billing/packages': {
    get: {
      description:
        'Gets the free and paid storage used for GitHub Packages in gigabytes.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `user` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user',
      },
      operationId: 'billing/get-github-packages-billing-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/packages-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/packages-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get GitHub Packages billing for a user',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/settings/billing/shared-storage': {
    get: {
      description:
        'Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.\n\nPaid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."\n\nAccess tokens must have the `user` scope.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user',
      },
      operationId: 'billing/get-shared-storage-billing-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/combined-billing-usage',
                },
              },
              schema: {
                $ref: '#/components/schemas/combined-billing-usage',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get shared storage billing for a user',
      tags: ['billing'],
      'x-github': {
        category: 'billing',
        enabledForGitHubApps: false,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/users/{username}/ssh_signing_keys': {
    get: {
      description: 'Lists the SSH signing keys for a user. This operation is accessible by anyone.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/users#list-ssh-signing-keys-for-a-user',
      },
      operationId: 'users/list-ssh-signing-keys-for-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/ssh-signing-key-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/ssh-signing-key',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List SSH signing keys for a user',
      tags: ['users'],
      'x-github': {
        category: 'users',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'ssh-signing-keys',
      },
    },
  },
  '/users/{username}/starred': {
    get: {
      description:
        'Lists repositories a user has starred.\n\nYou can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header: `application/vnd.github.star+json`.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user',
      },
      operationId: 'activity/list-repos-starred-by-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/sort',
        },
        {
          $ref: '#/components/parameters/direction',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                'default-response': {
                  $ref: '#/components/examples/repository-items-default-response',
                },
              },
              schema: {
                anyOf: [
                  {
                    items: {
                      $ref: '#/components/schemas/starred-repository',
                    },
                    type: 'array',
                  },
                  {
                    items: {
                      $ref: '#/components/schemas/repository',
                    },
                    type: 'array',
                  },
                ],
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repositories starred by a user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'starring',
      },
    },
  },
  '/users/{username}/subscriptions': {
    get: {
      description: 'Lists repositories a user is watching.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user',
      },
      operationId: 'activity/list-repos-watched-by-user',
      parameters: [
        {
          $ref: '#/components/parameters/username',
        },
        {
          $ref: '#/components/parameters/per-page',
        },
        {
          $ref: '#/components/parameters/page',
        },
      ],
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  $ref: '#/components/examples/minimal-repository-items',
                },
              },
              schema: {
                items: {
                  $ref: '#/components/schemas/minimal-repository',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
          headers: {
            Link: {
              $ref: '#/components/headers/link',
            },
          },
        },
      },
      summary: 'List repositories watched by a user',
      tags: ['activity'],
      'x-github': {
        category: 'activity',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: 'watching',
      },
    },
  },
  '/versions': {
    get: {
      description: 'Get all supported GitHub API versions.',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/reference/meta#get-all-api-versions',
      },
      operationId: 'meta/get-all-versions',
      responses: {
        '200': {
          content: {
            'application/json': {
              examples: {
                default: {
                  value: ['2021-01-01', '2021-06-01', '2022-01-01'],
                },
              },
              schema: {
                items: {
                  example: '2021-01-01',
                  format: 'date',
                  type: 'string',
                },
                type: 'array',
              },
            },
          },
          description: 'Response',
        },
        '404': {
          $ref: '#/components/responses/not_found',
        },
      },
      summary: 'Get all API versions',
      tags: ['meta'],
      'x-github': {
        category: 'meta',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
        subcategory: null,
      },
    },
  },
  '/zen': {
    get: {
      description: 'Get a random sentence from the Zen of GitHub',
      externalDocs: {
        description: 'API method documentation',
        url: 'https://docs.github.com/rest/meta#get-the-zen-of-github',
      },
      operationId: 'meta/get-zen',
      responses: {
        '200': {
          content: {
            'text/plain': {
              examples: {
                default: {
                  summary: 'Example response',
                  value: 'Responsive is better than fast',
                },
              },
              schema: {
                type: 'string',
              },
            },
          },
          description: 'Response',
        },
      },
      summary: 'Get the Zen of GitHub',
      tags: ['meta'],
      'x-github': {
        category: 'meta',
        enabledForGitHubApps: true,
        githubCloudOnly: false,
      },
    },
  },
} as TPaths;
