{
  "openapi": "3.1.0",
  "info": { "title": "Mastra API", "description": "Mastra API", "version": "1.0.0" },
  "paths": {
    "/api": {
      "get": {
        "responses": { "200": { "description": "Success" } },
        "operationId": "getApi",
        "description": "Get API status",
        "tags": ["system"]
      }
    },
    "/api/agents": {
      "get": {
        "responses": { "200": { "description": "List of all agents" } },
        "operationId": "getApiAgents",
        "description": "Get all available agents",
        "tags": ["agents"]
      }
    },
    "/api/agents/{agentId}": {
      "get": {
        "responses": { "200": { "description": "Agent details" }, "404": { "description": "Agent not found" } },
        "operationId": "getApiAgentsByAgentId",
        "description": "Get agent by ID",
        "tags": ["agents"],
        "parameters": [{ "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/agents/{agentId}/evals/ci": {
      "get": {
        "responses": { "200": { "description": "List of evals" } },
        "operationId": "getApiAgentsByAgentIdEvalsCi",
        "description": "Get CI evals by agent ID",
        "tags": ["agents"],
        "parameters": [{ "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/agents/{agentId}/evals/live": {
      "get": {
        "responses": { "200": { "description": "List of evals" } },
        "operationId": "getApiAgentsByAgentIdEvalsLive",
        "description": "Get live evals by agent ID",
        "tags": ["agents"],
        "parameters": [{ "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/agents/{agentId}/generate": {
      "post": {
        "responses": { "200": { "description": "Generated response" }, "404": { "description": "Agent not found" } },
        "operationId": "postApiAgentsByAgentIdGenerate",
        "description": "Generate a response from an agent",
        "tags": ["agents"],
        "parameters": [{ "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": { "type": "array", "items": { "type": "object" } },
                  "threadId": { "type": "string" },
                  "resourceId": { "type": "string", "description": "The resource ID for the conversation" },
                  "resourceid": {
                    "type": "string",
                    "description": "The resource ID for the conversation (deprecated, use resourceId instead)",
                    "deprecated": true
                  },
                  "output": { "type": "object" }
                },
                "required": ["messages"]
              }
            }
          }
        }
      }
    },
    "/api/agents/{agentId}/stream": {
      "post": {
        "responses": { "200": { "description": "Streamed response" }, "404": { "description": "Agent not found" } },
        "operationId": "postApiAgentsByAgentIdStream",
        "description": "Stream a response from an agent",
        "tags": ["agents"],
        "parameters": [{ "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": { "type": "array", "items": { "type": "object" } },
                  "threadId": { "type": "string" },
                  "resourceId": { "type": "string", "description": "The resource ID for the conversation" },
                  "resourceid": {
                    "type": "string",
                    "description": "The resource ID for the conversation (deprecated, use resourceId instead)",
                    "deprecated": true
                  },
                  "output": { "type": "object" }
                },
                "required": ["messages"]
              }
            }
          }
        }
      }
    },
    "/api/agents/{agentId}/tools/{toolId}/execute": {
      "post": {
        "responses": {
          "200": { "description": "Tool execution result" },
          "404": { "description": "Tool or agent not found" }
        },
        "operationId": "postApiAgentsByAgentIdToolsByToolIdExecute",
        "description": "Execute a tool through an agent",
        "tags": ["agents"],
        "parameters": [
          { "name": "agentId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "toolId", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "args": { "type": "object" },
                  "threadId": { "type": "string" },
                  "resourceid": { "type": "string" }
                },
                "required": ["args"]
              }
            }
          }
        }
      }
    },
    "/api/memory/status": {
      "get": {
        "responses": { "200": { "description": "Memory status" } },
        "operationId": "getApiMemoryStatus",
        "description": "Get memory status",
        "tags": ["memory"]
      }
    },
    "/api/memory/threads": {
      "get": {
        "responses": { "200": { "description": "List of all threads" } },
        "operationId": "getApiMemoryThreads",
        "description": "Get all threads",
        "tags": ["memory"],
        "parameters": [{ "name": "resourceid", "in": "query", "required": true, "schema": { "type": "string" } }]
      },
      "post": {
        "responses": { "200": { "description": "Created thread" } },
        "operationId": "postApiMemoryThreads",
        "description": "Create a new thread",
        "tags": ["memory"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "metadata": { "type": "object" },
                  "resourceid": { "type": "string" },
                  "threadId": { "type": "string" }
                }
              }
            }
          }
        }
      }
    },
    "/api/memory/threads/{threadId}": {
      "get": {
        "responses": { "200": { "description": "Thread details" }, "404": { "description": "Thread not found" } },
        "operationId": "getApiMemoryThreadsByThreadId",
        "description": "Get thread by ID",
        "tags": ["memory"],
        "parameters": [{ "name": "threadId", "in": "path", "required": true, "schema": { "type": "string" } }]
      },
      "patch": {
        "responses": { "200": { "description": "Updated thread" }, "404": { "description": "Thread not found" } },
        "operationId": "patchApiMemoryThreadsByThreadId",
        "description": "Update a thread",
        "tags": ["memory"],
        "parameters": [{ "name": "threadId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": { "required": true, "content": { "application/json": { "schema": { "type": "object" } } } }
      },
      "delete": {
        "responses": { "200": { "description": "Thread deleted" }, "404": { "description": "Thread not found" } },
        "operationId": "deleteApiMemoryThreadsByThreadId",
        "description": "Delete a thread",
        "tags": ["memory"],
        "parameters": [{ "name": "threadId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/memory/threads/{threadId}/messages": {
      "post": {
        "operationId": "postApiMemoryThreadsByThreadIdMessages",
        "description": "List messages for a thread with advanced filtering and pagination. Always returns v2 format messages.",
        "tags": ["memory"],
        "parameters": [
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the thread",
            "schema": { "type": "string" }
          },
          {
            "name": "agentId",
            "in": "query",
            "required": true,
            "description": "The agent ID for context",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "oneOf": [
                      { "type": "number", "minimum": 1 },
                      { "type": "boolean", "enum": [false] }
                    ],
                    "description": "Number of messages to return. Use false to retrieve ALL messages (use with caution). Defaults to 40."
                  },
                  "offset": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Number of messages to skip. Use with limit for pagination (e.g., page 2 with limit 20 = offset 20). Defaults to 0."
                  },
                  "filter": {
                    "type": "object",
                    "properties": {
                      "dateRange": {
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Include only messages created on or after this date"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Include only messages created on or before this date"
                          }
                        },
                        "description": "Filter messages by creation date range"
                      }
                    },
                    "description": "Filtering options for messages"
                  },
                  "include": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": ["id"],
                      "properties": {
                        "id": { "type": "string", "description": "Message ID to include" },
                        "threadId": {
                          "type": "string",
                          "description": "Optional thread ID if different from main thread"
                        },
                        "withPreviousMessages": {
                          "type": "number",
                          "minimum": 0,
                          "description": "Number of messages before this one to include"
                        },
                        "withNextMessages": {
                          "type": "number",
                          "minimum": 0,
                          "description": "Number of messages after this one to include"
                        }
                      }
                    },
                    "description": "Array of message IDs with context (previous/next messages) to include in results"
                  },
                  "format": {
                    "type": "string",
                    "enum": ["v1", "v2"],
                    "description": "Message format version (default: v1)"
                  },
                  "resourceId": { "type": "string", "description": "Optional resource ID for filtering messages" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of messages with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "items": { "type": "object" },
                      "description": "Array of messages in the specified format"
                    },
                    "total": { "type": "number", "description": "Total number of messages matching the filter" },
                    "page": { "type": "number", "description": "Current page number (for backwards compatibility)" },
                    "perPage": {
                      "type": "number",
                      "description": "Number of messages per page (for backwards compatibility)"
                    },
                    "hasMore": { "type": "boolean", "description": "Whether there are more messages available" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/memory/save-messages": {
      "post": {
        "responses": { "200": { "description": "Messages saved" } },
        "operationId": "postApiMemorySave-messages",
        "description": "Save messages",
        "tags": ["memory"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "messages": { "type": "array", "items": { "type": "object" } } },
                "required": ["messages"]
              }
            }
          }
        }
      }
    },
    "/api/workflows": {
      "get": {
        "responses": { "200": { "description": "List of all workflows" } },
        "operationId": "getApiWorkflows",
        "description": "Get all workflows",
        "tags": ["workflows"]
      }
    },
    "/api/workflows/{workflowId}": {
      "get": {
        "responses": { "200": { "description": "Workflow details" }, "404": { "description": "Workflow not found" } },
        "operationId": "getApiWorkflowsByWorkflowId",
        "description": "Get workflow by ID",
        "tags": ["workflows"],
        "parameters": [{ "name": "workflowId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/workflows/{workflowId}/execute": {
      "post": {
        "responses": {
          "200": { "description": "Workflow execution result" },
          "404": { "description": "Workflow not found" }
        },
        "operationId": "postApiWorkflowsByWorkflowIdExecute",
        "description": "Execute a workflow",
        "tags": ["workflows"],
        "parameters": [{ "name": "workflowId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "type": "object", "properties": { "input": { "type": "object" } } } }
          }
        }
      }
    },
    "/api/logs": {
      "get": {
        "responses": { "200": { "description": "List of all logs" } },
        "operationId": "getApiLogs",
        "description": "Get all logs",
        "tags": ["logs"],
        "parameters": [{ "name": "transportId", "in": "query", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/logs/{runId}": {
      "get": {
        "responses": { "200": { "description": "List of logs for run ID" } },
        "operationId": "getApiLogsByRunId",
        "description": "Get logs by run ID",
        "tags": ["logs"],
        "parameters": [
          { "name": "runId", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "transportId", "in": "query", "required": true, "schema": { "type": "string" } }
        ]
      }
    },
    "/api/tools": {
      "get": {
        "responses": { "200": { "description": "List of all tools" } },
        "operationId": "getApiTools",
        "description": "Get all tools",
        "tags": ["tools"]
      }
    },
    "/api/tools/{toolId}": {
      "get": {
        "responses": { "200": { "description": "Tool details" }, "404": { "description": "Tool not found" } },
        "operationId": "getApiToolsByToolId",
        "description": "Get tool by ID",
        "tags": ["tools"],
        "parameters": [{ "name": "toolId", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/tools/{toolId}/execute": {
      "post": {
        "responses": { "200": { "description": "Tool execution result" }, "404": { "description": "Tool not found" } },
        "operationId": "postApiToolsByToolIdExecute",
        "description": "Execute a tool",
        "tags": ["tools"],
        "parameters": [{ "name": "toolId", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "args": { "type": "object" },
                  "threadId": { "type": "string" },
                  "resourceid": { "type": "string" }
                },
                "required": ["args"]
              }
            }
          }
        }
      }
    },
    "/api/vector/{vectorName}/upsert": {
      "post": {
        "responses": { "200": { "description": "Vectors upserted successfully" } },
        "operationId": "postApiVectorByVectorNameUpsert",
        "description": "Upsert vectors into an index",
        "tags": ["vector"],
        "parameters": [{ "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "indexName": { "type": "string" },
                  "vectors": { "type": "array", "items": { "type": "array", "items": { "type": "number" } } },
                  "metadata": { "type": "array", "items": { "type": "object" } },
                  "ids": { "type": "array", "items": { "type": "string" } }
                },
                "required": ["indexName", "vectors"]
              }
            }
          }
        }
      }
    },
    "/api/vector/{vectorName}/create-index": {
      "post": {
        "responses": { "200": { "description": "Index created successfully" } },
        "operationId": "postApiVectorByVectorNameCreate-index",
        "description": "Create a new vector index",
        "tags": ["vector"],
        "parameters": [{ "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "indexName": { "type": "string" },
                  "dimension": { "type": "number" },
                  "metric": { "type": "string", "enum": ["cosine", "euclidean", "dotproduct"] }
                },
                "required": ["indexName", "dimension"]
              }
            }
          }
        }
      }
    },
    "/api/vector/{vectorName}/query": {
      "post": {
        "responses": { "200": { "description": "Query results" } },
        "operationId": "postApiVectorByVectorNameQuery",
        "description": "Query vectors from an index",
        "tags": ["vector"],
        "parameters": [{ "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "indexName": { "type": "string" },
                  "queryVector": { "type": "array", "items": { "type": "number" } },
                  "topK": { "type": "number" },
                  "filter": { "type": "object" },
                  "includeVector": { "type": "boolean" }
                },
                "required": ["indexName", "queryVector"]
              }
            }
          }
        }
      }
    },
    "/api/vector/{vectorName}/indexes": {
      "get": {
        "responses": { "200": { "description": "List of indexes" } },
        "operationId": "getApiVectorByVectorNameIndexes",
        "description": "List all indexes for a vector store",
        "tags": ["vector"],
        "parameters": [{ "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } }]
      }
    },
    "/api/vector/{vectorName}/indexes/{indexName}": {
      "get": {
        "responses": { "200": { "description": "Index details" } },
        "operationId": "getApiVectorByVectorNameIndexesByIndexName",
        "description": "Get details about a specific index",
        "tags": ["vector"],
        "parameters": [
          { "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "indexName", "in": "path", "required": true, "schema": { "type": "string" } }
        ]
      },
      "delete": {
        "responses": { "200": { "description": "Index deleted successfully" } },
        "operationId": "deleteApiVectorByVectorNameIndexesByIndexName",
        "description": "Delete a specific index",
        "tags": ["vector"],
        "parameters": [
          { "name": "vectorName", "in": "path", "required": true, "schema": { "type": "string" } },
          { "name": "indexName", "in": "path", "required": true, "schema": { "type": "string" } }
        ]
      }
    }
  },
  "components": { "schemas": {} }
}
