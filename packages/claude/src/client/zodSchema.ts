// Generated by ts-to-zod
import { z } from 'zod';

export const errorSchema = z.object({
  type: z.string(),
  message: z.string(),
});

export const errorResponseSchema = z.object({
  error: errorSchema,
});

export const createCompletionRequestSchema = z.object({
  model: z.union([
    z.string(),
    z.literal('claude-2'),
    z.literal('claude-2.0'),
    z.literal('claude-instant-1'),
    z.literal('claude-instant-1.1'),
  ]),
  prompt: z.union([z.string(), z.array(z.string()), z.array(z.number()), z.array(z.array(z.number()))]).nullable(),
  max_tokens_to_sample: z.number().nullable(),
  temperature: z.number().optional().nullable(),
  top_p: z.number().optional().nullable(),
  top_k: z.number().optional().nullable(),
  stream: z.unknown().optional(),
  stop_sequences: z
    .union([z.string(), z.array(z.string())])
    .optional()
    .nullable(),
  metadata: z
    .object({
      user_id: z.string().optional(),
    })
    .optional(),
});

export const createCompletionResponseSchema = z.object({
  stop_reason: z.union([z.literal('stop_sequence'), z.literal('max_tokens')]),
  model: z.string(),
  completion: z.string(),
});

export const stopReasonSchema = z.union([z.literal('stop_sequence'), z.literal('max_tokens')]);

export const completionStreamResponseDeltaSchema = z.object({
  completion: z.string().optional().nullable(),
  stop_reason: z
    .union([z.literal('stop_sequence'), z.literal('max_tokens')])
    .optional()
    .nullable(),
  model: z.string().optional(),
});

export const completeDataSchema = z.object({
  body: createCompletionRequestSchema,
});

export const completeResponseSchema = createCompletionResponseSchema;

export const completeErrorSchema = z.unknown();

export const createCompletionStreamResponseSchema = z.object({
  stop_reason: z.union([z.literal('stop_sequence'), z.literal('max_tokens')]),
  model: z.string(),
  completion: z.string(),
  choices: z
    .array(
      z.object({
        delta: completionStreamResponseDeltaSchema.optional(),
      }),
    )
    .optional(),
});
