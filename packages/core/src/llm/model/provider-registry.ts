/**
 * Runtime provider registry loader
 * Loads provider data from JSON file and exports typed interfaces
 */

import fs from 'fs';
import { createRequire } from 'module';
import os from 'os';
import path from 'path';
import { fileURLToPath } from 'url';
import type { ProviderConfig } from './gateways/base.js';
import type { Provider, ModelForProvider, ModelRouterModelId, ProviderModels } from './provider-types.generated.js';

// Re-export types for convenience
export type { Provider, ModelForProvider, ModelRouterModelId, ProviderModels };

interface RegistryData {
  providers: Record<string, ProviderConfig>;
  models: Record<string, string[]>;
  generatedAt: string;
  version: string;
}

let registryData: RegistryData | null = null;

// Cache file helpers
const CACHE_DIR = path.join(os.homedir(), '.cache', 'mastra');
const CACHE_FILE = path.join(CACHE_DIR, 'gateway-refresh-time');

let modelRouterCacheFailed = false;

function getLastRefreshTimeFromDisk(): Date | null {
  try {
    if (!fs.existsSync(CACHE_FILE)) {
      return null;
    }
    const timestamp = fs.readFileSync(CACHE_FILE, 'utf-8').trim();
    return new Date(parseInt(timestamp, 10));
  } catch (err) {
    console.warn('[GatewayRegistry] Failed to read cache file:', err);
    modelRouterCacheFailed = true;
    return null;
  }
}

function saveLastRefreshTimeToDisk(date: Date): void {
  try {
    if (!fs.existsSync(CACHE_DIR)) {
      fs.mkdirSync(CACHE_DIR, { recursive: true });
    }
    fs.writeFileSync(CACHE_FILE, date.getTime().toString(), 'utf-8');
  } catch (err) {
    modelRouterCacheFailed = true;
    console.warn('[GatewayRegistry] Failed to write cache file:', err);
  }
}

// Get __dirname equivalent in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function loadRegistry(): RegistryData {
  if (registryData) {
    return registryData;
  }

  const isDev = process.env.MASTRA_DEV === 'true' || process.env.MASTRA_DEV === '1';

  // Prioritize production paths (built package)
  const possiblePaths = [
    // Built: relative to this file (production)
    path.join(__dirname, 'provider-registry.json'),
  ];

  // Only check development paths if MASTRA_DEV=1
  if (isDev) {
    possiblePaths.push(
      // Development: from source
      path.join(process.cwd(), 'packages/core/src/llm/model/provider-registry.json'),
      path.join(process.cwd(), 'src/llm/model/provider-registry.json'),
      path.join(__dirname, '../../../src/llm/model/provider-registry.json'),
    );
  }

  const errors: string[] = [];

  for (const jsonPath of possiblePaths) {
    try {
      const content = fs.readFileSync(jsonPath, 'utf-8');
      registryData = JSON.parse(content);
      return registryData!;
    } catch (err) {
      errors.push(`${jsonPath}: ${err instanceof Error ? err.message : String(err)}`);
      continue;
    }
  }

  throw new Error(
    `Failed to load provider registry. Make sure provider-registry.json is generated by running: npm run generate:providers\n\nTried paths:\n${errors.join('\n')}`,
  );
}

// Export registry data via Proxy for lazy loading
export const PROVIDER_REGISTRY = new Proxy({} as Record<string, ProviderConfig>, {
  get(_target, prop: string) {
    const data = loadRegistry();
    return data.providers[prop];
  },
  ownKeys() {
    const data = loadRegistry();
    return Object.keys(data.providers);
  },
  has(_target, prop: string) {
    const data = loadRegistry();
    return prop in data.providers;
  },
  getOwnPropertyDescriptor(_target, prop) {
    const data = loadRegistry();
    if (prop in data.providers) {
      return {
        enumerable: true,
        configurable: true,
      };
    }
    return undefined;
  },
}) as Record<Provider, ProviderConfig>;

export const PROVIDER_MODELS = new Proxy({} as ProviderModels, {
  get(_target, prop: string) {
    const data = loadRegistry();
    return data.models[prop];
  },
  ownKeys() {
    const data = loadRegistry();
    return Object.keys(data.models);
  },
  has(_target, prop: string) {
    const data = loadRegistry();
    return prop in data.models;
  },
  getOwnPropertyDescriptor(_target, prop) {
    const data = loadRegistry();
    if (prop in data.models) {
      return {
        enumerable: true,
        configurable: true,
      };
    }
    return undefined;
  },
});

/**
 * Parse a model string to extract provider and model ID
 * Examples:
 *   "openai/gpt-4o" -> { provider: "openai", modelId: "gpt-4o" }
 *   "fireworks/accounts/etc/model" -> { provider: "fireworks", modelId: "accounts/etc/model" }
 *   "gpt-4o" -> { provider: null, modelId: "gpt-4o" }
 */
export function parseModelString(modelString: string): { provider: string | null; modelId: string } {
  const firstSlashIndex = modelString.indexOf('/');

  if (firstSlashIndex !== -1) {
    // Has at least one slash - extract everything before first slash as provider
    const provider = modelString.substring(0, firstSlashIndex);
    const modelId = modelString.substring(firstSlashIndex + 1);

    if (provider && modelId) {
      return {
        provider,
        modelId,
      };
    }
  }

  // No slash or invalid format
  return {
    provider: null,
    modelId: modelString,
  };
}

/**
 * Get provider configuration by provider ID
 */
export function getProviderConfig(providerId: string): ProviderConfig | undefined {
  const data = loadRegistry();
  return data.providers[providerId];
}

/**
 * Check if a provider is registered
 */
export function isProviderRegistered(providerId: string): boolean {
  const data = loadRegistry();
  return providerId in data.providers;
}

/**
 * Get all registered provider IDs
 */
export function getRegisteredProviders(): string[] {
  const data = loadRegistry();
  return Object.keys(data.providers);
}

/**
 * Type guard to check if a string is a valid OpenAI-compatible model ID
 */
export function isValidModelId(modelId: string): modelId is ModelRouterModelId {
  const { provider } = parseModelString(modelId);
  return provider !== null && isProviderRegistered(provider);
}

/**
 * GatewayRegistry - Manages dynamic loading and refreshing of provider data from gateways
 * Singleton class that handles runtime updates to the provider registry
 */
export class GatewayRegistry {
  private static instance: GatewayRegistry | null = null;
  private lastRefreshTime: Date | null = null;
  private refreshInterval: NodeJS.Timeout | null = null;
  private isRefreshing = false;

  private constructor() {
    // Private constructor for singleton pattern
  }

  /**
   * Get the singleton instance
   */
  static getInstance(): GatewayRegistry {
    if (!GatewayRegistry.instance) {
      GatewayRegistry.instance = new GatewayRegistry();
    }
    return GatewayRegistry.instance;
  }

  /**
   * Sync providers from all gateways
   * @param forceRefresh - Force refresh even if recently synced
   * @param writeToSrc - Write to src/ directory in addition to dist/ (useful for manual generation in repo)
   */
  async syncGateways(forceRefresh = false, writeToSrc = false): Promise<void> {
    if (this.isRefreshing && !forceRefresh) {
      // console.debug('[GatewayRegistry] Sync already in progress, skipping...');
      return;
    }

    this.isRefreshing = true;

    try {
      // console.debug('[GatewayRegistry] Starting gateway sync...');

      // Import gateway classes and generation functions
      const { ModelsDevGateway } = await import('./gateways/models-dev.js');
      const { NetlifyGateway } = await import('./gateways/netlify.js');
      const { fetchProvidersFromGateways, writeRegistryFiles } = await import('./registry-generator.js');

      // Initialize gateways
      const gateways = [new ModelsDevGateway({}), new NetlifyGateway()];

      // Fetch provider data
      const { providers, models } = await fetchProvidersFromGateways(gateways);

      // Write to dist/ (the bundled location that gets distributed)
      // Use createRequire to find the @mastra/core package root reliably
      const require = createRequire(import.meta.url);
      const packageJsonPath = require.resolve('@mastra/core/package.json');
      const packageRoot = path.dirname(packageJsonPath);

      // Construct paths relative to package root
      const distJsonPath = path.join(packageRoot, 'dist', 'provider-registry.json');
      const distTypesPath = path.join(packageRoot, 'dist', 'llm', 'model', 'provider-types.generated.d.ts');

      await writeRegistryFiles(distJsonPath, distTypesPath, providers, models);
      // console.debug(`[GatewayRegistry] ✅ Updated registry files in dist/`);

      // Also copy to src/ when explicitly requested or in dev mode
      const isDev = process.env.MASTRA_DEV === 'true' || process.env.MASTRA_DEV === '1';
      if (writeToSrc || isDev) {
        const srcJsonPath = path.join(packageRoot, 'src', 'llm', 'model', 'provider-registry.json');
        const srcTypesPath = path.join(packageRoot, 'src', 'llm', 'model', 'provider-types.generated.d.ts');

        // Copy the already-generated files
        await fs.promises.copyFile(distJsonPath, srcJsonPath);
        await fs.promises.copyFile(distTypesPath, srcTypesPath);
        // console.debug(`[GatewayRegistry] ✅ Copied registry files to src/ (${writeToSrc ? 'manual' : 'dev mode'})`);
      }

      // Clear the in-memory cache to force reload
      registryData = null;

      this.lastRefreshTime = new Date();
      saveLastRefreshTimeToDisk(this.lastRefreshTime);
      // console.debug(`[GatewayRegistry] ✅ Gateway sync completed at ${this.lastRefreshTime.toISOString()}`);
    } catch (error) {
      console.error('[GatewayRegistry] ❌ Gateway sync failed:', error);
      throw error;
    } finally {
      this.isRefreshing = false;
    }
  }

  /**
   * Get the last refresh time (from memory or disk cache)
   */
  getLastRefreshTime(): Date | null {
    return this.lastRefreshTime || getLastRefreshTimeFromDisk();
  }

  /**
   * Start auto-refresh on an interval
   * @param intervalMs - Interval in milliseconds (default: 1 hour)
   */
  startAutoRefresh(intervalMs = 60 * 60 * 1000): void {
    if (this.refreshInterval) {
      // console.debug('[GatewayRegistry] Auto-refresh already running');
      return;
    }

    // console.debug(`[GatewayRegistry] Starting auto-refresh (interval: ${intervalMs}ms)`);

    // Check if we need to run an immediate sync
    const lastRefresh = getLastRefreshTimeFromDisk();
    const now = Date.now();
    const shouldRefresh = !modelRouterCacheFailed && (!lastRefresh || now - lastRefresh.getTime() > intervalMs);

    if (shouldRefresh) {
      // console.debug(
      //   `[GatewayRegistry] Running immediate sync (last refresh: ${lastRefresh ? lastRefresh.toISOString() : 'never'})`,
      // );
      this.syncGateways().catch(err => {
        console.error('[GatewayRegistry] Initial auto-refresh failed:', err);
      });
    } else {
      // console.debug( `[GatewayRegistry] Skipping immediate sync (last refresh: ${lastRefresh.toISOString()}, next in ${Math.round((intervalMs - (now - lastRefresh.getTime())) / 1000)}s)`,
      // );
    }

    this.refreshInterval = setInterval(() => {
      if (modelRouterCacheFailed && this.refreshInterval) {
        clearInterval(this.refreshInterval);
        this.refreshInterval = null;
        return;
      }
      this.syncGateways().catch(err => {
        console.error('[GatewayRegistry] Auto-refresh failed:', err);
      });
    }, intervalMs);

    // Prevent the interval from keeping the process alive
    if (this.refreshInterval.unref) {
      this.refreshInterval.unref();
    }
  }

  /**
   * Stop auto-refresh
   */
  stopAutoRefresh(): void {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
      // console.debug('[GatewayRegistry] Auto-refresh stopped');
    }
  }

  /**
   * Get provider configuration by ID
   */
  getProviderConfig(providerId: string): ProviderConfig | undefined {
    return getProviderConfig(providerId);
  }

  /**
   * Check if a provider is registered
   */
  isProviderRegistered(providerId: string): boolean {
    return isProviderRegistered(providerId);
  }

  /**
   * Get all registered providers
   */
  getProviders(): Record<string, ProviderConfig> {
    const data = loadRegistry();
    return data.providers;
  }

  /**
   * Get all models
   */
  getModels(): Record<string, string[]> {
    const data = loadRegistry();
    return data.models;
  }
}

// Auto-start refresh if enabled
const isDev = process.env.MASTRA_DEV === 'true' || process.env.MASTRA_DEV === '1';
const autoRefreshEnabled =
  process.env.MASTRA_AUTO_REFRESH_PROVIDERS === 'true' ||
  (process.env.MASTRA_AUTO_REFRESH_PROVIDERS !== 'false' && isDev);

if (autoRefreshEnabled && isDev) {
  // console.debug('[GatewayRegistry] Auto-refresh enabled (dev mode)');
  GatewayRegistry.getInstance().startAutoRefresh();
}
