import { z } from 'zod';

export const fullRepositorySchema = z.object({
  allow_auto_merge: z.boolean().optional(),
  allow_forking: z.boolean().optional(),
  allow_merge_commit: z.boolean().optional(),
  allow_rebase_merge: z.boolean().optional(),
  allow_squash_merge: z.boolean().optional(),
  allow_update_branch: z.boolean().optional(),
  anonymous_access_enabled: z.boolean().optional(),
  archive_url: z.string(),
  archived: z.boolean(),
  assignees_url: z.string(),
  blobs_url: z.string(),
  branches_url: z.string(),
  clone_url: z.string(),
  collaborators_url: z.string(),
  comments_url: z.string(),
  commits_url: z.string(),
  compare_url: z.string(),
  contents_url: z.string(),
  contributors_url: z.string(),
  created_at: z.string(),
  default_branch: z.string(),
  delete_branch_on_merge: z.boolean().optional(),
  deployments_url: z.string(),
  description: z.string().nullable(),
  disabled: z.boolean(),
  downloads_url: z.string(),
  events_url: z.string(),
  fork: z.boolean(),
  forks: z.number(),
  forks_count: z.number(),
  forks_url: z.string(),
  full_name: z.string(),
  git_commits_url: z.string(),
  git_refs_url: z.string(),
  git_tags_url: z.string(),
  git_url: z.string(),
  has_discussions: z.boolean(),
  has_downloads: z.boolean(),
  has_issues: z.boolean(),
  has_pages: z.boolean(),
  has_projects: z.boolean(),
  has_wiki: z.boolean(),
  homepage: z.string().nullable(),
  hooks_url: z.string(),
  html_url: z.string(),
  id: z.number(),
  is_template: z.boolean().optional(),
  issue_comment_url: z.string(),
  issue_events_url: z.string(),
  issues_url: z.string(),
  keys_url: z.string(),
  labels_url: z.string(),
  language: z.string().nullable(),
  languages_url: z.string(),
  master_branch: z.string().optional(),
  merge_commit_message: z
    .union([z.literal('PR_BODY'), z.literal('PR_TITLE'), z.literal('BLANK')])
    .optional(),
  merge_commit_title: z
    .union([z.literal('PR_TITLE'), z.literal('MERGE_MESSAGE')])
    .optional(),
  merges_url: z.string(),
  milestones_url: z.string(),
  mirror_url: z.string().nullable(),
  name: z.string(),
  network_count: z.number(),
  node_id: z.string(),
  notifications_url: z.string(),
  open_issues: z.number(),
  open_issues_count: z.number(),
  permissions: z
    .object({
      admin: z.boolean(),
      maintain: z.boolean().optional(),
      pull: z.boolean(),
      push: z.boolean(),
      triage: z.boolean().optional(),
    })
    .optional(),
  private: z.boolean(),
  pulls_url: z.string(),
  pushed_at: z.string(),
  releases_url: z.string(),
  size: z.number(),
  squash_merge_commit_message: z
    .union([
      z.literal('PR_BODY'),
      z.literal('COMMIT_MESSAGES'),
      z.literal('BLANK'),
    ])
    .optional(),
  squash_merge_commit_title: z
    .union([z.literal('PR_TITLE'), z.literal('COMMIT_OR_PR_TITLE')])
    .optional(),
  ssh_url: z.string(),
  stargazers_count: z.number(),
  stargazers_url: z.string(),
  statuses_url: z.string(),
  subscribers_count: z.number(),
  subscribers_url: z.string(),
  subscription_url: z.string(),
  svn_url: z.string(),
  tags_url: z.string(),
  teams_url: z.string(),
  temp_clone_token: z.string().optional().nullable(),
  topics: z.array(z.string()).optional(),
  trees_url: z.string(),
  updated_at: z.string(),
  url: z.string(),
  use_squash_pr_title_as_default: z.boolean().optional(),
  visibility: z.string().optional(),
  watchers: z.number(),
  watchers_count: z.number(),
  web_commit_signoff_required: z.boolean().optional(),
});

export const reposGetResponseSchema = fullRepositorySchema;

export const reposListForOrgResponseSchema = z.array(fullRepositorySchema);
