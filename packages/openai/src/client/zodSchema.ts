// Generated by ts-to-zod
import { z } from 'zod';

export const chatCompletionRequestMessageSchema = z.object({
  content: z.string(),
  name: z.string().optional(),
  role: z.union([z.literal('system'), z.literal('user'), z.literal('assistant')]),
});

export const roleSchema = z.union([z.literal('system'), z.literal('user'), z.literal('assistant')]);

export const chatCompletionResponseMessageSchema = z.object({
  content: z.string(),
  role: z.union([z.literal('system'), z.literal('user'), z.literal('assistant')]),
});

export const createAnswerRequestSchema = z.object({
  documents: z.array(z.string()).optional().nullable(),
  examples: z.array(z.tuple([z.string(), z.string()])),
  examples_context: z.string(),
  expand: z.array(z.unknown()).optional().nullable(),
  file: z.string().optional().nullable(),
  logit_bias: z.record(z.string()).optional(),
  logprobs: z.number().optional().nullable(),
  max_rerank: z.number().optional().nullable(),
  max_tokens: z.number().optional().nullable(),
  model: z.string(),
  n: z.number().optional().nullable(),
  question: z.string(),
  return_metadata: z.boolean().optional(),
  return_prompt: z.boolean().optional().nullable(),
  search_model: z.string().optional().nullable(),
  stop: z
    .union([z.string(), z.array(z.string())])
    .optional()
    .nullable(),
  temperature: z.number().optional().nullable(),
  user: z.string().optional(),
});

export const createAnswerResponseSchema = z.object({
  answers: z.array(z.string()).optional(),
  completion: z.string().optional(),
  model: z.string().optional(),
  object: z.string().optional(),
  search_model: z.string().optional(),
  selected_documents: z
    .array(
      z.object({
        document: z.number().optional(),
        text: z.string().optional(),
      }),
    )
    .optional(),
});

export const createChatCompletionRequestSchema = z.object({
  frequency_penalty: z.number().optional().nullable(),
  logit_bias: z.record(z.unknown()).optional().nullable(),
  max_tokens: z.number().optional(),
  messages: z.array(chatCompletionRequestMessageSchema),
  model: z.string(),
  n: z.number().optional().nullable(),
  presence_penalty: z.number().optional().nullable(),
  stop: z
    .union([z.string(), z.array(z.string())])
    .optional()
    .nullable(),
  stream: z.boolean().optional().nullable(),
  temperature: z.number().optional().nullable(),
  top_p: z.number().optional().nullable(),
  user: z.string().optional(),
});

export const createChatCompletionResponseSchema = z.object({
  choices: z.array(
    z.object({
      finish_reason: z.string().optional(),
      index: z.number().optional(),
      message: chatCompletionResponseMessageSchema.optional(),
    }),
  ),
  created: z.number(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  usage: z
    .object({
      completion_tokens: z.number(),
      prompt_tokens: z.number(),
      total_tokens: z.number(),
    })
    .optional(),
});

export const createClassificationRequestSchema = z.object({
  examples: z
    .array(z.tuple([z.string(), z.string()]))
    .optional()
    .nullable(),
  expand: z.boolean().optional(),
  file: z.string().optional().nullable(),
  labels: z.array(z.string()).optional().nullable(),
  logit_bias: z.record(z.string()).optional(),
  logprobs: z.number().optional().nullable(),
  max_examples: z.number().optional().nullable(),
  model: z.string(),
  query: z.string(),
  return_metadata: z.boolean().optional(),
  return_prompt: z.boolean().optional(),
  search_model: z.string().optional(),
  temperature: z.number().optional().nullable(),
  user: z.string().optional(),
});

export const createClassificationResponseSchema = z.object({
  completion: z.string().optional(),
  label: z.string().optional(),
  model: z.string().optional(),
  object: z.string().optional(),
  search_model: z.string().optional(),
  selected_examples: z
    .array(
      z.object({
        document: z.number().optional(),
        label: z.string().optional(),
        text: z.string().optional(),
      }),
    )
    .optional(),
});

export const createCompletionRequestSchema = z.object({
  best_of: z.number().optional().nullable(),
  echo: z.boolean().optional().nullable(),
  frequency_penalty: z.number().optional().nullable(),
  logit_bias: z.record(z.unknown()).optional().nullable(),
  logprobs: z.number().optional().nullable(),
  max_tokens: z.number().optional().nullable(),
  model: z.string(),
  n: z.number().optional().nullable(),
  presence_penalty: z.number().optional().nullable(),
  prompt: z
    .union([z.string(), z.array(z.string()), z.array(z.number()), z.array(z.array(z.number()))])
    .optional()
    .nullable(),
  stop: z
    .union([z.string(), z.array(z.string())])
    .optional()
    .nullable(),
  stream: z.boolean().optional().nullable(),
  suffix: z.string().optional().nullable(),
  temperature: z.number().optional().nullable(),
  top_p: z.number().optional().nullable(),
  user: z.string().optional(),
});

export const createCompletionResponseSchema = z.object({
  choices: z.array(
    z.object({
      finish_reason: z.string().optional(),
      index: z.number().optional(),
      logprobs: z
        .object({
          text_offset: z.array(z.number()).optional(),
          token_logprobs: z.array(z.number()).optional(),
          tokens: z.array(z.string()).optional(),
          top_logprobs: z.array(z.record(z.unknown())).optional(),
        })
        .optional()
        .nullable(),
      text: z.string().optional(),
    }),
  ),
  created: z.number(),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  usage: z
    .object({
      completion_tokens: z.number(),
      prompt_tokens: z.number(),
      total_tokens: z.number(),
    })
    .optional(),
});

export const createEditRequestSchema = z.object({
  input: z.string().optional().nullable(),
  instruction: z.string(),
  model: z.string(),
  n: z.number().optional().nullable(),
  temperature: z.number().optional().nullable(),
  top_p: z.number().optional().nullable(),
});

export const createEditResponseSchema = z.object({
  choices: z.array(
    z.object({
      finish_reason: z.string().optional(),
      index: z.number().optional(),
      logprobs: z
        .object({
          text_offset: z.array(z.number()).optional(),
          token_logprobs: z.array(z.number()).optional(),
          tokens: z.array(z.string()).optional(),
          top_logprobs: z.array(z.record(z.unknown())).optional(),
        })
        .optional()
        .nullable(),
      text: z.string().optional(),
    }),
  ),
  created: z.number(),
  object: z.string(),
  usage: z.object({
    completion_tokens: z.number(),
    prompt_tokens: z.number(),
    total_tokens: z.number(),
  }),
});

export const createEmbeddingRequestSchema = z.object({
  input: z.union([z.string(), z.array(z.string()), z.array(z.number()), z.array(z.array(z.number()))]),
  model: z.string(),
  user: z.string().optional(),
});

export const createEmbeddingResponseSchema = z.object({
  data: z.array(
    z.object({
      embedding: z.array(z.number()),
      index: z.number(),
      object: z.string(),
    }),
  ),
  model: z.string(),
  object: z.string(),
  usage: z.object({
    prompt_tokens: z.number(),
    total_tokens: z.number(),
  }),
});

export const createFineTuneRequestSchema = z.object({
  batch_size: z.number().optional().nullable(),
  classification_betas: z.array(z.number()).optional().nullable(),
  classification_n_classes: z.number().optional().nullable(),
  classification_positive_class: z.string().optional().nullable(),
  compute_classification_metrics: z.boolean().optional().nullable(),
  learning_rate_multiplier: z.number().optional().nullable(),
  model: z.string().optional().nullable(),
  n_epochs: z.number().optional().nullable(),
  prompt_loss_weight: z.number().optional().nullable(),
  suffix: z.string().optional().nullable(),
  training_file: z.string(),
  validation_file: z.string().optional().nullable(),
});

export const createImageRequestSchema = z.object({
  n: z.number().optional().nullable(),
  prompt: z.string(),
  response_format: z
    .union([z.literal('url'), z.literal('b64_json')])
    .optional()
    .nullable(),
  size: z
    .union([z.literal('256x256'), z.literal('512x512'), z.literal('1024x1024')])
    .optional()
    .nullable(),
  user: z.string().optional(),
});

export const responseFormatSchema = z.union([z.literal('url'), z.literal('b64_json')]);

export const sizeSchema = z.union([z.literal('256x256'), z.literal('512x512'), z.literal('1024x1024')]);

export const createModerationRequestSchema = z.object({
  input: z.union([z.string(), z.array(z.string())]),
  model: z.string().optional(),
});

export const createModerationResponseSchema = z.object({
  id: z.string(),
  model: z.string(),
  results: z.array(
    z.object({
      categories: z.object({
        hate: z.boolean(),
        'hate/threatening': z.boolean(),
        'self-harm': z.boolean(),
        sexual: z.boolean(),
        'sexual/minors': z.boolean(),
        violence: z.boolean(),
        'violence/graphic': z.boolean(),
      }),
      category_scores: z.object({
        hate: z.number(),
        'hate/threatening': z.number(),
        'self-harm': z.number(),
        sexual: z.number(),
        'sexual/minors': z.number(),
        violence: z.number(),
        'violence/graphic': z.number(),
      }),
      flagged: z.boolean(),
    }),
  ),
});

export const createSearchRequestSchema = z.object({
  documents: z.array(z.string()).optional().nullable(),
  file: z.string().optional().nullable(),
  max_rerank: z.number().optional().nullable(),
  query: z.string(),
  return_metadata: z.boolean().optional().nullable(),
  user: z.string().optional(),
});

export const createSearchResponseSchema = z.object({
  data: z
    .array(
      z.object({
        document: z.number().optional(),
        object: z.string().optional(),
        score: z.number().optional(),
      }),
    )
    .optional(),
  model: z.string().optional(),
  object: z.string().optional(),
});

export const createTranscriptionResponseSchema = z.object({
  text: z.string(),
});

export const createTranslationResponseSchema = z.object({
  text: z.string(),
});

export const deleteFileResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: z.string(),
});

export const deleteModelResponseSchema = z.object({
  deleted: z.boolean(),
  id: z.string(),
  object: z.string(),
});

export const engineSchema = z.object({
  created: z.number().nullable(),
  id: z.string(),
  object: z.string(),
  ready: z.boolean(),
});

export const fineTuneEventSchema = z.object({
  created_at: z.number(),
  level: z.string(),
  message: z.string(),
  object: z.string(),
});

export const openAIFileSchema = z.object({
  bytes: z.number(),
  created_at: z.number(),
  filename: z.string(),
  id: z.string(),
  object: z.string(),
  purpose: z.string(),
  status: z.string().optional(),
  status_details: z.record(z.unknown()).optional().nullable(),
});

export const imagesResponseSchema = z.object({
  created: z.number(),
  data: z.array(
    z.object({
      b64_json: z.string().optional(),
      url: z.string().optional(),
    }),
  ),
});

export const listEnginesResponseSchema = z.object({
  data: z.array(engineSchema),
  object: z.string(),
});

export const listFilesResponseSchema = z.object({
  data: z.array(openAIFileSchema),
  object: z.string(),
});

export const listFineTuneEventsResponseSchema = z.object({
  data: z.array(fineTuneEventSchema),
  object: z.string(),
});

export const fineTuneSchema = z.object({
  created_at: z.number(),
  events: z.array(fineTuneEventSchema).optional(),
  fine_tuned_model: z.string().nullable(),
  hyperparams: z.record(z.unknown()),
  id: z.string(),
  model: z.string(),
  object: z.string(),
  organization_id: z.string(),
  result_files: z.array(openAIFileSchema),
  status: z.string(),
  training_files: z.array(openAIFileSchema),
  updated_at: z.number(),
  validation_files: z.array(openAIFileSchema),
});

export const modelSchema = z.object({
  created: z.number(),
  id: z.string(),
  object: z.string(),
  owned_by: z.string(),
});

export const createAnswerDataSchema = z.object({
  body: createAnswerRequestSchema,
});

export const createAnswerResponse2Schema = createAnswerResponseSchema;

export const createAnswerErrorSchema = z.unknown();

export const createTranscriptionResponse2Schema = createTranscriptionResponseSchema;

export const createTranscriptionErrorSchema = z.unknown();

export const createTranslationResponse2Schema = createTranslationResponseSchema;

export const createTranslationErrorSchema = z.unknown();

export const createChatCompletionDataSchema = z.object({
  body: createChatCompletionRequestSchema,
});

export const createChatCompletionResponse2Schema = createChatCompletionResponseSchema;

export const createChatCompletionErrorSchema = z.unknown();

export const createClassificationDataSchema = z.object({
  body: createClassificationRequestSchema,
});

export const createClassificationResponse2Schema = createClassificationResponseSchema;

export const createClassificationErrorSchema = z.unknown();

export const createCompletionDataSchema = z.object({
  body: createCompletionRequestSchema,
});

export const createCompletionResponse2Schema = createCompletionResponseSchema;

export const createCompletionErrorSchema = z.unknown();

export const createEditDataSchema = z.object({
  body: createEditRequestSchema,
});

export const createEditResponse2Schema = createEditResponseSchema;

export const createEditErrorSchema = z.unknown();

export const createEmbeddingDataSchema = z.object({
  body: createEmbeddingRequestSchema,
});

export const createEmbeddingResponse2Schema = createEmbeddingResponseSchema;

export const createEmbeddingErrorSchema = z.unknown();

export const listEnginesResponse2Schema = listEnginesResponseSchema;

export const listEnginesErrorSchema = z.unknown();

export const retrieveEngineDataSchema = z.object({
  path: z.object({
    engine_id: z.string(),
  }),
});

export const retrieveEngineResponseSchema = engineSchema;

export const retrieveEngineErrorSchema = z.unknown();

export const createSearchDataSchema = z.object({
  body: createSearchRequestSchema,
  path: z.object({
    engine_id: z.string(),
  }),
});

export const createSearchResponse2Schema = createSearchResponseSchema;

export const createSearchErrorSchema = z.unknown();

export const listFilesResponse2Schema = listFilesResponseSchema;

export const listFilesErrorSchema = z.unknown();

export const createFileResponseSchema = openAIFileSchema;

export const createFileErrorSchema = z.unknown();

export const deleteFileDataSchema = z.object({
  path: z.object({
    file_id: z.string(),
  }),
});

export const deleteFileResponse2Schema = deleteFileResponseSchema;

export const deleteFileErrorSchema = z.unknown();

export const retrieveFileDataSchema = z.object({
  path: z.object({
    file_id: z.string(),
  }),
});

export const retrieveFileResponseSchema = openAIFileSchema;

export const retrieveFileErrorSchema = z.unknown();

export const downloadFileDataSchema = z.object({
  path: z.object({
    file_id: z.string(),
  }),
});

export const downloadFileResponseSchema = z.string();

export const downloadFileErrorSchema = z.unknown();

export const listFineTunesResponseSchema = z.object({
  data: z.array(fineTuneSchema),
  object: z.string(),
});

export const listFineTunesErrorSchema = z.unknown();

export const createFineTuneDataSchema = z.object({
  body: createFineTuneRequestSchema,
});

export const createFineTuneResponseSchema = fineTuneSchema;

export const createFineTuneErrorSchema = z.unknown();

export const retrieveFineTuneDataSchema = z.object({
  path: z.object({
    fine_tune_id: z.string(),
  }),
});

export const retrieveFineTuneResponseSchema = fineTuneSchema;

export const retrieveFineTuneErrorSchema = z.unknown();

export const cancelFineTuneDataSchema = z.object({
  path: z.object({
    fine_tune_id: z.string(),
  }),
});

export const cancelFineTuneResponseSchema = fineTuneSchema;

export const cancelFineTuneErrorSchema = z.unknown();

export const listFineTuneEventsDataSchema = z.object({
  path: z.object({
    fine_tune_id: z.string(),
  }),
  query: z
    .object({
      stream: z.boolean().optional(),
    })
    .optional(),
});

export const listFineTuneEventsResponse2Schema = listFineTuneEventsResponseSchema;

export const listFineTuneEventsErrorSchema = z.unknown();

export const createImageEditResponseSchema = imagesResponseSchema;

export const createImageEditErrorSchema = z.unknown();

export const createImageDataSchema = z.object({
  body: createImageRequestSchema,
});

export const createImageResponseSchema = imagesResponseSchema;

export const createImageErrorSchema = z.unknown();

export const createImageVariationResponseSchema = imagesResponseSchema;

export const createImageVariationErrorSchema = z.unknown();

export const listModelsResponseSchema = z.object({
  data: z.array(modelSchema),
  object: z.string(),
});

export const listModelsErrorSchema = z.unknown();

export const deleteModelDataSchema = z.object({
  path: z.object({
    model: z.string(),
  }),
});

export const deleteModelResponse2Schema = deleteModelResponseSchema;

export const deleteModelErrorSchema = z.unknown();

export const retrieveModelDataSchema = z.object({
  path: z.object({
    model: z.string(),
  }),
});

export const retrieveModelResponseSchema = modelSchema;

export const retrieveModelErrorSchema = z.unknown();

export const createModerationDataSchema = z.object({
  body: createModerationRequestSchema,
});

export const createModerationResponse2Schema = createModerationResponseSchema;

export const createModerationErrorSchema = z.unknown();

export const listFineTunesResponse2Schema = listFineTunesResponseSchema;

export const listModelsResponse2Schema = listModelsResponseSchema;
