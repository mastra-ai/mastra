// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { GetApiData, GetApiAgentsData, GetApiAgentsByAgentIdData, PostApiAgentsByAgentIdGenerateData, PostApiAgentsByAgentIdStreamData, GetApiMemoryStatusData, GetApiMemoryThreadsData, PostApiMemoryThreadsData, DeleteApiMemoryThreadsByThreadIdData, GetApiMemoryThreadsByThreadIdData, PatchApiMemoryThreadsByThreadIdData, GetApiMemoryThreadsByThreadIdMessagesData, GetApiMemoryThreadsByThreadIdContextWindowData, PostApiMemorySaveMessagesData, GetApiWorkflowsData, GetApiWorkflowsByWorkflowIdData, PostApiWorkflowsByWorkflowIdExecuteData, PostApiSyncsBySyncIdExecuteData, GetApiLogsData, GetApiLogsByRunIdData, GetApiToolsData, GetApiToolsByToolIdData, GetApiToolsByToolIdResultByResultIdData, PostApiToolsByToolIdValidateData, PostApiToolsByToolIdExecuteData, PostApiToolsByToolIdAgentExecuteData } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get API status
 */
export const getApi = <ThrowOnError extends boolean = false>(options?: Options<GetApiData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api',
        ...options
    });
};

/**
 * Get all available agents
 */
export const getApiAgents = <ThrowOnError extends boolean = false>(options?: Options<GetApiAgentsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/agents',
        ...options
    });
};

/**
 * Get agent by ID
 */
export const getApiAgentsByAgentId = <ThrowOnError extends boolean = false>(options: Options<GetApiAgentsByAgentIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/agents/{agentId}',
        ...options
    });
};

/**
 * Generate a response from an agent
 */
export const postApiAgentsByAgentIdGenerate = <ThrowOnError extends boolean = false>(options: Options<PostApiAgentsByAgentIdGenerateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/agents/{agentId}/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stream a response from an agent
 */
export const postApiAgentsByAgentIdStream = <ThrowOnError extends boolean = false>(options: Options<PostApiAgentsByAgentIdStreamData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/agents/{agentId}/stream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get memory status
 */
export const getApiMemoryStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiMemoryStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/memory/status',
        ...options
    });
};

/**
 * Get all threads
 */
export const getApiMemoryThreads = <ThrowOnError extends boolean = false>(options?: Options<GetApiMemoryThreadsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads',
        ...options
    });
};

/**
 * Create a new thread
 */
export const postApiMemoryThreads = <ThrowOnError extends boolean = false>(options?: Options<PostApiMemoryThreadsData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads',
        ...options
    });
};

/**
 * Delete a thread
 */
export const deleteApiMemoryThreadsByThreadId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiMemoryThreadsByThreadIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads/{threadId}',
        ...options
    });
};

/**
 * Get thread by ID
 */
export const getApiMemoryThreadsByThreadId = <ThrowOnError extends boolean = false>(options: Options<GetApiMemoryThreadsByThreadIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads/{threadId}',
        ...options
    });
};

/**
 * Update a thread
 */
export const patchApiMemoryThreadsByThreadId = <ThrowOnError extends boolean = false>(options: Options<PatchApiMemoryThreadsByThreadIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads/{threadId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get messages for a thread
 */
export const getApiMemoryThreadsByThreadIdMessages = <ThrowOnError extends boolean = false>(options: Options<GetApiMemoryThreadsByThreadIdMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads/{threadId}/messages',
        ...options
    });
};

/**
 * Get context window for a thread
 */
export const getApiMemoryThreadsByThreadIdContextWindow = <ThrowOnError extends boolean = false>(options: Options<GetApiMemoryThreadsByThreadIdContextWindowData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/memory/threads/{threadId}/context-window',
        ...options
    });
};

/**
 * Save messages
 */
export const postApiMemorySaveMessages = <ThrowOnError extends boolean = false>(options: Options<PostApiMemorySaveMessagesData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/memory/save-messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all workflows
 */
export const getApiWorkflows = <ThrowOnError extends boolean = false>(options?: Options<GetApiWorkflowsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/workflows',
        ...options
    });
};

/**
 * Get workflow by ID
 */
export const getApiWorkflowsByWorkflowId = <ThrowOnError extends boolean = false>(options: Options<GetApiWorkflowsByWorkflowIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/workflows/{workflowId}',
        ...options
    });
};

/**
 * Execute a workflow
 */
export const postApiWorkflowsByWorkflowIdExecute = <ThrowOnError extends boolean = false>(options: Options<PostApiWorkflowsByWorkflowIdExecuteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/workflows/{workflowId}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute a sync
 */
export const postApiSyncsBySyncIdExecute = <ThrowOnError extends boolean = false>(options: Options<PostApiSyncsBySyncIdExecuteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/syncs/{syncId}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all logs
 */
export const getApiLogs = <ThrowOnError extends boolean = false>(options?: Options<GetApiLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/logs',
        ...options
    });
};

/**
 * Get logs by run ID
 */
export const getApiLogsByRunId = <ThrowOnError extends boolean = false>(options: Options<GetApiLogsByRunIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/logs/{runId}',
        ...options
    });
};

/**
 * Get all tools
 */
export const getApiTools = <ThrowOnError extends boolean = false>(options?: Options<GetApiToolsData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/tools',
        ...options
    });
};

/**
 * Get tool by ID
 */
export const getApiToolsByToolId = <ThrowOnError extends boolean = false>(options: Options<GetApiToolsByToolIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/tools/{toolId}',
        ...options
    });
};

/**
 * Get tool execution result
 */
export const getApiToolsByToolIdResultByResultId = <ThrowOnError extends boolean = false>(options: Options<GetApiToolsByToolIdResultByResultIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        url: '/api/tools/{toolId}/result/{resultId}',
        ...options
    });
};

/**
 * Validate tool call arguments
 */
export const postApiToolsByToolIdValidate = <ThrowOnError extends boolean = false>(options: Options<PostApiToolsByToolIdValidateData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/tools/{toolId}/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute a tool
 */
export const postApiToolsByToolIdExecute = <ThrowOnError extends boolean = false>(options: Options<PostApiToolsByToolIdExecuteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        url: '/api/tools/{toolId}/execute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute a tool through an agent
 */
export const postApiToolsByToolIdAgentExecute = <ThrowOnError extends boolean = false>(options: Options<PostApiToolsByToolIdAgentExecuteData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({


        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};