name: Publish Alpha

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:

  push:
    branches:
      - main

jobs:
  release:
    if: contains(github.head_ref || github.ref_name, 'changeset-release') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.7.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Prepare CLI package for publishing
        run: cd packages/cli && rm -rf node_modules && pnpm install --shamefully-hoist --ignore-scripts && cd ../..

      - name: Setup npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Create and publish alpha release
        id: publish
        run: |
          # Enable error tracing
          set -x

          # Try to publish and capture output
          if OUTPUT=$(pnpm changeset publish 2>&1); then
            # Show the output immediately
            echo "$OUTPUT"
            echo "Successfully published packages"
          else
            # Show the output immediately
            echo "$OUTPUT"
            echo "Failed to publish packages"
            
            # Check if it's because no changes were found
            if echo "$OUTPUT" | grep -q "No changes to publish"; then
              echo "No changes to publish - this is OK"
              exit 0
            else
              # Real error occurred
              echo "Error occurred during publish"
              exit 1
            fi
          fi

          # Store output for next steps
          echo "OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Force latest tag for all published packages
        run: |
          echo "${{ steps.publish.outputs.OUTPUT }}" | grep -E "New tag:" | while read -r line ; do
            if [[ $line =~ New[[:space:]]+tag:[[:space:]]{2}([^@]+)@([^[:space:]]+) ]]; then
              PKG_NAME="${BASH_REMATCH[1]}"
              PKG_VERSION="${BASH_REMATCH[2]}"
              echo "Setting latest tag for $PKG_NAME@$PKG_VERSION"
              npm dist-tag add "${PKG_NAME}@${PKG_VERSION}" latest
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
