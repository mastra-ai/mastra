// This file is auto-generated by @hey-api/openapi-ts
import { createClient, createConfig, type Options } from '@hey-api/client-fetch';

import type {
  ScrapeData,
  ScrapeError,
  ScrapeResponse2,
  CrawlUrlsData,
  CrawlUrlsError,
  CrawlUrlsResponse,
  SearchGoogleData,
  SearchGoogleError,
  SearchGoogleResponse,
  GetCrawlStatusData,
  GetCrawlStatusError,
  GetCrawlStatusResponse,
  CancelCrawlJobData,
  CancelCrawlJobError,
  CancelCrawlJobResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Scrape a single URL
 */
export const scrape = <ThrowOnError extends boolean = false>(options: Options<ScrapeData, ThrowOnError>) => {
  return (options?.client ?? client).post<ScrapeResponse2, ScrapeError, ThrowOnError>({
    ...options,
    url: '/scrape',
  });
};

/**
 * Crawl multiple URLs based on options
 */
export const crawlUrls = <ThrowOnError extends boolean = false>(options: Options<CrawlUrlsData, ThrowOnError>) => {
  return (options?.client ?? client).post<CrawlUrlsResponse, CrawlUrlsError, ThrowOnError>({
    ...options,
    url: '/crawl',
  });
};

/**
 * Search for a keyword in Google, returns top page results with markdown content for each page
 */
export const searchGoogle = <ThrowOnError extends boolean = false>(
  options: Options<SearchGoogleData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SearchGoogleResponse, SearchGoogleError, ThrowOnError>({
    ...options,
    url: '/search',
  });
};

/**
 * Get the status of a crawl job
 */
export const getCrawlStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetCrawlStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetCrawlStatusResponse, GetCrawlStatusError, ThrowOnError>({
    ...options,
    url: '/crawl/status/{jobId}',
  });
};

/**
 * Cancel a crawl job
 */
export const cancelCrawlJob = <ThrowOnError extends boolean = false>(
  options: Options<CancelCrawlJobData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<CancelCrawlJobResponse, CancelCrawlJobError, ThrowOnError>({
    ...options,
    url: '/crawl/cancel/{jobId}',
  });
};
